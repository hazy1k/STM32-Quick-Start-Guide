
22.ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800ba78  0800ba78  0000ca78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be4c  0800be4c  0000ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be54  0800be54  0000ce54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be58  0800be58  0000ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800be5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000027c  240001d8  0800c034  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000454  0800c034  0000d454  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001767e  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003403  00000000  00000000  00024884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  00027c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cdb  00000000  00000000  00028d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b04a  00000000  00000000  00029a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d2ea  00000000  00000000  00064a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001712ca  00000000  00000000  00081d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f3051  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005394  00000000  00000000  001f3094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001f8428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba60 	.word	0x0800ba60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800ba60 	.word	0x0800ba60

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f003 f9fa 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f003 f83d 	bl	800378c <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	480a      	ldr	r0, [pc, #40]	@ (8000790 <MX_KEY_GPIO_Init+0x6c>)
 8000768:	f003 f810 	bl	800378c <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800076c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_KEY_GPIO_Init+0x6c>)
 8000780:	f003 f804 	bl	800378c <HAL_GPIO_Init>
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400
 8000790:	58020000 	.word	0x58020000

08000794 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4a22      	ldr	r2, [pc, #136]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2160      	movs	r1, #96	@ 0x60
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_LED_GPIO_Init+0xac>)
 80007ec:	f003 f97e 	bl	8003aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_LED_GPIO_Init+0xb0>)
 80007f6:	f003 f979 	bl	8003aec <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007fa:	2360      	movs	r3, #96	@ 0x60
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <MX_LED_GPIO_Init+0xac>)
 8000812:	f002 ffbb 	bl	800378c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000816:	2310      	movs	r3, #16
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_LED_GPIO_Init+0xb0>)
 800082e:	f002 ffad 	bl	800378c <HAL_GPIO_Init>
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400
 8000840:	58021000 	.word	0x58021000
 8000844:	58020400 	.word	0x58020400

08000848 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800084c:	f7ff ffa2 	bl	8000794 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000850:	f7ff ff34 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000854:	f7ff ff66 	bl	8000724 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000858:	f000 fbc8 	bl	8000fec <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_ADC1_Init>:
 *              设置最大采样周期: 810.5, 则转换时间 = 819个ADC周期 = 25.6us
 * @param       无
 * @retval      无
 */
void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  hadc1.Instance = ADC1;                                          // 选择ADC1
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <MX_ADC1_Init+0x90>)
 8000866:	4a23      	ldr	r2, [pc, #140]	@ (80008f4 <MX_ADC1_Init+0x94>)
 8000868:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;               // 输入时钟2分频
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <MX_ADC1_Init+0x90>)
 800086c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;                     // 16位模式
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_ADC1_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;                     // 非扫描模式
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <MX_ADC1_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;                  // 关闭EOC中断
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_ADC1_Init+0x90>)
 8000880:	2204      	movs	r2, #4
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;                          // 自动低功耗关闭
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_ADC1_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;                        // 关闭连续转换模式
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_ADC1_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;                                 // 通道数
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_ADC1_Init+0x90>)
 8000892:	2201      	movs	r2, #1
 8000894:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;                     // 禁止常规转换组不连续采样模式
 8000896:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <MX_ADC1_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 0;                			  // 不连续采样模式的通道数
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_ADC1_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;               // 软件触发
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;// 外部触发
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;    // 常规通道的数据仅仅保存在DR寄存器里面
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;                    // 有新的数据后直接覆盖掉旧数据
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;                // 设置ADC转换结果的左移位数
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;                          // 关闭过采样
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ce:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008d0:	f000 ff86 	bl	80017e0 <HAL_ADC_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80008da:	f000 f99d 	bl	8000c18 <Error_Handler>
  }
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED); // ADC校准
 80008de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80008e2:	2100      	movs	r1, #0
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <MX_ADC1_Init+0x90>)
 80008e6:	f002 f801 	bl	80028ec <HAL_ADCEx_Calibration_Start>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	240001f4 	.word	0x240001f4
 80008f4:	40022000 	.word	0x40022000

080008f8 <MX_ADC1_result>:
 * @brief       获得ADC转换后的结果
 * @param       ch: 通道值 0~19，取值范围为：ADC_CHANNEL_0~ADC_CHANNEL_19
 * @retval      返回值:转换结果
 */
uint32_t MX_ADC1_result(uint32_t ch)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]
  /** Configure Regular Channel
  */
  sConfig.Channel = ch; // 通道
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1; // 序列
 8000918:	2306      	movs	r3, #6
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5; // 采样时间
 800091c:	2307      	movs	r3, #7
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED; // 单边采集
 8000920:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000924:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE; // 不使用偏移量的通道
 8000926:	2304      	movs	r3, #4
 8000928:	61fb      	str	r3, [r7, #28]
  sConfig.Offset = 0; // 偏移量为0
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSignedSaturation = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	480b      	ldr	r0, [pc, #44]	@ (8000968 <MX_ADC1_result+0x70>)
 800093c:	f001 fabe 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_result+0x52>
  {
    Error_Handler();
 8000946:	f000 f967 	bl	8000c18 <Error_Handler>
  }
  HAL_ADC_Start(&hadc1);
 800094a:	4807      	ldr	r0, [pc, #28]	@ (8000968 <MX_ADC1_result+0x70>)
 800094c:	f001 f8ea 	bl	8001b24 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10); // 轮询准换
 8000950:	210a      	movs	r1, #10
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_ADC1_result+0x70>)
 8000954:	f001 f9b0 	bl	8001cb8 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(&hadc1);
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <MX_ADC1_result+0x70>)
 800095a:	f001 faa1 	bl	8001ea0 <HAL_ADC_GetValue>
 800095e:	4603      	mov	r3, r0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	240001f4 	.word	0x240001f4

0800096c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if(adcHandle->Instance == ADC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <HAL_ADC_MspInit+0x80>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d131      	bne.n	80009e2 <HAL_ADC_MspInit+0x76>
  {
	GPIO_InitTypeDef GPIO_InitStruct;
    __HAL_RCC_ADC12_CLK_ENABLE();
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 8000980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000984:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 8000986:	f043 0320 	orr.w	r3, r3, #32
 800098a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 8000990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_CLKP);
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80009c2:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <HAL_ADC_MspInit+0x84>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	6593      	str	r3, [r2, #88]	@ 0x58
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ca:	2320      	movs	r3, #32
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_ADC_MspInit+0x88>)
 80009de:	f002 fed5 	bl	800378c <HAL_GPIO_Init>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58020000 	.word	0x58020000

080009f8 <adc_get_result_average>:
 * @param       ch      : 通道号, 0~19
 * @param       times   : 获取次数
 * @retval      通道ch的times次转换结果平均值
 */
uint32_t adc_get_result_average(uint32_t ch, uint8_t times)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
    uint32_t temp_val = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
    uint8_t t;

    for (t = 0; t < times; t++) /* 获取times次数据 */
 8000a08:	2300      	movs	r3, #0
 8000a0a:	72fb      	strb	r3, [r7, #11]
 8000a0c:	e00c      	b.n	8000a28 <adc_get_result_average+0x30>
    {
        temp_val += MX_ADC1_result(ch);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff72 	bl	80008f8 <MX_ADC1_result>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
        HAL_Delay(5);
 8000a1c:	2005      	movs	r0, #5
 8000a1e:	f000 fc73 	bl	8001308 <HAL_Delay>
    for (t = 0; t < times; t++) /* 获取times次数据 */
 8000a22:	7afb      	ldrb	r3, [r7, #11]
 8000a24:	3301      	adds	r3, #1
 8000a26:	72fb      	strb	r3, [r7, #11]
 8000a28:	7afa      	ldrb	r2, [r7, #11]
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d3ee      	bcc.n	8000a0e <adc_get_result_average+0x16>
    }
    return temp_val / times;    /* 返回平均值 */
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  //float temp;
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a46:	f000 f8bb 	bl	8000bc0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4a:	f000 fbcb 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4e:	f000 f83b 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  bsp_init();
 8000a52:	f7ff fef9 	bl	8000848 <bsp_init>
  MX_ADC1_Init();
 8000a56:	f7ff ff03 	bl	8000860 <MX_ADC1_Init>
  printf("ADC Test\r\n");
 8000a5a:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <main+0x70>)
 8000a5c:	f009 f900 	bl	8009c60 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adc_value = adc_get_result_average(ADC_CHANNEL_19, 10);
 8000a60:	210a      	movs	r1, #10
 8000a62:	4814      	ldr	r0, [pc, #80]	@ (8000ab4 <main+0x74>)
 8000a64:	f7ff ffc8 	bl	80009f8 <adc_get_result_average>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	80fb      	strh	r3, [r7, #6]
	  printf("adc_value: %d\r\n", adc_value);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <main+0x78>)
 8000a72:	f009 f88d 	bl	8009b90 <iprintf>
	  // 电压转换：直接计算电压值（伏特）
	  float voltage = (float)adc_value * (3.3f / 65536.0f);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a80:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000abc <main+0x7c>
 8000a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a88:	edc7 7a00 	vstr	s15, [r7]
	  printf("v: %.3f V\r\n", voltage); // 打印3位小数的电压值
 8000a8c:	edd7 7a00 	vldr	s15, [r7]
 8000a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a94:	ec53 2b17 	vmov	r2, r3, d7
 8000a98:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <main+0x80>)
 8000a9a:	f009 f879 	bl	8009b90 <iprintf>
	  HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000a9e:	2140      	movs	r1, #64	@ 0x40
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <main+0x84>)
 8000aa2:	f003 f83c 	bl	8003b1e <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000aa6:	20c8      	movs	r0, #200	@ 0xc8
 8000aa8:	f000 fc2e 	bl	8001308 <HAL_Delay>
  {
 8000aac:	bf00      	nop
 8000aae:	e7d7      	b.n	8000a60 <main+0x20>
 8000ab0:	0800ba78 	.word	0x0800ba78
 8000ab4:	4fb80000 	.word	0x4fb80000
 8000ab8:	0800ba84 	.word	0x0800ba84
 8000abc:	38533333 	.word	0x38533333
 8000ac0:	0800ba94 	.word	0x0800ba94
 8000ac4:	58021000 	.word	0x58021000

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09c      	sub	sp, #112	@ 0x70
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	224c      	movs	r2, #76	@ 0x4c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f009 f9a2 	bl	8009e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f009 f99c 	bl	8009e20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f003 f857 	bl	8003b9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <SystemClock_Config+0xf0>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a30      	ldr	r2, [pc, #192]	@ (8000bb8 <SystemClock_Config+0xf0>)
 8000af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <SystemClock_Config+0xf0>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <SystemClock_Config+0xf4>)
 8000b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bbc <SystemClock_Config+0xf4>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <SystemClock_Config+0xf4>)
 8000b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b20:	bf00      	nop
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <SystemClock_Config+0xf0>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b2e:	d1f8      	bne.n	8000b22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b30:	2309      	movs	r3, #9
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000b4a:	23f0      	movs	r3, #240	@ 0xf0
 8000b4c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 f850 	bl	8003c10 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b76:	f000 f84f 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	233f      	movs	r3, #63	@ 0x3f
 8000b7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b86:	2308      	movs	r3, #8
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b8a:	2340      	movs	r3, #64	@ 0x40
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b8e:	2340      	movs	r3, #64	@ 0x40
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b98:	2340      	movs	r3, #64	@ 0x40
 8000b9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fc8f 	bl	80044c4 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bac:	f000 f834 	bl	8000c18 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3770      	adds	r7, #112	@ 0x70
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024800 	.word	0x58024800
 8000bbc:	58000400 	.word	0x58000400

08000bc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bd2:	f001 ffff 	bl	8002bd4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000be2:	231f      	movs	r3, #31
 8000be4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000be6:	2387      	movs	r3, #135	@ 0x87
 8000be8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 f81d 	bl	8002c44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f001 fffa 	bl	8002c04 <HAL_MPU_Enable>

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c30:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_MspInit+0x30>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	58024400 	.word	0x58024400

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 fb0b 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <WWDG_IRQHandler+0x10>)
 8000cbe:	f008 fa45 	bl	800914c <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	240002f0 	.word	0x240002f0

08000ccc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f002 ff3e 	bl	8003b52 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <USART1_IRQHandler+0x10>)
 8000ce2:	f006 fd57 	bl	8007794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400025c 	.word	0x2400025c

08000cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return 1;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_kill>:

int _kill(int pid, int sig)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d0a:	f009 f8db 	bl	8009ec4 <__errno>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2216      	movs	r2, #22
 8000d12:	601a      	str	r2, [r3, #0]
  return -1;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_exit>:

void _exit (int status)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ffe7 	bl	8000d00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d32:	bf00      	nop
 8000d34:	e7fd      	b.n	8000d32 <_exit+0x12>

08000d36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e00a      	b.n	8000d5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d48:	f3af 8000 	nop.w
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	60ba      	str	r2, [r7, #8]
 8000d54:	b2ca      	uxtb	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dbf0      	blt.n	8000d48 <_read+0x12>
  }

  return len;
 8000d66:	687b      	ldr	r3, [r7, #4]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e009      	b.n	8000d96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	60ba      	str	r2, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f9ec 	bl	8001168 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dbf1      	blt.n	8000d82 <_write+0x12>
  }
  return len;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_close>:

int _close(int file)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_isatty>:

int _isatty(int file)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f009 f840 	bl	8009ec4 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24080000 	.word	0x24080000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	24000258 	.word	0x24000258
 8000e78:	24000458 	.word	0x24000458

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <SystemInit+0x114>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a42      	ldr	r2, [pc, #264]	@ (8000f90 <SystemInit+0x114>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e90:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <SystemInit+0x118>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d807      	bhi.n	8000eac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f94 <SystemInit+0x118>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8000f94 <SystemInit+0x118>)
 8000ea6:	f043 0307 	orr.w	r3, r3, #7
 8000eaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eac:	4b3a      	ldr	r3, [pc, #232]	@ (8000f98 <SystemInit+0x11c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a39      	ldr	r2, [pc, #228]	@ (8000f98 <SystemInit+0x11c>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <SystemInit+0x11c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <SystemInit+0x11c>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4935      	ldr	r1, [pc, #212]	@ (8000f98 <SystemInit+0x11c>)
 8000ec4:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <SystemInit+0x120>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eca:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <SystemInit+0x118>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <SystemInit+0x118>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 030f 	bic.w	r3, r3, #15
 8000ede:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <SystemInit+0x118>)
 8000ee0:	f043 0307 	orr.w	r3, r3, #7
 8000ee4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <SystemInit+0x11c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <SystemInit+0x11c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <SystemInit+0x11c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <SystemInit+0x11c>)
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <SystemInit+0x124>)
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <SystemInit+0x11c>)
 8000f00:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <SystemInit+0x128>)
 8000f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <SystemInit+0x11c>)
 8000f06:	4a28      	ldr	r2, [pc, #160]	@ (8000fa8 <SystemInit+0x12c>)
 8000f08:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <SystemInit+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f10:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <SystemInit+0x11c>)
 8000f12:	4a25      	ldr	r2, [pc, #148]	@ (8000fa8 <SystemInit+0x12c>)
 8000f14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <SystemInit+0x11c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <SystemInit+0x11c>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <SystemInit+0x12c>)
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <SystemInit+0x11c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <SystemInit+0x11c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <SystemInit+0x11c>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <SystemInit+0x11c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <SystemInit+0x130>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <SystemInit+0x134>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f46:	d202      	bcs.n	8000f4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <SystemInit+0x138>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <SystemInit+0x11c>)
 8000f50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d113      	bne.n	8000f84 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <SystemInit+0x11c>)
 8000f5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f62:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <SystemInit+0x11c>)
 8000f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <SystemInit+0x13c>)
 8000f6e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f72:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <SystemInit+0x11c>)
 8000f76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f7a:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <SystemInit+0x11c>)
 8000f7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	52002000 	.word	0x52002000
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa0:	02020200 	.word	0x02020200
 8000fa4:	01ff0000 	.word	0x01ff0000
 8000fa8:	01010280 	.word	0x01010280
 8000fac:	5c001000 	.word	0x5c001000
 8000fb0:	ffff0000 	.word	0xffff0000
 8000fb4:	51008108 	.word	0x51008108
 8000fb8:	52004000 	.word	0x52004000

08000fbc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <ExitRun0Mode+0x2c>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <ExitRun0Mode+0x2c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000fcc:	bf00      	nop
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <ExitRun0Mode+0x2c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	58024800 	.word	0x58024800

08000fec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8000ff2:	4a23      	ldr	r2, [pc, #140]	@ (8001080 <MX_USART1_UART_Init+0x94>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <MX_USART1_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_USART1_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_USART1_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001034:	4811      	ldr	r0, [pc, #68]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001036:	f006 facf 	bl	80075d8 <HAL_UART_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001040:	f7ff fdea 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	480d      	ldr	r0, [pc, #52]	@ (800107c <MX_USART1_UART_Init+0x90>)
 8001048:	f007 ffb6 	bl	8008fb8 <HAL_UARTEx_SetTxFifoThreshold>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001052:	f7ff fde1 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4808      	ldr	r0, [pc, #32]	@ (800107c <MX_USART1_UART_Init+0x90>)
 800105a:	f007 ffeb 	bl	8009034 <HAL_UARTEx_SetRxFifoThreshold>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001064:	f7ff fdd8 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_USART1_UART_Init+0x90>)
 800106a:	f007 ff6c 	bl	8008f46 <HAL_UARTEx_DisableFifoMode>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001074:	f7ff fdd0 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400025c 	.word	0x2400025c
 8001080:	40011000 	.word	0x40011000

08001084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ba      	sub	sp, #232	@ 0xe8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	22c0      	movs	r2, #192	@ 0xc0
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f008 febb 	bl	8009e20 <memset>
  if(uartHandle->Instance==USART1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a2b      	ldr	r2, [pc, #172]	@ (800115c <HAL_UART_MspInit+0xd8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d14e      	bne.n	8001152 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b4:	f04f 0201 	mov.w	r2, #1
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 fd86 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010d6:	f7ff fd9f 	bl	8000c18 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <HAL_UART_MspInit+0xdc>)
 80010dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <HAL_UART_MspInit+0xdc>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <HAL_UART_MspInit+0xdc>)
 80010ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_UART_MspInit+0xdc>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <HAL_UART_MspInit+0xdc>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_UART_MspInit+0xdc>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001116:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001130:	2307      	movs	r3, #7
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4809      	ldr	r0, [pc, #36]	@ (8001164 <HAL_UART_MspInit+0xe0>)
 800113e:	f002 fb25 	bl	800378c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2025      	movs	r0, #37	@ 0x25
 8001148:	f001 fd0f 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800114c:	2025      	movs	r0, #37	@ 0x25
 800114e:	f001 fd26 	bl	8002b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	37e8      	adds	r7, #232	@ 0xe8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40011000 	.word	0x40011000
 8001160:	58024400 	.word	0x58024400
 8001164:	58020000 	.word	0x58020000

08001168 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001170:	1d39      	adds	r1, r7, #4
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	2201      	movs	r2, #1
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <__io_putchar+0x20>)
 800117a:	f006 fa7d 	bl	8007678 <HAL_UART_Transmit>
    return ch;
 800117e:	687b      	ldr	r3, [r7, #4]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2400025c 	.word	0x2400025c

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80011c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001190:	f7ff ff14 	bl	8000fbc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001194:	f7ff fe72 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	@ (80011cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	@ (80011d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	@ (80011dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f008 fe87 	bl	8009ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff fc3d 	bl	8000a40 <main>
  bx  lr
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011d0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80011d4:	0800be5c 	.word	0x0800be5c
  ldr r2, =_sbss
 80011d8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80011dc:	24000454 	.word	0x24000454

080011e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC3_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ea:	2003      	movs	r0, #3
 80011ec:	f001 fcb2 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011f0:	f003 fb1e 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_Init+0x68>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	4913      	ldr	r1, [pc, #76]	@ (8001250 <HAL_Init+0x6c>)
 8001202:	5ccb      	ldrb	r3, [r1, r3]
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_Init+0x68>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <HAL_Init+0x6c>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_Init+0x70>)
 8001226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_Init+0x74>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f814 	bl	800125c <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e002      	b.n	8001244 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fcf1 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024400 	.word	0x58024400
 8001250:	0800baa0 	.word	0x0800baa0
 8001254:	24000004 	.word	0x24000004
 8001258:	24000000 	.word	0x24000000

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_InitTick+0x60>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e021      	b.n	80012b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_InitTick+0x64>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fc97 	bl	8002bba <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f001 fc61 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_InitTick+0x68>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2400000c 	.word	0x2400000c
 80012c0:	24000000 	.word	0x24000000
 80012c4:	24000008 	.word	0x24000008

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2400000c 	.word	0x2400000c
 80012ec:	24000304 	.word	0x24000304

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	24000304 	.word	0x24000304

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2400000c 	.word	0x2400000c

08001350 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <HAL_GetREVID+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0c1b      	lsrs	r3, r3, #16
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	5c001000 	.word	0x5c001000

08001368 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	609a      	str	r2, [r3, #8]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <LL_ADC_SetChannelPreselection+0x24>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	0e9b      	lsrs	r3, r3, #26
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2201      	movs	r2, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	e015      	b.n	8001420 <LL_ADC_SetChannelPreselection+0x50>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800140a:	2320      	movs	r3, #32
 800140c:	e003      	b.n	8001416 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2201      	movs	r2, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	69d2      	ldr	r2, [r2, #28]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001436:	b480      	push	{r7}
 8001438:	b087      	sub	sp, #28
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3360      	adds	r3, #96	@ 0x60
 8001448:	461a      	mov	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	430b      	orrs	r3, r1
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	431a      	orrs	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	611a      	str	r2, [r3, #16]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3360      	adds	r3, #96	@ 0x60
 80014b8:	461a      	mov	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]
  }
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3330      	adds	r3, #48	@ 0x30
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	211f      	movs	r1, #31
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	401a      	ands	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0e9b      	lsrs	r3, r3, #26
 800153c:	f003 011f 	and.w	r1, r3, #31
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	431a      	orrs	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3314      	adds	r3, #20
 800156c:	461a      	mov	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	0e5b      	lsrs	r3, r3, #25
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	0d1b      	lsrs	r3, r3, #20
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2107      	movs	r1, #7
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	401a      	ands	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	0d1b      	lsrs	r3, r3, #20
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0318 	and.w	r3, r3, #24
 80015d6:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015d8:	40d9      	lsrs	r1, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	400b      	ands	r3, r1
 80015de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015e2:	431a      	orrs	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	000fffff 	.word	0x000fffff

080015fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 031f 	and.w	r3, r3, #31
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6093      	str	r3, [r2, #8]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	5fffffc0 	.word	0x5fffffc0

08001658 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800166c:	d101      	bne.n	8001672 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800168e:	4013      	ands	r3, r2
 8001690:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	6fffffc0 	.word	0x6fffffc0

080016a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016bc:	d101      	bne.n	80016c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <LL_ADC_Enable+0x24>)
 80016de:	4013      	ands	r3, r2
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	7fffffc0 	.word	0x7fffffc0

080016f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <LL_ADC_Disable+0x24>)
 8001706:	4013      	ands	r3, r2
 8001708:	f043 0202 	orr.w	r2, r3, #2
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	7fffffc0 	.word	0x7fffffc0

08001720 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <LL_ADC_IsEnabled+0x18>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <LL_ADC_IsEnabled+0x1a>
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d101      	bne.n	800175e <LL_ADC_IsDisableOngoing+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_IsDisableOngoing+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <LL_ADC_REG_StartConversion+0x24>)
 800177a:	4013      	ands	r3, r2
 800177c:	f043 0204 	orr.w	r2, r3, #4
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	7fffffc0 	.word	0x7fffffc0

08001794 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d101      	bne.n	80017ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d101      	bne.n	80017d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e18f      	b.n	8001b1a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff f8af 	bl	800096c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff19 	bl	8001658 <LL_ADC_IsDeepPowerDownEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff feff 	bl	8001634 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff34 	bl	80016a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d114      	bne.n	8001870 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff18 	bl	8001680 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001850:	4b87      	ldr	r3, [pc, #540]	@ (8001a70 <HAL_ADC_Init+0x290>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	4a87      	ldr	r2, [pc, #540]	@ (8001a74 <HAL_ADC_Init+0x294>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	3301      	adds	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001862:	e002      	b.n	800186a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3b01      	subs	r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f9      	bne.n	8001864 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff17 	bl	80016a8 <LL_ADC_IsInternalRegulatorEnabled>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001884:	f043 0210 	orr.w	r2, r3, #16
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff77 	bl	8001794 <LL_ADC_REG_IsConversionOngoing>
 80018a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f040 8129 	bne.w	8001b08 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f040 8125 	bne.w	8001b08 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018c6:	f043 0202 	orr.w	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff24 	bl	8001720 <LL_ADC_IsEnabled>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d136      	bne.n	800194c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a65      	ldr	r2, [pc, #404]	@ (8001a78 <HAL_ADC_Init+0x298>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d004      	beq.n	80018f2 <HAL_ADC_Init+0x112>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a63      	ldr	r2, [pc, #396]	@ (8001a7c <HAL_ADC_Init+0x29c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_ADC_Init+0x130>
 80018f2:	4861      	ldr	r0, [pc, #388]	@ (8001a78 <HAL_ADC_Init+0x298>)
 80018f4:	f7ff ff14 	bl	8001720 <LL_ADC_IsEnabled>
 80018f8:	4604      	mov	r4, r0
 80018fa:	4860      	ldr	r0, [pc, #384]	@ (8001a7c <HAL_ADC_Init+0x29c>)
 80018fc:	f7ff ff10 	bl	8001720 <LL_ADC_IsEnabled>
 8001900:	4603      	mov	r3, r0
 8001902:	4323      	orrs	r3, r4
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	e008      	b.n	8001922 <HAL_ADC_Init+0x142>
 8001910:	485b      	ldr	r0, [pc, #364]	@ (8001a80 <HAL_ADC_Init+0x2a0>)
 8001912:	f7ff ff05 	bl	8001720 <LL_ADC_IsEnabled>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a53      	ldr	r2, [pc, #332]	@ (8001a78 <HAL_ADC_Init+0x298>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d004      	beq.n	800193a <HAL_ADC_Init+0x15a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a51      	ldr	r2, [pc, #324]	@ (8001a7c <HAL_ADC_Init+0x29c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x15e>
 800193a:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_ADC_Init+0x2a4>)
 800193c:	e000      	b.n	8001940 <HAL_ADC_Init+0x160>
 800193e:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_ADC_Init+0x2a8>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f7ff fd0e 	bl	8001368 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800194c:	f7ff fd00 	bl	8001350 <HAL_GetREVID>
 8001950:	4603      	mov	r3, r0
 8001952:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001956:	4293      	cmp	r3, r2
 8001958:	d914      	bls.n	8001984 <HAL_ADC_Init+0x1a4>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b10      	cmp	r3, #16
 8001960:	d110      	bne.n	8001984 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7d5b      	ldrb	r3, [r3, #21]
 8001966:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800196c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001972:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7f1b      	ldrb	r3, [r3, #28]
 8001978:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800197a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800197c:	f043 030c 	orr.w	r3, r3, #12
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e00d      	b.n	80019a0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7d5b      	ldrb	r3, [r3, #21]
 8001988:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800198e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001994:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7f1b      	ldrb	r3, [r3, #28]
 800199a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7f1b      	ldrb	r3, [r3, #28]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	045b      	lsls	r3, r3, #17
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <HAL_ADC_Init+0x2ac>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	69b9      	ldr	r1, [r7, #24]
 80019e2:	430b      	orrs	r3, r1
 80019e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fed2 	bl	8001794 <LL_ADC_REG_IsConversionOngoing>
 80019f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fedf 	bl	80017ba <LL_ADC_INJ_IsConversionOngoing>
 80019fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d15f      	bne.n	8001ac4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d15c      	bne.n	8001ac4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7d1b      	ldrb	r3, [r3, #20]
 8001a0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <HAL_ADC_Init+0x2b0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d130      	bne.n	8001a98 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_ADC_Init+0x2b4>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	0411      	lsls	r1, r2, #16
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	e01c      	b.n	8001aa8 <HAL_ADC_Init+0x2c8>
 8001a6e:	bf00      	nop
 8001a70:	24000000 	.word	0x24000000
 8001a74:	053e2d63 	.word	0x053e2d63
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40022100 	.word	0x40022100
 8001a80:	58026000 	.word	0x58026000
 8001a84:	40022300 	.word	0x40022300
 8001a88:	58026300 	.word	0x58026300
 8001a8c:	fff0c003 	.word	0xfff0c003
 8001a90:	ffffbffc 	.word	0xffffbffc
 8001a94:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fdd6 	bl	8002670 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10c      	bne.n	8001ae6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f023 010f 	bic.w	r1, r3, #15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	1e5a      	subs	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae4:	e007      	b.n	8001af6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 020f 	bic.w	r2, r2, #15
 8001af4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	f043 0201 	orr.w	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b06:	e007      	b.n	8001b18 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop

08001b24 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca4 <HAL_ADC_Start+0x180>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_Start+0x1c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca8 <HAL_ADC_Start+0x184>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_Start+0x20>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_ADC_Start+0x188>)
 8001b42:	e000      	b.n	8001b46 <HAL_ADC_Start+0x22>
 8001b44:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb0 <HAL_ADC_Start+0x18c>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fd58 	bl	80015fc <LL_ADC_GetMultimode>
 8001b4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe1e 	bl	8001794 <LL_ADC_REG_IsConversionOngoing>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 809a 	bne.w	8001c94 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Start+0x4a>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e095      	b.n	8001c9a <HAL_ADC_Start+0x176>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fc90 	bl	800249c <ADC_Enable>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 8081 	bne.w	8001c8a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b8c:	4b49      	ldr	r3, [pc, #292]	@ (8001cb4 <HAL_ADC_Start+0x190>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ca8 <HAL_ADC_Start+0x184>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d002      	beq.n	8001ba8 <HAL_ADC_Start+0x84>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	e000      	b.n	8001baa <HAL_ADC_Start+0x86>
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_ADC_Start+0x180>)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d002      	beq.n	8001bb8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd0:	d106      	bne.n	8001be0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	f023 0206 	bic.w	r2, r3, #6
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bde:	e002      	b.n	8001be6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	221c      	movs	r2, #28
 8001bec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca8 <HAL_ADC_Start+0x184>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d002      	beq.n	8001c06 <HAL_ADC_Start+0xe2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	e000      	b.n	8001c08 <HAL_ADC_Start+0xe4>
 8001c06:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_ADC_Start+0x180>)
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d008      	beq.n	8001c22 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d002      	beq.n	8001c22 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d114      	bne.n	8001c4c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fd91 	bl	800176c <LL_ADC_REG_StartConversion>
 8001c4a:	e025      	b.n	8001c98 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <HAL_ADC_Start+0x184>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d002      	beq.n	8001c68 <HAL_ADC_Start+0x144>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_Start+0x146>
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_ADC_Start+0x180>)
 8001c6a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00f      	beq.n	8001c98 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c88:	e006      	b.n	8001c98 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001c92:	e001      	b.n	8001c98 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
 8001c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40022100 	.word	0x40022100
 8001cac:	40022300 	.word	0x40022300
 8001cb0:	58026300 	.word	0x58026300
 8001cb4:	fffff0fe 	.word	0xfffff0fe

08001cb8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	@ (8001e90 <HAL_ADC_PollForConversion+0x1d8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_PollForConversion+0x1e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a70      	ldr	r2, [pc, #448]	@ (8001e94 <HAL_ADC_PollForConversion+0x1dc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_PollForConversion+0x22>
 8001cd6:	4b70      	ldr	r3, [pc, #448]	@ (8001e98 <HAL_ADC_PollForConversion+0x1e0>)
 8001cd8:	e000      	b.n	8001cdc <HAL_ADC_PollForConversion+0x24>
 8001cda:	4b70      	ldr	r3, [pc, #448]	@ (8001e9c <HAL_ADC_PollForConversion+0x1e4>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fc8d 	bl	80015fc <LL_ADC_GetMultimode>
 8001ce2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d102      	bne.n	8001cf2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001cec:	2308      	movs	r3, #8
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	e037      	b.n	8001d62 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d002      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	d111      	bne.n	8001d28 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d16:	f043 0220 	orr.w	r2, r3, #32
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0b1      	b.n	8001e86 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d22:	2304      	movs	r3, #4
 8001d24:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d26:	e01c      	b.n	8001d62 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <HAL_ADC_PollForConversion+0x1d8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d004      	beq.n	8001d3c <HAL_ADC_PollForConversion+0x84>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a57      	ldr	r2, [pc, #348]	@ (8001e94 <HAL_ADC_PollForConversion+0x1dc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_PollForConversion+0x88>
 8001d3c:	4b56      	ldr	r3, [pc, #344]	@ (8001e98 <HAL_ADC_PollForConversion+0x1e0>)
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_PollForConversion+0x8a>
 8001d40:	4b56      	ldr	r3, [pc, #344]	@ (8001e9c <HAL_ADC_PollForConversion+0x1e4>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fc68 	bl	8001618 <LL_ADC_GetMultiDMATransfer>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d52:	f043 0220 	orr.w	r2, r3, #32
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e093      	b.n	8001e86 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d5e:	2304      	movs	r3, #4
 8001d60:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d62:	f7ff fac5 	bl	80012f0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d68:	e021      	b.n	8001dae <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d01d      	beq.n	8001dae <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d72:	f7ff fabd 	bl	80012f0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <HAL_ADC_PollForConversion+0xd0>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d112      	bne.n	8001dae <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e06b      	b.n	8001e86 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0d6      	beq.n	8001d6a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fb86 	bl	80014de <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01c      	beq.n	8001e12 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7d5b      	ldrb	r3, [r3, #21]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d118      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d111      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_ADC_PollForConversion+0x1dc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d002      	beq.n	8001e22 <HAL_ADC_PollForConversion+0x16a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e000      	b.n	8001e24 <HAL_ADC_PollForConversion+0x16c>
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_ADC_PollForConversion+0x1d8>)
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d008      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d104      	bne.n	8001e48 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	e00c      	b.n	8001e62 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <HAL_ADC_PollForConversion+0x1dc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d002      	beq.n	8001e58 <HAL_ADC_PollForConversion+0x1a0>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_PollForConversion+0x1a2>
 8001e58:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <HAL_ADC_PollForConversion+0x1d8>)
 8001e5a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d104      	bne.n	8001e72 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e008      	b.n	8001e84 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d103      	bne.n	8001e84 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	220c      	movs	r2, #12
 8001e82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40022100 	.word	0x40022100
 8001e98:	40022300 	.word	0x40022300
 8001e9c:	58026300 	.word	0x58026300

08001ea0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b08d      	sub	sp, #52	@ 0x34
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a65      	ldr	r2, [pc, #404]	@ (800206c <HAL_ADC_ConfigChannel+0x1b0>)
 8001ed6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x2a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e2c7      	b.n	8002476 <HAL_ADC_ConfigChannel+0x5ba>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fc4e 	bl	8001794 <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 82ac 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db2c      	blt.n	8001f62 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d108      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x6a>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2201      	movs	r2, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	e016      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x98>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	613b      	str	r3, [r7, #16]
  return result;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e003      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	69d1      	ldr	r1, [r2, #28]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f7ff fac8 	bl	8001504 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fc0b 	bl	8001794 <LL_ADC_REG_IsConversionOngoing>
 8001f7e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc18 	bl	80017ba <LL_ADC_INJ_IsConversionOngoing>
 8001f8a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80b8 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80b4 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f7ff fad7 	bl	800155c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fae:	4b30      	ldr	r3, [pc, #192]	@ (8002070 <HAL_ADC_ConfigChannel+0x1b4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x118>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	e01d      	b.n	8002010 <HAL_ADC_ConfigChannel+0x154>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10b      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x13e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	e00a      	b.n	8002010 <HAL_ADC_ConfigChannel+0x154>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d02c      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6919      	ldr	r1, [r3, #16]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f7ff fa05 	bl	8001436 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6919      	ldr	r1, [r3, #16]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	7e5b      	ldrb	r3, [r3, #25]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x186>
 800203c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002040:	e000      	b.n	8002044 <HAL_ADC_ConfigChannel+0x188>
 8002042:	2300      	movs	r3, #0
 8002044:	461a      	mov	r2, r3
 8002046:	f7ff fa2f 	bl	80014a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7e1b      	ldrb	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1a4>
 800205a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800205e:	e000      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1a6>
 8002060:	2300      	movs	r3, #0
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff fa07 	bl	8001476 <LL_ADC_SetDataRightShift>
 8002068:	e04c      	b.n	8002104 <HAL_ADC_ConfigChannel+0x248>
 800206a:	bf00      	nop
 800206c:	47ff0000 	.word	0x47ff0000
 8002070:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	429a      	cmp	r2, r3
 8002086:	d107      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002096:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800209e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	069b      	lsls	r3, r3, #26
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002102:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fb09 	bl	8001720 <LL_ADC_IsEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 81aa 	bne.w	800246a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff fa46 	bl	80015b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a87      	ldr	r2, [pc, #540]	@ (800234c <HAL_ADC_ConfigChannel+0x490>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f040 809a 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4984      	ldr	r1, [pc, #528]	@ (8002350 <HAL_ADC_ConfigChannel+0x494>)
 800213e:	428b      	cmp	r3, r1
 8002140:	d147      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x316>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4983      	ldr	r1, [pc, #524]	@ (8002354 <HAL_ADC_ConfigChannel+0x498>)
 8002148:	428b      	cmp	r3, r1
 800214a:	d040      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x312>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4981      	ldr	r1, [pc, #516]	@ (8002358 <HAL_ADC_ConfigChannel+0x49c>)
 8002152:	428b      	cmp	r3, r1
 8002154:	d039      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x30e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4980      	ldr	r1, [pc, #512]	@ (800235c <HAL_ADC_ConfigChannel+0x4a0>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d032      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x30a>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	497e      	ldr	r1, [pc, #504]	@ (8002360 <HAL_ADC_ConfigChannel+0x4a4>)
 8002166:	428b      	cmp	r3, r1
 8002168:	d02b      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x306>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	497d      	ldr	r1, [pc, #500]	@ (8002364 <HAL_ADC_ConfigChannel+0x4a8>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d024      	beq.n	80021be <HAL_ADC_ConfigChannel+0x302>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	497b      	ldr	r1, [pc, #492]	@ (8002368 <HAL_ADC_ConfigChannel+0x4ac>)
 800217a:	428b      	cmp	r3, r1
 800217c:	d01d      	beq.n	80021ba <HAL_ADC_ConfigChannel+0x2fe>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	497a      	ldr	r1, [pc, #488]	@ (800236c <HAL_ADC_ConfigChannel+0x4b0>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d016      	beq.n	80021b6 <HAL_ADC_ConfigChannel+0x2fa>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4978      	ldr	r1, [pc, #480]	@ (8002370 <HAL_ADC_ConfigChannel+0x4b4>)
 800218e:	428b      	cmp	r3, r1
 8002190:	d00f      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x2f6>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4977      	ldr	r1, [pc, #476]	@ (8002374 <HAL_ADC_ConfigChannel+0x4b8>)
 8002198:	428b      	cmp	r3, r1
 800219a:	d008      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x2f2>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4975      	ldr	r1, [pc, #468]	@ (8002378 <HAL_ADC_ConfigChannel+0x4bc>)
 80021a2:	428b      	cmp	r3, r1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x2ee>
 80021a6:	4b75      	ldr	r3, [pc, #468]	@ (800237c <HAL_ADC_ConfigChannel+0x4c0>)
 80021a8:	e05a      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021aa:	2300      	movs	r3, #0
 80021ac:	e058      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021ae:	4b74      	ldr	r3, [pc, #464]	@ (8002380 <HAL_ADC_ConfigChannel+0x4c4>)
 80021b0:	e056      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021b2:	4b74      	ldr	r3, [pc, #464]	@ (8002384 <HAL_ADC_ConfigChannel+0x4c8>)
 80021b4:	e054      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002370 <HAL_ADC_ConfigChannel+0x4b4>)
 80021b8:	e052      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021ba:	4b6c      	ldr	r3, [pc, #432]	@ (800236c <HAL_ADC_ConfigChannel+0x4b0>)
 80021bc:	e050      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021be:	4b72      	ldr	r3, [pc, #456]	@ (8002388 <HAL_ADC_ConfigChannel+0x4cc>)
 80021c0:	e04e      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021c2:	4b72      	ldr	r3, [pc, #456]	@ (800238c <HAL_ADC_ConfigChannel+0x4d0>)
 80021c4:	e04c      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021c6:	4b72      	ldr	r3, [pc, #456]	@ (8002390 <HAL_ADC_ConfigChannel+0x4d4>)
 80021c8:	e04a      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021ca:	4b72      	ldr	r3, [pc, #456]	@ (8002394 <HAL_ADC_ConfigChannel+0x4d8>)
 80021cc:	e048      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e046      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4970      	ldr	r1, [pc, #448]	@ (8002398 <HAL_ADC_ConfigChannel+0x4dc>)
 80021d8:	428b      	cmp	r3, r1
 80021da:	d140      	bne.n	800225e <HAL_ADC_ConfigChannel+0x3a2>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	495c      	ldr	r1, [pc, #368]	@ (8002354 <HAL_ADC_ConfigChannel+0x498>)
 80021e2:	428b      	cmp	r3, r1
 80021e4:	d039      	beq.n	800225a <HAL_ADC_ConfigChannel+0x39e>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	495b      	ldr	r1, [pc, #364]	@ (8002358 <HAL_ADC_ConfigChannel+0x49c>)
 80021ec:	428b      	cmp	r3, r1
 80021ee:	d032      	beq.n	8002256 <HAL_ADC_ConfigChannel+0x39a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4959      	ldr	r1, [pc, #356]	@ (800235c <HAL_ADC_ConfigChannel+0x4a0>)
 80021f6:	428b      	cmp	r3, r1
 80021f8:	d02b      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x396>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4958      	ldr	r1, [pc, #352]	@ (8002360 <HAL_ADC_ConfigChannel+0x4a4>)
 8002200:	428b      	cmp	r3, r1
 8002202:	d024      	beq.n	800224e <HAL_ADC_ConfigChannel+0x392>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4956      	ldr	r1, [pc, #344]	@ (8002364 <HAL_ADC_ConfigChannel+0x4a8>)
 800220a:	428b      	cmp	r3, r1
 800220c:	d01d      	beq.n	800224a <HAL_ADC_ConfigChannel+0x38e>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4955      	ldr	r1, [pc, #340]	@ (8002368 <HAL_ADC_ConfigChannel+0x4ac>)
 8002214:	428b      	cmp	r3, r1
 8002216:	d016      	beq.n	8002246 <HAL_ADC_ConfigChannel+0x38a>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4953      	ldr	r1, [pc, #332]	@ (800236c <HAL_ADC_ConfigChannel+0x4b0>)
 800221e:	428b      	cmp	r3, r1
 8002220:	d00f      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x386>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4952      	ldr	r1, [pc, #328]	@ (8002370 <HAL_ADC_ConfigChannel+0x4b4>)
 8002228:	428b      	cmp	r3, r1
 800222a:	d008      	beq.n	800223e <HAL_ADC_ConfigChannel+0x382>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4951      	ldr	r1, [pc, #324]	@ (8002378 <HAL_ADC_ConfigChannel+0x4bc>)
 8002232:	428b      	cmp	r3, r1
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x37e>
 8002236:	4b51      	ldr	r3, [pc, #324]	@ (800237c <HAL_ADC_ConfigChannel+0x4c0>)
 8002238:	e012      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 800223a:	2300      	movs	r3, #0
 800223c:	e010      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 800223e:	4b51      	ldr	r3, [pc, #324]	@ (8002384 <HAL_ADC_ConfigChannel+0x4c8>)
 8002240:	e00e      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 8002242:	4b4b      	ldr	r3, [pc, #300]	@ (8002370 <HAL_ADC_ConfigChannel+0x4b4>)
 8002244:	e00c      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 8002246:	4b49      	ldr	r3, [pc, #292]	@ (800236c <HAL_ADC_ConfigChannel+0x4b0>)
 8002248:	e00a      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 800224a:	4b4f      	ldr	r3, [pc, #316]	@ (8002388 <HAL_ADC_ConfigChannel+0x4cc>)
 800224c:	e008      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 800224e:	4b4f      	ldr	r3, [pc, #316]	@ (800238c <HAL_ADC_ConfigChannel+0x4d0>)
 8002250:	e006      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 8002252:	4b4f      	ldr	r3, [pc, #316]	@ (8002390 <HAL_ADC_ConfigChannel+0x4d4>)
 8002254:	e004      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 8002256:	4b4f      	ldr	r3, [pc, #316]	@ (8002394 <HAL_ADC_ConfigChannel+0x4d8>)
 8002258:	e002      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_ADC_ConfigChannel+0x3a4>
 800225e:	2300      	movs	r3, #0
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f7ff f8b4 	bl	80013d0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f280 80fc 	bge.w	800246a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a36      	ldr	r2, [pc, #216]	@ (8002350 <HAL_ADC_ConfigChannel+0x494>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x3ca>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a45      	ldr	r2, [pc, #276]	@ (8002398 <HAL_ADC_ConfigChannel+0x4dc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_ADC_ConfigChannel+0x3ce>
 8002286:	4b45      	ldr	r3, [pc, #276]	@ (800239c <HAL_ADC_ConfigChannel+0x4e0>)
 8002288:	e000      	b.n	800228c <HAL_ADC_ConfigChannel+0x3d0>
 800228a:	4b45      	ldr	r3, [pc, #276]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4e4>)
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f891 	bl	80013b4 <LL_ADC_GetCommonPathInternalCh>
 8002292:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_ADC_ConfigChannel+0x494>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x3ec>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002398 <HAL_ADC_ConfigChannel+0x4dc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10e      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x40a>
 80022a8:	4829      	ldr	r0, [pc, #164]	@ (8002350 <HAL_ADC_ConfigChannel+0x494>)
 80022aa:	f7ff fa39 	bl	8001720 <LL_ADC_IsEnabled>
 80022ae:	4604      	mov	r4, r0
 80022b0:	4839      	ldr	r0, [pc, #228]	@ (8002398 <HAL_ADC_ConfigChannel+0x4dc>)
 80022b2:	f7ff fa35 	bl	8001720 <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4323      	orrs	r3, r4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	e008      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x41c>
 80022c6:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4e8>)
 80022c8:	f7ff fa2a 	bl	8001720 <LL_ADC_IsEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80b3 	beq.w	8002444 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_ADC_ConfigChannel+0x4ec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d165      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x4f8>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d160      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2b      	ldr	r2, [pc, #172]	@ (80023a4 <HAL_ADC_ConfigChannel+0x4e8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	f040 80b6 	bne.w	800246a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <HAL_ADC_ConfigChannel+0x494>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x456>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <HAL_ADC_ConfigChannel+0x4dc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x45a>
 8002312:	4a22      	ldr	r2, [pc, #136]	@ (800239c <HAL_ADC_ConfigChannel+0x4e0>)
 8002314:	e000      	b.n	8002318 <HAL_ADC_ConfigChannel+0x45c>
 8002316:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_ADC_ConfigChannel+0x4e4>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f7ff f834 	bl	800138e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_ADC_ConfigChannel+0x4f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	4a20      	ldr	r2, [pc, #128]	@ (80023b0 <HAL_ADC_ConfigChannel+0x4f4>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	3301      	adds	r3, #1
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800233a:	e002      	b.n	8002342 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002348:	e08f      	b.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
 800234a:	bf00      	nop
 800234c:	47ff0000 	.word	0x47ff0000
 8002350:	40022000 	.word	0x40022000
 8002354:	04300002 	.word	0x04300002
 8002358:	08600004 	.word	0x08600004
 800235c:	0c900008 	.word	0x0c900008
 8002360:	10c00010 	.word	0x10c00010
 8002364:	14f00020 	.word	0x14f00020
 8002368:	2a000400 	.word	0x2a000400
 800236c:	2e300800 	.word	0x2e300800
 8002370:	32601000 	.word	0x32601000
 8002374:	43210000 	.word	0x43210000
 8002378:	4b840000 	.word	0x4b840000
 800237c:	4fb80000 	.word	0x4fb80000
 8002380:	47520000 	.word	0x47520000
 8002384:	36902000 	.word	0x36902000
 8002388:	25b00200 	.word	0x25b00200
 800238c:	21800100 	.word	0x21800100
 8002390:	1d500080 	.word	0x1d500080
 8002394:	19200040 	.word	0x19200040
 8002398:	40022100 	.word	0x40022100
 800239c:	40022300 	.word	0x40022300
 80023a0:	58026300 	.word	0x58026300
 80023a4:	58026000 	.word	0x58026000
 80023a8:	cb840000 	.word	0xcb840000
 80023ac:	24000000 	.word	0x24000000
 80023b0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a31      	ldr	r2, [pc, #196]	@ (8002480 <HAL_ADC_ConfigChannel+0x5c4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d11e      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x540>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d119      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002484 <HAL_ADC_ConfigChannel+0x5c8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d14b      	bne.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002488 <HAL_ADC_ConfigChannel+0x5cc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x52a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	@ (800248c <HAL_ADC_ConfigChannel+0x5d0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x52e>
 80023e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002490 <HAL_ADC_ConfigChannel+0x5d4>)
 80023e8:	e000      	b.n	80023ec <HAL_ADC_ConfigChannel+0x530>
 80023ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002494 <HAL_ADC_ConfigChannel+0x5d8>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f7fe ffca 	bl	800138e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fa:	e036      	b.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a25      	ldr	r2, [pc, #148]	@ (8002498 <HAL_ADC_ConfigChannel+0x5dc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d131      	bne.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d12c      	bne.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <HAL_ADC_ConfigChannel+0x5c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d127      	bne.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1a      	ldr	r2, [pc, #104]	@ (8002488 <HAL_ADC_ConfigChannel+0x5cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_ADC_ConfigChannel+0x572>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	@ (800248c <HAL_ADC_ConfigChannel+0x5d0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x576>
 800242e:	4a18      	ldr	r2, [pc, #96]	@ (8002490 <HAL_ADC_ConfigChannel+0x5d4>)
 8002430:	e000      	b.n	8002434 <HAL_ADC_ConfigChannel+0x578>
 8002432:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_ADC_ConfigChannel+0x5d8>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7fe ffa6 	bl	800138e <LL_ADC_SetCommonPathInternalCh>
 8002442:	e012      	b.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002456:	e008      	b.n	800246a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002476:	4618      	mov	r0, r3
 8002478:	3734      	adds	r7, #52	@ 0x34
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	c7520000 	.word	0xc7520000
 8002484:	58026000 	.word	0x58026000
 8002488:	40022000 	.word	0x40022000
 800248c:	40022100 	.word	0x40022100
 8002490:	40022300 	.word	0x40022300
 8002494:	58026300 	.word	0x58026300
 8002498:	cfb80000 	.word	0xcfb80000

0800249c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff f939 	bl	8001720 <LL_ADC_IsEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d16e      	bne.n	8002592 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <ADC_Enable+0x100>)
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	f043 0210 	orr.w	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e05a      	b.n	8002594 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f8f4 	bl	80016d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024e8:	f7fe ff02 	bl	80012f0 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2b      	ldr	r2, [pc, #172]	@ (80025a0 <ADC_Enable+0x104>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <ADC_Enable+0x66>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a29      	ldr	r2, [pc, #164]	@ (80025a4 <ADC_Enable+0x108>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <ADC_Enable+0x6a>
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <ADC_Enable+0x10c>)
 8002504:	e000      	b.n	8002508 <ADC_Enable+0x6c>
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <ADC_Enable+0x110>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f877 	bl	80015fc <LL_ADC_GetMultimode>
 800250e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <ADC_Enable+0x108>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d002      	beq.n	8002520 <ADC_Enable+0x84>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	e000      	b.n	8002522 <ADC_Enable+0x86>
 8002520:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <ADC_Enable+0x104>)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	4293      	cmp	r3, r2
 8002528:	d02c      	beq.n	8002584 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d130      	bne.n	8002592 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002530:	e028      	b.n	8002584 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f8f2 	bl	8001720 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f8c2 	bl	80016d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800254c:	f7fe fed0 	bl	80012f0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d914      	bls.n	8002584 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00d      	beq.n	8002584 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d1cf      	bne.n	8002532 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	8000003f 	.word	0x8000003f
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40022100 	.word	0x40022100
 80025a8:	40022300 	.word	0x40022300
 80025ac:	58026300 	.word	0x58026300

080025b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f8c2 	bl	8001746 <LL_ADC_IsDisableOngoing>
 80025c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f8a9 	bl	8001720 <LL_ADC_IsEnabled>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d047      	beq.n	8002664 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d144      	bne.n	8002664 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030d 	and.w	r3, r3, #13
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff f883 	bl	80016f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2203      	movs	r2, #3
 80025f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025fa:	f7fe fe79 	bl	80012f0 <HAL_GetTick>
 80025fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002600:	e029      	b.n	8002656 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	f043 0210 	orr.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e023      	b.n	8002666 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800261e:	f7fe fe67 	bl	80012f0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d914      	bls.n	8002656 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1dc      	bne.n	800261e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a7a      	ldr	r2, [pc, #488]	@ (8002868 <ADC_ConfigureBoostMode+0x1f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <ADC_ConfigureBoostMode+0x1c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a79      	ldr	r2, [pc, #484]	@ (800286c <ADC_ConfigureBoostMode+0x1fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d109      	bne.n	80026a0 <ADC_ConfigureBoostMode+0x30>
 800268c:	4b78      	ldr	r3, [pc, #480]	@ (8002870 <ADC_ConfigureBoostMode+0x200>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e008      	b.n	80026b2 <ADC_ConfigureBoostMode+0x42>
 80026a0:	4b74      	ldr	r3, [pc, #464]	@ (8002874 <ADC_ConfigureBoostMode+0x204>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01c      	beq.n	80026f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026b6:	f002 fa35 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 80026ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026c4:	d010      	beq.n	80026e8 <ADC_ConfigureBoostMode+0x78>
 80026c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026ca:	d873      	bhi.n	80027b4 <ADC_ConfigureBoostMode+0x144>
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d0:	d002      	beq.n	80026d8 <ADC_ConfigureBoostMode+0x68>
 80026d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026d6:	d16d      	bne.n	80027b4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	60fb      	str	r3, [r7, #12]
        break;
 80026e6:	e068      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	60fb      	str	r3, [r7, #12]
        break;
 80026ee:	e064      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80026f4:	f04f 0100 	mov.w	r1, #0
 80026f8:	f003 fc7a 	bl	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002706:	d051      	beq.n	80027ac <ADC_ConfigureBoostMode+0x13c>
 8002708:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800270c:	d854      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 800270e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002712:	d047      	beq.n	80027a4 <ADC_ConfigureBoostMode+0x134>
 8002714:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002718:	d84e      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 800271a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800271e:	d03d      	beq.n	800279c <ADC_ConfigureBoostMode+0x12c>
 8002720:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002724:	d848      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 8002726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800272a:	d033      	beq.n	8002794 <ADC_ConfigureBoostMode+0x124>
 800272c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002730:	d842      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 8002732:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002736:	d029      	beq.n	800278c <ADC_ConfigureBoostMode+0x11c>
 8002738:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800273c:	d83c      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 800273e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002742:	d01a      	beq.n	800277a <ADC_ConfigureBoostMode+0x10a>
 8002744:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002748:	d836      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 800274a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800274e:	d014      	beq.n	800277a <ADC_ConfigureBoostMode+0x10a>
 8002750:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002754:	d830      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 8002756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800275a:	d00e      	beq.n	800277a <ADC_ConfigureBoostMode+0x10a>
 800275c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002760:	d82a      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 8002762:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002766:	d008      	beq.n	800277a <ADC_ConfigureBoostMode+0x10a>
 8002768:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800276c:	d824      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x148>
 800276e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002772:	d002      	beq.n	800277a <ADC_ConfigureBoostMode+0x10a>
 8002774:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002778:	d11e      	bne.n	80027b8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0c9b      	lsrs	r3, r3, #18
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	60fb      	str	r3, [r7, #12]
        break;
 800278a:	e016      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
        break;
 8002792:	e012      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	60fb      	str	r3, [r7, #12]
        break;
 800279a:	e00e      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	60fb      	str	r3, [r7, #12]
        break;
 80027a2:	e00a      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	09db      	lsrs	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
        break;
 80027aa:	e006      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	60fb      	str	r3, [r7, #12]
        break;
 80027b2:	e002      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
        break;
 80027b4:	bf00      	nop
 80027b6:	e000      	b.n	80027ba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027b8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027ba:	f7fe fdc9 	bl	8001350 <HAL_GetREVID>
 80027be:	4603      	mov	r3, r0
 80027c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d815      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <ADC_ConfigureBoostMode+0x208>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d908      	bls.n	80027e2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027e0:	e03e      	b.n	8002860 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f0:	609a      	str	r2, [r3, #8]
}
 80027f2:	e035      	b.n	8002860 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	@ (800287c <ADC_ConfigureBoostMode+0x20c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d808      	bhi.n	8002814 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002810:	609a      	str	r2, [r3, #8]
}
 8002812:	e025      	b.n	8002860 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <ADC_ConfigureBoostMode+0x210>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d80a      	bhi.n	8002832 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	e016      	b.n	8002860 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <ADC_ConfigureBoostMode+0x214>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d80a      	bhi.n	8002850 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284c:	609a      	str	r2, [r3, #8]
}
 800284e:	e007      	b.n	8002860 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40022000 	.word	0x40022000
 800286c:	40022100 	.word	0x40022100
 8002870:	40022300 	.word	0x40022300
 8002874:	58026300 	.word	0x58026300
 8002878:	01312d00 	.word	0x01312d00
 800287c:	005f5e10 	.word	0x005f5e10
 8002880:	00bebc20 	.word	0x00bebc20
 8002884:	017d7840 	.word	0x017d7840

08002888 <LL_ADC_StartCalibration>:
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <LL_ADC_StartCalibration+0x38>)
 800289a:	4013      	ands	r3, r2
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	3ffeffc0 	.word	0x3ffeffc0

080028c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADCEx_Calibration_Start+0x1e>
 8002906:	2302      	movs	r3, #2
 8002908:	e04c      	b.n	80029a4 <HAL_ADCEx_Calibration_Start+0xb8>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff fe4c 	bl	80025b0 <ADC_Disable>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d135      	bne.n	800298e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002926:	4b21      	ldr	r3, [pc, #132]	@ (80029ac <HAL_ADCEx_Calibration_Start+0xc0>)
 8002928:	4013      	ands	r3, r2
 800292a:	f043 0202 	orr.w	r2, r3, #2
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffa4 	bl	8002888 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002940:	e014      	b.n	800296c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	3301      	adds	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4a19      	ldr	r2, [pc, #100]	@ (80029b0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d30d      	bcc.n	800296c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002954:	f023 0312 	bic.w	r3, r3, #18
 8002958:	f043 0210 	orr.w	r2, r3, #16
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e01b      	b.n	80029a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ffa7 	bl	80028c4 <LL_ADC_IsCalibrationOnGoing>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e2      	bne.n	8002942 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f023 0303 	bic.w	r3, r3, #3
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	655a      	str	r2, [r3, #84]	@ 0x54
 800298c:	e005      	b.n	800299a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	ffffeefd 	.word	0xffffeefd
 80029b0:	25c3f800 	.word	0x25c3f800

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x40>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x40>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00
 80029f8:	05fa0000 	.word	0x05fa0000

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	@ (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff40 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff90 	bl	8002aa8 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5f 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff33 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffa4 	bl	8002b10 <SysTick_Config>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002bd8:	f3bf 8f5f 	dmb	sy
}
 8002bdc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bde:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_MPU_Disable+0x28>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	4a06      	ldr	r2, [pc, #24]	@ (8002bfc <HAL_MPU_Disable+0x28>)
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_MPU_Disable+0x2c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	e000ed90 	.word	0xe000ed90

08002c04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c3c <HAL_MPU_Enable+0x38>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_MPU_Enable+0x3c>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <HAL_MPU_Enable+0x3c>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c22:	f3bf 8f4f 	dsb	sy
}
 8002c26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c28:	f3bf 8f6f 	isb	sy
}
 8002c2c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed90 	.word	0xe000ed90
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	785a      	ldrb	r2, [r3, #1]
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c52:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c54:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c60:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7adb      	ldrb	r3, [r3, #11]
 8002c72:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7a9b      	ldrb	r3, [r3, #10]
 8002c7a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7b5b      	ldrb	r3, [r3, #13]
 8002c82:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7b9b      	ldrb	r3, [r3, #14]
 8002c8a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7bdb      	ldrb	r3, [r3, #15]
 8002c92:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7a5b      	ldrb	r3, [r3, #9]
 8002c9a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7a1b      	ldrb	r3, [r3, #8]
 8002ca2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ca4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cb0:	6113      	str	r3, [r2, #16]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed90 	.word	0xe000ed90

08002cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7fe fb10 	bl	80012f0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e2dc      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e2cd      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a76      	ldr	r2, [pc, #472]	@ (8002ed8 <HAL_DMA_Abort+0x214>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04a      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a74      	ldr	r2, [pc, #464]	@ (8002edc <HAL_DMA_Abort+0x218>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d045      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a73      	ldr	r2, [pc, #460]	@ (8002ee0 <HAL_DMA_Abort+0x21c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d040      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a71      	ldr	r2, [pc, #452]	@ (8002ee4 <HAL_DMA_Abort+0x220>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d03b      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a70      	ldr	r2, [pc, #448]	@ (8002ee8 <HAL_DMA_Abort+0x224>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d036      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_DMA_Abort+0x228>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d031      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ef0 <HAL_DMA_Abort+0x22c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d02c      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef4 <HAL_DMA_Abort+0x230>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef8 <HAL_DMA_Abort+0x234>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	@ (8002efc <HAL_DMA_Abort+0x238>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a67      	ldr	r2, [pc, #412]	@ (8002f00 <HAL_DMA_Abort+0x23c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	@ (8002f04 <HAL_DMA_Abort+0x240>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a64      	ldr	r2, [pc, #400]	@ (8002f08 <HAL_DMA_Abort+0x244>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a62      	ldr	r2, [pc, #392]	@ (8002f0c <HAL_DMA_Abort+0x248>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a61      	ldr	r2, [pc, #388]	@ (8002f10 <HAL_DMA_Abort+0x24c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5f      	ldr	r2, [pc, #380]	@ (8002f14 <HAL_DMA_Abort+0x250>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Abort+0xda>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_DMA_Abort+0xdc>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 021e 	bic.w	r2, r2, #30
 8002db2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e00a      	b.n	8002de2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed8 <HAL_DMA_Abort+0x214>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d072      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3a      	ldr	r2, [pc, #232]	@ (8002edc <HAL_DMA_Abort+0x218>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d06d      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a39      	ldr	r2, [pc, #228]	@ (8002ee0 <HAL_DMA_Abort+0x21c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d068      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a37      	ldr	r2, [pc, #220]	@ (8002ee4 <HAL_DMA_Abort+0x220>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d063      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a36      	ldr	r2, [pc, #216]	@ (8002ee8 <HAL_DMA_Abort+0x224>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d05e      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a34      	ldr	r2, [pc, #208]	@ (8002eec <HAL_DMA_Abort+0x228>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d059      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a33      	ldr	r2, [pc, #204]	@ (8002ef0 <HAL_DMA_Abort+0x22c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d054      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <HAL_DMA_Abort+0x230>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d04f      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a30      	ldr	r2, [pc, #192]	@ (8002ef8 <HAL_DMA_Abort+0x234>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <HAL_DMA_Abort+0x238>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <HAL_DMA_Abort+0x23c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <HAL_DMA_Abort+0x240>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_DMA_Abort+0x244>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_DMA_Abort+0x248>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <HAL_DMA_Abort+0x24c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	@ (8002f14 <HAL_DMA_Abort+0x250>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <HAL_DMA_Abort+0x254>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <HAL_DMA_Abort+0x258>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <HAL_DMA_Abort+0x25c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <HAL_DMA_Abort+0x260>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	@ (8002f28 <HAL_DMA_Abort+0x264>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <HAL_DMA_Abort+0x268>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <HAL_DMA_Abort+0x26c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	@ (8002f34 <HAL_DMA_Abort+0x270>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d132      	bne.n	8002f38 <HAL_DMA_Abort+0x274>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e031      	b.n	8002f3a <HAL_DMA_Abort+0x276>
 8002ed6:	bf00      	nop
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8
 8002f18:	58025408 	.word	0x58025408
 8002f1c:	5802541c 	.word	0x5802541c
 8002f20:	58025430 	.word	0x58025430
 8002f24:	58025444 	.word	0x58025444
 8002f28:	58025458 	.word	0x58025458
 8002f2c:	5802546c 	.word	0x5802546c
 8002f30:	58025480 	.word	0x58025480
 8002f34:	58025494 	.word	0x58025494
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	@ (8003108 <HAL_DMA_Abort+0x444>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800310c <HAL_DMA_Abort+0x448>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6a      	ldr	r2, [pc, #424]	@ (8003110 <HAL_DMA_Abort+0x44c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a68      	ldr	r2, [pc, #416]	@ (8003114 <HAL_DMA_Abort+0x450>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a67      	ldr	r2, [pc, #412]	@ (8003118 <HAL_DMA_Abort+0x454>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_DMA_Abort+0x458>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a64      	ldr	r2, [pc, #400]	@ (8003120 <HAL_DMA_Abort+0x45c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a62      	ldr	r2, [pc, #392]	@ (8003124 <HAL_DMA_Abort+0x460>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a61      	ldr	r2, [pc, #388]	@ (8003128 <HAL_DMA_Abort+0x464>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	@ (800312c <HAL_DMA_Abort+0x468>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <HAL_DMA_Abort+0x46c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8003134 <HAL_DMA_Abort+0x470>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5b      	ldr	r2, [pc, #364]	@ (8003138 <HAL_DMA_Abort+0x474>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a59      	ldr	r2, [pc, #356]	@ (800313c <HAL_DMA_Abort+0x478>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_DMA_Abort+0x47c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a56      	ldr	r2, [pc, #344]	@ (8003144 <HAL_DMA_Abort+0x480>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <HAL_DMA_Abort+0x33c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e007      	b.n	8003010 <HAL_DMA_Abort+0x34c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003010:	e013      	b.n	800303a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7fe f96d 	bl	80012f0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d90c      	bls.n	800303a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e12d      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e5      	bne.n	8003012 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <HAL_DMA_Abort+0x444>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d04a      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2d      	ldr	r2, [pc, #180]	@ (800310c <HAL_DMA_Abort+0x448>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d045      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2c      	ldr	r2, [pc, #176]	@ (8003110 <HAL_DMA_Abort+0x44c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d040      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2a      	ldr	r2, [pc, #168]	@ (8003114 <HAL_DMA_Abort+0x450>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d03b      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a29      	ldr	r2, [pc, #164]	@ (8003118 <HAL_DMA_Abort+0x454>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d036      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a27      	ldr	r2, [pc, #156]	@ (800311c <HAL_DMA_Abort+0x458>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_DMA_Abort+0x45c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d02c      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a24      	ldr	r2, [pc, #144]	@ (8003124 <HAL_DMA_Abort+0x460>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d027      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a23      	ldr	r2, [pc, #140]	@ (8003128 <HAL_DMA_Abort+0x464>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_DMA_Abort+0x468>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <HAL_DMA_Abort+0x46c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003134 <HAL_DMA_Abort+0x470>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <HAL_DMA_Abort+0x474>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1b      	ldr	r2, [pc, #108]	@ (800313c <HAL_DMA_Abort+0x478>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003140 <HAL_DMA_Abort+0x47c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_DMA_Abort+0x480>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Abort+0x426>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Abort+0x428>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02b      	beq.n	8003148 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	223f      	movs	r2, #63	@ 0x3f
 8003100:	409a      	lsls	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	e02a      	b.n	800315e <HAL_DMA_Abort+0x49a>
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4f      	ldr	r2, [pc, #316]	@ (80032a0 <HAL_DMA_Abort+0x5dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d072      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4d      	ldr	r2, [pc, #308]	@ (80032a4 <HAL_DMA_Abort+0x5e0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d06d      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4c      	ldr	r2, [pc, #304]	@ (80032a8 <HAL_DMA_Abort+0x5e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d068      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4a      	ldr	r2, [pc, #296]	@ (80032ac <HAL_DMA_Abort+0x5e8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d063      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a49      	ldr	r2, [pc, #292]	@ (80032b0 <HAL_DMA_Abort+0x5ec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d05e      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a47      	ldr	r2, [pc, #284]	@ (80032b4 <HAL_DMA_Abort+0x5f0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d059      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a46      	ldr	r2, [pc, #280]	@ (80032b8 <HAL_DMA_Abort+0x5f4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d054      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a44      	ldr	r2, [pc, #272]	@ (80032bc <HAL_DMA_Abort+0x5f8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04f      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a43      	ldr	r2, [pc, #268]	@ (80032c0 <HAL_DMA_Abort+0x5fc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a41      	ldr	r2, [pc, #260]	@ (80032c4 <HAL_DMA_Abort+0x600>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a40      	ldr	r2, [pc, #256]	@ (80032c8 <HAL_DMA_Abort+0x604>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3e      	ldr	r2, [pc, #248]	@ (80032cc <HAL_DMA_Abort+0x608>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3d      	ldr	r2, [pc, #244]	@ (80032d0 <HAL_DMA_Abort+0x60c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_DMA_Abort+0x610>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	@ (80032d8 <HAL_DMA_Abort+0x614>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	@ (80032dc <HAL_DMA_Abort+0x618>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a37      	ldr	r2, [pc, #220]	@ (80032e0 <HAL_DMA_Abort+0x61c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a35      	ldr	r2, [pc, #212]	@ (80032e4 <HAL_DMA_Abort+0x620>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a34      	ldr	r2, [pc, #208]	@ (80032e8 <HAL_DMA_Abort+0x624>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <HAL_DMA_Abort+0x628>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a31      	ldr	r2, [pc, #196]	@ (80032f0 <HAL_DMA_Abort+0x62c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2f      	ldr	r2, [pc, #188]	@ (80032f4 <HAL_DMA_Abort+0x630>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <HAL_DMA_Abort+0x634>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2c      	ldr	r2, [pc, #176]	@ (80032fc <HAL_DMA_Abort+0x638>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Abort+0x58e>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_Abort+0x590>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003260:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003278:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003282:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40020010 	.word	0x40020010
 80032a4:	40020028 	.word	0x40020028
 80032a8:	40020040 	.word	0x40020040
 80032ac:	40020058 	.word	0x40020058
 80032b0:	40020070 	.word	0x40020070
 80032b4:	40020088 	.word	0x40020088
 80032b8:	400200a0 	.word	0x400200a0
 80032bc:	400200b8 	.word	0x400200b8
 80032c0:	40020410 	.word	0x40020410
 80032c4:	40020428 	.word	0x40020428
 80032c8:	40020440 	.word	0x40020440
 80032cc:	40020458 	.word	0x40020458
 80032d0:	40020470 	.word	0x40020470
 80032d4:	40020488 	.word	0x40020488
 80032d8:	400204a0 	.word	0x400204a0
 80032dc:	400204b8 	.word	0x400204b8
 80032e0:	58025408 	.word	0x58025408
 80032e4:	5802541c 	.word	0x5802541c
 80032e8:	58025430 	.word	0x58025430
 80032ec:	58025444 	.word	0x58025444
 80032f0:	58025458 	.word	0x58025458
 80032f4:	5802546c 	.word	0x5802546c
 80032f8:	58025480 	.word	0x58025480
 80032fc:	58025494 	.word	0x58025494

08003300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e237      	b.n	8003782 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d004      	beq.n	8003328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e22c      	b.n	8003782 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_DMA_Abort_IT+0x1a0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5b      	ldr	r2, [pc, #364]	@ (80034a4 <HAL_DMA_Abort_IT+0x1a4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	@ (80034a8 <HAL_DMA_Abort_IT+0x1a8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_DMA_Abort_IT+0x1ac>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a56      	ldr	r2, [pc, #344]	@ (80034b0 <HAL_DMA_Abort_IT+0x1b0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a55      	ldr	r2, [pc, #340]	@ (80034b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a53      	ldr	r2, [pc, #332]	@ (80034b8 <HAL_DMA_Abort_IT+0x1b8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a52      	ldr	r2, [pc, #328]	@ (80034bc <HAL_DMA_Abort_IT+0x1bc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a50      	ldr	r2, [pc, #320]	@ (80034c0 <HAL_DMA_Abort_IT+0x1c0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a4f      	ldr	r2, [pc, #316]	@ (80034c4 <HAL_DMA_Abort_IT+0x1c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a4d      	ldr	r2, [pc, #308]	@ (80034c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4c      	ldr	r2, [pc, #304]	@ (80034cc <HAL_DMA_Abort_IT+0x1cc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	@ (80034d0 <HAL_DMA_Abort_IT+0x1d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a49      	ldr	r2, [pc, #292]	@ (80034d4 <HAL_DMA_Abort_IT+0x1d4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a47      	ldr	r2, [pc, #284]	@ (80034d8 <HAL_DMA_Abort_IT+0x1d8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a46      	ldr	r2, [pc, #280]	@ (80034dc <HAL_DMA_Abort_IT+0x1dc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Abort_IT+0xcc>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_DMA_Abort_IT+0xce>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8086 	beq.w	80034e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2204      	movs	r2, #4
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_DMA_Abort_IT+0x1a0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04a      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	@ (80034a4 <HAL_DMA_Abort_IT+0x1a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d045      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <HAL_DMA_Abort_IT+0x1a8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d040      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	@ (80034ac <HAL_DMA_Abort_IT+0x1ac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03b      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a29      	ldr	r2, [pc, #164]	@ (80034b0 <HAL_DMA_Abort_IT+0x1b0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d036      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a28      	ldr	r2, [pc, #160]	@ (80034b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d031      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_DMA_Abort_IT+0x1b8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02c      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a25      	ldr	r2, [pc, #148]	@ (80034bc <HAL_DMA_Abort_IT+0x1bc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d027      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <HAL_DMA_Abort_IT+0x1c0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <HAL_DMA_Abort_IT+0x1c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01d      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_DMA_Abort_IT+0x1cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_DMA_Abort_IT+0x1d0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1c      	ldr	r2, [pc, #112]	@ (80034d4 <HAL_DMA_Abort_IT+0x1d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_DMA_Abort_IT+0x1d8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_DMA_Abort_IT+0x1dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <HAL_DMA_Abort_IT+0x18e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e178      	b.n	8003780 <HAL_DMA_Abort_IT+0x480>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e16f      	b.n	8003780 <HAL_DMA_Abort_IT+0x480>
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 020e 	bic.w	r2, r2, #14
 80034ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6c      	ldr	r2, [pc, #432]	@ (80036a8 <HAL_DMA_Abort_IT+0x3a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_DMA_Abort_IT+0x3ac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a69      	ldr	r2, [pc, #420]	@ (80036b0 <HAL_DMA_Abort_IT+0x3b0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a68      	ldr	r2, [pc, #416]	@ (80036b4 <HAL_DMA_Abort_IT+0x3b4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a66      	ldr	r2, [pc, #408]	@ (80036b8 <HAL_DMA_Abort_IT+0x3b8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a65      	ldr	r2, [pc, #404]	@ (80036bc <HAL_DMA_Abort_IT+0x3bc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a63      	ldr	r2, [pc, #396]	@ (80036c0 <HAL_DMA_Abort_IT+0x3c0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a62      	ldr	r2, [pc, #392]	@ (80036c4 <HAL_DMA_Abort_IT+0x3c4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a60      	ldr	r2, [pc, #384]	@ (80036c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5f      	ldr	r2, [pc, #380]	@ (80036cc <HAL_DMA_Abort_IT+0x3cc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5d      	ldr	r2, [pc, #372]	@ (80036d0 <HAL_DMA_Abort_IT+0x3d0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5c      	ldr	r2, [pc, #368]	@ (80036d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5a      	ldr	r2, [pc, #360]	@ (80036d8 <HAL_DMA_Abort_IT+0x3d8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a59      	ldr	r2, [pc, #356]	@ (80036dc <HAL_DMA_Abort_IT+0x3dc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a57      	ldr	r2, [pc, #348]	@ (80036e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a56      	ldr	r2, [pc, #344]	@ (80036e4 <HAL_DMA_Abort_IT+0x3e4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <HAL_DMA_Abort_IT+0x2a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e007      	b.n	80035b2 <HAL_DMA_Abort_IT+0x2b2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a3c      	ldr	r2, [pc, #240]	@ (80036a8 <HAL_DMA_Abort_IT+0x3a8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d072      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3a      	ldr	r2, [pc, #232]	@ (80036ac <HAL_DMA_Abort_IT+0x3ac>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d06d      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a39      	ldr	r2, [pc, #228]	@ (80036b0 <HAL_DMA_Abort_IT+0x3b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d068      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a37      	ldr	r2, [pc, #220]	@ (80036b4 <HAL_DMA_Abort_IT+0x3b4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d063      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a36      	ldr	r2, [pc, #216]	@ (80036b8 <HAL_DMA_Abort_IT+0x3b8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d05e      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a34      	ldr	r2, [pc, #208]	@ (80036bc <HAL_DMA_Abort_IT+0x3bc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d059      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a33      	ldr	r2, [pc, #204]	@ (80036c0 <HAL_DMA_Abort_IT+0x3c0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d054      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a31      	ldr	r2, [pc, #196]	@ (80036c4 <HAL_DMA_Abort_IT+0x3c4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04f      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a30      	ldr	r2, [pc, #192]	@ (80036c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2e      	ldr	r2, [pc, #184]	@ (80036cc <HAL_DMA_Abort_IT+0x3cc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2d      	ldr	r2, [pc, #180]	@ (80036d0 <HAL_DMA_Abort_IT+0x3d0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2b      	ldr	r2, [pc, #172]	@ (80036d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <HAL_DMA_Abort_IT+0x3d8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a28      	ldr	r2, [pc, #160]	@ (80036dc <HAL_DMA_Abort_IT+0x3dc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a27      	ldr	r2, [pc, #156]	@ (80036e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a25      	ldr	r2, [pc, #148]	@ (80036e4 <HAL_DMA_Abort_IT+0x3e4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <HAL_DMA_Abort_IT+0x3e8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	@ (80036ec <HAL_DMA_Abort_IT+0x3ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <HAL_DMA_Abort_IT+0x3f0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1f      	ldr	r2, [pc, #124]	@ (80036f4 <HAL_DMA_Abort_IT+0x3f4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <HAL_DMA_Abort_IT+0x3f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_DMA_Abort_IT+0x3fc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <HAL_DMA_Abort_IT+0x400>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	@ (8003704 <HAL_DMA_Abort_IT+0x404>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d132      	bne.n	8003708 <HAL_DMA_Abort_IT+0x408>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e031      	b.n	800370a <HAL_DMA_Abort_IT+0x40a>
 80036a6:	bf00      	nop
 80036a8:	40020010 	.word	0x40020010
 80036ac:	40020028 	.word	0x40020028
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020058 	.word	0x40020058
 80036b8:	40020070 	.word	0x40020070
 80036bc:	40020088 	.word	0x40020088
 80036c0:	400200a0 	.word	0x400200a0
 80036c4:	400200b8 	.word	0x400200b8
 80036c8:	40020410 	.word	0x40020410
 80036cc:	40020428 	.word	0x40020428
 80036d0:	40020440 	.word	0x40020440
 80036d4:	40020458 	.word	0x40020458
 80036d8:	40020470 	.word	0x40020470
 80036dc:	40020488 	.word	0x40020488
 80036e0:	400204a0 	.word	0x400204a0
 80036e4:	400204b8 	.word	0x400204b8
 80036e8:	58025408 	.word	0x58025408
 80036ec:	5802541c 	.word	0x5802541c
 80036f0:	58025430 	.word	0x58025430
 80036f4:	58025444 	.word	0x58025444
 80036f8:	58025458 	.word	0x58025458
 80036fc:	5802546c 	.word	0x5802546c
 8003700:	58025480 	.word	0x58025480
 8003704:	58025494 	.word	0x58025494
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800371c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800373c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800375e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop

0800378c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	@ 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800379a:	4b89      	ldr	r3, [pc, #548]	@ (80039c0 <HAL_GPIO_Init+0x234>)
 800379c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800379e:	e194      	b.n	8003aca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8186 	beq.w	8003ac4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d005      	beq.n	80037d0 <HAL_GPIO_Init+0x44>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d130      	bne.n	8003832 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003806:	2201      	movs	r2, #1
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 0201 	and.w	r2, r3, #1
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d017      	beq.n	800386e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d123      	bne.n	80038c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	08da      	lsrs	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3208      	adds	r2, #8
 8003882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	08da      	lsrs	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3208      	adds	r2, #8
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80e0 	beq.w	8003ac4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003904:	4b2f      	ldr	r3, [pc, #188]	@ (80039c4 <HAL_GPIO_Init+0x238>)
 8003906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800390a:	4a2e      	ldr	r2, [pc, #184]	@ (80039c4 <HAL_GPIO_Init+0x238>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003914:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <HAL_GPIO_Init+0x238>)
 8003916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003922:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <HAL_GPIO_Init+0x23c>)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a20      	ldr	r2, [pc, #128]	@ (80039cc <HAL_GPIO_Init+0x240>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d052      	beq.n	80039f4 <HAL_GPIO_Init+0x268>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1f      	ldr	r2, [pc, #124]	@ (80039d0 <HAL_GPIO_Init+0x244>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d031      	beq.n	80039ba <HAL_GPIO_Init+0x22e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1e      	ldr	r2, [pc, #120]	@ (80039d4 <HAL_GPIO_Init+0x248>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02b      	beq.n	80039b6 <HAL_GPIO_Init+0x22a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <HAL_GPIO_Init+0x24c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d025      	beq.n	80039b2 <HAL_GPIO_Init+0x226>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <HAL_GPIO_Init+0x250>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01f      	beq.n	80039ae <HAL_GPIO_Init+0x222>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <HAL_GPIO_Init+0x254>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d019      	beq.n	80039aa <HAL_GPIO_Init+0x21e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <HAL_GPIO_Init+0x258>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_GPIO_Init+0x21a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_GPIO_Init+0x25c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00d      	beq.n	80039a2 <HAL_GPIO_Init+0x216>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <HAL_GPIO_Init+0x260>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <HAL_GPIO_Init+0x212>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_GPIO_Init+0x264>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_GPIO_Init+0x20e>
 8003996:	2309      	movs	r3, #9
 8003998:	e02d      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 800399a:	230a      	movs	r3, #10
 800399c:	e02b      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 800399e:	2308      	movs	r3, #8
 80039a0:	e029      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039a2:	2307      	movs	r3, #7
 80039a4:	e027      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039a6:	2306      	movs	r3, #6
 80039a8:	e025      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039aa:	2305      	movs	r3, #5
 80039ac:	e023      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039ae:	2304      	movs	r3, #4
 80039b0:	e021      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039b2:	2303      	movs	r3, #3
 80039b4:	e01f      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e01d      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e01b      	b.n	80039f6 <HAL_GPIO_Init+0x26a>
 80039be:	bf00      	nop
 80039c0:	58000080 	.word	0x58000080
 80039c4:	58024400 	.word	0x58024400
 80039c8:	58000400 	.word	0x58000400
 80039cc:	58020000 	.word	0x58020000
 80039d0:	58020400 	.word	0x58020400
 80039d4:	58020800 	.word	0x58020800
 80039d8:	58020c00 	.word	0x58020c00
 80039dc:	58021000 	.word	0x58021000
 80039e0:	58021400 	.word	0x58021400
 80039e4:	58021800 	.word	0x58021800
 80039e8:	58021c00 	.word	0x58021c00
 80039ec:	58022000 	.word	0x58022000
 80039f0:	58022400 	.word	0x58022400
 80039f4:	2300      	movs	r3, #0
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	f002 0203 	and.w	r2, r2, #3
 80039fc:	0092      	lsls	r2, r2, #2
 80039fe:	4093      	lsls	r3, r2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a06:	4938      	ldr	r1, [pc, #224]	@ (8003ae8 <HAL_GPIO_Init+0x35c>)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f ae63 	bne.w	80037a0 <HAL_GPIO_Init+0x14>
  }
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	3724      	adds	r7, #36	@ 0x24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	58000400 	.word	0x58000400

08003aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
 8003af8:	4613      	mov	r3, r2
 8003afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003afc:	787b      	ldrb	r3, [r7, #1]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b08:	e003      	b.n	8003b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	041a      	lsls	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	619a      	str	r2, [r3, #24]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b30:	887a      	ldrh	r2, [r7, #2]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	041a      	lsls	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	43d9      	mvns	r1, r3
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	400b      	ands	r3, r1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	619a      	str	r2, [r3, #24]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f804 	bl	8003b86 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ba4:	4b19      	ldr	r3, [pc, #100]	@ (8003c0c <HAL_PWREx_ConfigSupply+0x70>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d00a      	beq.n	8003bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bb0:	4b16      	ldr	r3, [pc, #88]	@ (8003c0c <HAL_PWREx_ConfigSupply+0x70>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e01f      	b.n	8003c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e01d      	b.n	8003c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bc6:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_PWREx_ConfigSupply+0x70>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	490f      	ldr	r1, [pc, #60]	@ (8003c0c <HAL_PWREx_ConfigSupply+0x70>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bd6:	f7fd fb8b 	bl	80012f0 <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bdc:	e009      	b.n	8003bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bde:	f7fd fb87 	bl	80012f0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bec:	d901      	bls.n	8003bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bf2:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_PWREx_ConfigSupply+0x70>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfe:	d1ee      	bne.n	8003bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	58024800 	.word	0x58024800

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	@ 0x30
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f000 bc48 	b.w	80044b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8088 	beq.w	8003d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4b99      	ldr	r3, [pc, #612]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c3c:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d007      	beq.n	8003c58 <HAL_RCC_OscConfig+0x48>
 8003c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4a:	2b18      	cmp	r3, #24
 8003c4c:	d111      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62>
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b8f      	ldr	r3, [pc, #572]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d06d      	beq.n	8003d40 <HAL_RCC_OscConfig+0x130>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d169      	bne.n	8003d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f000 bc21 	b.w	80044b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x7a>
 8003c7c:	4b86      	ldr	r3, [pc, #536]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a85      	ldr	r2, [pc, #532]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e02e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x9c>
 8003c92:	4b81      	ldr	r3, [pc, #516]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a80      	ldr	r2, [pc, #512]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cb6:	4b78      	ldr	r3, [pc, #480]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a77      	ldr	r2, [pc, #476]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b75      	ldr	r3, [pc, #468]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a74      	ldr	r2, [pc, #464]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd8>
 8003cd0:	4b71      	ldr	r3, [pc, #452]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a70      	ldr	r2, [pc, #448]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6d      	ldr	r2, [pc, #436]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fafe 	bl	80012f0 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd fafa 	bl	80012f0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e3d4      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d0a:	4b63      	ldr	r3, [pc, #396]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd faea 	bl	80012f0 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd fae6 	bl	80012f0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	@ 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e3c0      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d32:	4b59      	ldr	r3, [pc, #356]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x110>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80ca 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d50:	4b51      	ldr	r3, [pc, #324]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_RCC_OscConfig+0x166>
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2b18      	cmp	r3, #24
 8003d6a:	d156      	bne.n	8003e1a <HAL_RCC_OscConfig+0x20a>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d151      	bne.n	8003e1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d76:	4b48      	ldr	r3, [pc, #288]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e392      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d8e:	4b42      	ldr	r3, [pc, #264]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0219 	bic.w	r2, r3, #25
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	493f      	ldr	r1, [pc, #252]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd faa6 	bl	80012f0 <HAL_GetTick>
 8003da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fd faa2 	bl	80012f0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e37c      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dba:	4b37      	ldr	r3, [pc, #220]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	f7fd fac3 	bl	8001350 <HAL_GetREVID>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d817      	bhi.n	8003e04 <HAL_RCC_OscConfig+0x1f4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	d108      	bne.n	8003dee <HAL_RCC_OscConfig+0x1de>
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003de4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dec:	e07a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dee:	4b2a      	ldr	r3, [pc, #168]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	4926      	ldr	r1, [pc, #152]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e02:	e06f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e04:	4b24      	ldr	r3, [pc, #144]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	4921      	ldr	r1, [pc, #132]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e18:	e064      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d047      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e22:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 0219 	bic.w	r2, r3, #25
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	491a      	ldr	r1, [pc, #104]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd fa5c 	bl	80012f0 <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fd fa58 	bl	80012f0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e332      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e4e:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	f7fd fa79 	bl	8001350 <HAL_GetREVID>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d819      	bhi.n	8003e9c <HAL_RCC_OscConfig+0x28c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d108      	bne.n	8003e82 <HAL_RCC_OscConfig+0x272>
 8003e70:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e78:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7e:	6053      	str	r3, [r2, #4]
 8003e80:	e030      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	031b      	lsls	r3, r3, #12
 8003e90:	4901      	ldr	r1, [pc, #4]	@ (8003e98 <HAL_RCC_OscConfig+0x288>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
 8003e96:	e025      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	4997      	ldr	r1, [pc, #604]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
 8003eb0:	e018      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb2:	4b95      	ldr	r3, [pc, #596]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a94      	ldr	r2, [pc, #592]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fa17 	bl	80012f0 <HAL_GetTick>
 8003ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7fd fa13 	bl	80012f0 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e2ed      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ed8:	4b8b      	ldr	r3, [pc, #556]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a9 	beq.w	8004044 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef2:	4b85      	ldr	r3, [pc, #532]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003efa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003efc:	4b82      	ldr	r3, [pc, #520]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d007      	beq.n	8003f18 <HAL_RCC_OscConfig+0x308>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b18      	cmp	r3, #24
 8003f0c:	d13a      	bne.n	8003f84 <HAL_RCC_OscConfig+0x374>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d135      	bne.n	8003f84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f18:	4b7b      	ldr	r3, [pc, #492]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x320>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	2b80      	cmp	r3, #128	@ 0x80
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e2c1      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f30:	f7fd fa0e 	bl	8001350 <HAL_GetREVID>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d817      	bhi.n	8003f6e <HAL_RCC_OscConfig+0x35e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d108      	bne.n	8003f58 <HAL_RCC_OscConfig+0x348>
 8003f46:	4b70      	ldr	r3, [pc, #448]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f4e:	4a6e      	ldr	r2, [pc, #440]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f56:	e075      	b.n	8004044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f58:	4b6b      	ldr	r3, [pc, #428]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	069b      	lsls	r3, r3, #26
 8003f66:	4968      	ldr	r1, [pc, #416]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f6c:	e06a      	b.n	8004044 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f6e:	4b66      	ldr	r3, [pc, #408]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	4962      	ldr	r1, [pc, #392]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f82:	e05f      	b.n	8004044 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d042      	beq.n	8004012 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5d      	ldr	r2, [pc, #372]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd f9aa 	bl	80012f0 <HAL_GetTick>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003fa0:	f7fd f9a6 	bl	80012f0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e280      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fb2:	4b55      	ldr	r3, [pc, #340]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fbe:	f7fd f9c7 	bl	8001350 <HAL_GetREVID>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d817      	bhi.n	8003ffc <HAL_RCC_OscConfig+0x3ec>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d108      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3d6>
 8003fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003fde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fe2:	6053      	str	r3, [r2, #4]
 8003fe4:	e02e      	b.n	8004044 <HAL_RCC_OscConfig+0x434>
 8003fe6:	4b48      	ldr	r3, [pc, #288]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	069b      	lsls	r3, r3, #26
 8003ff4:	4944      	ldr	r1, [pc, #272]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
 8003ffa:	e023      	b.n	8004044 <HAL_RCC_OscConfig+0x434>
 8003ffc:	4b42      	ldr	r3, [pc, #264]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	493f      	ldr	r1, [pc, #252]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 800400c:	4313      	orrs	r3, r2
 800400e:	60cb      	str	r3, [r1, #12]
 8004010:	e018      	b.n	8004044 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004012:	4b3d      	ldr	r3, [pc, #244]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3c      	ldr	r2, [pc, #240]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8004018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800401c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fd f967 	bl	80012f0 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004026:	f7fd f963 	bl	80012f0 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e23d      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004038:	4b33      	ldr	r3, [pc, #204]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d036      	beq.n	80040be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d019      	beq.n	800408c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004058:	4b2b      	ldr	r3, [pc, #172]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd f944 	bl	80012f0 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406c:	f7fd f940 	bl	80012f0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e21a      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800407e:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x45c>
 800408a:	e018      	b.n	80040be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408c:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 800408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004090:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd f92a 	bl	80012f0 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a0:	f7fd f926 	bl	80012f0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e200      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d039      	beq.n	800413e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01c      	beq.n	800410c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 80040d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040de:	f7fd f907 	bl	80012f0 <HAL_GetTick>
 80040e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e6:	f7fd f903 	bl	80012f0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1dd      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040f8:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <HAL_RCC_OscConfig+0x4f8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
 8004104:	e01b      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
 8004106:	bf00      	nop
 8004108:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800410c:	4b9b      	ldr	r3, [pc, #620]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a9a      	ldr	r2, [pc, #616]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004116:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004118:	f7fd f8ea 	bl	80012f0 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004120:	f7fd f8e6 	bl	80012f0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1c0      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004132:	4b92      	ldr	r3, [pc, #584]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8081 	beq.w	800424e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800414c:	4b8c      	ldr	r3, [pc, #560]	@ (8004380 <HAL_RCC_OscConfig+0x770>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a8b      	ldr	r2, [pc, #556]	@ (8004380 <HAL_RCC_OscConfig+0x770>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004158:	f7fd f8ca 	bl	80012f0 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fd f8c6 	bl	80012f0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	@ 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1a0      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004172:	4b83      	ldr	r3, [pc, #524]	@ (8004380 <HAL_RCC_OscConfig+0x770>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d106      	bne.n	8004194 <HAL_RCC_OscConfig+0x584>
 8004186:	4b7d      	ldr	r3, [pc, #500]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	4a7c      	ldr	r2, [pc, #496]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	@ 0x70
 8004192:	e02d      	b.n	80041f0 <HAL_RCC_OscConfig+0x5e0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x5a6>
 800419c:	4b77      	ldr	r3, [pc, #476]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a76      	ldr	r2, [pc, #472]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	4b74      	ldr	r3, [pc, #464]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a73      	ldr	r2, [pc, #460]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041ae:	f023 0304 	bic.w	r3, r3, #4
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b4:	e01c      	b.n	80041f0 <HAL_RCC_OscConfig+0x5e0>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5c8>
 80041be:	4b6f      	ldr	r3, [pc, #444]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	4a6e      	ldr	r2, [pc, #440]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041c4:	f043 0304 	orr.w	r3, r3, #4
 80041c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ca:	4b6c      	ldr	r3, [pc, #432]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ce:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0x5e0>
 80041d8:	4b68      	ldr	r3, [pc, #416]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	4a67      	ldr	r2, [pc, #412]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e4:	4b65      	ldr	r3, [pc, #404]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e8:	4a64      	ldr	r2, [pc, #400]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80041ea:	f023 0304 	bic.w	r3, r3, #4
 80041ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d015      	beq.n	8004224 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd f87a 	bl	80012f0 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fd f876 	bl	80012f0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e14e      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004216:	4b59      	ldr	r3, [pc, #356]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0ee      	beq.n	8004200 <HAL_RCC_OscConfig+0x5f0>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd f864 	bl	80012f0 <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800422a:	e00a      	b.n	8004242 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fd f860 	bl	80012f0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e138      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004242:	4b4e      	ldr	r3, [pc, #312]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ee      	bne.n	800422c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 812d 	beq.w	80044b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004258:	4b48      	ldr	r3, [pc, #288]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004260:	2b18      	cmp	r3, #24
 8004262:	f000 80bd 	beq.w	80043e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	2b02      	cmp	r3, #2
 800426c:	f040 809e 	bne.w	80043ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004270:	4b42      	ldr	r3, [pc, #264]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a41      	ldr	r2, [pc, #260]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd f838 	bl	80012f0 <HAL_GetTick>
 8004280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd f834 	bl	80012f0 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e10e      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004296:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a2:	4b36      	ldr	r3, [pc, #216]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042a6:	4b37      	ldr	r3, [pc, #220]	@ (8004384 <HAL_RCC_OscConfig+0x774>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	430a      	orrs	r2, r1
 80042b6:	4931      	ldr	r1, [pc, #196]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c0:	3b01      	subs	r3, #1
 80042c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ca:	3b01      	subs	r3, #1
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	3b01      	subs	r3, #1
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	3b01      	subs	r3, #1
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042ec:	4923      	ldr	r1, [pc, #140]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80042f2:	4b22      	ldr	r3, [pc, #136]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	4a21      	ldr	r2, [pc, #132]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fe:	4b1f      	ldr	r3, [pc, #124]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004302:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <HAL_RCC_OscConfig+0x778>)
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800430a:	00d2      	lsls	r2, r2, #3
 800430c:	491b      	ldr	r1, [pc, #108]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	f023 020c 	bic.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	4917      	ldr	r1, [pc, #92]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004324:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	f023 0202 	bic.w	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	4912      	ldr	r1, [pc, #72]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004336:	4b11      	ldr	r3, [pc, #68]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	4a10      	ldr	r2, [pc, #64]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004346:	4a0d      	ldr	r2, [pc, #52]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800435a:	4b08      	ldr	r3, [pc, #32]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	4a07      	ldr	r2, [pc, #28]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004366:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a04      	ldr	r2, [pc, #16]	@ (800437c <HAL_RCC_OscConfig+0x76c>)
 800436c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fc ffbd 	bl	80012f0 <HAL_GetTick>
 8004376:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004378:	e011      	b.n	800439e <HAL_RCC_OscConfig+0x78e>
 800437a:	bf00      	nop
 800437c:	58024400 	.word	0x58024400
 8004380:	58024800 	.word	0x58024800
 8004384:	fffffc0c 	.word	0xfffffc0c
 8004388:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fc ffb0 	bl	80012f0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e08a      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x77c>
 80043aa:	e082      	b.n	80044b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a42      	ldr	r2, [pc, #264]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fc ff9a 	bl	80012f0 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fc ff96 	bl	80012f0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e070      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043d2:	4b3a      	ldr	r3, [pc, #232]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x7b0>
 80043de:	e068      	b.n	80044b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043e0:	4b36      	ldr	r3, [pc, #216]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043e6:	4b35      	ldr	r3, [pc, #212]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d031      	beq.n	8004458 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f003 0203 	and.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d12a      	bne.n	8004458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d122      	bne.n	8004458 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d11a      	bne.n	8004458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	0a5b      	lsrs	r3, r3, #9
 8004426:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d111      	bne.n	8004458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d108      	bne.n	8004458 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	0e1b      	lsrs	r3, r3, #24
 800444a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e02b      	b.n	80044b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800445c:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 800445e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004466:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d01f      	beq.n	80044b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004472:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	4a11      	ldr	r2, [pc, #68]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800447e:	f7fc ff37 	bl	80012f0 <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004484:	bf00      	nop
 8004486:	f7fc ff33 	bl	80012f0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	4293      	cmp	r3, r2
 8004490:	d0f9      	beq.n	8004486 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 8004494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004496:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <HAL_RCC_OscConfig+0x8b0>)
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800449e:	00d2      	lsls	r2, r2, #3
 80044a0:	4906      	ldr	r1, [pc, #24]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80044a6:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <HAL_RCC_OscConfig+0x8ac>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3730      	adds	r7, #48	@ 0x30
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	58024400 	.word	0x58024400
 80044c0:	ffff0007 	.word	0xffff0007

080044c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e19c      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d910      	bls.n	8004508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b87      	ldr	r3, [pc, #540]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 020f 	bic.w	r2, r3, #15
 80044ee:	4985      	ldr	r1, [pc, #532]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b83      	ldr	r3, [pc, #524]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e184      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	4b7b      	ldr	r3, [pc, #492]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004520:	429a      	cmp	r2, r3
 8004522:	d908      	bls.n	8004536 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004524:	4b78      	ldr	r3, [pc, #480]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4975      	ldr	r1, [pc, #468]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004532:	4313      	orrs	r3, r2
 8004534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	4b70      	ldr	r3, [pc, #448]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800454e:	429a      	cmp	r2, r3
 8004550:	d908      	bls.n	8004564 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004552:	4b6d      	ldr	r3, [pc, #436]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	496a      	ldr	r1, [pc, #424]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004560:	4313      	orrs	r3, r2
 8004562:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	4b64      	ldr	r3, [pc, #400]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800457c:	429a      	cmp	r2, r3
 800457e:	d908      	bls.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004580:	4b61      	ldr	r3, [pc, #388]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	495e      	ldr	r1, [pc, #376]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 800458e:	4313      	orrs	r3, r2
 8004590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	4b59      	ldr	r3, [pc, #356]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d908      	bls.n	80045c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045ae:	4b56      	ldr	r3, [pc, #344]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4953      	ldr	r1, [pc, #332]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	429a      	cmp	r2, r3
 80045da:	d908      	bls.n	80045ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f023 020f 	bic.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4947      	ldr	r1, [pc, #284]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d055      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045fa:	4b43      	ldr	r3, [pc, #268]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4940      	ldr	r1, [pc, #256]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004608:	4313      	orrs	r3, r2
 800460a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d107      	bne.n	8004624 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004614:	4b3c      	ldr	r3, [pc, #240]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d121      	bne.n	8004664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0f6      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d107      	bne.n	800463c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800462c:	4b36      	ldr	r3, [pc, #216]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d115      	bne.n	8004664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0ea      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004644:	4b30      	ldr	r3, [pc, #192]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0de      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004654:	4b2c      	ldr	r3, [pc, #176]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0d6      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004664:	4b28      	ldr	r3, [pc, #160]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f023 0207 	bic.w	r2, r3, #7
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4925      	ldr	r1, [pc, #148]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004672:	4313      	orrs	r3, r2
 8004674:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fc fe3b 	bl	80012f0 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467c:	e00a      	b.n	8004694 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467e:	f7fc fe37 	bl	80012f0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0be      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004694:	4b1c      	ldr	r3, [pc, #112]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d1eb      	bne.n	800467e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	429a      	cmp	r2, r3
 80046c0:	d208      	bcs.n	80046d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c2:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f023 020f 	bic.w	r2, r3, #15
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	490e      	ldr	r1, [pc, #56]	@ (8004708 <HAL_RCC_ClockConfig+0x244>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d214      	bcs.n	800470c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 020f 	bic.w	r2, r3, #15
 80046ea:	4906      	ldr	r1, [pc, #24]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <HAL_RCC_ClockConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e086      	b.n	8004812 <HAL_RCC_ClockConfig+0x34e>
 8004704:	52002000 	.word	0x52002000
 8004708:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	4b3f      	ldr	r3, [pc, #252]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004724:	429a      	cmp	r2, r3
 8004726:	d208      	bcs.n	800473a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004728:	4b3c      	ldr	r3, [pc, #240]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	4939      	ldr	r1, [pc, #228]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 8004736:	4313      	orrs	r3, r2
 8004738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	4b34      	ldr	r3, [pc, #208]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004752:	429a      	cmp	r2, r3
 8004754:	d208      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004756:	4b31      	ldr	r3, [pc, #196]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	492e      	ldr	r1, [pc, #184]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 8004764:	4313      	orrs	r3, r2
 8004766:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	4b28      	ldr	r3, [pc, #160]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004780:	429a      	cmp	r2, r3
 8004782:	d208      	bcs.n	8004796 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004784:	4b25      	ldr	r3, [pc, #148]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	4922      	ldr	r1, [pc, #136]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 8004792:	4313      	orrs	r3, r2
 8004794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d208      	bcs.n	80047c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047b2:	4b1a      	ldr	r3, [pc, #104]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4917      	ldr	r1, [pc, #92]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047c4:	f000 f834 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b14      	ldr	r3, [pc, #80]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	4912      	ldr	r1, [pc, #72]	@ (8004820 <HAL_RCC_ClockConfig+0x35c>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047e2:	4b0e      	ldr	r3, [pc, #56]	@ (800481c <HAL_RCC_ClockConfig+0x358>)
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004820 <HAL_RCC_ClockConfig+0x35c>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004824 <HAL_RCC_ClockConfig+0x360>)
 80047fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004828 <HAL_RCC_ClockConfig+0x364>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <HAL_RCC_ClockConfig+0x368>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fc fd28 	bl	800125c <HAL_InitTick>
 800480c:	4603      	mov	r3, r0
 800480e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	58024400 	.word	0x58024400
 8004820:	0800baa0 	.word	0x0800baa0
 8004824:	24000004 	.word	0x24000004
 8004828:	24000000 	.word	0x24000000
 800482c:	24000008 	.word	0x24000008

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	@ 0x24
 8004834:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004836:	4bb3      	ldr	r3, [pc, #716]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800483e:	2b18      	cmp	r3, #24
 8004840:	f200 8155 	bhi.w	8004aee <HAL_RCC_GetSysClockFreq+0x2be>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	080048b1 	.word	0x080048b1
 8004850:	08004aef 	.word	0x08004aef
 8004854:	08004aef 	.word	0x08004aef
 8004858:	08004aef 	.word	0x08004aef
 800485c:	08004aef 	.word	0x08004aef
 8004860:	08004aef 	.word	0x08004aef
 8004864:	08004aef 	.word	0x08004aef
 8004868:	08004aef 	.word	0x08004aef
 800486c:	080048d7 	.word	0x080048d7
 8004870:	08004aef 	.word	0x08004aef
 8004874:	08004aef 	.word	0x08004aef
 8004878:	08004aef 	.word	0x08004aef
 800487c:	08004aef 	.word	0x08004aef
 8004880:	08004aef 	.word	0x08004aef
 8004884:	08004aef 	.word	0x08004aef
 8004888:	08004aef 	.word	0x08004aef
 800488c:	080048dd 	.word	0x080048dd
 8004890:	08004aef 	.word	0x08004aef
 8004894:	08004aef 	.word	0x08004aef
 8004898:	08004aef 	.word	0x08004aef
 800489c:	08004aef 	.word	0x08004aef
 80048a0:	08004aef 	.word	0x08004aef
 80048a4:	08004aef 	.word	0x08004aef
 80048a8:	08004aef 	.word	0x08004aef
 80048ac:	080048e3 	.word	0x080048e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b0:	4b94      	ldr	r3, [pc, #592]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048bc:	4b91      	ldr	r3, [pc, #580]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	08db      	lsrs	r3, r3, #3
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	4a90      	ldr	r2, [pc, #576]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80048ce:	e111      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048d2:	61bb      	str	r3, [r7, #24]
      break;
 80048d4:	e10e      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048d6:	4b8d      	ldr	r3, [pc, #564]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048d8:	61bb      	str	r3, [r7, #24]
      break;
 80048da:	e10b      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048de:	61bb      	str	r3, [r7, #24]
      break;
 80048e0:	e108      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048e2:	4b88      	ldr	r3, [pc, #544]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048ec:	4b85      	ldr	r3, [pc, #532]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048f8:	4b82      	ldr	r3, [pc, #520]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004902:	4b80      	ldr	r3, [pc, #512]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004906:	08db      	lsrs	r3, r3, #3
 8004908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80e1 	beq.w	8004ae8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b02      	cmp	r3, #2
 800492a:	f000 8083 	beq.w	8004a34 <HAL_RCC_GetSysClockFreq+0x204>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b02      	cmp	r3, #2
 8004932:	f200 80a1 	bhi.w	8004a78 <HAL_RCC_GetSysClockFreq+0x248>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x114>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d056      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004942:	e099      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004944:	4b6f      	ldr	r3, [pc, #444]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02d      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004950:	4b6c      	ldr	r3, [pc, #432]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	4a6b      	ldr	r2, [pc, #428]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b62      	ldr	r3, [pc, #392]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a02 	vldr	s12, [r7, #8]
 800498e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80049aa:	e087      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004b18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b51      	ldr	r3, [pc, #324]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80049d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049ee:	e065      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b40      	ldr	r3, [pc, #256]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a32:	e043      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004b20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a76:	e021      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004aba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004abc:	4b11      	ldr	r3, [pc, #68]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae0:	ee17 3a90 	vmov	r3, s15
 8004ae4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ae6:	e005      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
      break;
 8004aec:	e002      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004aee:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004af0:	61bb      	str	r3, [r7, #24]
      break;
 8004af2:	bf00      	nop
  }

  return sysclockfreq;
 8004af4:	69bb      	ldr	r3, [r7, #24]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3724      	adds	r7, #36	@ 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400
 8004b08:	03d09000 	.word	0x03d09000
 8004b0c:	003d0900 	.word	0x003d0900
 8004b10:	007a1200 	.word	0x007a1200
 8004b14:	46000000 	.word	0x46000000
 8004b18:	4c742400 	.word	0x4c742400
 8004b1c:	4a742400 	.word	0x4a742400
 8004b20:	4af42400 	.word	0x4af42400

08004b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b2a:	f7ff fe81 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	490f      	ldr	r1, [pc, #60]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b3c:	5ccb      	ldrb	r3, [r1, r3]
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b48:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b52:	5cd3      	ldrb	r3, [r2, r3]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5e:	4a07      	ldr	r2, [pc, #28]	@ (8004b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b62:	4a07      	ldr	r2, [pc, #28]	@ (8004b80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b68:	4b04      	ldr	r3, [pc, #16]	@ (8004b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	58024400 	.word	0x58024400
 8004b78:	0800baa0 	.word	0x0800baa0
 8004b7c:	24000004 	.word	0x24000004
 8004b80:	24000000 	.word	0x24000000

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b88:	f7ff ffcc 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4904      	ldr	r1, [pc, #16]	@ (8004bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	0800baa0 	.word	0x0800baa0

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004bb4:	f7ff ffb6 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	0800baa0 	.word	0x0800baa0

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b0ca      	sub	sp, #296	@ 0x128
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004c00:	2500      	movs	r5, #0
 8004c02:	ea54 0305 	orrs.w	r3, r4, r5
 8004c06:	d049      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c12:	d02f      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004c14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c18:	d828      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c1e:	d01a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c24:	d822      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2e:	d007      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c30:	e01c      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c32:	4bb8      	ldr	r3, [pc, #736]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	4ab7      	ldr	r2, [pc, #732]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c3e:	e01a      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	3308      	adds	r3, #8
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f002 fb61 	bl	8007310 <RCCEx_PLL2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c54:	e00f      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	3328      	adds	r3, #40	@ 0x28
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 fc08 	bl	8007474 <RCCEx_PLL3_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c6a:	e004      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c7e:	4ba5      	ldr	r3, [pc, #660]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c8c:	4aa1      	ldr	r2, [pc, #644]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c92:	e003      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ca8:	f04f 0900 	mov.w	r9, #0
 8004cac:	ea58 0309 	orrs.w	r3, r8, r9
 8004cb0:	d047      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d82a      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cd9 	.word	0x08004cd9
 8004cc8:	08004ce7 	.word	0x08004ce7
 8004ccc:	08004cfd 	.word	0x08004cfd
 8004cd0:	08004d1b 	.word	0x08004d1b
 8004cd4:	08004d1b 	.word	0x08004d1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd8:	4b8e      	ldr	r3, [pc, #568]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	4a8d      	ldr	r2, [pc, #564]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ce4:	e01a      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cea:	3308      	adds	r3, #8
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f002 fb0e 	bl	8007310 <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d00:	3328      	adds	r3, #40	@ 0x28
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f002 fbb5 	bl	8007474 <RCCEx_PLL3_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d10:	e004      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d24:	4b7b      	ldr	r3, [pc, #492]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d28:	f023 0107 	bic.w	r1, r3, #7
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	4a78      	ldr	r2, [pc, #480]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d38:	e003      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004d4e:	f04f 0b00 	mov.w	fp, #0
 8004d52:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d56:	d04c      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d62:	d030      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d68:	d829      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d6c:	d02d      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d70:	d825      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d018      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d76:	2b80      	cmp	r3, #128	@ 0x80
 8004d78:	d821      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d7e:	2b40      	cmp	r3, #64	@ 0x40
 8004d80:	d007      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d82:	e01c      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b63      	ldr	r3, [pc, #396]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	4a62      	ldr	r2, [pc, #392]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d90:	e01c      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	3308      	adds	r3, #8
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f002 fab8 	bl	8007310 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004da6:	e011      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dac:	3328      	adds	r3, #40	@ 0x28
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 fb5f 	bl	8007474 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de2:	4a4c      	ldr	r2, [pc, #304]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004de8:	e003      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004dfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004e08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	d053      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1e:	d035      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004e20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e24:	d82e      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e2a:	d031      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004e2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e30:	d828      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e36:	d01a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e3c:	d822      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e46:	d007      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004e48:	e01c      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4a:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4a31      	ldr	r2, [pc, #196]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e56:	e01c      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f002 fa55 	bl	8007310 <RCCEx_PLL2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e6c:	e011      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	3328      	adds	r3, #40	@ 0x28
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f002 fafc 	bl	8007474 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e82:	e006      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e8a:	e002      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eb0:	e003      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ed0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	d056      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ee2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee6:	d038      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eec:	d831      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef2:	d034      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ef4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef8:	d82b      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efe:	d01d      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f04:	d825      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f10:	e01f      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4ba2      	ldr	r3, [pc, #648]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4aa1      	ldr	r2, [pc, #644]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f24:	e01c      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 f9ee 	bl	8007310 <RCCEx_PLL2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f3a:	e011      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f40:	3328      	adds	r3, #40	@ 0x28
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 fa95 	bl	8007474 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f50:	e006      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f68:	4b8e      	ldr	r3, [pc, #568]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f78:	4a8a      	ldr	r2, [pc, #552]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7e:	e003      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d03a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fae:	2b30      	cmp	r3, #48	@ 0x30
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004fb2:	2b30      	cmp	r3, #48	@ 0x30
 8004fb4:	d819      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d815      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d019      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d111      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc6:	4b77      	ldr	r3, [pc, #476]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	4a76      	ldr	r2, [pc, #472]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fd2:	e011      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f002 f997 	bl	8007310 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ff0:	e002      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005000:	4b68      	ldr	r3, [pc, #416]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005004:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500e:	4a65      	ldr	r2, [pc, #404]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005010:	430b      	orrs	r3, r1
 8005012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800502a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005034:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005038:	460b      	mov	r3, r1
 800503a:	4313      	orrs	r3, r2
 800503c:	d051      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005048:	d035      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800504a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800504e:	d82e      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005054:	d031      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800505a:	d828      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800505c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005060:	d01a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005066:	d822      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005070:	d007      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005072:	e01c      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005074:	4b4b      	ldr	r3, [pc, #300]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	4a4a      	ldr	r2, [pc, #296]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800507a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005080:	e01c      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	3308      	adds	r3, #8
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f002 f940 	bl	8007310 <RCCEx_PLL2_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005096:	e011      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509c:	3328      	adds	r3, #40	@ 0x28
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f002 f9e7 	bl	8007474 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80050ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050c4:	4b37      	ldr	r3, [pc, #220]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d2:	4a34      	ldr	r2, [pc, #208]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80050d8:	e003      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050f2:	2300      	movs	r3, #0
 80050f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80050fc:	460b      	mov	r3, r1
 80050fe:	4313      	orrs	r3, r2
 8005100:	d056      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800510c:	d033      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800510e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005112:	d82c      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005118:	d02f      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800511a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800511e:	d826      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005120:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005124:	d02b      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800512a:	d820      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800512c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005130:	d012      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005136:	d81a      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d022      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005140:	d115      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005146:	3308      	adds	r3, #8
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f002 f8e0 	bl	8007310 <RCCEx_PLL2_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005156:	e015      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	3328      	adds	r3, #40	@ 0x28
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f002 f987 	bl	8007474 <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800516c:	e00a      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005174:	e006      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005176:	bf00      	nop
 8005178:	e004      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005190:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800519a:	4a02      	ldr	r2, [pc, #8]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800519c:	430b      	orrs	r3, r1
 800519e:	6513      	str	r3, [r2, #80]	@ 0x50
 80051a0:	e006      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d055      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051dc:	d033      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80051de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e2:	d82c      	bhi.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e8:	d02f      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d826      	bhi.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f4:	d02b      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80051f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051fa:	d820      	bhi.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005200:	d012      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005206:	d81a      	bhi.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d022      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800520c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005210:	d115      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	3308      	adds	r3, #8
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f002 f878 	bl	8007310 <RCCEx_PLL2_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005226:	e015      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	3328      	adds	r3, #40	@ 0x28
 800522e:	2101      	movs	r1, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f002 f91f 	bl	8007474 <RCCEx_PLL3_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800523c:	e00a      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005246:	bf00      	nop
 8005248:	e004      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800525c:	4ba3      	ldr	r3, [pc, #652]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005260:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800526c:	4a9f      	ldr	r2, [pc, #636]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6593      	str	r3, [r2, #88]	@ 0x58
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800527c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800528c:	2300      	movs	r3, #0
 800528e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	d037      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a6:	d00e      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ac:	d816      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80052b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b6:	d111      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b8:	4b8c      	ldr	r3, [pc, #560]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	4a8b      	ldr	r2, [pc, #556]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052c4:	e00f      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ca:	3308      	adds	r3, #8
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 f81e 	bl	8007310 <RCCEx_PLL2_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80052e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052ee:	4b7f      	ldr	r3, [pc, #508]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a7b      	ldr	r2, [pc, #492]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052fe:	430b      	orrs	r3, r1
 8005300:	6513      	str	r3, [r2, #80]	@ 0x50
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800531c:	2300      	movs	r3, #0
 800531e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005322:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005326:	460b      	mov	r3, r1
 8005328:	4313      	orrs	r3, r2
 800532a:	d039      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005332:	2b03      	cmp	r3, #3
 8005334:	d81c      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005379 	.word	0x08005379
 8005340:	0800534d 	.word	0x0800534d
 8005344:	0800535b 	.word	0x0800535b
 8005348:	08005379 	.word	0x08005379
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534c:	4b67      	ldr	r3, [pc, #412]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	4a66      	ldr	r2, [pc, #408]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005358:	e00f      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	3308      	adds	r3, #8
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f001 ffd4 	bl	8007310 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800536e:	e004      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005382:	4b5a      	ldr	r3, [pc, #360]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	f023 0103 	bic.w	r1, r3, #3
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005390:	4a56      	ldr	r2, [pc, #344]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005392:	430b      	orrs	r3, r1
 8005394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005396:	e003      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053ba:	460b      	mov	r3, r1
 80053bc:	4313      	orrs	r3, r2
 80053be:	f000 809f 	beq.w	8005500 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c2:	4b4b      	ldr	r3, [pc, #300]	@ (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a4a      	ldr	r2, [pc, #296]	@ (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ce:	f7fb ff8f 	bl	80012f0 <HAL_GetTick>
 80053d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d6:	e00b      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d8:	f7fb ff8a 	bl	80012f0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b64      	cmp	r3, #100	@ 0x64
 80053e6:	d903      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f0:	4b3f      	ldr	r3, [pc, #252]	@ (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ed      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80053fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005400:	2b00      	cmp	r3, #0
 8005402:	d179      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005404:	4b39      	ldr	r3, [pc, #228]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005406:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005410:	4053      	eors	r3, r2
 8005412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005416:	2b00      	cmp	r3, #0
 8005418:	d015      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800541a:	4b34      	ldr	r3, [pc, #208]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005422:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005426:	4b31      	ldr	r3, [pc, #196]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	4a30      	ldr	r2, [pc, #192]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005430:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005432:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005436:	4a2d      	ldr	r2, [pc, #180]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800543c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800543e:	4a2b      	ldr	r2, [pc, #172]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005444:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800544e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005452:	d118      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fb ff4c 	bl	80012f0 <HAL_GetTick>
 8005458:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800545c:	e00d      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7fb ff47 	bl	80012f0 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800546e:	429a      	cmp	r2, r3
 8005470:	d903      	bls.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005478:	e005      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800547a:	4b1c      	ldr	r3, [pc, #112]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0eb      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800548a:	2b00      	cmp	r3, #0
 800548c:	d129      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549e:	d10e      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80054a0:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054b0:	091a      	lsrs	r2, r3, #4
 80054b2:	4b10      	ldr	r3, [pc, #64]	@ (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	4a0d      	ldr	r2, [pc, #52]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6113      	str	r3, [r2, #16]
 80054bc:	e005      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80054be:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4a0a      	ldr	r2, [pc, #40]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054c8:	6113      	str	r3, [r2, #16]
 80054ca:	4b08      	ldr	r3, [pc, #32]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054da:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6713      	str	r3, [r2, #112]	@ 0x70
 80054e0:	e00e      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80054ea:	e009      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80054ec:	58024400 	.word	0x58024400
 80054f0:	58024800 	.word	0x58024800
 80054f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f002 0301 	and.w	r3, r2, #1
 800550c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005516:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	f000 8089 	beq.w	8005634 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005528:	2b28      	cmp	r3, #40	@ 0x28
 800552a:	d86b      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800552c:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	0800560d 	.word	0x0800560d
 8005538:	08005605 	.word	0x08005605
 800553c:	08005605 	.word	0x08005605
 8005540:	08005605 	.word	0x08005605
 8005544:	08005605 	.word	0x08005605
 8005548:	08005605 	.word	0x08005605
 800554c:	08005605 	.word	0x08005605
 8005550:	08005605 	.word	0x08005605
 8005554:	080055d9 	.word	0x080055d9
 8005558:	08005605 	.word	0x08005605
 800555c:	08005605 	.word	0x08005605
 8005560:	08005605 	.word	0x08005605
 8005564:	08005605 	.word	0x08005605
 8005568:	08005605 	.word	0x08005605
 800556c:	08005605 	.word	0x08005605
 8005570:	08005605 	.word	0x08005605
 8005574:	080055ef 	.word	0x080055ef
 8005578:	08005605 	.word	0x08005605
 800557c:	08005605 	.word	0x08005605
 8005580:	08005605 	.word	0x08005605
 8005584:	08005605 	.word	0x08005605
 8005588:	08005605 	.word	0x08005605
 800558c:	08005605 	.word	0x08005605
 8005590:	08005605 	.word	0x08005605
 8005594:	0800560d 	.word	0x0800560d
 8005598:	08005605 	.word	0x08005605
 800559c:	08005605 	.word	0x08005605
 80055a0:	08005605 	.word	0x08005605
 80055a4:	08005605 	.word	0x08005605
 80055a8:	08005605 	.word	0x08005605
 80055ac:	08005605 	.word	0x08005605
 80055b0:	08005605 	.word	0x08005605
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	08005605 	.word	0x08005605
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005605 	.word	0x08005605
 80055c4:	08005605 	.word	0x08005605
 80055c8:	08005605 	.word	0x08005605
 80055cc:	08005605 	.word	0x08005605
 80055d0:	08005605 	.word	0x08005605
 80055d4:	0800560d 	.word	0x0800560d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	3308      	adds	r3, #8
 80055de:	2101      	movs	r1, #1
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fe95 	bl	8007310 <RCCEx_PLL2_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055ec:	e00f      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	3328      	adds	r3, #40	@ 0x28
 80055f4:	2101      	movs	r1, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 ff3c 	bl	8007474 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005616:	4bbf      	ldr	r3, [pc, #764]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005624:	4abb      	ldr	r2, [pc, #748]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005626:	430b      	orrs	r3, r1
 8005628:	6553      	str	r3, [r2, #84]	@ 0x54
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 0302 	and.w	r3, r2, #2
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800564a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d041      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800565a:	2b05      	cmp	r3, #5
 800565c:	d824      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800565e:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	080056b1 	.word	0x080056b1
 8005668:	0800567d 	.word	0x0800567d
 800566c:	08005693 	.word	0x08005693
 8005670:	080056b1 	.word	0x080056b1
 8005674:	080056b1 	.word	0x080056b1
 8005678:	080056b1 	.word	0x080056b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005680:	3308      	adds	r3, #8
 8005682:	2101      	movs	r1, #1
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fe43 	bl	8007310 <RCCEx_PLL2_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005690:	e00f      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	3328      	adds	r3, #40	@ 0x28
 8005698:	2101      	movs	r1, #1
 800569a:	4618      	mov	r0, r3
 800569c:	f001 feea 	bl	8007474 <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056a6:	e004      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ae:	e000      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80056b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056ba:	4b96      	ldr	r3, [pc, #600]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056be:	f023 0107 	bic.w	r1, r3, #7
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056c8:	4a92      	ldr	r2, [pc, #584]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056ca:	430b      	orrs	r3, r1
 80056cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ce:	e003      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f002 0304 	and.w	r3, r2, #4
 80056e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d044      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005700:	2b05      	cmp	r3, #5
 8005702:	d825      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005704:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005759 	.word	0x08005759
 8005710:	08005725 	.word	0x08005725
 8005714:	0800573b 	.word	0x0800573b
 8005718:	08005759 	.word	0x08005759
 800571c:	08005759 	.word	0x08005759
 8005720:	08005759 	.word	0x08005759
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005728:	3308      	adds	r3, #8
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fdef 	bl	8007310 <RCCEx_PLL2_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005738:	e00f      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573e:	3328      	adds	r3, #40	@ 0x28
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f001 fe96 	bl	8007474 <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005762:	4b6c      	ldr	r3, [pc, #432]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005766:	f023 0107 	bic.w	r1, r3, #7
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005772:	4a68      	ldr	r2, [pc, #416]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6593      	str	r3, [r2, #88]	@ 0x58
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f002 0320 	and.w	r3, r2, #32
 800578e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d055      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057ae:	d033      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80057b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057b4:	d82c      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ba:	d02f      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c0:	d826      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057c6:	d02b      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80057c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057cc:	d820      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d2:	d012      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80057d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d8:	d81a      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d022      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80057de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057e2:	d115      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	3308      	adds	r3, #8
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fd8f 	bl	8007310 <RCCEx_PLL2_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057f8:	e015      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	3328      	adds	r3, #40	@ 0x28
 8005800:	2102      	movs	r1, #2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fe36 	bl	8007474 <RCCEx_PLL3_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800580e:	e00a      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005816:	e006      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005818:	bf00      	nop
 800581a:	e004      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800581c:	bf00      	nop
 800581e:	e002      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800582e:	4b39      	ldr	r3, [pc, #228]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	4a35      	ldr	r2, [pc, #212]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005840:	430b      	orrs	r3, r1
 8005842:	6553      	str	r3, [r2, #84]	@ 0x54
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800585a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d058      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005876:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800587a:	d033      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800587c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005880:	d82c      	bhi.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005886:	d02f      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588c:	d826      	bhi.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800588e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005892:	d02b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005894:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005898:	d820      	bhi.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800589a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589e:	d012      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a4:	d81a      	bhi.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d022      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ae:	d115      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b4:	3308      	adds	r3, #8
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 fd29 	bl	8007310 <RCCEx_PLL2_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058c4:	e015      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	3328      	adds	r3, #40	@ 0x28
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 fdd0 	bl	8007474 <RCCEx_PLL3_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058da:	e00a      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e2:	e006      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058e4:	bf00      	nop
 80058e6:	e004      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058e8:	bf00      	nop
 80058ea:	e002      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058ec:	bf00      	nop
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80058f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10e      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800590a:	4a02      	ldr	r2, [pc, #8]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800590c:	430b      	orrs	r3, r1
 800590e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005910:	e006      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005912:	bf00      	nop
 8005914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800592c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005936:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d055      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005948:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800594c:	d033      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800594e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005952:	d82c      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005958:	d02f      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800595a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800595e:	d826      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005960:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005964:	d02b      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005966:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800596a:	d820      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800596c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005970:	d012      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005976:	d81a      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d022      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800597c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005980:	d115      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	3308      	adds	r3, #8
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fcc0 	bl	8007310 <RCCEx_PLL2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005996:	e015      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	3328      	adds	r3, #40	@ 0x28
 800599e:	2102      	movs	r1, #2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 fd67 	bl	8007474 <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059ac:	e00a      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059b6:	bf00      	nop
 80059b8:	e004      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059ba:	bf00      	nop
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80059c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059cc:	4ba1      	ldr	r3, [pc, #644]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059dc:	4a9d      	ldr	r2, [pc, #628]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059de:	430b      	orrs	r3, r1
 80059e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059e2:	e003      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f002 0308 	and.w	r3, r2, #8
 80059f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059fc:	2300      	movs	r3, #0
 80059fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d01e      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	3328      	adds	r3, #40	@ 0x28
 8005a20:	2102      	movs	r1, #2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fd26 	bl	8007474 <RCCEx_PLL3_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a34:	4b87      	ldr	r3, [pc, #540]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a44:	4a83      	ldr	r2, [pc, #524]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a46:	430b      	orrs	r3, r1
 8005a48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f002 0310 	and.w	r3, r2, #16
 8005a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a64:	460b      	mov	r3, r1
 8005a66:	4313      	orrs	r3, r2
 8005a68:	d01e      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a76:	d10c      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	3328      	adds	r3, #40	@ 0x28
 8005a7e:	2102      	movs	r1, #2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fcf7 	bl	8007474 <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a92:	4b70      	ldr	r3, [pc, #448]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aa2:	4a6c      	ldr	r2, [pc, #432]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005abe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d03e      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad4:	d022      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005ad6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ada:	d81b      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae4:	d00b      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005ae6:	e015      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aec:	3308      	adds	r3, #8
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fc0d 	bl	8007310 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005afc:	e00f      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2102      	movs	r1, #2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 fcb4 	bl	8007474 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b12:	e004      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b26:	4b4b      	ldr	r3, [pc, #300]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b36:	4a47      	ldr	r2, [pc, #284]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3c:	e003      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b54:	2300      	movs	r3, #0
 8005b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	d03b      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b6e:	d01f      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005b70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b74:	d818      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b80:	d007      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005b82:	e011      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4b33      	ldr	r3, [pc, #204]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	4a32      	ldr	r2, [pc, #200]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b90:	e00f      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	3328      	adds	r3, #40	@ 0x28
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fc6a 	bl	8007474 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ba6:	e004      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bba:	4b26      	ldr	r3, [pc, #152]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bca:	4a22      	ldr	r2, [pc, #136]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005be6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005be8:	2300      	movs	r3, #0
 8005bea:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	d034      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c04:	d007      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005c06:	e011      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c08:	4b12      	ldr	r3, [pc, #72]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	4a11      	ldr	r2, [pc, #68]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c14:	e00e      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fb76 	bl	8007310 <RCCEx_PLL2_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c2a:	e003      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4a:	4a02      	ldr	r2, [pc, #8]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c50:	e006      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c6e:	2300      	movs	r3, #0
 8005c70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d00c      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	3328      	adds	r3, #40	@ 0x28
 8005c82:	2102      	movs	r1, #2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fbf5 	bl	8007474 <RCCEx_PLL3_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ca2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ca8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005cac:	460b      	mov	r3, r1
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	d038      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cbe:	d018      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cc4:	d811      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cca:	d014      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd0:	d80b      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d011      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cda:	d106      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cdc:	4bc3      	ldr	r3, [pc, #780]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4ac2      	ldr	r2, [pc, #776]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ce8:	e008      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf0:	e004      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d04:	4bb9      	ldr	r3, [pc, #740]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d14:	4ab5      	ldr	r2, [pc, #724]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d16:	430b      	orrs	r3, r1
 8005d18:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d1a:	e003      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d32:	2300      	movs	r3, #0
 8005d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d40:	4baa      	ldr	r3, [pc, #680]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d4e:	4aa7      	ldr	r2, [pc, #668]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d62:	2300      	movs	r3, #0
 8005d64:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d70:	4b9e      	ldr	r3, [pc, #632]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d80:	4a9a      	ldr	r2, [pc, #616]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d94:	2300      	movs	r3, #0
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005da2:	4b92      	ldr	r3, [pc, #584]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db0:	4a8e      	ldr	r2, [pc, #568]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d00e      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dd2:	4b86      	ldr	r3, [pc, #536]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	4a85      	ldr	r2, [pc, #532]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ddc:	6113      	str	r3, [r2, #16]
 8005dde:	4b83      	ldr	r3, [pc, #524]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005de0:	6919      	ldr	r1, [r3, #16]
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dea:	4a80      	ldr	r2, [pc, #512]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dfe:	2300      	movs	r3, #0
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e0c:	4b77      	ldr	r3, [pc, #476]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1a:	4a74      	ldr	r2, [pc, #464]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e2e:	2300      	movs	r3, #0
 8005e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d00a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e4c:	4a67      	ldr	r2, [pc, #412]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	d011      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e72:	3308      	adds	r3, #8
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fa4a 	bl	8007310 <RCCEx_PLL2_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	6239      	str	r1, [r7, #32]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	d011      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fa2a 	bl	8007310 <RCCEx_PLL2_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	2100      	movs	r1, #0
 8005edc:	61b9      	str	r1, [r7, #24]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4313      	orrs	r3, r2
 8005eec:	d011      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fa0a 	bl	8007310 <RCCEx_PLL2_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6139      	str	r1, [r7, #16]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d011      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	3328      	adds	r3, #40	@ 0x28
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 fa9c 	bl	8007474 <RCCEx_PLL3_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d011      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	3328      	adds	r3, #40	@ 0x28
 8005f74:	2101      	movs	r1, #1
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fa7c 	bl	8007474 <RCCEx_PLL3_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	607b      	str	r3, [r7, #4]
 8005fa4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d011      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	3328      	adds	r3, #40	@ 0x28
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 fa5c 	bl	8007474 <RCCEx_PLL3_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005fd2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fec:	58024400 	.word	0x58024400

08005ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b090      	sub	sp, #64	@ 0x40
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ffe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006002:	430b      	orrs	r3, r1
 8006004:	f040 8094 	bne.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006008:	4b9e      	ldr	r3, [pc, #632]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800600a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	2b04      	cmp	r3, #4
 8006016:	f200 8087 	bhi.w	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006035 	.word	0x08006035
 8006024:	0800605d 	.word	0x0800605d
 8006028:	08006085 	.word	0x08006085
 800602c:	08006121 	.word	0x08006121
 8006030:	080060ad 	.word	0x080060ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006034:	4b93      	ldr	r3, [pc, #588]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800603c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006040:	d108      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006046:	4618      	mov	r0, r3
 8006048:	f001 f810 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006050:	f000 bd45 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006058:	f000 bd41 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800605c:	4b89      	ldr	r3, [pc, #548]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006068:	d108      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606a:	f107 0318 	add.w	r3, r7, #24
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fd54 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006078:	f000 bd31 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006080:	f000 bd2d 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006084:	4b7f      	ldr	r3, [pc, #508]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800608c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006090:	d108      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006092:	f107 030c 	add.w	r3, r7, #12
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fe94 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060a0:	f000 bd1d 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a8:	f000 bd19 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060ac:	4b75      	ldr	r3, [pc, #468]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060b6:	4b73      	ldr	r3, [pc, #460]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d10c      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d109      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	08db      	lsrs	r3, r3, #3
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
 80060d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060da:	e01f      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060dc:	4b69      	ldr	r3, [pc, #420]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e8:	d106      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060f0:	d102      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060f2:	4b66      	ldr	r3, [pc, #408]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f6:	e011      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060f8:	4b62      	ldr	r3, [pc, #392]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006104:	d106      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800610c:	d102      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800610e:	4b60      	ldr	r3, [pc, #384]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006112:	e003      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006118:	f000 bce1 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800611c:	f000 bcdf 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006120:	4b5c      	ldr	r3, [pc, #368]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006124:	f000 bcdb 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800612c:	f000 bcd7 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006134:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006138:	430b      	orrs	r3, r1
 800613a:	f040 80ad 	bne.w	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800613e:	4b51      	ldr	r3, [pc, #324]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800614e:	d056      	beq.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006156:	f200 8090 	bhi.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2bc0      	cmp	r3, #192	@ 0xc0
 800615e:	f000 8088 	beq.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	2bc0      	cmp	r3, #192	@ 0xc0
 8006166:	f200 8088 	bhi.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	2b80      	cmp	r3, #128	@ 0x80
 800616e:	d032      	beq.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	2b80      	cmp	r3, #128	@ 0x80
 8006174:	f200 8081 	bhi.w	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d014      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006184:	e079      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006186:	4b3f      	ldr	r3, [pc, #252]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006192:	d108      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f000 ff67 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061a2:	f000 bc9c 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061aa:	f000 bc98 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061ae:	4b35      	ldr	r3, [pc, #212]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ba:	d108      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061bc:	f107 0318 	add.w	r3, r7, #24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fcab 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ca:	f000 bc88 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d2:	f000 bc84 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e2:	d108      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fdeb 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f2:	f000 bc74 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fa:	f000 bc70 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061fe:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006202:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006208:	4b1e      	ldr	r3, [pc, #120]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d10c      	bne.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800621a:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	08db      	lsrs	r3, r3, #3
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	4a18      	ldr	r2, [pc, #96]	@ (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006226:	fa22 f303 	lsr.w	r3, r2, r3
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800622c:	e01f      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800623a:	d106      	bne.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800623c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006242:	d102      	bne.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006244:	4b11      	ldr	r3, [pc, #68]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006248:	e011      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800624a:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006256:	d106      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800625e:	d102      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006264:	e003      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800626a:	f000 bc38 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800626e:	f000 bc36 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006272:	4b08      	ldr	r3, [pc, #32]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006276:	f000 bc32 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627e:	f000 bc2e 	b.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	03d09000 	.word	0x03d09000
 800628c:	003d0900 	.word	0x003d0900
 8006290:	007a1200 	.word	0x007a1200
 8006294:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80062a0:	430b      	orrs	r3, r1
 80062a2:	f040 809c 	bne.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80062a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80062ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062b6:	d054      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062be:	f200 808b 	bhi.w	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062c8:	f000 8083 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062d2:	f200 8081 	bhi.w	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062dc:	d02f      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e4:	d878      	bhi.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062f2:	d012      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80062f4:	e070      	b.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006302:	d107      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f000 feaf 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006312:	e3e4      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006318:	e3e1      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800631a:	4b81      	ldr	r3, [pc, #516]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006326:	d107      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006328:	f107 0318 	add.w	r3, r7, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fbf5 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006336:	e3d2      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e3cf      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800633e:	4b78      	ldr	r3, [pc, #480]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634c:	f107 030c 	add.w	r3, r7, #12
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fd37 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635a:	e3c0      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e3bd      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006362:	4b6f      	ldr	r3, [pc, #444]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800636a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800636c:	4b6c      	ldr	r3, [pc, #432]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b04      	cmp	r3, #4
 8006376:	d10c      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800637e:	4b68      	ldr	r3, [pc, #416]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	08db      	lsrs	r3, r3, #3
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	4a66      	ldr	r2, [pc, #408]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800638a:	fa22 f303 	lsr.w	r3, r2, r3
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006390:	e01e      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006392:	4b63      	ldr	r3, [pc, #396]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800639e:	d106      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063a6:	d102      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063a8:	4b5f      	ldr	r3, [pc, #380]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ac:	e010      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ba:	d106      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80063bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c2:	d102      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063c4:	4b59      	ldr	r3, [pc, #356]	@ (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063c8:	e002      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063ce:	e386      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063d0:	e385      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063d2:	4b57      	ldr	r3, [pc, #348]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80063d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d6:	e382      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063dc:	e37f      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80063de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80063e6:	430b      	orrs	r3, r1
 80063e8:	f040 80a7 	bne.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80063ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063fc:	d055      	beq.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006404:	f200 8096 	bhi.w	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800640e:	f000 8084 	beq.w	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006418:	f200 808c 	bhi.w	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006422:	d030      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800642a:	f200 8083 	bhi.w	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800643a:	d012      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800643c:	e07a      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800643e:	4b38      	ldr	r3, [pc, #224]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800644a:	d107      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800644c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fe0b 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800645a:	e340      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006460:	e33d      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006462:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006470:	f107 0318 	add.w	r3, r7, #24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fb51 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800647e:	e32e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e32b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006486:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800648e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fc93 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064a2:	e31c      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a8:	e319      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064c6:	4b16      	ldr	r3, [pc, #88]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	08db      	lsrs	r3, r3, #3
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	4a14      	ldr	r2, [pc, #80]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80064d2:	fa22 f303 	lsr.w	r3, r2, r3
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d8:	e01e      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064da:	4b11      	ldr	r3, [pc, #68]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80064e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ee:	d102      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f4:	e010      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006502:	d106      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800650a:	d102      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800650c:	4b07      	ldr	r3, [pc, #28]	@ (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006510:	e002      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006516:	e2e2      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006518:	e2e1      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800651a:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651e:	e2de      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006520:	58024400 	.word	0x58024400
 8006524:	03d09000 	.word	0x03d09000
 8006528:	003d0900 	.word	0x003d0900
 800652c:	007a1200 	.word	0x007a1200
 8006530:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006538:	e2d1      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800653a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006542:	430b      	orrs	r3, r1
 8006544:	f040 809c 	bne.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006548:	4b93      	ldr	r3, [pc, #588]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800654a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006550:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006558:	d054      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006560:	f200 808b 	bhi.w	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006566:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800656a:	f000 8083 	beq.w	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006574:	f200 8081 	bhi.w	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657e:	d02f      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006586:	d878      	bhi.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006594:	d012      	beq.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006596:	e070      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006598:	4b7f      	ldr	r3, [pc, #508]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065a4:	d107      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fd5e 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065b4:	e293      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ba:	e290      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065bc:	4b76      	ldr	r3, [pc, #472]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c8:	d107      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ca:	f107 0318 	add.w	r3, r7, #24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 faa4 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065d8:	e281      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065de:	e27e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065e0:	4b6d      	ldr	r3, [pc, #436]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ec:	d107      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fbe6 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fc:	e26f      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e26c      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006604:	4b64      	ldr	r3, [pc, #400]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800660e:	4b62      	ldr	r3, [pc, #392]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d10c      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800661a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006620:	4b5d      	ldr	r3, [pc, #372]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	08db      	lsrs	r3, r3, #3
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	4a5c      	ldr	r2, [pc, #368]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006632:	e01e      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006634:	4b58      	ldr	r3, [pc, #352]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006640:	d106      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006648:	d102      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800664a:	4b55      	ldr	r3, [pc, #340]	@ (80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800664e:	e010      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006650:	4b51      	ldr	r3, [pc, #324]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800665c:	d106      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800665e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006664:	d102      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006666:	4b4f      	ldr	r3, [pc, #316]	@ (80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800666a:	e002      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006670:	e235      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006672:	e234      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006674:	4b4c      	ldr	r3, [pc, #304]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006678:	e231      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800667e:	e22e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006684:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006688:	430b      	orrs	r3, r1
 800668a:	f040 808f 	bne.w	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800668e:	4b42      	ldr	r3, [pc, #264]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006692:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006696:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800669e:	d06b      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a6:	d874      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066ae:	d056      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80066b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066b6:	d86c      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066be:	d03b      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066c6:	d864      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ce:	d021      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066d6:	d85c      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80066de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e4:	d004      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80066e6:	e054      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80066e8:	f7fe fa4c 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80066ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066ee:	e1f6      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066f0:	4b29      	ldr	r3, [pc, #164]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066fc:	d107      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066fe:	f107 0318 	add.w	r3, r7, #24
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fa0a 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800670c:	e1e7      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006712:	e1e4      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006714:	4b20      	ldr	r3, [pc, #128]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800671c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006720:	d107      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fb4c 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006730:	e1d5      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006736:	e1d2      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006738:	4b17      	ldr	r3, [pc, #92]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d109      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006744:	4b14      	ldr	r3, [pc, #80]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	4a13      	ldr	r2, [pc, #76]	@ (800679c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006756:	e1c2      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675c:	e1bf      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800675e:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800676a:	d102      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800676c:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006770:	e1b5      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006776:	e1b2      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006778:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006784:	d102      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006786:	4b07      	ldr	r3, [pc, #28]	@ (80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800678a:	e1a8      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006790:	e1a5      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006796:	e1a2      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006798:	58024400 	.word	0x58024400
 800679c:	03d09000 	.word	0x03d09000
 80067a0:	003d0900 	.word	0x003d0900
 80067a4:	007a1200 	.word	0x007a1200
 80067a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80067b4:	430b      	orrs	r3, r1
 80067b6:	d173      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067b8:	4b9c      	ldr	r3, [pc, #624]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c8:	d02f      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d0:	d863      	bhi.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067de:	d012      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80067e0:	e05b      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067e2:	4b92      	ldr	r3, [pc, #584]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ee:	d107      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f0:	f107 0318 	add.w	r3, r7, #24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f991 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067fe:	e16e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006804:	e16b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006806:	4b89      	ldr	r3, [pc, #548]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800680e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006814:	f107 030c 	add.w	r3, r7, #12
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fad3 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006822:	e15c      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006828:	e159      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800682a:	4b80      	ldr	r3, [pc, #512]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800682c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800682e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006832:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006834:	4b7d      	ldr	r3, [pc, #500]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d10c      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006846:	4b79      	ldr	r3, [pc, #484]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	08db      	lsrs	r3, r3, #3
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	4a77      	ldr	r2, [pc, #476]	@ (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006852:	fa22 f303 	lsr.w	r3, r2, r3
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006858:	e01e      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800685a:	4b74      	ldr	r3, [pc, #464]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800686e:	d102      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006870:	4b70      	ldr	r3, [pc, #448]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006876:	4b6d      	ldr	r3, [pc, #436]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006882:	d106      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800688c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006896:	e122      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006898:	e121      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689e:	e11e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80068a8:	430b      	orrs	r3, r1
 80068aa:	d133      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068ac:	4b5f      	ldr	r3, [pc, #380]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c2:	d012      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80068c4:	e023      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068c6:	4b59      	ldr	r3, [pc, #356]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068d2:	d107      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fbc7 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e2:	e0fc      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e8:	e0f9      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068ea:	4b50      	ldr	r3, [pc, #320]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f6:	d107      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068f8:	f107 0318 	add.w	r3, r7, #24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f90d 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006906:	e0ea      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e0e7      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006912:	e0e4      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006918:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800691c:	430b      	orrs	r3, r1
 800691e:	f040 808d 	bne.w	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006922:	4b42      	ldr	r3, [pc, #264]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006926:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006932:	d06b      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800693a:	d874      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006942:	d056      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694a:	d86c      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006952:	d03b      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800695a:	d864      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006962:	d021      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800696a:	d85c      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006978:	d004      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800697a:	e054      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800697c:	f000 f8b8 	bl	8006af0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006980:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006982:	e0ac      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006984:	4b29      	ldr	r3, [pc, #164]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800698c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006990:	d107      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006992:	f107 0318 	add.w	r3, r7, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f8c0 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a0:	e09d      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a6:	e09a      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069a8:	4b20      	ldr	r3, [pc, #128]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa02 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069c4:	e08b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ca:	e088      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069cc:	4b17      	ldr	r3, [pc, #92]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d109      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069d8:	4b14      	ldr	r3, [pc, #80]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	08db      	lsrs	r3, r3, #3
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	4a13      	ldr	r2, [pc, #76]	@ (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ea:	e078      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f0:	e075      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80069f2:	4b0e      	ldr	r3, [pc, #56]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fe:	d102      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006a00:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a04:	e06b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a0a:	e068      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a0c:	4b07      	ldr	r3, [pc, #28]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a18:	d102      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006a1a:	4b07      	ldr	r3, [pc, #28]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1e:	e05e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a24:	e05b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2a:	e058      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	03d09000 	.word	0x03d09000
 8006a34:	003d0900 	.word	0x003d0900
 8006a38:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a40:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006a44:	430b      	orrs	r3, r1
 8006a46:	d148      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006a48:	4b27      	ldr	r3, [pc, #156]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a58:	d02a      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a60:	d838      	bhi.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a6e:	d00d      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006a70:	e030      	b.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a72:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a7e:	d102      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006a80:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a84:	e02b      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8a:	e028      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a8c:	4b16      	ldr	r3, [pc, #88]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a98:	d107      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fae4 	bl	800706c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa8:	e019      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aae:	e016      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006abc:	d107      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006abe:	f107 0318 	add.w	r3, r7, #24
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 f82a 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006acc:	e007      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad2:	e004      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad8:	e001      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3740      	adds	r7, #64	@ 0x40
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	007a1200 	.word	0x007a1200

08006af0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006af4:	f7fe f816 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	4904      	ldr	r1, [pc, #16]	@ (8006b18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b06:	5ccb      	ldrb	r3, [r1, r3]
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	58024400 	.word	0x58024400
 8006b18:	0800baa0 	.word	0x0800baa0

08006b1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b089      	sub	sp, #36	@ 0x24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b24:	4ba1      	ldr	r3, [pc, #644]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b2e:	4b9f      	ldr	r3, [pc, #636]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	0b1b      	lsrs	r3, r3, #12
 8006b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b3a:	4b9c      	ldr	r3, [pc, #624]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	091b      	lsrs	r3, r3, #4
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b46:	4b99      	ldr	r3, [pc, #612]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4a:	08db      	lsrs	r3, r3, #3
 8006b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8111 	beq.w	8006d8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	f000 8083 	beq.w	8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f200 80a1 	bhi.w	8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d056      	beq.n	8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b86:	e099      	b.n	8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b88:	4b88      	ldr	r3, [pc, #544]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02d      	beq.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b94:	4b85      	ldr	r3, [pc, #532]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	4a84      	ldr	r2, [pc, #528]	@ (8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bee:	e087      	b.n	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c02:	4b6a      	ldr	r3, [pc, #424]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c32:	e065      	b.n	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c46:	4b59      	ldr	r3, [pc, #356]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c76:	e043      	b.n	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b48      	ldr	r3, [pc, #288]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cba:	e021      	b.n	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b37      	ldr	r3, [pc, #220]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ce2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d00:	4b2a      	ldr	r3, [pc, #168]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	0a5b      	lsrs	r3, r3, #9
 8006d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d26:	ee17 2a90 	vmov	r2, s15
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d54:	ee17 2a90 	vmov	r2, s15
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d5c:	4b13      	ldr	r3, [pc, #76]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	0e1b      	lsrs	r3, r3, #24
 8006d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d82:	ee17 2a90 	vmov	r2, s15
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d8a:	e008      	b.n	8006d9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]
}
 8006d9e:	bf00      	nop
 8006da0:	3724      	adds	r7, #36	@ 0x24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	58024400 	.word	0x58024400
 8006db0:	03d09000 	.word	0x03d09000
 8006db4:	46000000 	.word	0x46000000
 8006db8:	4c742400 	.word	0x4c742400
 8006dbc:	4a742400 	.word	0x4a742400
 8006dc0:	4af42400 	.word	0x4af42400

08006dc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b089      	sub	sp, #36	@ 0x24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	0d1b      	lsrs	r3, r3, #20
 8006ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006de0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006de2:	4b9c      	ldr	r3, [pc, #624]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006dee:	4b99      	ldr	r3, [pc, #612]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	fb02 f303 	mul.w	r3, r2, r3
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8111 	beq.w	8007034 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	f000 8083 	beq.w	8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	f200 80a1 	bhi.w	8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d056      	beq.n	8006edc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e2e:	e099      	b.n	8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e30:	4b88      	ldr	r3, [pc, #544]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02d      	beq.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e3c:	4b85      	ldr	r3, [pc, #532]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	4a84      	ldr	r2, [pc, #528]	@ (8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b7b      	ldr	r3, [pc, #492]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e96:	e087      	b.n	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ebe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eda:	e065      	b.n	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b59      	ldr	r3, [pc, #356]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1e:	e043      	b.n	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b48      	ldr	r3, [pc, #288]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f62:	e021      	b.n	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b37      	ldr	r3, [pc, #220]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fac:	0a5b      	lsrs	r3, r3, #9
 8006fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fce:	ee17 2a90 	vmov	r2, s15
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe0:	ee07 3a90 	vmov	s15, r3
 8006fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ffc:	ee17 2a90 	vmov	r2, s15
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007004:	4b13      	ldr	r3, [pc, #76]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	0e1b      	lsrs	r3, r3, #24
 800700a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800701a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800702a:	ee17 2a90 	vmov	r2, s15
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007032:	e008      	b.n	8007046 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	609a      	str	r2, [r3, #8]
}
 8007046:	bf00      	nop
 8007048:	3724      	adds	r7, #36	@ 0x24
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	58024400 	.word	0x58024400
 8007058:	03d09000 	.word	0x03d09000
 800705c:	46000000 	.word	0x46000000
 8007060:	4c742400 	.word	0x4c742400
 8007064:	4a742400 	.word	0x4a742400
 8007068:	4af42400 	.word	0x4af42400

0800706c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007074:	4ba0      	ldr	r3, [pc, #640]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f003 0303 	and.w	r3, r3, #3
 800707c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800707e:	4b9e      	ldr	r3, [pc, #632]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007088:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800708a:	4b9b      	ldr	r3, [pc, #620]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007094:	4b98      	ldr	r3, [pc, #608]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007098:	08db      	lsrs	r3, r3, #3
 800709a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	fb02 f303 	mul.w	r3, r2, r3
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8111 	beq.w	80072da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	f000 8083 	beq.w	80071c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	f200 80a1 	bhi.w	800720a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d056      	beq.n	8007182 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80070d4:	e099      	b.n	800720a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d6:	4b88      	ldr	r3, [pc, #544]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d02d      	beq.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070e2:	4b85      	ldr	r3, [pc, #532]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	4a83      	ldr	r2, [pc, #524]	@ (80072fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80070ee:	fa22 f303 	lsr.w	r3, r2, r3
 80070f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710c:	4b7a      	ldr	r3, [pc, #488]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007120:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800713c:	e087      	b.n	800724e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007148:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007304 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800714c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007150:	4b69      	ldr	r3, [pc, #420]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007160:	ed97 6a03 	vldr	s12, [r7, #12]
 8007164:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007180:	e065      	b.n	800724e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007308 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007194:	4b58      	ldr	r3, [pc, #352]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c4:	e043      	b.n	800724e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800730c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80071d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d8:	4b47      	ldr	r3, [pc, #284]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007208:	e021      	b.n	800724e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007214:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007304 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721c:	4b36      	ldr	r3, [pc, #216]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007230:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800724c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800724e:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007252:	0a5b      	lsrs	r3, r3, #9
 8007254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007268:	edd7 6a07 	vldr	s13, [r7, #28]
 800726c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007274:	ee17 2a90 	vmov	r2, s15
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800727c:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800727e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007296:	edd7 6a07 	vldr	s13, [r7, #28]
 800729a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a2:	ee17 2a90 	vmov	r2, s15
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072aa:	4b13      	ldr	r3, [pc, #76]	@ (80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	0e1b      	lsrs	r3, r3, #24
 80072b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d0:	ee17 2a90 	vmov	r2, s15
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072d8:	e008      	b.n	80072ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	609a      	str	r2, [r3, #8]
}
 80072ec:	bf00      	nop
 80072ee:	3724      	adds	r7, #36	@ 0x24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	58024400 	.word	0x58024400
 80072fc:	03d09000 	.word	0x03d09000
 8007300:	46000000 	.word	0x46000000
 8007304:	4c742400 	.word	0x4c742400
 8007308:	4a742400 	.word	0x4a742400
 800730c:	4af42400 	.word	0x4af42400

08007310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800731e:	4b53      	ldr	r3, [pc, #332]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d101      	bne.n	800732e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e099      	b.n	8007462 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800732e:	4b4f      	ldr	r3, [pc, #316]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a4e      	ldr	r2, [pc, #312]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007334:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800733a:	f7f9 ffd9 	bl	80012f0 <HAL_GetTick>
 800733e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007340:	e008      	b.n	8007354 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007342:	f7f9 ffd5 	bl	80012f0 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e086      	b.n	8007462 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007354:	4b45      	ldr	r3, [pc, #276]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f0      	bne.n	8007342 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007360:	4b42      	ldr	r3, [pc, #264]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007364:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	031b      	lsls	r3, r3, #12
 800736e:	493f      	ldr	r1, [pc, #252]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007370:	4313      	orrs	r3, r2
 8007372:	628b      	str	r3, [r1, #40]	@ 0x28
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	3b01      	subs	r3, #1
 800737a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	3b01      	subs	r3, #1
 8007384:	025b      	lsls	r3, r3, #9
 8007386:	b29b      	uxth	r3, r3
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	3b01      	subs	r3, #1
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	3b01      	subs	r3, #1
 800739e:	061b      	lsls	r3, r3, #24
 80073a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073a4:	4931      	ldr	r1, [pc, #196]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073aa:	4b30      	ldr	r3, [pc, #192]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	492d      	ldr	r1, [pc, #180]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073bc:	4b2b      	ldr	r3, [pc, #172]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	f023 0220 	bic.w	r2, r3, #32
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	4928      	ldr	r1, [pc, #160]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073ce:	4b27      	ldr	r3, [pc, #156]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4a26      	ldr	r2, [pc, #152]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073d4:	f023 0310 	bic.w	r3, r3, #16
 80073d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073da:	4b24      	ldr	r3, [pc, #144]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073de:	4b24      	ldr	r3, [pc, #144]	@ (8007470 <RCCEx_PLL2_Config+0x160>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	69d2      	ldr	r2, [r2, #28]
 80073e6:	00d2      	lsls	r2, r2, #3
 80073e8:	4920      	ldr	r1, [pc, #128]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073ee:	4b1f      	ldr	r3, [pc, #124]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f2:	4a1e      	ldr	r2, [pc, #120]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 80073f4:	f043 0310 	orr.w	r3, r3, #16
 80073f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007400:	4b1a      	ldr	r3, [pc, #104]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	4a19      	ldr	r2, [pc, #100]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007406:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800740a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800740c:	e00f      	b.n	800742e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d106      	bne.n	8007422 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007414:	4b15      	ldr	r3, [pc, #84]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007418:	4a14      	ldr	r2, [pc, #80]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 800741a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800741e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007420:	e005      	b.n	800742e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007422:	4b12      	ldr	r3, [pc, #72]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a11      	ldr	r2, [pc, #68]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800742e:	4b0f      	ldr	r3, [pc, #60]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a0e      	ldr	r2, [pc, #56]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743a:	f7f9 ff59 	bl	80012f0 <HAL_GetTick>
 800743e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007440:	e008      	b.n	8007454 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007442:	f7f9 ff55 	bl	80012f0 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d901      	bls.n	8007454 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e006      	b.n	8007462 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007454:	4b05      	ldr	r3, [pc, #20]	@ (800746c <RCCEx_PLL2_Config+0x15c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0f0      	beq.n	8007442 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	58024400 	.word	0x58024400
 8007470:	ffff0007 	.word	0xffff0007

08007474 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007482:	4b53      	ldr	r3, [pc, #332]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d101      	bne.n	8007492 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e099      	b.n	80075c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007492:	4b4f      	ldr	r3, [pc, #316]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4e      	ldr	r2, [pc, #312]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800749c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800749e:	f7f9 ff27 	bl	80012f0 <HAL_GetTick>
 80074a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074a4:	e008      	b.n	80074b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074a6:	f7f9 ff23 	bl	80012f0 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e086      	b.n	80075c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074b8:	4b45      	ldr	r3, [pc, #276]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074c4:	4b42      	ldr	r3, [pc, #264]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 80074c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	051b      	lsls	r3, r3, #20
 80074d2:	493f      	ldr	r1, [pc, #252]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	3b01      	subs	r3, #1
 80074de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	025b      	lsls	r3, r3, #9
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	3b01      	subs	r3, #1
 8007502:	061b      	lsls	r3, r3, #24
 8007504:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007508:	4931      	ldr	r1, [pc, #196]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800750e:	4b30      	ldr	r3, [pc, #192]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	492d      	ldr	r1, [pc, #180]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007520:	4b2b      	ldr	r3, [pc, #172]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	4928      	ldr	r1, [pc, #160]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007532:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	4a26      	ldr	r2, [pc, #152]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800753c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800753e:	4b24      	ldr	r3, [pc, #144]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007542:	4b24      	ldr	r3, [pc, #144]	@ (80075d4 <RCCEx_PLL3_Config+0x160>)
 8007544:	4013      	ands	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	69d2      	ldr	r2, [r2, #28]
 800754a:	00d2      	lsls	r2, r2, #3
 800754c:	4920      	ldr	r1, [pc, #128]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007552:	4b1f      	ldr	r3, [pc, #124]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4a1e      	ldr	r2, [pc, #120]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800755c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007564:	4b1a      	ldr	r3, [pc, #104]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a19      	ldr	r2, [pc, #100]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800756a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007570:	e00f      	b.n	8007592 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d106      	bne.n	8007586 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007578:	4b15      	ldr	r3, [pc, #84]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757c:	4a14      	ldr	r2, [pc, #80]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800757e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007582:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007584:	e005      	b.n	8007592 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007586:	4b12      	ldr	r3, [pc, #72]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4a11      	ldr	r2, [pc, #68]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 800758c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007590:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007592:	4b0f      	ldr	r3, [pc, #60]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a0e      	ldr	r2, [pc, #56]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 8007598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800759c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759e:	f7f9 fea7 	bl	80012f0 <HAL_GetTick>
 80075a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075a4:	e008      	b.n	80075b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075a6:	f7f9 fea3 	bl	80012f0 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e006      	b.n	80075c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075b8:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0f0      	beq.n	80075a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	ffff0007 	.word	0xffff0007

080075d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e042      	b.n	8007670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7f9 fd41 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2224      	movs	r2, #36	@ 0x24
 8007606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fa14 	bl	8008a50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fca9 	bl	8007f80 <UART_SetConfig>
 800762e:	4603      	mov	r3, r0
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e01b      	b.n	8007670 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fa93 	bl	8008b94 <UART_CheckIdleState>
 800766e:	4603      	mov	r3, r0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	@ 0x28
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768e:	2b20      	cmp	r3, #32
 8007690:	d17b      	bne.n	800778a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_UART_Transmit+0x26>
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e074      	b.n	800778c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2221      	movs	r2, #33	@ 0x21
 80076ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076b2:	f7f9 fe1d 	bl	80012f0 <HAL_GetTick>
 80076b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d0:	d108      	bne.n	80076e4 <HAL_UART_Transmit+0x6c>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e003      	b.n	80076ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076ec:	e030      	b.n	8007750 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2180      	movs	r1, #128	@ 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f001 faf5 	bl	8008ce8 <UART_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e03d      	b.n	800778c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007724:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	3302      	adds	r3, #2
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e007      	b.n	800773e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	781a      	ldrb	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	3301      	adds	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1c8      	bne.n	80076ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2200      	movs	r2, #0
 8007764:	2140      	movs	r1, #64	@ 0x40
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f001 fabe 	bl	8008ce8 <UART_WaitOnFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e006      	b.n	800778c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e000      	b.n	800778c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800778a:	2302      	movs	r3, #2
  }
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b0ba      	sub	sp, #232	@ 0xe8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077c2:	4013      	ands	r3, r2
 80077c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11b      	bne.n	8007808 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d015      	beq.n	8007808 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d105      	bne.n	80077f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d009      	beq.n	8007808 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8393 	beq.w	8007f24 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
      }
      return;
 8007806:	e38d      	b.n	8007f24 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8123 	beq.w	8007a58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007812:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007816:	4b8d      	ldr	r3, [pc, #564]	@ (8007a4c <HAL_UART_IRQHandler+0x2b8>)
 8007818:	4013      	ands	r3, r2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800781e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007822:	4b8b      	ldr	r3, [pc, #556]	@ (8007a50 <HAL_UART_IRQHandler+0x2bc>)
 8007824:	4013      	ands	r3, r2
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8116 	beq.w	8007a58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800782c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d011      	beq.n	800785c <HAL_UART_IRQHandler+0xc8>
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800783c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2201      	movs	r2, #1
 800784a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007852:	f043 0201 	orr.w	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d011      	beq.n	800788c <HAL_UART_IRQHandler+0xf8>
 8007868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2202      	movs	r2, #2
 800787a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007882:	f043 0204 	orr.w	r2, r3, #4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <HAL_UART_IRQHandler+0x128>
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2204      	movs	r2, #4
 80078aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b2:	f043 0202 	orr.w	r2, r3, #2
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d105      	bne.n	80078e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078d8:	4b5c      	ldr	r3, [pc, #368]	@ (8007a4c <HAL_UART_IRQHandler+0x2b8>)
 80078da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2208      	movs	r2, #8
 80078e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ee:	f043 0208 	orr.w	r2, r3, #8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007900:	2b00      	cmp	r3, #0
 8007902:	d012      	beq.n	800792a <HAL_UART_IRQHandler+0x196>
 8007904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007908:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00c      	beq.n	800792a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007920:	f043 0220 	orr.w	r2, r3, #32
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 82f9 	beq.w	8007f28 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d013      	beq.n	800796a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800794e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007970:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797e:	2b40      	cmp	r3, #64	@ 0x40
 8007980:	d005      	beq.n	800798e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007986:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800798a:	2b00      	cmp	r3, #0
 800798c:	d054      	beq.n	8007a38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 fa18 	bl	8008dc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	d146      	bne.n	8007a30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1d9      	bne.n	80079a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d017      	beq.n	8007a28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fe:	4a15      	ldr	r2, [pc, #84]	@ (8007a54 <HAL_UART_IRQHandler+0x2c0>)
 8007a00:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fb fc79 	bl	8003300 <HAL_DMA_Abort_IT>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d019      	beq.n	8007a48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007a22:	4610      	mov	r0, r2
 8007a24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a26:	e00f      	b.n	8007a48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa93 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2e:	e00b      	b.n	8007a48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa8f 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a36:	e007      	b.n	8007a48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa8b 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007a46:	e26f      	b.n	8007f28 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	bf00      	nop
    return;
 8007a4a:	e26d      	b.n	8007f28 <HAL_UART_IRQHandler+0x794>
 8007a4c:	10000001 	.word	0x10000001
 8007a50:	04000120 	.word	0x04000120
 8007a54:	08008e91 	.word	0x08008e91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	f040 8203 	bne.w	8007e68 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 81fc 	beq.w	8007e68 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 81f5 	beq.w	8007e68 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2210      	movs	r2, #16
 8007a84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	2b40      	cmp	r3, #64	@ 0x40
 8007a92:	f040 816d 	bne.w	8007d70 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4aa4      	ldr	r2, [pc, #656]	@ (8007d30 <HAL_UART_IRQHandler+0x59c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d068      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4aa1      	ldr	r2, [pc, #644]	@ (8007d34 <HAL_UART_IRQHandler+0x5a0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d061      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a9f      	ldr	r2, [pc, #636]	@ (8007d38 <HAL_UART_IRQHandler+0x5a4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d05a      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a9c      	ldr	r2, [pc, #624]	@ (8007d3c <HAL_UART_IRQHandler+0x5a8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d053      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a9a      	ldr	r2, [pc, #616]	@ (8007d40 <HAL_UART_IRQHandler+0x5ac>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d04c      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a97      	ldr	r2, [pc, #604]	@ (8007d44 <HAL_UART_IRQHandler+0x5b0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d045      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a95      	ldr	r2, [pc, #596]	@ (8007d48 <HAL_UART_IRQHandler+0x5b4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d03e      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a92      	ldr	r2, [pc, #584]	@ (8007d4c <HAL_UART_IRQHandler+0x5b8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d037      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a90      	ldr	r2, [pc, #576]	@ (8007d50 <HAL_UART_IRQHandler+0x5bc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d030      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a8d      	ldr	r2, [pc, #564]	@ (8007d54 <HAL_UART_IRQHandler+0x5c0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d029      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a8b      	ldr	r2, [pc, #556]	@ (8007d58 <HAL_UART_IRQHandler+0x5c4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d022      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a88      	ldr	r2, [pc, #544]	@ (8007d5c <HAL_UART_IRQHandler+0x5c8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01b      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a86      	ldr	r2, [pc, #536]	@ (8007d60 <HAL_UART_IRQHandler+0x5cc>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d014      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a83      	ldr	r2, [pc, #524]	@ (8007d64 <HAL_UART_IRQHandler+0x5d0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00d      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a81      	ldr	r2, [pc, #516]	@ (8007d68 <HAL_UART_IRQHandler+0x5d4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d006      	beq.n	8007b76 <HAL_UART_IRQHandler+0x3e2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a7e      	ldr	r2, [pc, #504]	@ (8007d6c <HAL_UART_IRQHandler+0x5d8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d106      	bne.n	8007b84 <HAL_UART_IRQHandler+0x3f0>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	e005      	b.n	8007b90 <HAL_UART_IRQHandler+0x3fc>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80ad 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ba4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	f080 80a5 	bcs.w	8007cf8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc4:	f000 8087 	beq.w	8007cd6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1da      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3308      	adds	r3, #8
 8007c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e1      	bne.n	8007c12 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e3      	bne.n	8007c4e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ca4:	f023 0310 	bic.w	r3, r3, #16
 8007ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e4      	bne.n	8007c94 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fa fff7 	bl	8002cc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f939 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cf6:	e119      	b.n	8007f2c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d02:	429a      	cmp	r2, r3
 8007d04:	f040 8112 	bne.w	8007f2c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d14:	f040 810a 	bne.w	8007f2c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f91e 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
      return;
 8007d2c:	e0fe      	b.n	8007f2c <HAL_UART_IRQHandler+0x798>
 8007d2e:	bf00      	nop
 8007d30:	40020010 	.word	0x40020010
 8007d34:	40020028 	.word	0x40020028
 8007d38:	40020040 	.word	0x40020040
 8007d3c:	40020058 	.word	0x40020058
 8007d40:	40020070 	.word	0x40020070
 8007d44:	40020088 	.word	0x40020088
 8007d48:	400200a0 	.word	0x400200a0
 8007d4c:	400200b8 	.word	0x400200b8
 8007d50:	40020410 	.word	0x40020410
 8007d54:	40020428 	.word	0x40020428
 8007d58:	40020440 	.word	0x40020440
 8007d5c:	40020458 	.word	0x40020458
 8007d60:	40020470 	.word	0x40020470
 8007d64:	40020488 	.word	0x40020488
 8007d68:	400204a0 	.word	0x400204a0
 8007d6c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 80cf 	beq.w	8007f30 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007d92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80ca 	beq.w	8007f30 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007db0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e4      	bne.n	8007d9c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	623b      	str	r3, [r7, #32]
   return(result);
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	4b55      	ldr	r3, [pc, #340]	@ (8007f3c <HAL_UART_IRQHandler+0x7a8>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007df6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e3      	bne.n	8007dd2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0310 	bic.w	r3, r3, #16
 8007e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e4      	bne.n	8007e1e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f881 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e66:	e063      	b.n	8007f30 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <HAL_UART_IRQHandler+0x6fe>
 8007e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f83d 	bl	8008f0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e90:	e051      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d014      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d008      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d03a      	beq.n	8007f34 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
    }
    return;
 8007ec6:	e035      	b.n	8007f34 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <HAL_UART_IRQHandler+0x754>
 8007ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 ffe7 	bl	8008eb4 <UART_EndTransmit_IT>
    return;
 8007ee6:	e026      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <HAL_UART_IRQHandler+0x774>
 8007ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 f816 	bl	8008f32 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f06:	e016      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
 8007f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	da0c      	bge.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fffe 	bl	8008f1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f22:	e008      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007f24:	bf00      	nop
 8007f26:	e006      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007f28:	bf00      	nop
 8007f2a:	e004      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007f2c:	bf00      	nop
 8007f2e:	e002      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007f30:	bf00      	nop
 8007f32:	e000      	b.n	8007f36 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007f34:	bf00      	nop
  }
}
 8007f36:	37e8      	adds	r7, #232	@ 0xe8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	effffffe 	.word	0xeffffffe

08007f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f84:	b092      	sub	sp, #72	@ 0x48
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4bbe      	ldr	r3, [pc, #760]	@ (80082a8 <UART_SetConfig+0x328>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4ab3      	ldr	r2, [pc, #716]	@ (80082ac <UART_SetConfig+0x32c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	4baf      	ldr	r3, [pc, #700]	@ (80082b0 <UART_SetConfig+0x330>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	6812      	ldr	r2, [r2, #0]
 8007ffa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	f023 010f 	bic.w	r1, r3, #15
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4aa6      	ldr	r2, [pc, #664]	@ (80082b4 <UART_SetConfig+0x334>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d177      	bne.n	8008110 <UART_SetConfig+0x190>
 8008020:	4ba5      	ldr	r3, [pc, #660]	@ (80082b8 <UART_SetConfig+0x338>)
 8008022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008028:	2b28      	cmp	r3, #40	@ 0x28
 800802a:	d86d      	bhi.n	8008108 <UART_SetConfig+0x188>
 800802c:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <UART_SetConfig+0xb4>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	080080d9 	.word	0x080080d9
 8008038:	08008109 	.word	0x08008109
 800803c:	08008109 	.word	0x08008109
 8008040:	08008109 	.word	0x08008109
 8008044:	08008109 	.word	0x08008109
 8008048:	08008109 	.word	0x08008109
 800804c:	08008109 	.word	0x08008109
 8008050:	08008109 	.word	0x08008109
 8008054:	080080e1 	.word	0x080080e1
 8008058:	08008109 	.word	0x08008109
 800805c:	08008109 	.word	0x08008109
 8008060:	08008109 	.word	0x08008109
 8008064:	08008109 	.word	0x08008109
 8008068:	08008109 	.word	0x08008109
 800806c:	08008109 	.word	0x08008109
 8008070:	08008109 	.word	0x08008109
 8008074:	080080e9 	.word	0x080080e9
 8008078:	08008109 	.word	0x08008109
 800807c:	08008109 	.word	0x08008109
 8008080:	08008109 	.word	0x08008109
 8008084:	08008109 	.word	0x08008109
 8008088:	08008109 	.word	0x08008109
 800808c:	08008109 	.word	0x08008109
 8008090:	08008109 	.word	0x08008109
 8008094:	080080f1 	.word	0x080080f1
 8008098:	08008109 	.word	0x08008109
 800809c:	08008109 	.word	0x08008109
 80080a0:	08008109 	.word	0x08008109
 80080a4:	08008109 	.word	0x08008109
 80080a8:	08008109 	.word	0x08008109
 80080ac:	08008109 	.word	0x08008109
 80080b0:	08008109 	.word	0x08008109
 80080b4:	080080f9 	.word	0x080080f9
 80080b8:	08008109 	.word	0x08008109
 80080bc:	08008109 	.word	0x08008109
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008109 	.word	0x08008109
 80080c8:	08008109 	.word	0x08008109
 80080cc:	08008109 	.word	0x08008109
 80080d0:	08008109 	.word	0x08008109
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e222      	b.n	8008526 <UART_SetConfig+0x5a6>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e21e      	b.n	8008526 <UART_SetConfig+0x5a6>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e21a      	b.n	8008526 <UART_SetConfig+0x5a6>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e216      	b.n	8008526 <UART_SetConfig+0x5a6>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e212      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008100:	2340      	movs	r3, #64	@ 0x40
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e20e      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008108:	2380      	movs	r3, #128	@ 0x80
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e20a      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a69      	ldr	r2, [pc, #420]	@ (80082bc <UART_SetConfig+0x33c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d130      	bne.n	800817c <UART_SetConfig+0x1fc>
 800811a:	4b67      	ldr	r3, [pc, #412]	@ (80082b8 <UART_SetConfig+0x338>)
 800811c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b05      	cmp	r3, #5
 8008124:	d826      	bhi.n	8008174 <UART_SetConfig+0x1f4>
 8008126:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <UART_SetConfig+0x1ac>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008145 	.word	0x08008145
 8008130:	0800814d 	.word	0x0800814d
 8008134:	08008155 	.word	0x08008155
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008165 	.word	0x08008165
 8008140:	0800816d 	.word	0x0800816d
 8008144:	2300      	movs	r3, #0
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814a:	e1ec      	b.n	8008526 <UART_SetConfig+0x5a6>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008152:	e1e8      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815a:	e1e4      	b.n	8008526 <UART_SetConfig+0x5a6>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008162:	e1e0      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008164:	2320      	movs	r3, #32
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e1dc      	b.n	8008526 <UART_SetConfig+0x5a6>
 800816c:	2340      	movs	r3, #64	@ 0x40
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e1d8      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008174:	2380      	movs	r3, #128	@ 0x80
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e1d4      	b.n	8008526 <UART_SetConfig+0x5a6>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a4f      	ldr	r2, [pc, #316]	@ (80082c0 <UART_SetConfig+0x340>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d130      	bne.n	80081e8 <UART_SetConfig+0x268>
 8008186:	4b4c      	ldr	r3, [pc, #304]	@ (80082b8 <UART_SetConfig+0x338>)
 8008188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b05      	cmp	r3, #5
 8008190:	d826      	bhi.n	80081e0 <UART_SetConfig+0x260>
 8008192:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <UART_SetConfig+0x218>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081b1 	.word	0x080081b1
 800819c:	080081b9 	.word	0x080081b9
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081d1 	.word	0x080081d1
 80081ac:	080081d9 	.word	0x080081d9
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b6:	e1b6      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081b8:	2304      	movs	r3, #4
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081be:	e1b2      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081c0:	2308      	movs	r3, #8
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c6:	e1ae      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ce:	e1aa      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081d0:	2320      	movs	r3, #32
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e1a6      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081d8:	2340      	movs	r3, #64	@ 0x40
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e1a2      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081e0:	2380      	movs	r3, #128	@ 0x80
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e19e      	b.n	8008526 <UART_SetConfig+0x5a6>
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a35      	ldr	r2, [pc, #212]	@ (80082c4 <UART_SetConfig+0x344>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d130      	bne.n	8008254 <UART_SetConfig+0x2d4>
 80081f2:	4b31      	ldr	r3, [pc, #196]	@ (80082b8 <UART_SetConfig+0x338>)
 80081f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b05      	cmp	r3, #5
 80081fc:	d826      	bhi.n	800824c <UART_SetConfig+0x2cc>
 80081fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <UART_SetConfig+0x284>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	0800821d 	.word	0x0800821d
 8008208:	08008225 	.word	0x08008225
 800820c:	0800822d 	.word	0x0800822d
 8008210:	08008235 	.word	0x08008235
 8008214:	0800823d 	.word	0x0800823d
 8008218:	08008245 	.word	0x08008245
 800821c:	2300      	movs	r3, #0
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008222:	e180      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008224:	2304      	movs	r3, #4
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822a:	e17c      	b.n	8008526 <UART_SetConfig+0x5a6>
 800822c:	2308      	movs	r3, #8
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008232:	e178      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008234:	2310      	movs	r3, #16
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e174      	b.n	8008526 <UART_SetConfig+0x5a6>
 800823c:	2320      	movs	r3, #32
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e170      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008244:	2340      	movs	r3, #64	@ 0x40
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e16c      	b.n	8008526 <UART_SetConfig+0x5a6>
 800824c:	2380      	movs	r3, #128	@ 0x80
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e168      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1b      	ldr	r2, [pc, #108]	@ (80082c8 <UART_SetConfig+0x348>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d142      	bne.n	80082e4 <UART_SetConfig+0x364>
 800825e:	4b16      	ldr	r3, [pc, #88]	@ (80082b8 <UART_SetConfig+0x338>)
 8008260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b05      	cmp	r3, #5
 8008268:	d838      	bhi.n	80082dc <UART_SetConfig+0x35c>
 800826a:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <UART_SetConfig+0x2f0>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008289 	.word	0x08008289
 8008274:	08008291 	.word	0x08008291
 8008278:	08008299 	.word	0x08008299
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082cd 	.word	0x080082cd
 8008284:	080082d5 	.word	0x080082d5
 8008288:	2300      	movs	r3, #0
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e14a      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008290:	2304      	movs	r3, #4
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e146      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008298:	2308      	movs	r3, #8
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829e:	e142      	b.n	8008526 <UART_SetConfig+0x5a6>
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e13e      	b.n	8008526 <UART_SetConfig+0x5a6>
 80082a8:	cfff69f3 	.word	0xcfff69f3
 80082ac:	58000c00 	.word	0x58000c00
 80082b0:	11fff4ff 	.word	0x11fff4ff
 80082b4:	40011000 	.word	0x40011000
 80082b8:	58024400 	.word	0x58024400
 80082bc:	40004400 	.word	0x40004400
 80082c0:	40004800 	.word	0x40004800
 80082c4:	40004c00 	.word	0x40004c00
 80082c8:	40005000 	.word	0x40005000
 80082cc:	2320      	movs	r3, #32
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e128      	b.n	8008526 <UART_SetConfig+0x5a6>
 80082d4:	2340      	movs	r3, #64	@ 0x40
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e124      	b.n	8008526 <UART_SetConfig+0x5a6>
 80082dc:	2380      	movs	r3, #128	@ 0x80
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e120      	b.n	8008526 <UART_SetConfig+0x5a6>
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4acb      	ldr	r2, [pc, #812]	@ (8008618 <UART_SetConfig+0x698>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d176      	bne.n	80083dc <UART_SetConfig+0x45c>
 80082ee:	4bcb      	ldr	r3, [pc, #812]	@ (800861c <UART_SetConfig+0x69c>)
 80082f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082f6:	2b28      	cmp	r3, #40	@ 0x28
 80082f8:	d86c      	bhi.n	80083d4 <UART_SetConfig+0x454>
 80082fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008300 <UART_SetConfig+0x380>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	080083a5 	.word	0x080083a5
 8008304:	080083d5 	.word	0x080083d5
 8008308:	080083d5 	.word	0x080083d5
 800830c:	080083d5 	.word	0x080083d5
 8008310:	080083d5 	.word	0x080083d5
 8008314:	080083d5 	.word	0x080083d5
 8008318:	080083d5 	.word	0x080083d5
 800831c:	080083d5 	.word	0x080083d5
 8008320:	080083ad 	.word	0x080083ad
 8008324:	080083d5 	.word	0x080083d5
 8008328:	080083d5 	.word	0x080083d5
 800832c:	080083d5 	.word	0x080083d5
 8008330:	080083d5 	.word	0x080083d5
 8008334:	080083d5 	.word	0x080083d5
 8008338:	080083d5 	.word	0x080083d5
 800833c:	080083d5 	.word	0x080083d5
 8008340:	080083b5 	.word	0x080083b5
 8008344:	080083d5 	.word	0x080083d5
 8008348:	080083d5 	.word	0x080083d5
 800834c:	080083d5 	.word	0x080083d5
 8008350:	080083d5 	.word	0x080083d5
 8008354:	080083d5 	.word	0x080083d5
 8008358:	080083d5 	.word	0x080083d5
 800835c:	080083d5 	.word	0x080083d5
 8008360:	080083bd 	.word	0x080083bd
 8008364:	080083d5 	.word	0x080083d5
 8008368:	080083d5 	.word	0x080083d5
 800836c:	080083d5 	.word	0x080083d5
 8008370:	080083d5 	.word	0x080083d5
 8008374:	080083d5 	.word	0x080083d5
 8008378:	080083d5 	.word	0x080083d5
 800837c:	080083d5 	.word	0x080083d5
 8008380:	080083c5 	.word	0x080083c5
 8008384:	080083d5 	.word	0x080083d5
 8008388:	080083d5 	.word	0x080083d5
 800838c:	080083d5 	.word	0x080083d5
 8008390:	080083d5 	.word	0x080083d5
 8008394:	080083d5 	.word	0x080083d5
 8008398:	080083d5 	.word	0x080083d5
 800839c:	080083d5 	.word	0x080083d5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e0bc      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e0b8      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e0b4      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e0b0      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ca:	e0ac      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	@ 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e0a8      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	@ 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083da:	e0a4      	b.n	8008526 <UART_SetConfig+0x5a6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a8f      	ldr	r2, [pc, #572]	@ (8008620 <UART_SetConfig+0x6a0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d130      	bne.n	8008448 <UART_SetConfig+0x4c8>
 80083e6:	4b8d      	ldr	r3, [pc, #564]	@ (800861c <UART_SetConfig+0x69c>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d826      	bhi.n	8008440 <UART_SetConfig+0x4c0>
 80083f2:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x478>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008421 	.word	0x08008421
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e086      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e082      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e07e      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842e:	e07a      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008430:	2320      	movs	r3, #32
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008436:	e076      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008438:	2340      	movs	r3, #64	@ 0x40
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e072      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008440:	2380      	movs	r3, #128	@ 0x80
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e06e      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a75      	ldr	r2, [pc, #468]	@ (8008624 <UART_SetConfig+0x6a4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d130      	bne.n	80084b4 <UART_SetConfig+0x534>
 8008452:	4b72      	ldr	r3, [pc, #456]	@ (800861c <UART_SetConfig+0x69c>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b05      	cmp	r3, #5
 800845c:	d826      	bhi.n	80084ac <UART_SetConfig+0x52c>
 800845e:	a201      	add	r2, pc, #4	@ (adr r2, 8008464 <UART_SetConfig+0x4e4>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008495 	.word	0x08008495
 8008474:	0800849d 	.word	0x0800849d
 8008478:	080084a5 	.word	0x080084a5
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e050      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e04c      	b.n	8008526 <UART_SetConfig+0x5a6>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e048      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e044      	b.n	8008526 <UART_SetConfig+0x5a6>
 800849c:	2320      	movs	r3, #32
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e040      	b.n	8008526 <UART_SetConfig+0x5a6>
 80084a4:	2340      	movs	r3, #64	@ 0x40
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e03c      	b.n	8008526 <UART_SetConfig+0x5a6>
 80084ac:	2380      	movs	r3, #128	@ 0x80
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e038      	b.n	8008526 <UART_SetConfig+0x5a6>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a5b      	ldr	r2, [pc, #364]	@ (8008628 <UART_SetConfig+0x6a8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d130      	bne.n	8008520 <UART_SetConfig+0x5a0>
 80084be:	4b57      	ldr	r3, [pc, #348]	@ (800861c <UART_SetConfig+0x69c>)
 80084c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	d826      	bhi.n	8008518 <UART_SetConfig+0x598>
 80084ca:	a201      	add	r2, pc, #4	@ (adr r2, 80084d0 <UART_SetConfig+0x550>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	080084e9 	.word	0x080084e9
 80084d4:	080084f1 	.word	0x080084f1
 80084d8:	080084f9 	.word	0x080084f9
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008509 	.word	0x08008509
 80084e4:	08008511 	.word	0x08008511
 80084e8:	2302      	movs	r3, #2
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e01a      	b.n	8008526 <UART_SetConfig+0x5a6>
 80084f0:	2304      	movs	r3, #4
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e016      	b.n	8008526 <UART_SetConfig+0x5a6>
 80084f8:	2308      	movs	r3, #8
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fe:	e012      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008500:	2310      	movs	r3, #16
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008506:	e00e      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008508:	2320      	movs	r3, #32
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e00a      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008510:	2340      	movs	r3, #64	@ 0x40
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e006      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008518:	2380      	movs	r3, #128	@ 0x80
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e002      	b.n	8008526 <UART_SetConfig+0x5a6>
 8008520:	2380      	movs	r3, #128	@ 0x80
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a3f      	ldr	r2, [pc, #252]	@ (8008628 <UART_SetConfig+0x6a8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	f040 80f8 	bne.w	8008722 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008532:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008536:	2b20      	cmp	r3, #32
 8008538:	dc46      	bgt.n	80085c8 <UART_SetConfig+0x648>
 800853a:	2b02      	cmp	r3, #2
 800853c:	f2c0 8082 	blt.w	8008644 <UART_SetConfig+0x6c4>
 8008540:	3b02      	subs	r3, #2
 8008542:	2b1e      	cmp	r3, #30
 8008544:	d87e      	bhi.n	8008644 <UART_SetConfig+0x6c4>
 8008546:	a201      	add	r2, pc, #4	@ (adr r2, 800854c <UART_SetConfig+0x5cc>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	080085cf 	.word	0x080085cf
 8008550:	08008645 	.word	0x08008645
 8008554:	080085d7 	.word	0x080085d7
 8008558:	08008645 	.word	0x08008645
 800855c:	08008645 	.word	0x08008645
 8008560:	08008645 	.word	0x08008645
 8008564:	080085e7 	.word	0x080085e7
 8008568:	08008645 	.word	0x08008645
 800856c:	08008645 	.word	0x08008645
 8008570:	08008645 	.word	0x08008645
 8008574:	08008645 	.word	0x08008645
 8008578:	08008645 	.word	0x08008645
 800857c:	08008645 	.word	0x08008645
 8008580:	08008645 	.word	0x08008645
 8008584:	080085f7 	.word	0x080085f7
 8008588:	08008645 	.word	0x08008645
 800858c:	08008645 	.word	0x08008645
 8008590:	08008645 	.word	0x08008645
 8008594:	08008645 	.word	0x08008645
 8008598:	08008645 	.word	0x08008645
 800859c:	08008645 	.word	0x08008645
 80085a0:	08008645 	.word	0x08008645
 80085a4:	08008645 	.word	0x08008645
 80085a8:	08008645 	.word	0x08008645
 80085ac:	08008645 	.word	0x08008645
 80085b0:	08008645 	.word	0x08008645
 80085b4:	08008645 	.word	0x08008645
 80085b8:	08008645 	.word	0x08008645
 80085bc:	08008645 	.word	0x08008645
 80085c0:	08008645 	.word	0x08008645
 80085c4:	08008637 	.word	0x08008637
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	d037      	beq.n	800863c <UART_SetConfig+0x6bc>
 80085cc:	e03a      	b.n	8008644 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085ce:	f7fe fa8f 	bl	8006af0 <HAL_RCCEx_GetD3PCLK1Freq>
 80085d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085d4:	e03c      	b.n	8008650 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fa9e 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e4:	e034      	b.n	8008650 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e6:	f107 0318 	add.w	r3, r7, #24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fbea 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f4:	e02c      	b.n	8008650 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <UART_SetConfig+0x69c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d016      	beq.n	8008630 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008602:	4b06      	ldr	r3, [pc, #24]	@ (800861c <UART_SetConfig+0x69c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	08db      	lsrs	r3, r3, #3
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	4a07      	ldr	r2, [pc, #28]	@ (800862c <UART_SetConfig+0x6ac>)
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008614:	e01c      	b.n	8008650 <UART_SetConfig+0x6d0>
 8008616:	bf00      	nop
 8008618:	40011400 	.word	0x40011400
 800861c:	58024400 	.word	0x58024400
 8008620:	40007800 	.word	0x40007800
 8008624:	40007c00 	.word	0x40007c00
 8008628:	58000c00 	.word	0x58000c00
 800862c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008630:	4b9d      	ldr	r3, [pc, #628]	@ (80088a8 <UART_SetConfig+0x928>)
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008634:	e00c      	b.n	8008650 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008636:	4b9d      	ldr	r3, [pc, #628]	@ (80088ac <UART_SetConfig+0x92c>)
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863a:	e009      	b.n	8008650 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008642:	e005      	b.n	8008650 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800864e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 81de 	beq.w	8008a14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865c:	4a94      	ldr	r2, [pc, #592]	@ (80088b0 <UART_SetConfig+0x930>)
 800865e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008662:	461a      	mov	r2, r3
 8008664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008666:	fbb3 f3f2 	udiv	r3, r3, r2
 800866a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	4413      	add	r3, r2
 8008676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008678:	429a      	cmp	r2, r3
 800867a:	d305      	bcc.n	8008688 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008684:	429a      	cmp	r2, r3
 8008686:	d903      	bls.n	8008690 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800868e:	e1c1      	b.n	8008a14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008692:	2200      	movs	r2, #0
 8008694:	60bb      	str	r3, [r7, #8]
 8008696:	60fa      	str	r2, [r7, #12]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869c:	4a84      	ldr	r2, [pc, #528]	@ (80088b0 <UART_SetConfig+0x930>)
 800869e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2200      	movs	r2, #0
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086b2:	f7f7 fe6d 	bl	8000390 <__aeabi_uldivmod>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	020b      	lsls	r3, r1, #8
 80086c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086cc:	0202      	lsls	r2, r0, #8
 80086ce:	6979      	ldr	r1, [r7, #20]
 80086d0:	6849      	ldr	r1, [r1, #4]
 80086d2:	0849      	lsrs	r1, r1, #1
 80086d4:	2000      	movs	r0, #0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4605      	mov	r5, r0
 80086da:	eb12 0804 	adds.w	r8, r2, r4
 80086de:	eb43 0905 	adc.w	r9, r3, r5
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	469a      	mov	sl, r3
 80086ea:	4693      	mov	fp, r2
 80086ec:	4652      	mov	r2, sl
 80086ee:	465b      	mov	r3, fp
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f7 fe4c 	bl	8000390 <__aeabi_uldivmod>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4613      	mov	r3, r2
 80086fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008706:	d308      	bcc.n	800871a <UART_SetConfig+0x79a>
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800870e:	d204      	bcs.n	800871a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008716:	60da      	str	r2, [r3, #12]
 8008718:	e17c      	b.n	8008a14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008720:	e178      	b.n	8008a14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800872a:	f040 80c5 	bne.w	80088b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800872e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008732:	2b20      	cmp	r3, #32
 8008734:	dc48      	bgt.n	80087c8 <UART_SetConfig+0x848>
 8008736:	2b00      	cmp	r3, #0
 8008738:	db7b      	blt.n	8008832 <UART_SetConfig+0x8b2>
 800873a:	2b20      	cmp	r3, #32
 800873c:	d879      	bhi.n	8008832 <UART_SetConfig+0x8b2>
 800873e:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <UART_SetConfig+0x7c4>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	080087cf 	.word	0x080087cf
 8008748:	080087d7 	.word	0x080087d7
 800874c:	08008833 	.word	0x08008833
 8008750:	08008833 	.word	0x08008833
 8008754:	080087df 	.word	0x080087df
 8008758:	08008833 	.word	0x08008833
 800875c:	08008833 	.word	0x08008833
 8008760:	08008833 	.word	0x08008833
 8008764:	080087ef 	.word	0x080087ef
 8008768:	08008833 	.word	0x08008833
 800876c:	08008833 	.word	0x08008833
 8008770:	08008833 	.word	0x08008833
 8008774:	08008833 	.word	0x08008833
 8008778:	08008833 	.word	0x08008833
 800877c:	08008833 	.word	0x08008833
 8008780:	08008833 	.word	0x08008833
 8008784:	080087ff 	.word	0x080087ff
 8008788:	08008833 	.word	0x08008833
 800878c:	08008833 	.word	0x08008833
 8008790:	08008833 	.word	0x08008833
 8008794:	08008833 	.word	0x08008833
 8008798:	08008833 	.word	0x08008833
 800879c:	08008833 	.word	0x08008833
 80087a0:	08008833 	.word	0x08008833
 80087a4:	08008833 	.word	0x08008833
 80087a8:	08008833 	.word	0x08008833
 80087ac:	08008833 	.word	0x08008833
 80087b0:	08008833 	.word	0x08008833
 80087b4:	08008833 	.word	0x08008833
 80087b8:	08008833 	.word	0x08008833
 80087bc:	08008833 	.word	0x08008833
 80087c0:	08008833 	.word	0x08008833
 80087c4:	08008825 	.word	0x08008825
 80087c8:	2b40      	cmp	r3, #64	@ 0x40
 80087ca:	d02e      	beq.n	800882a <UART_SetConfig+0x8aa>
 80087cc:	e031      	b.n	8008832 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ce:	f7fc f9d9 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80087d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087d4:	e033      	b.n	800883e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087d6:	f7fc f9eb 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 80087da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087dc:	e02f      	b.n	800883e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe f99a 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ec:	e027      	b.n	800883e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ee:	f107 0318 	add.w	r3, r7, #24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fae6 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fc:	e01f      	b.n	800883e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087fe:	4b2d      	ldr	r3, [pc, #180]	@ (80088b4 <UART_SetConfig+0x934>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800880a:	4b2a      	ldr	r3, [pc, #168]	@ (80088b4 <UART_SetConfig+0x934>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	08db      	lsrs	r3, r3, #3
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	4a24      	ldr	r2, [pc, #144]	@ (80088a8 <UART_SetConfig+0x928>)
 8008816:	fa22 f303 	lsr.w	r3, r2, r3
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800881c:	e00f      	b.n	800883e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800881e:	4b22      	ldr	r3, [pc, #136]	@ (80088a8 <UART_SetConfig+0x928>)
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008822:	e00c      	b.n	800883e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008824:	4b21      	ldr	r3, [pc, #132]	@ (80088ac <UART_SetConfig+0x92c>)
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008828:	e009      	b.n	800883e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800882a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800882e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008830:	e005      	b.n	800883e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800883c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800883e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 80e7 	beq.w	8008a14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884a:	4a19      	ldr	r2, [pc, #100]	@ (80088b0 <UART_SetConfig+0x930>)
 800884c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008850:	461a      	mov	r2, r3
 8008852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008854:	fbb3 f3f2 	udiv	r3, r3, r2
 8008858:	005a      	lsls	r2, r3, #1
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	441a      	add	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800886c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886e:	2b0f      	cmp	r3, #15
 8008870:	d916      	bls.n	80088a0 <UART_SetConfig+0x920>
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008878:	d212      	bcs.n	80088a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	b29b      	uxth	r3, r3
 800887e:	f023 030f 	bic.w	r3, r3, #15
 8008882:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	b29b      	uxth	r3, r3
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	b29a      	uxth	r2, r3
 8008890:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008892:	4313      	orrs	r3, r2
 8008894:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800889c:	60da      	str	r2, [r3, #12]
 800889e:	e0b9      	b.n	8008a14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088a6:	e0b5      	b.n	8008a14 <UART_SetConfig+0xa94>
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	0800bab0 	.word	0x0800bab0
 80088b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80088b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088bc:	2b20      	cmp	r3, #32
 80088be:	dc49      	bgt.n	8008954 <UART_SetConfig+0x9d4>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db7c      	blt.n	80089be <UART_SetConfig+0xa3e>
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d87a      	bhi.n	80089be <UART_SetConfig+0xa3e>
 80088c8:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <UART_SetConfig+0x950>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	0800895b 	.word	0x0800895b
 80088d4:	08008963 	.word	0x08008963
 80088d8:	080089bf 	.word	0x080089bf
 80088dc:	080089bf 	.word	0x080089bf
 80088e0:	0800896b 	.word	0x0800896b
 80088e4:	080089bf 	.word	0x080089bf
 80088e8:	080089bf 	.word	0x080089bf
 80088ec:	080089bf 	.word	0x080089bf
 80088f0:	0800897b 	.word	0x0800897b
 80088f4:	080089bf 	.word	0x080089bf
 80088f8:	080089bf 	.word	0x080089bf
 80088fc:	080089bf 	.word	0x080089bf
 8008900:	080089bf 	.word	0x080089bf
 8008904:	080089bf 	.word	0x080089bf
 8008908:	080089bf 	.word	0x080089bf
 800890c:	080089bf 	.word	0x080089bf
 8008910:	0800898b 	.word	0x0800898b
 8008914:	080089bf 	.word	0x080089bf
 8008918:	080089bf 	.word	0x080089bf
 800891c:	080089bf 	.word	0x080089bf
 8008920:	080089bf 	.word	0x080089bf
 8008924:	080089bf 	.word	0x080089bf
 8008928:	080089bf 	.word	0x080089bf
 800892c:	080089bf 	.word	0x080089bf
 8008930:	080089bf 	.word	0x080089bf
 8008934:	080089bf 	.word	0x080089bf
 8008938:	080089bf 	.word	0x080089bf
 800893c:	080089bf 	.word	0x080089bf
 8008940:	080089bf 	.word	0x080089bf
 8008944:	080089bf 	.word	0x080089bf
 8008948:	080089bf 	.word	0x080089bf
 800894c:	080089bf 	.word	0x080089bf
 8008950:	080089b1 	.word	0x080089b1
 8008954:	2b40      	cmp	r3, #64	@ 0x40
 8008956:	d02e      	beq.n	80089b6 <UART_SetConfig+0xa36>
 8008958:	e031      	b.n	80089be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800895a:	f7fc f913 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 800895e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008960:	e033      	b.n	80089ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008962:	f7fc f925 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8008966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008968:	e02f      	b.n	80089ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800896a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe f8d4 	bl	8006b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	e027      	b.n	80089ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800897a:	f107 0318 	add.w	r3, r7, #24
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fa20 	bl	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e01f      	b.n	80089ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800898a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a40 <UART_SetConfig+0xac0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008996:	4b2a      	ldr	r3, [pc, #168]	@ (8008a40 <UART_SetConfig+0xac0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	08db      	lsrs	r3, r3, #3
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	4a28      	ldr	r2, [pc, #160]	@ (8008a44 <UART_SetConfig+0xac4>)
 80089a2:	fa22 f303 	lsr.w	r3, r2, r3
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089a8:	e00f      	b.n	80089ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80089aa:	4b26      	ldr	r3, [pc, #152]	@ (8008a44 <UART_SetConfig+0xac4>)
 80089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ae:	e00c      	b.n	80089ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089b0:	4b25      	ldr	r3, [pc, #148]	@ (8008a48 <UART_SetConfig+0xac8>)
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b4:	e009      	b.n	80089ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089bc:	e005      	b.n	80089ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089c8:	bf00      	nop
    }

    if (pclk != 0U)
 80089ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d021      	beq.n	8008a14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a4c <UART_SetConfig+0xacc>)
 80089d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089da:	461a      	mov	r2, r3
 80089dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089de:	fbb3 f2f2 	udiv	r2, r3, r2
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	441a      	add	r2, r3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d909      	bls.n	8008a0e <UART_SetConfig+0xa8e>
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a00:	d205      	bcs.n	8008a0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60da      	str	r2, [r3, #12]
 8008a0c:	e002      	b.n	8008a14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a30:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3748      	adds	r7, #72	@ 0x48
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a3e:	bf00      	nop
 8008a40:	58024400 	.word	0x58024400
 8008a44:	03d09000 	.word	0x03d09000
 8008a48:	003d0900 	.word	0x003d0900
 8008a4c:	0800bab0 	.word	0x0800bab0

08008a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01a      	beq.n	8008b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b4e:	d10a      	bne.n	8008b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	605a      	str	r2, [r3, #4]
  }
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b098      	sub	sp, #96	@ 0x60
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ba4:	f7f8 fba4 	bl	80012f0 <HAL_GetTick>
 8008ba8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d12f      	bne.n	8008c18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f88e 	bl	8008ce8 <UART_WaitOnFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d022      	beq.n	8008c18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e063      	b.n	8008ce0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d149      	bne.n	8008cba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f857 	bl	8008ce8 <UART_WaitOnFlagUntilTimeout>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d03c      	beq.n	8008cba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e6      	bne.n	8008c40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c92:	61fa      	str	r2, [r7, #28]
 8008c94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	69b9      	ldr	r1, [r7, #24]
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	617b      	str	r3, [r7, #20]
   return(result);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e5      	bne.n	8008c72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e012      	b.n	8008ce0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3758      	adds	r7, #88	@ 0x58
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf8:	e04f      	b.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d04b      	beq.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d02:	f7f8 faf5 	bl	80012f0 <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d302      	bcc.n	8008d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e04e      	b.n	8008dba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0304 	and.w	r3, r3, #4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d037      	beq.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b80      	cmp	r3, #128	@ 0x80
 8008d2e:	d034      	beq.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b40      	cmp	r3, #64	@ 0x40
 8008d34:	d031      	beq.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d110      	bne.n	8008d66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2208      	movs	r2, #8
 8008d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f839 	bl	8008dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2208      	movs	r2, #8
 8008d56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e029      	b.n	8008dba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d74:	d111      	bne.n	8008d9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 f81f 	bl	8008dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e00f      	b.n	8008dba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	69da      	ldr	r2, [r3, #28]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	4013      	ands	r3, r2
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	bf0c      	ite	eq
 8008daa:	2301      	moveq	r3, #1
 8008dac:	2300      	movne	r3, #0
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d0a0      	beq.n	8008cfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b095      	sub	sp, #84	@ 0x54
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008df0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e6      	bne.n	8008dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3308      	adds	r3, #8
 8008e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	e853 3f00 	ldrex	r3, [r3]
 8008e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	4b1e      	ldr	r3, [pc, #120]	@ (8008e8c <UART_EndRxTransfer+0xc8>)
 8008e12:	4013      	ands	r3, r2
 8008e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e26:	e841 2300 	strex	r3, r2, [r1]
 8008e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1e5      	bne.n	8008dfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d118      	bne.n	8008e6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	6979      	ldr	r1, [r7, #20]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	613b      	str	r3, [r7, #16]
   return(result);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e80:	bf00      	nop
 8008e82:	3754      	adds	r7, #84	@ 0x54
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	effffffe 	.word	0xeffffffe

08008e90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff f854 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed0:	61fb      	str	r3, [r7, #28]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	61bb      	str	r3, [r7, #24]
 8008edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	6979      	ldr	r1, [r7, #20]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e6      	bne.n	8008ebc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff f81f 	bl	8007f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f02:	bf00      	nop
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_UARTEx_DisableFifoMode+0x16>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e027      	b.n	8008fac <HAL_UARTEx_DisableFifoMode+0x66>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2224      	movs	r2, #36	@ 0x24
 8008f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0201 	bic.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d101      	bne.n	8008fd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e02d      	b.n	800902c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2224      	movs	r2, #36	@ 0x24
 8008fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0201 	bic.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f84f 	bl	80090b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009048:	2302      	movs	r3, #2
 800904a:	e02d      	b.n	80090a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2224      	movs	r2, #36	@ 0x24
 8009058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0201 	bic.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f811 	bl	80090b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d108      	bne.n	80090d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090d0:	e031      	b.n	8009136 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090d2:	2310      	movs	r3, #16
 80090d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090d6:	2310      	movs	r3, #16
 80090d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	0e5b      	lsrs	r3, r3, #25
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	0f5b      	lsrs	r3, r3, #29
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	7b3a      	ldrb	r2, [r7, #12]
 80090fe:	4911      	ldr	r1, [pc, #68]	@ (8009144 <UARTEx_SetNbDataToProcess+0x94>)
 8009100:	5c8a      	ldrb	r2, [r1, r2]
 8009102:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009106:	7b3a      	ldrb	r2, [r7, #12]
 8009108:	490f      	ldr	r1, [pc, #60]	@ (8009148 <UARTEx_SetNbDataToProcess+0x98>)
 800910a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800910c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009110:	b29a      	uxth	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	7b7a      	ldrb	r2, [r7, #13]
 800911c:	4909      	ldr	r1, [pc, #36]	@ (8009144 <UARTEx_SetNbDataToProcess+0x94>)
 800911e:	5c8a      	ldrb	r2, [r1, r2]
 8009120:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009124:	7b7a      	ldrb	r2, [r7, #13]
 8009126:	4908      	ldr	r1, [pc, #32]	@ (8009148 <UARTEx_SetNbDataToProcess+0x98>)
 8009128:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800912a:	fb93 f3f2 	sdiv	r3, r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009136:	bf00      	nop
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	0800bac8 	.word	0x0800bac8
 8009148:	0800bad0 	.word	0x0800bad0

0800914c <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800915e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009162:	d10e      	bne.n	8009182 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b01      	cmp	r3, #1
 8009170:	d107      	bne.n	8009182 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f06f 0201 	mvn.w	r2, #1
 800917a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f804 	bl	800918a <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <__cvt>:
 800919e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a0:	ed2d 8b02 	vpush	{d8}
 80091a4:	eeb0 8b40 	vmov.f64	d8, d0
 80091a8:	b085      	sub	sp, #20
 80091aa:	4617      	mov	r7, r2
 80091ac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80091ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091b0:	ee18 2a90 	vmov	r2, s17
 80091b4:	f025 0520 	bic.w	r5, r5, #32
 80091b8:	2a00      	cmp	r2, #0
 80091ba:	bfb6      	itet	lt
 80091bc:	222d      	movlt	r2, #45	@ 0x2d
 80091be:	2200      	movge	r2, #0
 80091c0:	eeb1 8b40 	vneglt.f64	d8, d0
 80091c4:	2d46      	cmp	r5, #70	@ 0x46
 80091c6:	460c      	mov	r4, r1
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	d004      	beq.n	80091d6 <__cvt+0x38>
 80091cc:	2d45      	cmp	r5, #69	@ 0x45
 80091ce:	d100      	bne.n	80091d2 <__cvt+0x34>
 80091d0:	3401      	adds	r4, #1
 80091d2:	2102      	movs	r1, #2
 80091d4:	e000      	b.n	80091d8 <__cvt+0x3a>
 80091d6:	2103      	movs	r1, #3
 80091d8:	ab03      	add	r3, sp, #12
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	ab02      	add	r3, sp, #8
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	4622      	mov	r2, r4
 80091e2:	4633      	mov	r3, r6
 80091e4:	eeb0 0b48 	vmov.f64	d0, d8
 80091e8:	f000 ff22 	bl	800a030 <_dtoa_r>
 80091ec:	2d47      	cmp	r5, #71	@ 0x47
 80091ee:	d114      	bne.n	800921a <__cvt+0x7c>
 80091f0:	07fb      	lsls	r3, r7, #31
 80091f2:	d50a      	bpl.n	800920a <__cvt+0x6c>
 80091f4:	1902      	adds	r2, r0, r4
 80091f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80091fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fe:	bf08      	it	eq
 8009200:	9203      	streq	r2, [sp, #12]
 8009202:	2130      	movs	r1, #48	@ 0x30
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	4293      	cmp	r3, r2
 8009208:	d319      	bcc.n	800923e <__cvt+0xa0>
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800920e:	1a1b      	subs	r3, r3, r0
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	b005      	add	sp, #20
 8009214:	ecbd 8b02 	vpop	{d8}
 8009218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921a:	2d46      	cmp	r5, #70	@ 0x46
 800921c:	eb00 0204 	add.w	r2, r0, r4
 8009220:	d1e9      	bne.n	80091f6 <__cvt+0x58>
 8009222:	7803      	ldrb	r3, [r0, #0]
 8009224:	2b30      	cmp	r3, #48	@ 0x30
 8009226:	d107      	bne.n	8009238 <__cvt+0x9a>
 8009228:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800922c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009230:	bf1c      	itt	ne
 8009232:	f1c4 0401 	rsbne	r4, r4, #1
 8009236:	6034      	strne	r4, [r6, #0]
 8009238:	6833      	ldr	r3, [r6, #0]
 800923a:	441a      	add	r2, r3
 800923c:	e7db      	b.n	80091f6 <__cvt+0x58>
 800923e:	1c5c      	adds	r4, r3, #1
 8009240:	9403      	str	r4, [sp, #12]
 8009242:	7019      	strb	r1, [r3, #0]
 8009244:	e7de      	b.n	8009204 <__cvt+0x66>

08009246 <__exponent>:
 8009246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009248:	2900      	cmp	r1, #0
 800924a:	bfba      	itte	lt
 800924c:	4249      	neglt	r1, r1
 800924e:	232d      	movlt	r3, #45	@ 0x2d
 8009250:	232b      	movge	r3, #43	@ 0x2b
 8009252:	2909      	cmp	r1, #9
 8009254:	7002      	strb	r2, [r0, #0]
 8009256:	7043      	strb	r3, [r0, #1]
 8009258:	dd29      	ble.n	80092ae <__exponent+0x68>
 800925a:	f10d 0307 	add.w	r3, sp, #7
 800925e:	461d      	mov	r5, r3
 8009260:	270a      	movs	r7, #10
 8009262:	461a      	mov	r2, r3
 8009264:	fbb1 f6f7 	udiv	r6, r1, r7
 8009268:	fb07 1416 	mls	r4, r7, r6, r1
 800926c:	3430      	adds	r4, #48	@ 0x30
 800926e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009272:	460c      	mov	r4, r1
 8009274:	2c63      	cmp	r4, #99	@ 0x63
 8009276:	f103 33ff 	add.w	r3, r3, #4294967295
 800927a:	4631      	mov	r1, r6
 800927c:	dcf1      	bgt.n	8009262 <__exponent+0x1c>
 800927e:	3130      	adds	r1, #48	@ 0x30
 8009280:	1e94      	subs	r4, r2, #2
 8009282:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009286:	1c41      	adds	r1, r0, #1
 8009288:	4623      	mov	r3, r4
 800928a:	42ab      	cmp	r3, r5
 800928c:	d30a      	bcc.n	80092a4 <__exponent+0x5e>
 800928e:	f10d 0309 	add.w	r3, sp, #9
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	42ac      	cmp	r4, r5
 8009296:	bf88      	it	hi
 8009298:	2300      	movhi	r3, #0
 800929a:	3302      	adds	r3, #2
 800929c:	4403      	add	r3, r0
 800929e:	1a18      	subs	r0, r3, r0
 80092a0:	b003      	add	sp, #12
 80092a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80092a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80092ac:	e7ed      	b.n	800928a <__exponent+0x44>
 80092ae:	2330      	movs	r3, #48	@ 0x30
 80092b0:	3130      	adds	r1, #48	@ 0x30
 80092b2:	7083      	strb	r3, [r0, #2]
 80092b4:	70c1      	strb	r1, [r0, #3]
 80092b6:	1d03      	adds	r3, r0, #4
 80092b8:	e7f1      	b.n	800929e <__exponent+0x58>
 80092ba:	0000      	movs	r0, r0
 80092bc:	0000      	movs	r0, r0
	...

080092c0 <_printf_float>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	b08d      	sub	sp, #52	@ 0x34
 80092c6:	460c      	mov	r4, r1
 80092c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80092cc:	4616      	mov	r6, r2
 80092ce:	461f      	mov	r7, r3
 80092d0:	4605      	mov	r5, r0
 80092d2:	f000 fdad 	bl	8009e30 <_localeconv_r>
 80092d6:	f8d0 b000 	ldr.w	fp, [r0]
 80092da:	4658      	mov	r0, fp
 80092dc:	f7f7 f850 	bl	8000380 <strlen>
 80092e0:	2300      	movs	r3, #0
 80092e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e4:	f8d8 3000 	ldr.w	r3, [r8]
 80092e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	9005      	str	r0, [sp, #20]
 80092f0:	3307      	adds	r3, #7
 80092f2:	f023 0307 	bic.w	r3, r3, #7
 80092f6:	f103 0108 	add.w	r1, r3, #8
 80092fa:	f8c8 1000 	str.w	r1, [r8]
 80092fe:	ed93 0b00 	vldr	d0, [r3]
 8009302:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009560 <_printf_float+0x2a0>
 8009306:	eeb0 7bc0 	vabs.f64	d7, d0
 800930a:	eeb4 7b46 	vcmp.f64	d7, d6
 800930e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009312:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009316:	dd24      	ble.n	8009362 <_printf_float+0xa2>
 8009318:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800931c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009320:	d502      	bpl.n	8009328 <_printf_float+0x68>
 8009322:	232d      	movs	r3, #45	@ 0x2d
 8009324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009328:	498f      	ldr	r1, [pc, #572]	@ (8009568 <_printf_float+0x2a8>)
 800932a:	4b90      	ldr	r3, [pc, #576]	@ (800956c <_printf_float+0x2ac>)
 800932c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009330:	bf8c      	ite	hi
 8009332:	4688      	movhi	r8, r1
 8009334:	4698      	movls	r8, r3
 8009336:	f022 0204 	bic.w	r2, r2, #4
 800933a:	2303      	movs	r3, #3
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	6022      	str	r2, [r4, #0]
 8009340:	f04f 0a00 	mov.w	sl, #0
 8009344:	9700      	str	r7, [sp, #0]
 8009346:	4633      	mov	r3, r6
 8009348:	aa0b      	add	r2, sp, #44	@ 0x2c
 800934a:	4621      	mov	r1, r4
 800934c:	4628      	mov	r0, r5
 800934e:	f000 f9d1 	bl	80096f4 <_printf_common>
 8009352:	3001      	adds	r0, #1
 8009354:	f040 8089 	bne.w	800946a <_printf_float+0x1aa>
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	b00d      	add	sp, #52	@ 0x34
 800935e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009362:	eeb4 0b40 	vcmp.f64	d0, d0
 8009366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936a:	d709      	bvc.n	8009380 <_printf_float+0xc0>
 800936c:	ee10 3a90 	vmov	r3, s1
 8009370:	2b00      	cmp	r3, #0
 8009372:	bfbc      	itt	lt
 8009374:	232d      	movlt	r3, #45	@ 0x2d
 8009376:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800937a:	497d      	ldr	r1, [pc, #500]	@ (8009570 <_printf_float+0x2b0>)
 800937c:	4b7d      	ldr	r3, [pc, #500]	@ (8009574 <_printf_float+0x2b4>)
 800937e:	e7d5      	b.n	800932c <_printf_float+0x6c>
 8009380:	6863      	ldr	r3, [r4, #4]
 8009382:	1c59      	adds	r1, r3, #1
 8009384:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009388:	d139      	bne.n	80093fe <_printf_float+0x13e>
 800938a:	2306      	movs	r3, #6
 800938c:	6063      	str	r3, [r4, #4]
 800938e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009392:	2300      	movs	r3, #0
 8009394:	6022      	str	r2, [r4, #0]
 8009396:	9303      	str	r3, [sp, #12]
 8009398:	ab0a      	add	r3, sp, #40	@ 0x28
 800939a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800939e:	ab09      	add	r3, sp, #36	@ 0x24
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	6861      	ldr	r1, [r4, #4]
 80093a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80093a8:	4628      	mov	r0, r5
 80093aa:	f7ff fef8 	bl	800919e <__cvt>
 80093ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80093b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093b4:	4680      	mov	r8, r0
 80093b6:	d129      	bne.n	800940c <_printf_float+0x14c>
 80093b8:	1cc8      	adds	r0, r1, #3
 80093ba:	db02      	blt.n	80093c2 <_printf_float+0x102>
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	4299      	cmp	r1, r3
 80093c0:	dd41      	ble.n	8009446 <_printf_float+0x186>
 80093c2:	f1a9 0902 	sub.w	r9, r9, #2
 80093c6:	fa5f f989 	uxtb.w	r9, r9
 80093ca:	3901      	subs	r1, #1
 80093cc:	464a      	mov	r2, r9
 80093ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80093d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80093d4:	f7ff ff37 	bl	8009246 <__exponent>
 80093d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093da:	1813      	adds	r3, r2, r0
 80093dc:	2a01      	cmp	r2, #1
 80093de:	4682      	mov	sl, r0
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	dc02      	bgt.n	80093ea <_printf_float+0x12a>
 80093e4:	6822      	ldr	r2, [r4, #0]
 80093e6:	07d2      	lsls	r2, r2, #31
 80093e8:	d501      	bpl.n	80093ee <_printf_float+0x12e>
 80093ea:	3301      	adds	r3, #1
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0a6      	beq.n	8009344 <_printf_float+0x84>
 80093f6:	232d      	movs	r3, #45	@ 0x2d
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093fc:	e7a2      	b.n	8009344 <_printf_float+0x84>
 80093fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009402:	d1c4      	bne.n	800938e <_printf_float+0xce>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1c2      	bne.n	800938e <_printf_float+0xce>
 8009408:	2301      	movs	r3, #1
 800940a:	e7bf      	b.n	800938c <_printf_float+0xcc>
 800940c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009410:	d9db      	bls.n	80093ca <_printf_float+0x10a>
 8009412:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009416:	d118      	bne.n	800944a <_printf_float+0x18a>
 8009418:	2900      	cmp	r1, #0
 800941a:	6863      	ldr	r3, [r4, #4]
 800941c:	dd0b      	ble.n	8009436 <_printf_float+0x176>
 800941e:	6121      	str	r1, [r4, #16]
 8009420:	b913      	cbnz	r3, 8009428 <_printf_float+0x168>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	07d0      	lsls	r0, r2, #31
 8009426:	d502      	bpl.n	800942e <_printf_float+0x16e>
 8009428:	3301      	adds	r3, #1
 800942a:	440b      	add	r3, r1
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009430:	f04f 0a00 	mov.w	sl, #0
 8009434:	e7db      	b.n	80093ee <_printf_float+0x12e>
 8009436:	b913      	cbnz	r3, 800943e <_printf_float+0x17e>
 8009438:	6822      	ldr	r2, [r4, #0]
 800943a:	07d2      	lsls	r2, r2, #31
 800943c:	d501      	bpl.n	8009442 <_printf_float+0x182>
 800943e:	3302      	adds	r3, #2
 8009440:	e7f4      	b.n	800942c <_printf_float+0x16c>
 8009442:	2301      	movs	r3, #1
 8009444:	e7f2      	b.n	800942c <_printf_float+0x16c>
 8009446:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800944a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800944c:	4299      	cmp	r1, r3
 800944e:	db05      	blt.n	800945c <_printf_float+0x19c>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	6121      	str	r1, [r4, #16]
 8009454:	07d8      	lsls	r0, r3, #31
 8009456:	d5ea      	bpl.n	800942e <_printf_float+0x16e>
 8009458:	1c4b      	adds	r3, r1, #1
 800945a:	e7e7      	b.n	800942c <_printf_float+0x16c>
 800945c:	2900      	cmp	r1, #0
 800945e:	bfd4      	ite	le
 8009460:	f1c1 0202 	rsble	r2, r1, #2
 8009464:	2201      	movgt	r2, #1
 8009466:	4413      	add	r3, r2
 8009468:	e7e0      	b.n	800942c <_printf_float+0x16c>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	055a      	lsls	r2, r3, #21
 800946e:	d407      	bmi.n	8009480 <_printf_float+0x1c0>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	4642      	mov	r2, r8
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	d12a      	bne.n	80094d4 <_printf_float+0x214>
 800947e:	e76b      	b.n	8009358 <_printf_float+0x98>
 8009480:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009484:	f240 80e0 	bls.w	8009648 <_printf_float+0x388>
 8009488:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800948c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009494:	d133      	bne.n	80094fe <_printf_float+0x23e>
 8009496:	4a38      	ldr	r2, [pc, #224]	@ (8009578 <_printf_float+0x2b8>)
 8009498:	2301      	movs	r3, #1
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	f43f af59 	beq.w	8009358 <_printf_float+0x98>
 80094a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80094aa:	4543      	cmp	r3, r8
 80094ac:	db02      	blt.n	80094b4 <_printf_float+0x1f4>
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	07d8      	lsls	r0, r3, #31
 80094b2:	d50f      	bpl.n	80094d4 <_printf_float+0x214>
 80094b4:	9b05      	ldr	r3, [sp, #20]
 80094b6:	465a      	mov	r2, fp
 80094b8:	4631      	mov	r1, r6
 80094ba:	4628      	mov	r0, r5
 80094bc:	47b8      	blx	r7
 80094be:	3001      	adds	r0, #1
 80094c0:	f43f af4a 	beq.w	8009358 <_printf_float+0x98>
 80094c4:	f04f 0900 	mov.w	r9, #0
 80094c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80094cc:	f104 0a1a 	add.w	sl, r4, #26
 80094d0:	45c8      	cmp	r8, r9
 80094d2:	dc09      	bgt.n	80094e8 <_printf_float+0x228>
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	079b      	lsls	r3, r3, #30
 80094d8:	f100 8107 	bmi.w	80096ea <_printf_float+0x42a>
 80094dc:	68e0      	ldr	r0, [r4, #12]
 80094de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094e0:	4298      	cmp	r0, r3
 80094e2:	bfb8      	it	lt
 80094e4:	4618      	movlt	r0, r3
 80094e6:	e739      	b.n	800935c <_printf_float+0x9c>
 80094e8:	2301      	movs	r3, #1
 80094ea:	4652      	mov	r2, sl
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f af30 	beq.w	8009358 <_printf_float+0x98>
 80094f8:	f109 0901 	add.w	r9, r9, #1
 80094fc:	e7e8      	b.n	80094d0 <_printf_float+0x210>
 80094fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	dc3b      	bgt.n	800957c <_printf_float+0x2bc>
 8009504:	4a1c      	ldr	r2, [pc, #112]	@ (8009578 <_printf_float+0x2b8>)
 8009506:	2301      	movs	r3, #1
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	47b8      	blx	r7
 800950e:	3001      	adds	r0, #1
 8009510:	f43f af22 	beq.w	8009358 <_printf_float+0x98>
 8009514:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009518:	ea59 0303 	orrs.w	r3, r9, r3
 800951c:	d102      	bne.n	8009524 <_printf_float+0x264>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	07d9      	lsls	r1, r3, #31
 8009522:	d5d7      	bpl.n	80094d4 <_printf_float+0x214>
 8009524:	9b05      	ldr	r3, [sp, #20]
 8009526:	465a      	mov	r2, fp
 8009528:	4631      	mov	r1, r6
 800952a:	4628      	mov	r0, r5
 800952c:	47b8      	blx	r7
 800952e:	3001      	adds	r0, #1
 8009530:	f43f af12 	beq.w	8009358 <_printf_float+0x98>
 8009534:	f04f 0a00 	mov.w	sl, #0
 8009538:	f104 0b1a 	add.w	fp, r4, #26
 800953c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953e:	425b      	negs	r3, r3
 8009540:	4553      	cmp	r3, sl
 8009542:	dc01      	bgt.n	8009548 <_printf_float+0x288>
 8009544:	464b      	mov	r3, r9
 8009546:	e794      	b.n	8009472 <_printf_float+0x1b2>
 8009548:	2301      	movs	r3, #1
 800954a:	465a      	mov	r2, fp
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f af00 	beq.w	8009358 <_printf_float+0x98>
 8009558:	f10a 0a01 	add.w	sl, sl, #1
 800955c:	e7ee      	b.n	800953c <_printf_float+0x27c>
 800955e:	bf00      	nop
 8009560:	ffffffff 	.word	0xffffffff
 8009564:	7fefffff 	.word	0x7fefffff
 8009568:	0800badc 	.word	0x0800badc
 800956c:	0800bad8 	.word	0x0800bad8
 8009570:	0800bae4 	.word	0x0800bae4
 8009574:	0800bae0 	.word	0x0800bae0
 8009578:	0800bae8 	.word	0x0800bae8
 800957c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800957e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009582:	4553      	cmp	r3, sl
 8009584:	bfa8      	it	ge
 8009586:	4653      	movge	r3, sl
 8009588:	2b00      	cmp	r3, #0
 800958a:	4699      	mov	r9, r3
 800958c:	dc37      	bgt.n	80095fe <_printf_float+0x33e>
 800958e:	2300      	movs	r3, #0
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009596:	f104 021a 	add.w	r2, r4, #26
 800959a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800959c:	9907      	ldr	r1, [sp, #28]
 800959e:	9306      	str	r3, [sp, #24]
 80095a0:	eba3 0309 	sub.w	r3, r3, r9
 80095a4:	428b      	cmp	r3, r1
 80095a6:	dc31      	bgt.n	800960c <_printf_float+0x34c>
 80095a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095aa:	459a      	cmp	sl, r3
 80095ac:	dc3b      	bgt.n	8009626 <_printf_float+0x366>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	07da      	lsls	r2, r3, #31
 80095b2:	d438      	bmi.n	8009626 <_printf_float+0x366>
 80095b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b6:	ebaa 0903 	sub.w	r9, sl, r3
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	ebaa 0303 	sub.w	r3, sl, r3
 80095c0:	4599      	cmp	r9, r3
 80095c2:	bfa8      	it	ge
 80095c4:	4699      	movge	r9, r3
 80095c6:	f1b9 0f00 	cmp.w	r9, #0
 80095ca:	dc34      	bgt.n	8009636 <_printf_float+0x376>
 80095cc:	f04f 0800 	mov.w	r8, #0
 80095d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095d4:	f104 0b1a 	add.w	fp, r4, #26
 80095d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095da:	ebaa 0303 	sub.w	r3, sl, r3
 80095de:	eba3 0309 	sub.w	r3, r3, r9
 80095e2:	4543      	cmp	r3, r8
 80095e4:	f77f af76 	ble.w	80094d4 <_printf_float+0x214>
 80095e8:	2301      	movs	r3, #1
 80095ea:	465a      	mov	r2, fp
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f aeb0 	beq.w	8009358 <_printf_float+0x98>
 80095f8:	f108 0801 	add.w	r8, r8, #1
 80095fc:	e7ec      	b.n	80095d8 <_printf_float+0x318>
 80095fe:	4642      	mov	r2, r8
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	d1c1      	bne.n	800958e <_printf_float+0x2ce>
 800960a:	e6a5      	b.n	8009358 <_printf_float+0x98>
 800960c:	2301      	movs	r3, #1
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	9206      	str	r2, [sp, #24]
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f ae9e 	beq.w	8009358 <_printf_float+0x98>
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	9a06      	ldr	r2, [sp, #24]
 8009620:	3301      	adds	r3, #1
 8009622:	9307      	str	r3, [sp, #28]
 8009624:	e7b9      	b.n	800959a <_printf_float+0x2da>
 8009626:	9b05      	ldr	r3, [sp, #20]
 8009628:	465a      	mov	r2, fp
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	d1bf      	bne.n	80095b4 <_printf_float+0x2f4>
 8009634:	e690      	b.n	8009358 <_printf_float+0x98>
 8009636:	9a06      	ldr	r2, [sp, #24]
 8009638:	464b      	mov	r3, r9
 800963a:	4442      	add	r2, r8
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	d1c2      	bne.n	80095cc <_printf_float+0x30c>
 8009646:	e687      	b.n	8009358 <_printf_float+0x98>
 8009648:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800964c:	f1b9 0f01 	cmp.w	r9, #1
 8009650:	dc01      	bgt.n	8009656 <_printf_float+0x396>
 8009652:	07db      	lsls	r3, r3, #31
 8009654:	d536      	bpl.n	80096c4 <_printf_float+0x404>
 8009656:	2301      	movs	r3, #1
 8009658:	4642      	mov	r2, r8
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f ae79 	beq.w	8009358 <_printf_float+0x98>
 8009666:	9b05      	ldr	r3, [sp, #20]
 8009668:	465a      	mov	r2, fp
 800966a:	4631      	mov	r1, r6
 800966c:	4628      	mov	r0, r5
 800966e:	47b8      	blx	r7
 8009670:	3001      	adds	r0, #1
 8009672:	f43f ae71 	beq.w	8009358 <_printf_float+0x98>
 8009676:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800967a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	f109 39ff 	add.w	r9, r9, #4294967295
 8009686:	d018      	beq.n	80096ba <_printf_float+0x3fa>
 8009688:	464b      	mov	r3, r9
 800968a:	f108 0201 	add.w	r2, r8, #1
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	d10c      	bne.n	80096b2 <_printf_float+0x3f2>
 8009698:	e65e      	b.n	8009358 <_printf_float+0x98>
 800969a:	2301      	movs	r3, #1
 800969c:	465a      	mov	r2, fp
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f ae57 	beq.w	8009358 <_printf_float+0x98>
 80096aa:	f108 0801 	add.w	r8, r8, #1
 80096ae:	45c8      	cmp	r8, r9
 80096b0:	dbf3      	blt.n	800969a <_printf_float+0x3da>
 80096b2:	4653      	mov	r3, sl
 80096b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096b8:	e6dc      	b.n	8009474 <_printf_float+0x1b4>
 80096ba:	f04f 0800 	mov.w	r8, #0
 80096be:	f104 0b1a 	add.w	fp, r4, #26
 80096c2:	e7f4      	b.n	80096ae <_printf_float+0x3ee>
 80096c4:	2301      	movs	r3, #1
 80096c6:	4642      	mov	r2, r8
 80096c8:	e7e1      	b.n	800968e <_printf_float+0x3ce>
 80096ca:	2301      	movs	r3, #1
 80096cc:	464a      	mov	r2, r9
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f ae3f 	beq.w	8009358 <_printf_float+0x98>
 80096da:	f108 0801 	add.w	r8, r8, #1
 80096de:	68e3      	ldr	r3, [r4, #12]
 80096e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096e2:	1a5b      	subs	r3, r3, r1
 80096e4:	4543      	cmp	r3, r8
 80096e6:	dcf0      	bgt.n	80096ca <_printf_float+0x40a>
 80096e8:	e6f8      	b.n	80094dc <_printf_float+0x21c>
 80096ea:	f04f 0800 	mov.w	r8, #0
 80096ee:	f104 0919 	add.w	r9, r4, #25
 80096f2:	e7f4      	b.n	80096de <_printf_float+0x41e>

080096f4 <_printf_common>:
 80096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	4616      	mov	r6, r2
 80096fa:	4698      	mov	r8, r3
 80096fc:	688a      	ldr	r2, [r1, #8]
 80096fe:	690b      	ldr	r3, [r1, #16]
 8009700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009704:	4293      	cmp	r3, r2
 8009706:	bfb8      	it	lt
 8009708:	4613      	movlt	r3, r2
 800970a:	6033      	str	r3, [r6, #0]
 800970c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009710:	4607      	mov	r7, r0
 8009712:	460c      	mov	r4, r1
 8009714:	b10a      	cbz	r2, 800971a <_printf_common+0x26>
 8009716:	3301      	adds	r3, #1
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	0699      	lsls	r1, r3, #26
 800971e:	bf42      	ittt	mi
 8009720:	6833      	ldrmi	r3, [r6, #0]
 8009722:	3302      	addmi	r3, #2
 8009724:	6033      	strmi	r3, [r6, #0]
 8009726:	6825      	ldr	r5, [r4, #0]
 8009728:	f015 0506 	ands.w	r5, r5, #6
 800972c:	d106      	bne.n	800973c <_printf_common+0x48>
 800972e:	f104 0a19 	add.w	sl, r4, #25
 8009732:	68e3      	ldr	r3, [r4, #12]
 8009734:	6832      	ldr	r2, [r6, #0]
 8009736:	1a9b      	subs	r3, r3, r2
 8009738:	42ab      	cmp	r3, r5
 800973a:	dc26      	bgt.n	800978a <_printf_common+0x96>
 800973c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009740:	6822      	ldr	r2, [r4, #0]
 8009742:	3b00      	subs	r3, #0
 8009744:	bf18      	it	ne
 8009746:	2301      	movne	r3, #1
 8009748:	0692      	lsls	r2, r2, #26
 800974a:	d42b      	bmi.n	80097a4 <_printf_common+0xb0>
 800974c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009750:	4641      	mov	r1, r8
 8009752:	4638      	mov	r0, r7
 8009754:	47c8      	blx	r9
 8009756:	3001      	adds	r0, #1
 8009758:	d01e      	beq.n	8009798 <_printf_common+0xa4>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	6922      	ldr	r2, [r4, #16]
 800975e:	f003 0306 	and.w	r3, r3, #6
 8009762:	2b04      	cmp	r3, #4
 8009764:	bf02      	ittt	eq
 8009766:	68e5      	ldreq	r5, [r4, #12]
 8009768:	6833      	ldreq	r3, [r6, #0]
 800976a:	1aed      	subeq	r5, r5, r3
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	bf0c      	ite	eq
 8009770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009774:	2500      	movne	r5, #0
 8009776:	4293      	cmp	r3, r2
 8009778:	bfc4      	itt	gt
 800977a:	1a9b      	subgt	r3, r3, r2
 800977c:	18ed      	addgt	r5, r5, r3
 800977e:	2600      	movs	r6, #0
 8009780:	341a      	adds	r4, #26
 8009782:	42b5      	cmp	r5, r6
 8009784:	d11a      	bne.n	80097bc <_printf_common+0xc8>
 8009786:	2000      	movs	r0, #0
 8009788:	e008      	b.n	800979c <_printf_common+0xa8>
 800978a:	2301      	movs	r3, #1
 800978c:	4652      	mov	r2, sl
 800978e:	4641      	mov	r1, r8
 8009790:	4638      	mov	r0, r7
 8009792:	47c8      	blx	r9
 8009794:	3001      	adds	r0, #1
 8009796:	d103      	bne.n	80097a0 <_printf_common+0xac>
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a0:	3501      	adds	r5, #1
 80097a2:	e7c6      	b.n	8009732 <_printf_common+0x3e>
 80097a4:	18e1      	adds	r1, r4, r3
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	2030      	movs	r0, #48	@ 0x30
 80097aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097ae:	4422      	add	r2, r4
 80097b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097b8:	3302      	adds	r3, #2
 80097ba:	e7c7      	b.n	800974c <_printf_common+0x58>
 80097bc:	2301      	movs	r3, #1
 80097be:	4622      	mov	r2, r4
 80097c0:	4641      	mov	r1, r8
 80097c2:	4638      	mov	r0, r7
 80097c4:	47c8      	blx	r9
 80097c6:	3001      	adds	r0, #1
 80097c8:	d0e6      	beq.n	8009798 <_printf_common+0xa4>
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7d9      	b.n	8009782 <_printf_common+0x8e>
	...

080097d0 <_printf_i>:
 80097d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	7e0f      	ldrb	r7, [r1, #24]
 80097d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097d8:	2f78      	cmp	r7, #120	@ 0x78
 80097da:	4691      	mov	r9, r2
 80097dc:	4680      	mov	r8, r0
 80097de:	460c      	mov	r4, r1
 80097e0:	469a      	mov	sl, r3
 80097e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097e6:	d807      	bhi.n	80097f8 <_printf_i+0x28>
 80097e8:	2f62      	cmp	r7, #98	@ 0x62
 80097ea:	d80a      	bhi.n	8009802 <_printf_i+0x32>
 80097ec:	2f00      	cmp	r7, #0
 80097ee:	f000 80d1 	beq.w	8009994 <_printf_i+0x1c4>
 80097f2:	2f58      	cmp	r7, #88	@ 0x58
 80097f4:	f000 80b8 	beq.w	8009968 <_printf_i+0x198>
 80097f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009800:	e03a      	b.n	8009878 <_printf_i+0xa8>
 8009802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009806:	2b15      	cmp	r3, #21
 8009808:	d8f6      	bhi.n	80097f8 <_printf_i+0x28>
 800980a:	a101      	add	r1, pc, #4	@ (adr r1, 8009810 <_printf_i+0x40>)
 800980c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009810:	08009869 	.word	0x08009869
 8009814:	0800987d 	.word	0x0800987d
 8009818:	080097f9 	.word	0x080097f9
 800981c:	080097f9 	.word	0x080097f9
 8009820:	080097f9 	.word	0x080097f9
 8009824:	080097f9 	.word	0x080097f9
 8009828:	0800987d 	.word	0x0800987d
 800982c:	080097f9 	.word	0x080097f9
 8009830:	080097f9 	.word	0x080097f9
 8009834:	080097f9 	.word	0x080097f9
 8009838:	080097f9 	.word	0x080097f9
 800983c:	0800997b 	.word	0x0800997b
 8009840:	080098a7 	.word	0x080098a7
 8009844:	08009935 	.word	0x08009935
 8009848:	080097f9 	.word	0x080097f9
 800984c:	080097f9 	.word	0x080097f9
 8009850:	0800999d 	.word	0x0800999d
 8009854:	080097f9 	.word	0x080097f9
 8009858:	080098a7 	.word	0x080098a7
 800985c:	080097f9 	.word	0x080097f9
 8009860:	080097f9 	.word	0x080097f9
 8009864:	0800993d 	.word	0x0800993d
 8009868:	6833      	ldr	r3, [r6, #0]
 800986a:	1d1a      	adds	r2, r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6032      	str	r2, [r6, #0]
 8009870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009878:	2301      	movs	r3, #1
 800987a:	e09c      	b.n	80099b6 <_printf_i+0x1e6>
 800987c:	6833      	ldr	r3, [r6, #0]
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	1d19      	adds	r1, r3, #4
 8009882:	6031      	str	r1, [r6, #0]
 8009884:	0606      	lsls	r6, r0, #24
 8009886:	d501      	bpl.n	800988c <_printf_i+0xbc>
 8009888:	681d      	ldr	r5, [r3, #0]
 800988a:	e003      	b.n	8009894 <_printf_i+0xc4>
 800988c:	0645      	lsls	r5, r0, #25
 800988e:	d5fb      	bpl.n	8009888 <_printf_i+0xb8>
 8009890:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009894:	2d00      	cmp	r5, #0
 8009896:	da03      	bge.n	80098a0 <_printf_i+0xd0>
 8009898:	232d      	movs	r3, #45	@ 0x2d
 800989a:	426d      	negs	r5, r5
 800989c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098a0:	4858      	ldr	r0, [pc, #352]	@ (8009a04 <_printf_i+0x234>)
 80098a2:	230a      	movs	r3, #10
 80098a4:	e011      	b.n	80098ca <_printf_i+0xfa>
 80098a6:	6821      	ldr	r1, [r4, #0]
 80098a8:	6833      	ldr	r3, [r6, #0]
 80098aa:	0608      	lsls	r0, r1, #24
 80098ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80098b0:	d402      	bmi.n	80098b8 <_printf_i+0xe8>
 80098b2:	0649      	lsls	r1, r1, #25
 80098b4:	bf48      	it	mi
 80098b6:	b2ad      	uxthmi	r5, r5
 80098b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80098ba:	4852      	ldr	r0, [pc, #328]	@ (8009a04 <_printf_i+0x234>)
 80098bc:	6033      	str	r3, [r6, #0]
 80098be:	bf14      	ite	ne
 80098c0:	230a      	movne	r3, #10
 80098c2:	2308      	moveq	r3, #8
 80098c4:	2100      	movs	r1, #0
 80098c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098ca:	6866      	ldr	r6, [r4, #4]
 80098cc:	60a6      	str	r6, [r4, #8]
 80098ce:	2e00      	cmp	r6, #0
 80098d0:	db05      	blt.n	80098de <_printf_i+0x10e>
 80098d2:	6821      	ldr	r1, [r4, #0]
 80098d4:	432e      	orrs	r6, r5
 80098d6:	f021 0104 	bic.w	r1, r1, #4
 80098da:	6021      	str	r1, [r4, #0]
 80098dc:	d04b      	beq.n	8009976 <_printf_i+0x1a6>
 80098de:	4616      	mov	r6, r2
 80098e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80098e4:	fb03 5711 	mls	r7, r3, r1, r5
 80098e8:	5dc7      	ldrb	r7, [r0, r7]
 80098ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098ee:	462f      	mov	r7, r5
 80098f0:	42bb      	cmp	r3, r7
 80098f2:	460d      	mov	r5, r1
 80098f4:	d9f4      	bls.n	80098e0 <_printf_i+0x110>
 80098f6:	2b08      	cmp	r3, #8
 80098f8:	d10b      	bne.n	8009912 <_printf_i+0x142>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	07df      	lsls	r7, r3, #31
 80098fe:	d508      	bpl.n	8009912 <_printf_i+0x142>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	6861      	ldr	r1, [r4, #4]
 8009904:	4299      	cmp	r1, r3
 8009906:	bfde      	ittt	le
 8009908:	2330      	movle	r3, #48	@ 0x30
 800990a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800990e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009912:	1b92      	subs	r2, r2, r6
 8009914:	6122      	str	r2, [r4, #16]
 8009916:	f8cd a000 	str.w	sl, [sp]
 800991a:	464b      	mov	r3, r9
 800991c:	aa03      	add	r2, sp, #12
 800991e:	4621      	mov	r1, r4
 8009920:	4640      	mov	r0, r8
 8009922:	f7ff fee7 	bl	80096f4 <_printf_common>
 8009926:	3001      	adds	r0, #1
 8009928:	d14a      	bne.n	80099c0 <_printf_i+0x1f0>
 800992a:	f04f 30ff 	mov.w	r0, #4294967295
 800992e:	b004      	add	sp, #16
 8009930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	f043 0320 	orr.w	r3, r3, #32
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	4832      	ldr	r0, [pc, #200]	@ (8009a08 <_printf_i+0x238>)
 800993e:	2778      	movs	r7, #120	@ 0x78
 8009940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	6831      	ldr	r1, [r6, #0]
 8009948:	061f      	lsls	r7, r3, #24
 800994a:	f851 5b04 	ldr.w	r5, [r1], #4
 800994e:	d402      	bmi.n	8009956 <_printf_i+0x186>
 8009950:	065f      	lsls	r7, r3, #25
 8009952:	bf48      	it	mi
 8009954:	b2ad      	uxthmi	r5, r5
 8009956:	6031      	str	r1, [r6, #0]
 8009958:	07d9      	lsls	r1, r3, #31
 800995a:	bf44      	itt	mi
 800995c:	f043 0320 	orrmi.w	r3, r3, #32
 8009960:	6023      	strmi	r3, [r4, #0]
 8009962:	b11d      	cbz	r5, 800996c <_printf_i+0x19c>
 8009964:	2310      	movs	r3, #16
 8009966:	e7ad      	b.n	80098c4 <_printf_i+0xf4>
 8009968:	4826      	ldr	r0, [pc, #152]	@ (8009a04 <_printf_i+0x234>)
 800996a:	e7e9      	b.n	8009940 <_printf_i+0x170>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	f023 0320 	bic.w	r3, r3, #32
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	e7f6      	b.n	8009964 <_printf_i+0x194>
 8009976:	4616      	mov	r6, r2
 8009978:	e7bd      	b.n	80098f6 <_printf_i+0x126>
 800997a:	6833      	ldr	r3, [r6, #0]
 800997c:	6825      	ldr	r5, [r4, #0]
 800997e:	6961      	ldr	r1, [r4, #20]
 8009980:	1d18      	adds	r0, r3, #4
 8009982:	6030      	str	r0, [r6, #0]
 8009984:	062e      	lsls	r6, r5, #24
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	d501      	bpl.n	800998e <_printf_i+0x1be>
 800998a:	6019      	str	r1, [r3, #0]
 800998c:	e002      	b.n	8009994 <_printf_i+0x1c4>
 800998e:	0668      	lsls	r0, r5, #25
 8009990:	d5fb      	bpl.n	800998a <_printf_i+0x1ba>
 8009992:	8019      	strh	r1, [r3, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	6123      	str	r3, [r4, #16]
 8009998:	4616      	mov	r6, r2
 800999a:	e7bc      	b.n	8009916 <_printf_i+0x146>
 800999c:	6833      	ldr	r3, [r6, #0]
 800999e:	1d1a      	adds	r2, r3, #4
 80099a0:	6032      	str	r2, [r6, #0]
 80099a2:	681e      	ldr	r6, [r3, #0]
 80099a4:	6862      	ldr	r2, [r4, #4]
 80099a6:	2100      	movs	r1, #0
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7f6 fc99 	bl	80002e0 <memchr>
 80099ae:	b108      	cbz	r0, 80099b4 <_printf_i+0x1e4>
 80099b0:	1b80      	subs	r0, r0, r6
 80099b2:	6060      	str	r0, [r4, #4]
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	2300      	movs	r3, #0
 80099ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099be:	e7aa      	b.n	8009916 <_printf_i+0x146>
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	4632      	mov	r2, r6
 80099c4:	4649      	mov	r1, r9
 80099c6:	4640      	mov	r0, r8
 80099c8:	47d0      	blx	sl
 80099ca:	3001      	adds	r0, #1
 80099cc:	d0ad      	beq.n	800992a <_printf_i+0x15a>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	079b      	lsls	r3, r3, #30
 80099d2:	d413      	bmi.n	80099fc <_printf_i+0x22c>
 80099d4:	68e0      	ldr	r0, [r4, #12]
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	4298      	cmp	r0, r3
 80099da:	bfb8      	it	lt
 80099dc:	4618      	movlt	r0, r3
 80099de:	e7a6      	b.n	800992e <_printf_i+0x15e>
 80099e0:	2301      	movs	r3, #1
 80099e2:	4632      	mov	r2, r6
 80099e4:	4649      	mov	r1, r9
 80099e6:	4640      	mov	r0, r8
 80099e8:	47d0      	blx	sl
 80099ea:	3001      	adds	r0, #1
 80099ec:	d09d      	beq.n	800992a <_printf_i+0x15a>
 80099ee:	3501      	adds	r5, #1
 80099f0:	68e3      	ldr	r3, [r4, #12]
 80099f2:	9903      	ldr	r1, [sp, #12]
 80099f4:	1a5b      	subs	r3, r3, r1
 80099f6:	42ab      	cmp	r3, r5
 80099f8:	dcf2      	bgt.n	80099e0 <_printf_i+0x210>
 80099fa:	e7eb      	b.n	80099d4 <_printf_i+0x204>
 80099fc:	2500      	movs	r5, #0
 80099fe:	f104 0619 	add.w	r6, r4, #25
 8009a02:	e7f5      	b.n	80099f0 <_printf_i+0x220>
 8009a04:	0800baea 	.word	0x0800baea
 8009a08:	0800bafb 	.word	0x0800bafb

08009a0c <std>:
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	4604      	mov	r4, r0
 8009a12:	e9c0 3300 	strd	r3, r3, [r0]
 8009a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a1a:	6083      	str	r3, [r0, #8]
 8009a1c:	8181      	strh	r1, [r0, #12]
 8009a1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a20:	81c2      	strh	r2, [r0, #14]
 8009a22:	6183      	str	r3, [r0, #24]
 8009a24:	4619      	mov	r1, r3
 8009a26:	2208      	movs	r2, #8
 8009a28:	305c      	adds	r0, #92	@ 0x5c
 8009a2a:	f000 f9f9 	bl	8009e20 <memset>
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a64 <std+0x58>)
 8009a30:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a32:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <std+0x5c>)
 8009a34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a36:	4b0d      	ldr	r3, [pc, #52]	@ (8009a6c <std+0x60>)
 8009a38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <std+0x64>)
 8009a3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <std+0x68>)
 8009a40:	6224      	str	r4, [r4, #32]
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d006      	beq.n	8009a54 <std+0x48>
 8009a46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a4a:	4294      	cmp	r4, r2
 8009a4c:	d002      	beq.n	8009a54 <std+0x48>
 8009a4e:	33d0      	adds	r3, #208	@ 0xd0
 8009a50:	429c      	cmp	r4, r3
 8009a52:	d105      	bne.n	8009a60 <std+0x54>
 8009a54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5c:	f000 ba5c 	b.w	8009f18 <__retarget_lock_init_recursive>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop
 8009a64:	08009c71 	.word	0x08009c71
 8009a68:	08009c93 	.word	0x08009c93
 8009a6c:	08009ccb 	.word	0x08009ccb
 8009a70:	08009cef 	.word	0x08009cef
 8009a74:	24000308 	.word	0x24000308

08009a78 <stdio_exit_handler>:
 8009a78:	4a02      	ldr	r2, [pc, #8]	@ (8009a84 <stdio_exit_handler+0xc>)
 8009a7a:	4903      	ldr	r1, [pc, #12]	@ (8009a88 <stdio_exit_handler+0x10>)
 8009a7c:	4803      	ldr	r0, [pc, #12]	@ (8009a8c <stdio_exit_handler+0x14>)
 8009a7e:	f000 b869 	b.w	8009b54 <_fwalk_sglue>
 8009a82:	bf00      	nop
 8009a84:	24000010 	.word	0x24000010
 8009a88:	0800b76d 	.word	0x0800b76d
 8009a8c:	24000020 	.word	0x24000020

08009a90 <cleanup_stdio>:
 8009a90:	6841      	ldr	r1, [r0, #4]
 8009a92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <cleanup_stdio+0x34>)
 8009a94:	4299      	cmp	r1, r3
 8009a96:	b510      	push	{r4, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	d001      	beq.n	8009aa0 <cleanup_stdio+0x10>
 8009a9c:	f001 fe66 	bl	800b76c <_fflush_r>
 8009aa0:	68a1      	ldr	r1, [r4, #8]
 8009aa2:	4b09      	ldr	r3, [pc, #36]	@ (8009ac8 <cleanup_stdio+0x38>)
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	d002      	beq.n	8009aae <cleanup_stdio+0x1e>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 fe5f 	bl	800b76c <_fflush_r>
 8009aae:	68e1      	ldr	r1, [r4, #12]
 8009ab0:	4b06      	ldr	r3, [pc, #24]	@ (8009acc <cleanup_stdio+0x3c>)
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	d004      	beq.n	8009ac0 <cleanup_stdio+0x30>
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abc:	f001 be56 	b.w	800b76c <_fflush_r>
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	bf00      	nop
 8009ac4:	24000308 	.word	0x24000308
 8009ac8:	24000370 	.word	0x24000370
 8009acc:	240003d8 	.word	0x240003d8

08009ad0 <global_stdio_init.part.0>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8009b00 <global_stdio_init.part.0+0x30>)
 8009ad4:	4c0b      	ldr	r4, [pc, #44]	@ (8009b04 <global_stdio_init.part.0+0x34>)
 8009ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8009b08 <global_stdio_init.part.0+0x38>)
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	4620      	mov	r0, r4
 8009adc:	2200      	movs	r2, #0
 8009ade:	2104      	movs	r1, #4
 8009ae0:	f7ff ff94 	bl	8009a0c <std>
 8009ae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ae8:	2201      	movs	r2, #1
 8009aea:	2109      	movs	r1, #9
 8009aec:	f7ff ff8e 	bl	8009a0c <std>
 8009af0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009af4:	2202      	movs	r2, #2
 8009af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afa:	2112      	movs	r1, #18
 8009afc:	f7ff bf86 	b.w	8009a0c <std>
 8009b00:	24000440 	.word	0x24000440
 8009b04:	24000308 	.word	0x24000308
 8009b08:	08009a79 	.word	0x08009a79

08009b0c <__sfp_lock_acquire>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	@ (8009b14 <__sfp_lock_acquire+0x8>)
 8009b0e:	f000 ba04 	b.w	8009f1a <__retarget_lock_acquire_recursive>
 8009b12:	bf00      	nop
 8009b14:	24000449 	.word	0x24000449

08009b18 <__sfp_lock_release>:
 8009b18:	4801      	ldr	r0, [pc, #4]	@ (8009b20 <__sfp_lock_release+0x8>)
 8009b1a:	f000 b9ff 	b.w	8009f1c <__retarget_lock_release_recursive>
 8009b1e:	bf00      	nop
 8009b20:	24000449 	.word	0x24000449

08009b24 <__sinit>:
 8009b24:	b510      	push	{r4, lr}
 8009b26:	4604      	mov	r4, r0
 8009b28:	f7ff fff0 	bl	8009b0c <__sfp_lock_acquire>
 8009b2c:	6a23      	ldr	r3, [r4, #32]
 8009b2e:	b11b      	cbz	r3, 8009b38 <__sinit+0x14>
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b34:	f7ff bff0 	b.w	8009b18 <__sfp_lock_release>
 8009b38:	4b04      	ldr	r3, [pc, #16]	@ (8009b4c <__sinit+0x28>)
 8009b3a:	6223      	str	r3, [r4, #32]
 8009b3c:	4b04      	ldr	r3, [pc, #16]	@ (8009b50 <__sinit+0x2c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1f5      	bne.n	8009b30 <__sinit+0xc>
 8009b44:	f7ff ffc4 	bl	8009ad0 <global_stdio_init.part.0>
 8009b48:	e7f2      	b.n	8009b30 <__sinit+0xc>
 8009b4a:	bf00      	nop
 8009b4c:	08009a91 	.word	0x08009a91
 8009b50:	24000440 	.word	0x24000440

08009b54 <_fwalk_sglue>:
 8009b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b58:	4607      	mov	r7, r0
 8009b5a:	4688      	mov	r8, r1
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	2600      	movs	r6, #0
 8009b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b64:	f1b9 0901 	subs.w	r9, r9, #1
 8009b68:	d505      	bpl.n	8009b76 <_fwalk_sglue+0x22>
 8009b6a:	6824      	ldr	r4, [r4, #0]
 8009b6c:	2c00      	cmp	r4, #0
 8009b6e:	d1f7      	bne.n	8009b60 <_fwalk_sglue+0xc>
 8009b70:	4630      	mov	r0, r6
 8009b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d907      	bls.n	8009b8c <_fwalk_sglue+0x38>
 8009b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b80:	3301      	adds	r3, #1
 8009b82:	d003      	beq.n	8009b8c <_fwalk_sglue+0x38>
 8009b84:	4629      	mov	r1, r5
 8009b86:	4638      	mov	r0, r7
 8009b88:	47c0      	blx	r8
 8009b8a:	4306      	orrs	r6, r0
 8009b8c:	3568      	adds	r5, #104	@ 0x68
 8009b8e:	e7e9      	b.n	8009b64 <_fwalk_sglue+0x10>

08009b90 <iprintf>:
 8009b90:	b40f      	push	{r0, r1, r2, r3}
 8009b92:	b507      	push	{r0, r1, r2, lr}
 8009b94:	4906      	ldr	r1, [pc, #24]	@ (8009bb0 <iprintf+0x20>)
 8009b96:	ab04      	add	r3, sp, #16
 8009b98:	6808      	ldr	r0, [r1, #0]
 8009b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9e:	6881      	ldr	r1, [r0, #8]
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	f001 fc47 	bl	800b434 <_vfiprintf_r>
 8009ba6:	b003      	add	sp, #12
 8009ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bac:	b004      	add	sp, #16
 8009bae:	4770      	bx	lr
 8009bb0:	2400001c 	.word	0x2400001c

08009bb4 <_puts_r>:
 8009bb4:	6a03      	ldr	r3, [r0, #32]
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	6884      	ldr	r4, [r0, #8]
 8009bba:	4605      	mov	r5, r0
 8009bbc:	460e      	mov	r6, r1
 8009bbe:	b90b      	cbnz	r3, 8009bc4 <_puts_r+0x10>
 8009bc0:	f7ff ffb0 	bl	8009b24 <__sinit>
 8009bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc6:	07db      	lsls	r3, r3, #31
 8009bc8:	d405      	bmi.n	8009bd6 <_puts_r+0x22>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	0598      	lsls	r0, r3, #22
 8009bce:	d402      	bmi.n	8009bd6 <_puts_r+0x22>
 8009bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bd2:	f000 f9a2 	bl	8009f1a <__retarget_lock_acquire_recursive>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	0719      	lsls	r1, r3, #28
 8009bda:	d502      	bpl.n	8009be2 <_puts_r+0x2e>
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d135      	bne.n	8009c4e <_puts_r+0x9a>
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f8c5 	bl	8009d74 <__swsetup_r>
 8009bea:	b380      	cbz	r0, 8009c4e <_puts_r+0x9a>
 8009bec:	f04f 35ff 	mov.w	r5, #4294967295
 8009bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bf2:	07da      	lsls	r2, r3, #31
 8009bf4:	d405      	bmi.n	8009c02 <_puts_r+0x4e>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	059b      	lsls	r3, r3, #22
 8009bfa:	d402      	bmi.n	8009c02 <_puts_r+0x4e>
 8009bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bfe:	f000 f98d 	bl	8009f1c <__retarget_lock_release_recursive>
 8009c02:	4628      	mov	r0, r5
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da04      	bge.n	8009c14 <_puts_r+0x60>
 8009c0a:	69a2      	ldr	r2, [r4, #24]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	dc17      	bgt.n	8009c40 <_puts_r+0x8c>
 8009c10:	290a      	cmp	r1, #10
 8009c12:	d015      	beq.n	8009c40 <_puts_r+0x8c>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	6022      	str	r2, [r4, #0]
 8009c1a:	7019      	strb	r1, [r3, #0]
 8009c1c:	68a3      	ldr	r3, [r4, #8]
 8009c1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c22:	3b01      	subs	r3, #1
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d1ed      	bne.n	8009c06 <_puts_r+0x52>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	da11      	bge.n	8009c52 <_puts_r+0x9e>
 8009c2e:	4622      	mov	r2, r4
 8009c30:	210a      	movs	r1, #10
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 f85f 	bl	8009cf6 <__swbuf_r>
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d0d7      	beq.n	8009bec <_puts_r+0x38>
 8009c3c:	250a      	movs	r5, #10
 8009c3e:	e7d7      	b.n	8009bf0 <_puts_r+0x3c>
 8009c40:	4622      	mov	r2, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 f857 	bl	8009cf6 <__swbuf_r>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d1e7      	bne.n	8009c1c <_puts_r+0x68>
 8009c4c:	e7ce      	b.n	8009bec <_puts_r+0x38>
 8009c4e:	3e01      	subs	r6, #1
 8009c50:	e7e4      	b.n	8009c1c <_puts_r+0x68>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	6022      	str	r2, [r4, #0]
 8009c58:	220a      	movs	r2, #10
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e7ee      	b.n	8009c3c <_puts_r+0x88>
	...

08009c60 <puts>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	@ (8009c6c <puts+0xc>)
 8009c62:	4601      	mov	r1, r0
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f7ff bfa5 	b.w	8009bb4 <_puts_r>
 8009c6a:	bf00      	nop
 8009c6c:	2400001c 	.word	0x2400001c

08009c70 <__sread>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c78:	f000 f900 	bl	8009e7c <_read_r>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	bfab      	itete	ge
 8009c80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c82:	89a3      	ldrhlt	r3, [r4, #12]
 8009c84:	181b      	addge	r3, r3, r0
 8009c86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c8a:	bfac      	ite	ge
 8009c8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c8e:	81a3      	strhlt	r3, [r4, #12]
 8009c90:	bd10      	pop	{r4, pc}

08009c92 <__swrite>:
 8009c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c96:	461f      	mov	r7, r3
 8009c98:	898b      	ldrh	r3, [r1, #12]
 8009c9a:	05db      	lsls	r3, r3, #23
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	d505      	bpl.n	8009cb0 <__swrite+0x1e>
 8009ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca8:	2302      	movs	r3, #2
 8009caa:	2200      	movs	r2, #0
 8009cac:	f000 f8d4 	bl	8009e58 <_lseek_r>
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	f000 b8eb 	b.w	8009ea0 <_write_r>

08009cca <__sseek>:
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	460c      	mov	r4, r1
 8009cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd2:	f000 f8c1 	bl	8009e58 <_lseek_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	bf15      	itete	ne
 8009cdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ce2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ce6:	81a3      	strheq	r3, [r4, #12]
 8009ce8:	bf18      	it	ne
 8009cea:	81a3      	strhne	r3, [r4, #12]
 8009cec:	bd10      	pop	{r4, pc}

08009cee <__sclose>:
 8009cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf2:	f000 b8a1 	b.w	8009e38 <_close_r>

08009cf6 <__swbuf_r>:
 8009cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	4614      	mov	r4, r2
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	b118      	cbz	r0, 8009d08 <__swbuf_r+0x12>
 8009d00:	6a03      	ldr	r3, [r0, #32]
 8009d02:	b90b      	cbnz	r3, 8009d08 <__swbuf_r+0x12>
 8009d04:	f7ff ff0e 	bl	8009b24 <__sinit>
 8009d08:	69a3      	ldr	r3, [r4, #24]
 8009d0a:	60a3      	str	r3, [r4, #8]
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	071a      	lsls	r2, r3, #28
 8009d10:	d501      	bpl.n	8009d16 <__swbuf_r+0x20>
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	b943      	cbnz	r3, 8009d28 <__swbuf_r+0x32>
 8009d16:	4621      	mov	r1, r4
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f000 f82b 	bl	8009d74 <__swsetup_r>
 8009d1e:	b118      	cbz	r0, 8009d28 <__swbuf_r+0x32>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295
 8009d24:	4638      	mov	r0, r7
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	6922      	ldr	r2, [r4, #16]
 8009d2c:	1a98      	subs	r0, r3, r2
 8009d2e:	6963      	ldr	r3, [r4, #20]
 8009d30:	b2f6      	uxtb	r6, r6
 8009d32:	4283      	cmp	r3, r0
 8009d34:	4637      	mov	r7, r6
 8009d36:	dc05      	bgt.n	8009d44 <__swbuf_r+0x4e>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f001 fd16 	bl	800b76c <_fflush_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1ed      	bne.n	8009d20 <__swbuf_r+0x2a>
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	60a3      	str	r3, [r4, #8]
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	701e      	strb	r6, [r3, #0]
 8009d52:	6962      	ldr	r2, [r4, #20]
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d004      	beq.n	8009d64 <__swbuf_r+0x6e>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	07db      	lsls	r3, r3, #31
 8009d5e:	d5e1      	bpl.n	8009d24 <__swbuf_r+0x2e>
 8009d60:	2e0a      	cmp	r6, #10
 8009d62:	d1df      	bne.n	8009d24 <__swbuf_r+0x2e>
 8009d64:	4621      	mov	r1, r4
 8009d66:	4628      	mov	r0, r5
 8009d68:	f001 fd00 	bl	800b76c <_fflush_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d0d9      	beq.n	8009d24 <__swbuf_r+0x2e>
 8009d70:	e7d6      	b.n	8009d20 <__swbuf_r+0x2a>
	...

08009d74 <__swsetup_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4b29      	ldr	r3, [pc, #164]	@ (8009e1c <__swsetup_r+0xa8>)
 8009d78:	4605      	mov	r5, r0
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	b118      	cbz	r0, 8009d88 <__swsetup_r+0x14>
 8009d80:	6a03      	ldr	r3, [r0, #32]
 8009d82:	b90b      	cbnz	r3, 8009d88 <__swsetup_r+0x14>
 8009d84:	f7ff fece 	bl	8009b24 <__sinit>
 8009d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8c:	0719      	lsls	r1, r3, #28
 8009d8e:	d422      	bmi.n	8009dd6 <__swsetup_r+0x62>
 8009d90:	06da      	lsls	r2, r3, #27
 8009d92:	d407      	bmi.n	8009da4 <__swsetup_r+0x30>
 8009d94:	2209      	movs	r2, #9
 8009d96:	602a      	str	r2, [r5, #0]
 8009d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	e033      	b.n	8009e0c <__swsetup_r+0x98>
 8009da4:	0758      	lsls	r0, r3, #29
 8009da6:	d512      	bpl.n	8009dce <__swsetup_r+0x5a>
 8009da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009daa:	b141      	cbz	r1, 8009dbe <__swsetup_r+0x4a>
 8009dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009db0:	4299      	cmp	r1, r3
 8009db2:	d002      	beq.n	8009dba <__swsetup_r+0x46>
 8009db4:	4628      	mov	r0, r5
 8009db6:	f000 fe99 	bl	800aaec <_free_r>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dc4:	81a3      	strh	r3, [r4, #12]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6063      	str	r3, [r4, #4]
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f043 0308 	orr.w	r3, r3, #8
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	b94b      	cbnz	r3, 8009dee <__swsetup_r+0x7a>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de4:	d003      	beq.n	8009dee <__swsetup_r+0x7a>
 8009de6:	4621      	mov	r1, r4
 8009de8:	4628      	mov	r0, r5
 8009dea:	f001 fd0d 	bl	800b808 <__smakebuf_r>
 8009dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df2:	f013 0201 	ands.w	r2, r3, #1
 8009df6:	d00a      	beq.n	8009e0e <__swsetup_r+0x9a>
 8009df8:	2200      	movs	r2, #0
 8009dfa:	60a2      	str	r2, [r4, #8]
 8009dfc:	6962      	ldr	r2, [r4, #20]
 8009dfe:	4252      	negs	r2, r2
 8009e00:	61a2      	str	r2, [r4, #24]
 8009e02:	6922      	ldr	r2, [r4, #16]
 8009e04:	b942      	cbnz	r2, 8009e18 <__swsetup_r+0xa4>
 8009e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e0a:	d1c5      	bne.n	8009d98 <__swsetup_r+0x24>
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	0799      	lsls	r1, r3, #30
 8009e10:	bf58      	it	pl
 8009e12:	6962      	ldrpl	r2, [r4, #20]
 8009e14:	60a2      	str	r2, [r4, #8]
 8009e16:	e7f4      	b.n	8009e02 <__swsetup_r+0x8e>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7f7      	b.n	8009e0c <__swsetup_r+0x98>
 8009e1c:	2400001c 	.word	0x2400001c

08009e20 <memset>:
 8009e20:	4402      	add	r2, r0
 8009e22:	4603      	mov	r3, r0
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d100      	bne.n	8009e2a <memset+0xa>
 8009e28:	4770      	bx	lr
 8009e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e2e:	e7f9      	b.n	8009e24 <memset+0x4>

08009e30 <_localeconv_r>:
 8009e30:	4800      	ldr	r0, [pc, #0]	@ (8009e34 <_localeconv_r+0x4>)
 8009e32:	4770      	bx	lr
 8009e34:	2400015c 	.word	0x2400015c

08009e38 <_close_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d06      	ldr	r5, [pc, #24]	@ (8009e54 <_close_r+0x1c>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f6 ffb0 	bl	8000da8 <_close>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_close_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_close_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	24000444 	.word	0x24000444

08009e58 <_lseek_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	@ (8009e78 <_lseek_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7f6 ffc5 	bl	8000df6 <_lseek>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_lseek_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_lseek_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	24000444 	.word	0x24000444

08009e7c <_read_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d07      	ldr	r5, [pc, #28]	@ (8009e9c <_read_r+0x20>)
 8009e80:	4604      	mov	r4, r0
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	602a      	str	r2, [r5, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f7f6 ff53 	bl	8000d36 <_read>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_read_r+0x1e>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_read_r+0x1e>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	24000444 	.word	0x24000444

08009ea0 <_write_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	@ (8009ec0 <_write_r+0x20>)
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	602a      	str	r2, [r5, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f7f6 ff5e 	bl	8000d70 <_write>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_write_r+0x1e>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_write_r+0x1e>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	24000444 	.word	0x24000444

08009ec4 <__errno>:
 8009ec4:	4b01      	ldr	r3, [pc, #4]	@ (8009ecc <__errno+0x8>)
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	2400001c 	.word	0x2400001c

08009ed0 <__libc_init_array>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8009f08 <__libc_init_array+0x38>)
 8009ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8009f0c <__libc_init_array+0x3c>)
 8009ed6:	1b64      	subs	r4, r4, r5
 8009ed8:	10a4      	asrs	r4, r4, #2
 8009eda:	2600      	movs	r6, #0
 8009edc:	42a6      	cmp	r6, r4
 8009ede:	d109      	bne.n	8009ef4 <__libc_init_array+0x24>
 8009ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8009f10 <__libc_init_array+0x40>)
 8009ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8009f14 <__libc_init_array+0x44>)
 8009ee4:	f001 fdbc 	bl	800ba60 <_init>
 8009ee8:	1b64      	subs	r4, r4, r5
 8009eea:	10a4      	asrs	r4, r4, #2
 8009eec:	2600      	movs	r6, #0
 8009eee:	42a6      	cmp	r6, r4
 8009ef0:	d105      	bne.n	8009efe <__libc_init_array+0x2e>
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef8:	4798      	blx	r3
 8009efa:	3601      	adds	r6, #1
 8009efc:	e7ee      	b.n	8009edc <__libc_init_array+0xc>
 8009efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f02:	4798      	blx	r3
 8009f04:	3601      	adds	r6, #1
 8009f06:	e7f2      	b.n	8009eee <__libc_init_array+0x1e>
 8009f08:	0800be54 	.word	0x0800be54
 8009f0c:	0800be54 	.word	0x0800be54
 8009f10:	0800be54 	.word	0x0800be54
 8009f14:	0800be58 	.word	0x0800be58

08009f18 <__retarget_lock_init_recursive>:
 8009f18:	4770      	bx	lr

08009f1a <__retarget_lock_acquire_recursive>:
 8009f1a:	4770      	bx	lr

08009f1c <__retarget_lock_release_recursive>:
 8009f1c:	4770      	bx	lr

08009f1e <quorem>:
 8009f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f22:	6903      	ldr	r3, [r0, #16]
 8009f24:	690c      	ldr	r4, [r1, #16]
 8009f26:	42a3      	cmp	r3, r4
 8009f28:	4607      	mov	r7, r0
 8009f2a:	db7e      	blt.n	800a02a <quorem+0x10c>
 8009f2c:	3c01      	subs	r4, #1
 8009f2e:	f101 0814 	add.w	r8, r1, #20
 8009f32:	00a3      	lsls	r3, r4, #2
 8009f34:	f100 0514 	add.w	r5, r0, #20
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f50:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f54:	d32e      	bcc.n	8009fb4 <quorem+0x96>
 8009f56:	f04f 0a00 	mov.w	sl, #0
 8009f5a:	46c4      	mov	ip, r8
 8009f5c:	46ae      	mov	lr, r5
 8009f5e:	46d3      	mov	fp, sl
 8009f60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f64:	b298      	uxth	r0, r3
 8009f66:	fb06 a000 	mla	r0, r6, r0, sl
 8009f6a:	0c02      	lsrs	r2, r0, #16
 8009f6c:	0c1b      	lsrs	r3, r3, #16
 8009f6e:	fb06 2303 	mla	r3, r6, r3, r2
 8009f72:	f8de 2000 	ldr.w	r2, [lr]
 8009f76:	b280      	uxth	r0, r0
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	1a12      	subs	r2, r2, r0
 8009f7c:	445a      	add	r2, fp
 8009f7e:	f8de 0000 	ldr.w	r0, [lr]
 8009f82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f90:	b292      	uxth	r2, r2
 8009f92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f96:	45e1      	cmp	r9, ip
 8009f98:	f84e 2b04 	str.w	r2, [lr], #4
 8009f9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009fa0:	d2de      	bcs.n	8009f60 <quorem+0x42>
 8009fa2:	9b00      	ldr	r3, [sp, #0]
 8009fa4:	58eb      	ldr	r3, [r5, r3]
 8009fa6:	b92b      	cbnz	r3, 8009fb4 <quorem+0x96>
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	3b04      	subs	r3, #4
 8009fac:	429d      	cmp	r5, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	d32f      	bcc.n	800a012 <quorem+0xf4>
 8009fb2:	613c      	str	r4, [r7, #16]
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f001 f90b 	bl	800b1d0 <__mcmp>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	db25      	blt.n	800a00a <quorem+0xec>
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fc6:	f8d1 c000 	ldr.w	ip, [r1]
 8009fca:	fa1f fe82 	uxth.w	lr, r2
 8009fce:	fa1f f38c 	uxth.w	r3, ip
 8009fd2:	eba3 030e 	sub.w	r3, r3, lr
 8009fd6:	4403      	add	r3, r0
 8009fd8:	0c12      	lsrs	r2, r2, #16
 8009fda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fe8:	45c1      	cmp	r9, r8
 8009fea:	f841 3b04 	str.w	r3, [r1], #4
 8009fee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ff2:	d2e6      	bcs.n	8009fc2 <quorem+0xa4>
 8009ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ffc:	b922      	cbnz	r2, 800a008 <quorem+0xea>
 8009ffe:	3b04      	subs	r3, #4
 800a000:	429d      	cmp	r5, r3
 800a002:	461a      	mov	r2, r3
 800a004:	d30b      	bcc.n	800a01e <quorem+0x100>
 800a006:	613c      	str	r4, [r7, #16]
 800a008:	3601      	adds	r6, #1
 800a00a:	4630      	mov	r0, r6
 800a00c:	b003      	add	sp, #12
 800a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a012:	6812      	ldr	r2, [r2, #0]
 800a014:	3b04      	subs	r3, #4
 800a016:	2a00      	cmp	r2, #0
 800a018:	d1cb      	bne.n	8009fb2 <quorem+0x94>
 800a01a:	3c01      	subs	r4, #1
 800a01c:	e7c6      	b.n	8009fac <quorem+0x8e>
 800a01e:	6812      	ldr	r2, [r2, #0]
 800a020:	3b04      	subs	r3, #4
 800a022:	2a00      	cmp	r2, #0
 800a024:	d1ef      	bne.n	800a006 <quorem+0xe8>
 800a026:	3c01      	subs	r4, #1
 800a028:	e7ea      	b.n	800a000 <quorem+0xe2>
 800a02a:	2000      	movs	r0, #0
 800a02c:	e7ee      	b.n	800a00c <quorem+0xee>
	...

0800a030 <_dtoa_r>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	ed2d 8b02 	vpush	{d8}
 800a038:	69c7      	ldr	r7, [r0, #28]
 800a03a:	b091      	sub	sp, #68	@ 0x44
 800a03c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a040:	ec55 4b10 	vmov	r4, r5, d0
 800a044:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a046:	9107      	str	r1, [sp, #28]
 800a048:	4681      	mov	r9, r0
 800a04a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a04c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a04e:	b97f      	cbnz	r7, 800a070 <_dtoa_r+0x40>
 800a050:	2010      	movs	r0, #16
 800a052:	f000 fd95 	bl	800ab80 <malloc>
 800a056:	4602      	mov	r2, r0
 800a058:	f8c9 001c 	str.w	r0, [r9, #28]
 800a05c:	b920      	cbnz	r0, 800a068 <_dtoa_r+0x38>
 800a05e:	4ba0      	ldr	r3, [pc, #640]	@ (800a2e0 <_dtoa_r+0x2b0>)
 800a060:	21ef      	movs	r1, #239	@ 0xef
 800a062:	48a0      	ldr	r0, [pc, #640]	@ (800a2e4 <_dtoa_r+0x2b4>)
 800a064:	f001 fc4c 	bl	800b900 <__assert_func>
 800a068:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a06c:	6007      	str	r7, [r0, #0]
 800a06e:	60c7      	str	r7, [r0, #12]
 800a070:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a074:	6819      	ldr	r1, [r3, #0]
 800a076:	b159      	cbz	r1, 800a090 <_dtoa_r+0x60>
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	604a      	str	r2, [r1, #4]
 800a07c:	2301      	movs	r3, #1
 800a07e:	4093      	lsls	r3, r2
 800a080:	608b      	str	r3, [r1, #8]
 800a082:	4648      	mov	r0, r9
 800a084:	f000 fe72 	bl	800ad6c <_Bfree>
 800a088:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	1e2b      	subs	r3, r5, #0
 800a092:	bfbb      	ittet	lt
 800a094:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a098:	9303      	strlt	r3, [sp, #12]
 800a09a:	2300      	movge	r3, #0
 800a09c:	2201      	movlt	r2, #1
 800a09e:	bfac      	ite	ge
 800a0a0:	6033      	strge	r3, [r6, #0]
 800a0a2:	6032      	strlt	r2, [r6, #0]
 800a0a4:	4b90      	ldr	r3, [pc, #576]	@ (800a2e8 <_dtoa_r+0x2b8>)
 800a0a6:	9e03      	ldr	r6, [sp, #12]
 800a0a8:	43b3      	bics	r3, r6
 800a0aa:	d110      	bne.n	800a0ce <_dtoa_r+0x9e>
 800a0ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a0b8:	4323      	orrs	r3, r4
 800a0ba:	f000 84e6 	beq.w	800aa8a <_dtoa_r+0xa5a>
 800a0be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0c0:	4f8a      	ldr	r7, [pc, #552]	@ (800a2ec <_dtoa_r+0x2bc>)
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 84e8 	beq.w	800aa98 <_dtoa_r+0xa68>
 800a0c8:	1cfb      	adds	r3, r7, #3
 800a0ca:	f000 bce3 	b.w	800aa94 <_dtoa_r+0xa64>
 800a0ce:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a0d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0da:	d10a      	bne.n	800a0f2 <_dtoa_r+0xc2>
 800a0dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0de:	2301      	movs	r3, #1
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0e4:	b113      	cbz	r3, 800a0ec <_dtoa_r+0xbc>
 800a0e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a0e8:	4b81      	ldr	r3, [pc, #516]	@ (800a2f0 <_dtoa_r+0x2c0>)
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	4f81      	ldr	r7, [pc, #516]	@ (800a2f4 <_dtoa_r+0x2c4>)
 800a0ee:	f000 bcd3 	b.w	800aa98 <_dtoa_r+0xa68>
 800a0f2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a0f4:	a90f      	add	r1, sp, #60	@ 0x3c
 800a0f6:	4648      	mov	r0, r9
 800a0f8:	eeb0 0b48 	vmov.f64	d0, d8
 800a0fc:	f001 f918 	bl	800b330 <__d2b>
 800a100:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a106:	9001      	str	r0, [sp, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d045      	beq.n	800a198 <_dtoa_r+0x168>
 800a10c:	eeb0 7b48 	vmov.f64	d7, d8
 800a110:	ee18 1a90 	vmov	r1, s17
 800a114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a118:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a11c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a120:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a124:	2500      	movs	r5, #0
 800a126:	ee07 1a90 	vmov	s15, r1
 800a12a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a12e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a2c8 <_dtoa_r+0x298>
 800a132:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a136:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a2d0 <_dtoa_r+0x2a0>
 800a13a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a13e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a2d8 <_dtoa_r+0x2a8>
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a14a:	eeb0 7b46 	vmov.f64	d7, d6
 800a14e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a152:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a156:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15e:	ee16 8a90 	vmov	r8, s13
 800a162:	d508      	bpl.n	800a176 <_dtoa_r+0x146>
 800a164:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a168:	eeb4 6b47 	vcmp.f64	d6, d7
 800a16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a170:	bf18      	it	ne
 800a172:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a176:	f1b8 0f16 	cmp.w	r8, #22
 800a17a:	d82b      	bhi.n	800a1d4 <_dtoa_r+0x1a4>
 800a17c:	495e      	ldr	r1, [pc, #376]	@ (800a2f8 <_dtoa_r+0x2c8>)
 800a17e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a182:	ed91 7b00 	vldr	d7, [r1]
 800a186:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18e:	d501      	bpl.n	800a194 <_dtoa_r+0x164>
 800a190:	f108 38ff 	add.w	r8, r8, #4294967295
 800a194:	2100      	movs	r1, #0
 800a196:	e01e      	b.n	800a1d6 <_dtoa_r+0x1a6>
 800a198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a19a:	4413      	add	r3, r2
 800a19c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a1a0:	2920      	cmp	r1, #32
 800a1a2:	bfc1      	itttt	gt
 800a1a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a1a8:	408e      	lslgt	r6, r1
 800a1aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a1ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a1b2:	bfd6      	itet	le
 800a1b4:	f1c1 0120 	rsble	r1, r1, #32
 800a1b8:	4331      	orrgt	r1, r6
 800a1ba:	fa04 f101 	lslle.w	r1, r4, r1
 800a1be:	ee07 1a90 	vmov	s15, r1
 800a1c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	ee17 1a90 	vmov	r1, s15
 800a1cc:	2501      	movs	r5, #1
 800a1ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a1d2:	e7a8      	b.n	800a126 <_dtoa_r+0xf6>
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	1ad2      	subs	r2, r2, r3
 800a1d8:	1e53      	subs	r3, r2, #1
 800a1da:	9306      	str	r3, [sp, #24]
 800a1dc:	bf45      	ittet	mi
 800a1de:	f1c2 0301 	rsbmi	r3, r2, #1
 800a1e2:	9304      	strmi	r3, [sp, #16]
 800a1e4:	2300      	movpl	r3, #0
 800a1e6:	2300      	movmi	r3, #0
 800a1e8:	bf4c      	ite	mi
 800a1ea:	9306      	strmi	r3, [sp, #24]
 800a1ec:	9304      	strpl	r3, [sp, #16]
 800a1ee:	f1b8 0f00 	cmp.w	r8, #0
 800a1f2:	910c      	str	r1, [sp, #48]	@ 0x30
 800a1f4:	db18      	blt.n	800a228 <_dtoa_r+0x1f8>
 800a1f6:	9b06      	ldr	r3, [sp, #24]
 800a1f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a1fc:	4443      	add	r3, r8
 800a1fe:	9306      	str	r3, [sp, #24]
 800a200:	2300      	movs	r3, #0
 800a202:	9a07      	ldr	r2, [sp, #28]
 800a204:	2a09      	cmp	r2, #9
 800a206:	d845      	bhi.n	800a294 <_dtoa_r+0x264>
 800a208:	2a05      	cmp	r2, #5
 800a20a:	bfc4      	itt	gt
 800a20c:	3a04      	subgt	r2, #4
 800a20e:	9207      	strgt	r2, [sp, #28]
 800a210:	9a07      	ldr	r2, [sp, #28]
 800a212:	f1a2 0202 	sub.w	r2, r2, #2
 800a216:	bfcc      	ite	gt
 800a218:	2400      	movgt	r4, #0
 800a21a:	2401      	movle	r4, #1
 800a21c:	2a03      	cmp	r2, #3
 800a21e:	d844      	bhi.n	800a2aa <_dtoa_r+0x27a>
 800a220:	e8df f002 	tbb	[pc, r2]
 800a224:	0b173634 	.word	0x0b173634
 800a228:	9b04      	ldr	r3, [sp, #16]
 800a22a:	2200      	movs	r2, #0
 800a22c:	eba3 0308 	sub.w	r3, r3, r8
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	920a      	str	r2, [sp, #40]	@ 0x28
 800a234:	f1c8 0300 	rsb	r3, r8, #0
 800a238:	e7e3      	b.n	800a202 <_dtoa_r+0x1d2>
 800a23a:	2201      	movs	r2, #1
 800a23c:	9208      	str	r2, [sp, #32]
 800a23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a240:	eb08 0b02 	add.w	fp, r8, r2
 800a244:	f10b 0a01 	add.w	sl, fp, #1
 800a248:	4652      	mov	r2, sl
 800a24a:	2a01      	cmp	r2, #1
 800a24c:	bfb8      	it	lt
 800a24e:	2201      	movlt	r2, #1
 800a250:	e006      	b.n	800a260 <_dtoa_r+0x230>
 800a252:	2201      	movs	r2, #1
 800a254:	9208      	str	r2, [sp, #32]
 800a256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a258:	2a00      	cmp	r2, #0
 800a25a:	dd29      	ble.n	800a2b0 <_dtoa_r+0x280>
 800a25c:	4693      	mov	fp, r2
 800a25e:	4692      	mov	sl, r2
 800a260:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a264:	2100      	movs	r1, #0
 800a266:	2004      	movs	r0, #4
 800a268:	f100 0614 	add.w	r6, r0, #20
 800a26c:	4296      	cmp	r6, r2
 800a26e:	d926      	bls.n	800a2be <_dtoa_r+0x28e>
 800a270:	6079      	str	r1, [r7, #4]
 800a272:	4648      	mov	r0, r9
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	f000 fd39 	bl	800acec <_Balloc>
 800a27a:	9b05      	ldr	r3, [sp, #20]
 800a27c:	4607      	mov	r7, r0
 800a27e:	2800      	cmp	r0, #0
 800a280:	d13e      	bne.n	800a300 <_dtoa_r+0x2d0>
 800a282:	4b1e      	ldr	r3, [pc, #120]	@ (800a2fc <_dtoa_r+0x2cc>)
 800a284:	4602      	mov	r2, r0
 800a286:	f240 11af 	movw	r1, #431	@ 0x1af
 800a28a:	e6ea      	b.n	800a062 <_dtoa_r+0x32>
 800a28c:	2200      	movs	r2, #0
 800a28e:	e7e1      	b.n	800a254 <_dtoa_r+0x224>
 800a290:	2200      	movs	r2, #0
 800a292:	e7d3      	b.n	800a23c <_dtoa_r+0x20c>
 800a294:	2401      	movs	r4, #1
 800a296:	2200      	movs	r2, #0
 800a298:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a29c:	f04f 3bff 	mov.w	fp, #4294967295
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	46da      	mov	sl, fp
 800a2a4:	2212      	movs	r2, #18
 800a2a6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2a8:	e7da      	b.n	800a260 <_dtoa_r+0x230>
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	9208      	str	r2, [sp, #32]
 800a2ae:	e7f5      	b.n	800a29c <_dtoa_r+0x26c>
 800a2b0:	f04f 0b01 	mov.w	fp, #1
 800a2b4:	46da      	mov	sl, fp
 800a2b6:	465a      	mov	r2, fp
 800a2b8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a2bc:	e7d0      	b.n	800a260 <_dtoa_r+0x230>
 800a2be:	3101      	adds	r1, #1
 800a2c0:	0040      	lsls	r0, r0, #1
 800a2c2:	e7d1      	b.n	800a268 <_dtoa_r+0x238>
 800a2c4:	f3af 8000 	nop.w
 800a2c8:	636f4361 	.word	0x636f4361
 800a2cc:	3fd287a7 	.word	0x3fd287a7
 800a2d0:	8b60c8b3 	.word	0x8b60c8b3
 800a2d4:	3fc68a28 	.word	0x3fc68a28
 800a2d8:	509f79fb 	.word	0x509f79fb
 800a2dc:	3fd34413 	.word	0x3fd34413
 800a2e0:	0800bb19 	.word	0x0800bb19
 800a2e4:	0800bb30 	.word	0x0800bb30
 800a2e8:	7ff00000 	.word	0x7ff00000
 800a2ec:	0800bb15 	.word	0x0800bb15
 800a2f0:	0800bae9 	.word	0x0800bae9
 800a2f4:	0800bae8 	.word	0x0800bae8
 800a2f8:	0800bc80 	.word	0x0800bc80
 800a2fc:	0800bb88 	.word	0x0800bb88
 800a300:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a304:	f1ba 0f0e 	cmp.w	sl, #14
 800a308:	6010      	str	r0, [r2, #0]
 800a30a:	d86e      	bhi.n	800a3ea <_dtoa_r+0x3ba>
 800a30c:	2c00      	cmp	r4, #0
 800a30e:	d06c      	beq.n	800a3ea <_dtoa_r+0x3ba>
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	f340 80b4 	ble.w	800a480 <_dtoa_r+0x450>
 800a318:	4ac8      	ldr	r2, [pc, #800]	@ (800a63c <_dtoa_r+0x60c>)
 800a31a:	f008 010f 	and.w	r1, r8, #15
 800a31e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a322:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a326:	ed92 7b00 	vldr	d7, [r2]
 800a32a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a32e:	f000 809b 	beq.w	800a468 <_dtoa_r+0x438>
 800a332:	4ac3      	ldr	r2, [pc, #780]	@ (800a640 <_dtoa_r+0x610>)
 800a334:	ed92 6b08 	vldr	d6, [r2, #32]
 800a338:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a33c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a340:	f001 010f 	and.w	r1, r1, #15
 800a344:	2203      	movs	r2, #3
 800a346:	48be      	ldr	r0, [pc, #760]	@ (800a640 <_dtoa_r+0x610>)
 800a348:	2900      	cmp	r1, #0
 800a34a:	f040 808f 	bne.w	800a46c <_dtoa_r+0x43c>
 800a34e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a352:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a356:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a35a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a35c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a360:	2900      	cmp	r1, #0
 800a362:	f000 80b3 	beq.w	800a4cc <_dtoa_r+0x49c>
 800a366:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a36a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a372:	f140 80ab 	bpl.w	800a4cc <_dtoa_r+0x49c>
 800a376:	f1ba 0f00 	cmp.w	sl, #0
 800a37a:	f000 80a7 	beq.w	800a4cc <_dtoa_r+0x49c>
 800a37e:	f1bb 0f00 	cmp.w	fp, #0
 800a382:	dd30      	ble.n	800a3e6 <_dtoa_r+0x3b6>
 800a384:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a388:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a38c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a390:	f108 31ff 	add.w	r1, r8, #4294967295
 800a394:	9105      	str	r1, [sp, #20]
 800a396:	3201      	adds	r2, #1
 800a398:	465c      	mov	r4, fp
 800a39a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a39e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a3a2:	ee07 2a90 	vmov	s15, r2
 800a3a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a3aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a3ae:	ee15 2a90 	vmov	r2, s11
 800a3b2:	ec51 0b15 	vmov	r0, r1, d5
 800a3b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a3ba:	2c00      	cmp	r4, #0
 800a3bc:	f040 808a 	bne.w	800a4d4 <_dtoa_r+0x4a4>
 800a3c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a3c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a3c8:	ec41 0b17 	vmov	d7, r0, r1
 800a3cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d4:	f300 826a 	bgt.w	800a8ac <_dtoa_r+0x87c>
 800a3d8:	eeb1 7b47 	vneg.f64	d7, d7
 800a3dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e4:	d423      	bmi.n	800a42e <_dtoa_r+0x3fe>
 800a3e6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a3ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a3ec:	2a00      	cmp	r2, #0
 800a3ee:	f2c0 8129 	blt.w	800a644 <_dtoa_r+0x614>
 800a3f2:	f1b8 0f0e 	cmp.w	r8, #14
 800a3f6:	f300 8125 	bgt.w	800a644 <_dtoa_r+0x614>
 800a3fa:	4b90      	ldr	r3, [pc, #576]	@ (800a63c <_dtoa_r+0x60c>)
 800a3fc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a400:	ed93 6b00 	vldr	d6, [r3]
 800a404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	f280 80c8 	bge.w	800a59c <_dtoa_r+0x56c>
 800a40c:	f1ba 0f00 	cmp.w	sl, #0
 800a410:	f300 80c4 	bgt.w	800a59c <_dtoa_r+0x56c>
 800a414:	d10b      	bne.n	800a42e <_dtoa_r+0x3fe>
 800a416:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a41a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a41e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a422:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42a:	f2c0 823c 	blt.w	800a8a6 <_dtoa_r+0x876>
 800a42e:	2400      	movs	r4, #0
 800a430:	4625      	mov	r5, r4
 800a432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a434:	43db      	mvns	r3, r3
 800a436:	9305      	str	r3, [sp, #20]
 800a438:	463e      	mov	r6, r7
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	4621      	mov	r1, r4
 800a440:	4648      	mov	r0, r9
 800a442:	f000 fc93 	bl	800ad6c <_Bfree>
 800a446:	2d00      	cmp	r5, #0
 800a448:	f000 80a2 	beq.w	800a590 <_dtoa_r+0x560>
 800a44c:	f1b8 0f00 	cmp.w	r8, #0
 800a450:	d005      	beq.n	800a45e <_dtoa_r+0x42e>
 800a452:	45a8      	cmp	r8, r5
 800a454:	d003      	beq.n	800a45e <_dtoa_r+0x42e>
 800a456:	4641      	mov	r1, r8
 800a458:	4648      	mov	r0, r9
 800a45a:	f000 fc87 	bl	800ad6c <_Bfree>
 800a45e:	4629      	mov	r1, r5
 800a460:	4648      	mov	r0, r9
 800a462:	f000 fc83 	bl	800ad6c <_Bfree>
 800a466:	e093      	b.n	800a590 <_dtoa_r+0x560>
 800a468:	2202      	movs	r2, #2
 800a46a:	e76c      	b.n	800a346 <_dtoa_r+0x316>
 800a46c:	07cc      	lsls	r4, r1, #31
 800a46e:	d504      	bpl.n	800a47a <_dtoa_r+0x44a>
 800a470:	ed90 6b00 	vldr	d6, [r0]
 800a474:	3201      	adds	r2, #1
 800a476:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a47a:	1049      	asrs	r1, r1, #1
 800a47c:	3008      	adds	r0, #8
 800a47e:	e763      	b.n	800a348 <_dtoa_r+0x318>
 800a480:	d022      	beq.n	800a4c8 <_dtoa_r+0x498>
 800a482:	f1c8 0100 	rsb	r1, r8, #0
 800a486:	4a6d      	ldr	r2, [pc, #436]	@ (800a63c <_dtoa_r+0x60c>)
 800a488:	f001 000f 	and.w	r0, r1, #15
 800a48c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a490:	ed92 7b00 	vldr	d7, [r2]
 800a494:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a498:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a49c:	4868      	ldr	r0, [pc, #416]	@ (800a640 <_dtoa_r+0x610>)
 800a49e:	1109      	asrs	r1, r1, #4
 800a4a0:	2400      	movs	r4, #0
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	b929      	cbnz	r1, 800a4b2 <_dtoa_r+0x482>
 800a4a6:	2c00      	cmp	r4, #0
 800a4a8:	f43f af57 	beq.w	800a35a <_dtoa_r+0x32a>
 800a4ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4b0:	e753      	b.n	800a35a <_dtoa_r+0x32a>
 800a4b2:	07ce      	lsls	r6, r1, #31
 800a4b4:	d505      	bpl.n	800a4c2 <_dtoa_r+0x492>
 800a4b6:	ed90 6b00 	vldr	d6, [r0]
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	2401      	movs	r4, #1
 800a4be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4c2:	1049      	asrs	r1, r1, #1
 800a4c4:	3008      	adds	r0, #8
 800a4c6:	e7ed      	b.n	800a4a4 <_dtoa_r+0x474>
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	e746      	b.n	800a35a <_dtoa_r+0x32a>
 800a4cc:	f8cd 8014 	str.w	r8, [sp, #20]
 800a4d0:	4654      	mov	r4, sl
 800a4d2:	e762      	b.n	800a39a <_dtoa_r+0x36a>
 800a4d4:	4a59      	ldr	r2, [pc, #356]	@ (800a63c <_dtoa_r+0x60c>)
 800a4d6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a4da:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a4de:	9a08      	ldr	r2, [sp, #32]
 800a4e0:	ec41 0b17 	vmov	d7, r0, r1
 800a4e4:	443c      	add	r4, r7
 800a4e6:	b34a      	cbz	r2, 800a53c <_dtoa_r+0x50c>
 800a4e8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a4ec:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a4f0:	463e      	mov	r6, r7
 800a4f2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a4f6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a4fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a4fe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a502:	ee14 2a90 	vmov	r2, s9
 800a506:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a50a:	3230      	adds	r2, #48	@ 0x30
 800a50c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a510:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a518:	f806 2b01 	strb.w	r2, [r6], #1
 800a51c:	d438      	bmi.n	800a590 <_dtoa_r+0x560>
 800a51e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a522:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a52a:	d46e      	bmi.n	800a60a <_dtoa_r+0x5da>
 800a52c:	42a6      	cmp	r6, r4
 800a52e:	f43f af5a 	beq.w	800a3e6 <_dtoa_r+0x3b6>
 800a532:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a536:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a53a:	e7e0      	b.n	800a4fe <_dtoa_r+0x4ce>
 800a53c:	4621      	mov	r1, r4
 800a53e:	463e      	mov	r6, r7
 800a540:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a544:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a548:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a54c:	ee14 2a90 	vmov	r2, s9
 800a550:	3230      	adds	r2, #48	@ 0x30
 800a552:	f806 2b01 	strb.w	r2, [r6], #1
 800a556:	42a6      	cmp	r6, r4
 800a558:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a55c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a560:	d119      	bne.n	800a596 <_dtoa_r+0x566>
 800a562:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a566:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a56a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a572:	dc4a      	bgt.n	800a60a <_dtoa_r+0x5da>
 800a574:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a578:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a580:	f57f af31 	bpl.w	800a3e6 <_dtoa_r+0x3b6>
 800a584:	460e      	mov	r6, r1
 800a586:	3901      	subs	r1, #1
 800a588:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a58c:	2b30      	cmp	r3, #48	@ 0x30
 800a58e:	d0f9      	beq.n	800a584 <_dtoa_r+0x554>
 800a590:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a594:	e027      	b.n	800a5e6 <_dtoa_r+0x5b6>
 800a596:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a59a:	e7d5      	b.n	800a548 <_dtoa_r+0x518>
 800a59c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5a0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a5a4:	463e      	mov	r6, r7
 800a5a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a5aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a5ae:	ee15 3a10 	vmov	r3, s10
 800a5b2:	3330      	adds	r3, #48	@ 0x30
 800a5b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a5b8:	1bf3      	subs	r3, r6, r7
 800a5ba:	459a      	cmp	sl, r3
 800a5bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a5c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a5c4:	d132      	bne.n	800a62c <_dtoa_r+0x5fc>
 800a5c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a5ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d2:	dc18      	bgt.n	800a606 <_dtoa_r+0x5d6>
 800a5d4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	d103      	bne.n	800a5e6 <_dtoa_r+0x5b6>
 800a5de:	ee15 3a10 	vmov	r3, s10
 800a5e2:	07db      	lsls	r3, r3, #31
 800a5e4:	d40f      	bmi.n	800a606 <_dtoa_r+0x5d6>
 800a5e6:	9901      	ldr	r1, [sp, #4]
 800a5e8:	4648      	mov	r0, r9
 800a5ea:	f000 fbbf 	bl	800ad6c <_Bfree>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5f2:	7033      	strb	r3, [r6, #0]
 800a5f4:	f108 0301 	add.w	r3, r8, #1
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 824b 	beq.w	800aa98 <_dtoa_r+0xa68>
 800a602:	601e      	str	r6, [r3, #0]
 800a604:	e248      	b.n	800aa98 <_dtoa_r+0xa68>
 800a606:	f8cd 8014 	str.w	r8, [sp, #20]
 800a60a:	4633      	mov	r3, r6
 800a60c:	461e      	mov	r6, r3
 800a60e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a612:	2a39      	cmp	r2, #57	@ 0x39
 800a614:	d106      	bne.n	800a624 <_dtoa_r+0x5f4>
 800a616:	429f      	cmp	r7, r3
 800a618:	d1f8      	bne.n	800a60c <_dtoa_r+0x5dc>
 800a61a:	9a05      	ldr	r2, [sp, #20]
 800a61c:	3201      	adds	r2, #1
 800a61e:	9205      	str	r2, [sp, #20]
 800a620:	2230      	movs	r2, #48	@ 0x30
 800a622:	703a      	strb	r2, [r7, #0]
 800a624:	781a      	ldrb	r2, [r3, #0]
 800a626:	3201      	adds	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	e7b1      	b.n	800a590 <_dtoa_r+0x560>
 800a62c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a638:	d1b5      	bne.n	800a5a6 <_dtoa_r+0x576>
 800a63a:	e7d4      	b.n	800a5e6 <_dtoa_r+0x5b6>
 800a63c:	0800bc80 	.word	0x0800bc80
 800a640:	0800bc58 	.word	0x0800bc58
 800a644:	9908      	ldr	r1, [sp, #32]
 800a646:	2900      	cmp	r1, #0
 800a648:	f000 80e9 	beq.w	800a81e <_dtoa_r+0x7ee>
 800a64c:	9907      	ldr	r1, [sp, #28]
 800a64e:	2901      	cmp	r1, #1
 800a650:	f300 80cb 	bgt.w	800a7ea <_dtoa_r+0x7ba>
 800a654:	2d00      	cmp	r5, #0
 800a656:	f000 80c4 	beq.w	800a7e2 <_dtoa_r+0x7b2>
 800a65a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a65e:	9e04      	ldr	r6, [sp, #16]
 800a660:	461c      	mov	r4, r3
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	9b04      	ldr	r3, [sp, #16]
 800a666:	4413      	add	r3, r2
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	9b06      	ldr	r3, [sp, #24]
 800a66c:	2101      	movs	r1, #1
 800a66e:	4413      	add	r3, r2
 800a670:	4648      	mov	r0, r9
 800a672:	9306      	str	r3, [sp, #24]
 800a674:	f000 fc2e 	bl	800aed4 <__i2b>
 800a678:	9b05      	ldr	r3, [sp, #20]
 800a67a:	4605      	mov	r5, r0
 800a67c:	b166      	cbz	r6, 800a698 <_dtoa_r+0x668>
 800a67e:	9a06      	ldr	r2, [sp, #24]
 800a680:	2a00      	cmp	r2, #0
 800a682:	dd09      	ble.n	800a698 <_dtoa_r+0x668>
 800a684:	42b2      	cmp	r2, r6
 800a686:	9904      	ldr	r1, [sp, #16]
 800a688:	bfa8      	it	ge
 800a68a:	4632      	movge	r2, r6
 800a68c:	1a89      	subs	r1, r1, r2
 800a68e:	9104      	str	r1, [sp, #16]
 800a690:	9906      	ldr	r1, [sp, #24]
 800a692:	1ab6      	subs	r6, r6, r2
 800a694:	1a8a      	subs	r2, r1, r2
 800a696:	9206      	str	r2, [sp, #24]
 800a698:	b30b      	cbz	r3, 800a6de <_dtoa_r+0x6ae>
 800a69a:	9a08      	ldr	r2, [sp, #32]
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	f000 80c5 	beq.w	800a82c <_dtoa_r+0x7fc>
 800a6a2:	2c00      	cmp	r4, #0
 800a6a4:	f000 80bf 	beq.w	800a826 <_dtoa_r+0x7f6>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	4648      	mov	r0, r9
 800a6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6b0:	f000 fcc8 	bl	800b044 <__pow5mult>
 800a6b4:	9a01      	ldr	r2, [sp, #4]
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	4648      	mov	r0, r9
 800a6bc:	f000 fc20 	bl	800af00 <__multiply>
 800a6c0:	9901      	ldr	r1, [sp, #4]
 800a6c2:	9005      	str	r0, [sp, #20]
 800a6c4:	4648      	mov	r0, r9
 800a6c6:	f000 fb51 	bl	800ad6c <_Bfree>
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6cc:	1b1b      	subs	r3, r3, r4
 800a6ce:	f000 80b0 	beq.w	800a832 <_dtoa_r+0x802>
 800a6d2:	9905      	ldr	r1, [sp, #20]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4648      	mov	r0, r9
 800a6d8:	f000 fcb4 	bl	800b044 <__pow5mult>
 800a6dc:	9001      	str	r0, [sp, #4]
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f000 fbf7 	bl	800aed4 <__i2b>
 800a6e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 81da 	beq.w	800aaa4 <_dtoa_r+0xa74>
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	4648      	mov	r0, r9
 800a6f6:	f000 fca5 	bl	800b044 <__pow5mult>
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	4604      	mov	r4, r0
 800a700:	f300 80a0 	bgt.w	800a844 <_dtoa_r+0x814>
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f040 8096 	bne.w	800a838 <_dtoa_r+0x808>
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a712:	2a00      	cmp	r2, #0
 800a714:	f040 8092 	bne.w	800a83c <_dtoa_r+0x80c>
 800a718:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a71c:	0d12      	lsrs	r2, r2, #20
 800a71e:	0512      	lsls	r2, r2, #20
 800a720:	2a00      	cmp	r2, #0
 800a722:	f000 808d 	beq.w	800a840 <_dtoa_r+0x810>
 800a726:	9b04      	ldr	r3, [sp, #16]
 800a728:	3301      	adds	r3, #1
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	3301      	adds	r3, #1
 800a730:	9306      	str	r3, [sp, #24]
 800a732:	2301      	movs	r3, #1
 800a734:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 81b9 	beq.w	800aab0 <_dtoa_r+0xa80>
 800a73e:	6922      	ldr	r2, [r4, #16]
 800a740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a744:	6910      	ldr	r0, [r2, #16]
 800a746:	f000 fb79 	bl	800ae3c <__hi0bits>
 800a74a:	f1c0 0020 	rsb	r0, r0, #32
 800a74e:	9b06      	ldr	r3, [sp, #24]
 800a750:	4418      	add	r0, r3
 800a752:	f010 001f 	ands.w	r0, r0, #31
 800a756:	f000 8081 	beq.w	800a85c <_dtoa_r+0x82c>
 800a75a:	f1c0 0220 	rsb	r2, r0, #32
 800a75e:	2a04      	cmp	r2, #4
 800a760:	dd73      	ble.n	800a84a <_dtoa_r+0x81a>
 800a762:	9b04      	ldr	r3, [sp, #16]
 800a764:	f1c0 001c 	rsb	r0, r0, #28
 800a768:	4403      	add	r3, r0
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	4406      	add	r6, r0
 800a770:	4403      	add	r3, r0
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	dd05      	ble.n	800a786 <_dtoa_r+0x756>
 800a77a:	9901      	ldr	r1, [sp, #4]
 800a77c:	461a      	mov	r2, r3
 800a77e:	4648      	mov	r0, r9
 800a780:	f000 fcba 	bl	800b0f8 <__lshift>
 800a784:	9001      	str	r0, [sp, #4]
 800a786:	9b06      	ldr	r3, [sp, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dd05      	ble.n	800a798 <_dtoa_r+0x768>
 800a78c:	4621      	mov	r1, r4
 800a78e:	461a      	mov	r2, r3
 800a790:	4648      	mov	r0, r9
 800a792:	f000 fcb1 	bl	800b0f8 <__lshift>
 800a796:	4604      	mov	r4, r0
 800a798:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d060      	beq.n	800a860 <_dtoa_r+0x830>
 800a79e:	9801      	ldr	r0, [sp, #4]
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	f000 fd15 	bl	800b1d0 <__mcmp>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	da5a      	bge.n	800a860 <_dtoa_r+0x830>
 800a7aa:	f108 33ff 	add.w	r3, r8, #4294967295
 800a7ae:	9305      	str	r3, [sp, #20]
 800a7b0:	9901      	ldr	r1, [sp, #4]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	220a      	movs	r2, #10
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	f000 fafa 	bl	800adb0 <__multadd>
 800a7bc:	9b08      	ldr	r3, [sp, #32]
 800a7be:	9001      	str	r0, [sp, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 8177 	beq.w	800aab4 <_dtoa_r+0xa84>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	220a      	movs	r2, #10
 800a7cc:	4648      	mov	r0, r9
 800a7ce:	f000 faef 	bl	800adb0 <__multadd>
 800a7d2:	f1bb 0f00 	cmp.w	fp, #0
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	dc6e      	bgt.n	800a8b8 <_dtoa_r+0x888>
 800a7da:	9b07      	ldr	r3, [sp, #28]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	dc48      	bgt.n	800a872 <_dtoa_r+0x842>
 800a7e0:	e06a      	b.n	800a8b8 <_dtoa_r+0x888>
 800a7e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a7e8:	e739      	b.n	800a65e <_dtoa_r+0x62e>
 800a7ea:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	db07      	blt.n	800a802 <_dtoa_r+0x7d2>
 800a7f2:	f1ba 0f00 	cmp.w	sl, #0
 800a7f6:	eba3 0404 	sub.w	r4, r3, r4
 800a7fa:	db0b      	blt.n	800a814 <_dtoa_r+0x7e4>
 800a7fc:	9e04      	ldr	r6, [sp, #16]
 800a7fe:	4652      	mov	r2, sl
 800a800:	e72f      	b.n	800a662 <_dtoa_r+0x632>
 800a802:	1ae2      	subs	r2, r4, r3
 800a804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a806:	9e04      	ldr	r6, [sp, #16]
 800a808:	4413      	add	r3, r2
 800a80a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a80c:	4652      	mov	r2, sl
 800a80e:	4623      	mov	r3, r4
 800a810:	2400      	movs	r4, #0
 800a812:	e726      	b.n	800a662 <_dtoa_r+0x632>
 800a814:	9a04      	ldr	r2, [sp, #16]
 800a816:	eba2 060a 	sub.w	r6, r2, sl
 800a81a:	2200      	movs	r2, #0
 800a81c:	e721      	b.n	800a662 <_dtoa_r+0x632>
 800a81e:	9e04      	ldr	r6, [sp, #16]
 800a820:	9d08      	ldr	r5, [sp, #32]
 800a822:	461c      	mov	r4, r3
 800a824:	e72a      	b.n	800a67c <_dtoa_r+0x64c>
 800a826:	9a01      	ldr	r2, [sp, #4]
 800a828:	9205      	str	r2, [sp, #20]
 800a82a:	e752      	b.n	800a6d2 <_dtoa_r+0x6a2>
 800a82c:	9901      	ldr	r1, [sp, #4]
 800a82e:	461a      	mov	r2, r3
 800a830:	e751      	b.n	800a6d6 <_dtoa_r+0x6a6>
 800a832:	9b05      	ldr	r3, [sp, #20]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	e752      	b.n	800a6de <_dtoa_r+0x6ae>
 800a838:	2300      	movs	r3, #0
 800a83a:	e77b      	b.n	800a734 <_dtoa_r+0x704>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	e779      	b.n	800a734 <_dtoa_r+0x704>
 800a840:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a842:	e778      	b.n	800a736 <_dtoa_r+0x706>
 800a844:	2300      	movs	r3, #0
 800a846:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a848:	e779      	b.n	800a73e <_dtoa_r+0x70e>
 800a84a:	d093      	beq.n	800a774 <_dtoa_r+0x744>
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	321c      	adds	r2, #28
 800a850:	4413      	add	r3, r2
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	9b06      	ldr	r3, [sp, #24]
 800a856:	4416      	add	r6, r2
 800a858:	4413      	add	r3, r2
 800a85a:	e78a      	b.n	800a772 <_dtoa_r+0x742>
 800a85c:	4602      	mov	r2, r0
 800a85e:	e7f5      	b.n	800a84c <_dtoa_r+0x81c>
 800a860:	f1ba 0f00 	cmp.w	sl, #0
 800a864:	f8cd 8014 	str.w	r8, [sp, #20]
 800a868:	46d3      	mov	fp, sl
 800a86a:	dc21      	bgt.n	800a8b0 <_dtoa_r+0x880>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	dd1e      	ble.n	800a8b0 <_dtoa_r+0x880>
 800a872:	f1bb 0f00 	cmp.w	fp, #0
 800a876:	f47f addc 	bne.w	800a432 <_dtoa_r+0x402>
 800a87a:	4621      	mov	r1, r4
 800a87c:	465b      	mov	r3, fp
 800a87e:	2205      	movs	r2, #5
 800a880:	4648      	mov	r0, r9
 800a882:	f000 fa95 	bl	800adb0 <__multadd>
 800a886:	4601      	mov	r1, r0
 800a888:	4604      	mov	r4, r0
 800a88a:	9801      	ldr	r0, [sp, #4]
 800a88c:	f000 fca0 	bl	800b1d0 <__mcmp>
 800a890:	2800      	cmp	r0, #0
 800a892:	f77f adce 	ble.w	800a432 <_dtoa_r+0x402>
 800a896:	463e      	mov	r6, r7
 800a898:	2331      	movs	r3, #49	@ 0x31
 800a89a:	f806 3b01 	strb.w	r3, [r6], #1
 800a89e:	9b05      	ldr	r3, [sp, #20]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	e5c9      	b.n	800a43a <_dtoa_r+0x40a>
 800a8a6:	f8cd 8014 	str.w	r8, [sp, #20]
 800a8aa:	4654      	mov	r4, sl
 800a8ac:	4625      	mov	r5, r4
 800a8ae:	e7f2      	b.n	800a896 <_dtoa_r+0x866>
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 8102 	beq.w	800aabc <_dtoa_r+0xa8c>
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	dd05      	ble.n	800a8c8 <_dtoa_r+0x898>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4632      	mov	r2, r6
 800a8c0:	4648      	mov	r0, r9
 800a8c2:	f000 fc19 	bl	800b0f8 <__lshift>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d058      	beq.n	800a980 <_dtoa_r+0x950>
 800a8ce:	6869      	ldr	r1, [r5, #4]
 800a8d0:	4648      	mov	r0, r9
 800a8d2:	f000 fa0b 	bl	800acec <_Balloc>
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <_dtoa_r+0x8b6>
 800a8da:	4b82      	ldr	r3, [pc, #520]	@ (800aae4 <_dtoa_r+0xab4>)
 800a8dc:	4602      	mov	r2, r0
 800a8de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a8e2:	f7ff bbbe 	b.w	800a062 <_dtoa_r+0x32>
 800a8e6:	692a      	ldr	r2, [r5, #16]
 800a8e8:	3202      	adds	r2, #2
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	f105 010c 	add.w	r1, r5, #12
 800a8f0:	300c      	adds	r0, #12
 800a8f2:	f000 fff7 	bl	800b8e4 <memcpy>
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4648      	mov	r0, r9
 800a8fc:	f000 fbfc 	bl	800b0f8 <__lshift>
 800a900:	1c7b      	adds	r3, r7, #1
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	eb07 030b 	add.w	r3, r7, fp
 800a908:	9309      	str	r3, [sp, #36]	@ 0x24
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	46a8      	mov	r8, r5
 800a912:	9308      	str	r3, [sp, #32]
 800a914:	4605      	mov	r5, r0
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	9801      	ldr	r0, [sp, #4]
 800a91a:	4621      	mov	r1, r4
 800a91c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a920:	f7ff fafd 	bl	8009f1e <quorem>
 800a924:	4641      	mov	r1, r8
 800a926:	9002      	str	r0, [sp, #8]
 800a928:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a92c:	9801      	ldr	r0, [sp, #4]
 800a92e:	f000 fc4f 	bl	800b1d0 <__mcmp>
 800a932:	462a      	mov	r2, r5
 800a934:	9006      	str	r0, [sp, #24]
 800a936:	4621      	mov	r1, r4
 800a938:	4648      	mov	r0, r9
 800a93a:	f000 fc65 	bl	800b208 <__mdiff>
 800a93e:	68c2      	ldr	r2, [r0, #12]
 800a940:	4606      	mov	r6, r0
 800a942:	b9fa      	cbnz	r2, 800a984 <_dtoa_r+0x954>
 800a944:	4601      	mov	r1, r0
 800a946:	9801      	ldr	r0, [sp, #4]
 800a948:	f000 fc42 	bl	800b1d0 <__mcmp>
 800a94c:	4602      	mov	r2, r0
 800a94e:	4631      	mov	r1, r6
 800a950:	4648      	mov	r0, r9
 800a952:	920a      	str	r2, [sp, #40]	@ 0x28
 800a954:	f000 fa0a 	bl	800ad6c <_Bfree>
 800a958:	9b07      	ldr	r3, [sp, #28]
 800a95a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a95c:	9e04      	ldr	r6, [sp, #16]
 800a95e:	ea42 0103 	orr.w	r1, r2, r3
 800a962:	9b08      	ldr	r3, [sp, #32]
 800a964:	4319      	orrs	r1, r3
 800a966:	d10f      	bne.n	800a988 <_dtoa_r+0x958>
 800a968:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a96c:	d028      	beq.n	800a9c0 <_dtoa_r+0x990>
 800a96e:	9b06      	ldr	r3, [sp, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	dd02      	ble.n	800a97a <_dtoa_r+0x94a>
 800a974:	9b02      	ldr	r3, [sp, #8]
 800a976:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a97a:	f88b a000 	strb.w	sl, [fp]
 800a97e:	e55e      	b.n	800a43e <_dtoa_r+0x40e>
 800a980:	4628      	mov	r0, r5
 800a982:	e7bd      	b.n	800a900 <_dtoa_r+0x8d0>
 800a984:	2201      	movs	r2, #1
 800a986:	e7e2      	b.n	800a94e <_dtoa_r+0x91e>
 800a988:	9b06      	ldr	r3, [sp, #24]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	db04      	blt.n	800a998 <_dtoa_r+0x968>
 800a98e:	9907      	ldr	r1, [sp, #28]
 800a990:	430b      	orrs	r3, r1
 800a992:	9908      	ldr	r1, [sp, #32]
 800a994:	430b      	orrs	r3, r1
 800a996:	d120      	bne.n	800a9da <_dtoa_r+0x9aa>
 800a998:	2a00      	cmp	r2, #0
 800a99a:	ddee      	ble.n	800a97a <_dtoa_r+0x94a>
 800a99c:	9901      	ldr	r1, [sp, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	f000 fba9 	bl	800b0f8 <__lshift>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	9001      	str	r0, [sp, #4]
 800a9aa:	f000 fc11 	bl	800b1d0 <__mcmp>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	dc03      	bgt.n	800a9ba <_dtoa_r+0x98a>
 800a9b2:	d1e2      	bne.n	800a97a <_dtoa_r+0x94a>
 800a9b4:	f01a 0f01 	tst.w	sl, #1
 800a9b8:	d0df      	beq.n	800a97a <_dtoa_r+0x94a>
 800a9ba:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a9be:	d1d9      	bne.n	800a974 <_dtoa_r+0x944>
 800a9c0:	2339      	movs	r3, #57	@ 0x39
 800a9c2:	f88b 3000 	strb.w	r3, [fp]
 800a9c6:	4633      	mov	r3, r6
 800a9c8:	461e      	mov	r6, r3
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a9d0:	2a39      	cmp	r2, #57	@ 0x39
 800a9d2:	d052      	beq.n	800aa7a <_dtoa_r+0xa4a>
 800a9d4:	3201      	adds	r2, #1
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	e531      	b.n	800a43e <_dtoa_r+0x40e>
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	dd07      	ble.n	800a9ee <_dtoa_r+0x9be>
 800a9de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a9e2:	d0ed      	beq.n	800a9c0 <_dtoa_r+0x990>
 800a9e4:	f10a 0301 	add.w	r3, sl, #1
 800a9e8:	f88b 3000 	strb.w	r3, [fp]
 800a9ec:	e527      	b.n	800a43e <_dtoa_r+0x40e>
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9f2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d029      	beq.n	800aa4e <_dtoa_r+0xa1e>
 800a9fa:	9901      	ldr	r1, [sp, #4]
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	220a      	movs	r2, #10
 800aa00:	4648      	mov	r0, r9
 800aa02:	f000 f9d5 	bl	800adb0 <__multadd>
 800aa06:	45a8      	cmp	r8, r5
 800aa08:	9001      	str	r0, [sp, #4]
 800aa0a:	f04f 0300 	mov.w	r3, #0
 800aa0e:	f04f 020a 	mov.w	r2, #10
 800aa12:	4641      	mov	r1, r8
 800aa14:	4648      	mov	r0, r9
 800aa16:	d107      	bne.n	800aa28 <_dtoa_r+0x9f8>
 800aa18:	f000 f9ca 	bl	800adb0 <__multadd>
 800aa1c:	4680      	mov	r8, r0
 800aa1e:	4605      	mov	r5, r0
 800aa20:	9b04      	ldr	r3, [sp, #16]
 800aa22:	3301      	adds	r3, #1
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	e776      	b.n	800a916 <_dtoa_r+0x8e6>
 800aa28:	f000 f9c2 	bl	800adb0 <__multadd>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4680      	mov	r8, r0
 800aa30:	2300      	movs	r3, #0
 800aa32:	220a      	movs	r2, #10
 800aa34:	4648      	mov	r0, r9
 800aa36:	f000 f9bb 	bl	800adb0 <__multadd>
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	e7f0      	b.n	800aa20 <_dtoa_r+0x9f0>
 800aa3e:	f1bb 0f00 	cmp.w	fp, #0
 800aa42:	bfcc      	ite	gt
 800aa44:	465e      	movgt	r6, fp
 800aa46:	2601      	movle	r6, #1
 800aa48:	443e      	add	r6, r7
 800aa4a:	f04f 0800 	mov.w	r8, #0
 800aa4e:	9901      	ldr	r1, [sp, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	4648      	mov	r0, r9
 800aa54:	f000 fb50 	bl	800b0f8 <__lshift>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	9001      	str	r0, [sp, #4]
 800aa5c:	f000 fbb8 	bl	800b1d0 <__mcmp>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	dcb0      	bgt.n	800a9c6 <_dtoa_r+0x996>
 800aa64:	d102      	bne.n	800aa6c <_dtoa_r+0xa3c>
 800aa66:	f01a 0f01 	tst.w	sl, #1
 800aa6a:	d1ac      	bne.n	800a9c6 <_dtoa_r+0x996>
 800aa6c:	4633      	mov	r3, r6
 800aa6e:	461e      	mov	r6, r3
 800aa70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa74:	2a30      	cmp	r2, #48	@ 0x30
 800aa76:	d0fa      	beq.n	800aa6e <_dtoa_r+0xa3e>
 800aa78:	e4e1      	b.n	800a43e <_dtoa_r+0x40e>
 800aa7a:	429f      	cmp	r7, r3
 800aa7c:	d1a4      	bne.n	800a9c8 <_dtoa_r+0x998>
 800aa7e:	9b05      	ldr	r3, [sp, #20]
 800aa80:	3301      	adds	r3, #1
 800aa82:	9305      	str	r3, [sp, #20]
 800aa84:	2331      	movs	r3, #49	@ 0x31
 800aa86:	703b      	strb	r3, [r7, #0]
 800aa88:	e4d9      	b.n	800a43e <_dtoa_r+0x40e>
 800aa8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa8c:	4f16      	ldr	r7, [pc, #88]	@ (800aae8 <_dtoa_r+0xab8>)
 800aa8e:	b11b      	cbz	r3, 800aa98 <_dtoa_r+0xa68>
 800aa90:	f107 0308 	add.w	r3, r7, #8
 800aa94:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	4638      	mov	r0, r7
 800aa9a:	b011      	add	sp, #68	@ 0x44
 800aa9c:	ecbd 8b02 	vpop	{d8}
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	f77f ae2c 	ble.w	800a704 <_dtoa_r+0x6d4>
 800aaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aab0:	2001      	movs	r0, #1
 800aab2:	e64c      	b.n	800a74e <_dtoa_r+0x71e>
 800aab4:	f1bb 0f00 	cmp.w	fp, #0
 800aab8:	f77f aed8 	ble.w	800a86c <_dtoa_r+0x83c>
 800aabc:	463e      	mov	r6, r7
 800aabe:	9801      	ldr	r0, [sp, #4]
 800aac0:	4621      	mov	r1, r4
 800aac2:	f7ff fa2c 	bl	8009f1e <quorem>
 800aac6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800aaca:	f806 ab01 	strb.w	sl, [r6], #1
 800aace:	1bf2      	subs	r2, r6, r7
 800aad0:	4593      	cmp	fp, r2
 800aad2:	ddb4      	ble.n	800aa3e <_dtoa_r+0xa0e>
 800aad4:	9901      	ldr	r1, [sp, #4]
 800aad6:	2300      	movs	r3, #0
 800aad8:	220a      	movs	r2, #10
 800aada:	4648      	mov	r0, r9
 800aadc:	f000 f968 	bl	800adb0 <__multadd>
 800aae0:	9001      	str	r0, [sp, #4]
 800aae2:	e7ec      	b.n	800aabe <_dtoa_r+0xa8e>
 800aae4:	0800bb88 	.word	0x0800bb88
 800aae8:	0800bb0c 	.word	0x0800bb0c

0800aaec <_free_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4605      	mov	r5, r0
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	d041      	beq.n	800ab78 <_free_r+0x8c>
 800aaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf8:	1f0c      	subs	r4, r1, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfb8      	it	lt
 800aafe:	18e4      	addlt	r4, r4, r3
 800ab00:	f000 f8e8 	bl	800acd4 <__malloc_lock>
 800ab04:	4a1d      	ldr	r2, [pc, #116]	@ (800ab7c <_free_r+0x90>)
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	b933      	cbnz	r3, 800ab18 <_free_r+0x2c>
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	6014      	str	r4, [r2, #0]
 800ab0e:	4628      	mov	r0, r5
 800ab10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab14:	f000 b8e4 	b.w	800ace0 <__malloc_unlock>
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	d908      	bls.n	800ab2e <_free_r+0x42>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	1821      	adds	r1, r4, r0
 800ab20:	428b      	cmp	r3, r1
 800ab22:	bf01      	itttt	eq
 800ab24:	6819      	ldreq	r1, [r3, #0]
 800ab26:	685b      	ldreq	r3, [r3, #4]
 800ab28:	1809      	addeq	r1, r1, r0
 800ab2a:	6021      	streq	r1, [r4, #0]
 800ab2c:	e7ed      	b.n	800ab0a <_free_r+0x1e>
 800ab2e:	461a      	mov	r2, r3
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	b10b      	cbz	r3, 800ab38 <_free_r+0x4c>
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d9fa      	bls.n	800ab2e <_free_r+0x42>
 800ab38:	6811      	ldr	r1, [r2, #0]
 800ab3a:	1850      	adds	r0, r2, r1
 800ab3c:	42a0      	cmp	r0, r4
 800ab3e:	d10b      	bne.n	800ab58 <_free_r+0x6c>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	4401      	add	r1, r0
 800ab44:	1850      	adds	r0, r2, r1
 800ab46:	4283      	cmp	r3, r0
 800ab48:	6011      	str	r1, [r2, #0]
 800ab4a:	d1e0      	bne.n	800ab0e <_free_r+0x22>
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	6053      	str	r3, [r2, #4]
 800ab52:	4408      	add	r0, r1
 800ab54:	6010      	str	r0, [r2, #0]
 800ab56:	e7da      	b.n	800ab0e <_free_r+0x22>
 800ab58:	d902      	bls.n	800ab60 <_free_r+0x74>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	e7d6      	b.n	800ab0e <_free_r+0x22>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	1821      	adds	r1, r4, r0
 800ab64:	428b      	cmp	r3, r1
 800ab66:	bf04      	itt	eq
 800ab68:	6819      	ldreq	r1, [r3, #0]
 800ab6a:	685b      	ldreq	r3, [r3, #4]
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	bf04      	itt	eq
 800ab70:	1809      	addeq	r1, r1, r0
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	6054      	str	r4, [r2, #4]
 800ab76:	e7ca      	b.n	800ab0e <_free_r+0x22>
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	24000450 	.word	0x24000450

0800ab80 <malloc>:
 800ab80:	4b02      	ldr	r3, [pc, #8]	@ (800ab8c <malloc+0xc>)
 800ab82:	4601      	mov	r1, r0
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	f000 b825 	b.w	800abd4 <_malloc_r>
 800ab8a:	bf00      	nop
 800ab8c:	2400001c 	.word	0x2400001c

0800ab90 <sbrk_aligned>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	4e0f      	ldr	r6, [pc, #60]	@ (800abd0 <sbrk_aligned+0x40>)
 800ab94:	460c      	mov	r4, r1
 800ab96:	6831      	ldr	r1, [r6, #0]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	b911      	cbnz	r1, 800aba2 <sbrk_aligned+0x12>
 800ab9c:	f000 fe92 	bl	800b8c4 <_sbrk_r>
 800aba0:	6030      	str	r0, [r6, #0]
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f000 fe8d 	bl	800b8c4 <_sbrk_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d103      	bne.n	800abb6 <sbrk_aligned+0x26>
 800abae:	f04f 34ff 	mov.w	r4, #4294967295
 800abb2:	4620      	mov	r0, r4
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
 800abb6:	1cc4      	adds	r4, r0, #3
 800abb8:	f024 0403 	bic.w	r4, r4, #3
 800abbc:	42a0      	cmp	r0, r4
 800abbe:	d0f8      	beq.n	800abb2 <sbrk_aligned+0x22>
 800abc0:	1a21      	subs	r1, r4, r0
 800abc2:	4628      	mov	r0, r5
 800abc4:	f000 fe7e 	bl	800b8c4 <_sbrk_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	d1f2      	bne.n	800abb2 <sbrk_aligned+0x22>
 800abcc:	e7ef      	b.n	800abae <sbrk_aligned+0x1e>
 800abce:	bf00      	nop
 800abd0:	2400044c 	.word	0x2400044c

0800abd4 <_malloc_r>:
 800abd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abd8:	1ccd      	adds	r5, r1, #3
 800abda:	f025 0503 	bic.w	r5, r5, #3
 800abde:	3508      	adds	r5, #8
 800abe0:	2d0c      	cmp	r5, #12
 800abe2:	bf38      	it	cc
 800abe4:	250c      	movcc	r5, #12
 800abe6:	2d00      	cmp	r5, #0
 800abe8:	4606      	mov	r6, r0
 800abea:	db01      	blt.n	800abf0 <_malloc_r+0x1c>
 800abec:	42a9      	cmp	r1, r5
 800abee:	d904      	bls.n	800abfa <_malloc_r+0x26>
 800abf0:	230c      	movs	r3, #12
 800abf2:	6033      	str	r3, [r6, #0]
 800abf4:	2000      	movs	r0, #0
 800abf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acd0 <_malloc_r+0xfc>
 800abfe:	f000 f869 	bl	800acd4 <__malloc_lock>
 800ac02:	f8d8 3000 	ldr.w	r3, [r8]
 800ac06:	461c      	mov	r4, r3
 800ac08:	bb44      	cbnz	r4, 800ac5c <_malloc_r+0x88>
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7ff ffbf 	bl	800ab90 <sbrk_aligned>
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	4604      	mov	r4, r0
 800ac16:	d158      	bne.n	800acca <_malloc_r+0xf6>
 800ac18:	f8d8 4000 	ldr.w	r4, [r8]
 800ac1c:	4627      	mov	r7, r4
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	d143      	bne.n	800acaa <_malloc_r+0xd6>
 800ac22:	2c00      	cmp	r4, #0
 800ac24:	d04b      	beq.n	800acbe <_malloc_r+0xea>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	eb04 0903 	add.w	r9, r4, r3
 800ac30:	f000 fe48 	bl	800b8c4 <_sbrk_r>
 800ac34:	4581      	cmp	r9, r0
 800ac36:	d142      	bne.n	800acbe <_malloc_r+0xea>
 800ac38:	6821      	ldr	r1, [r4, #0]
 800ac3a:	1a6d      	subs	r5, r5, r1
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f7ff ffa6 	bl	800ab90 <sbrk_aligned>
 800ac44:	3001      	adds	r0, #1
 800ac46:	d03a      	beq.n	800acbe <_malloc_r+0xea>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	442b      	add	r3, r5
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	bb62      	cbnz	r2, 800acb0 <_malloc_r+0xdc>
 800ac56:	f8c8 7000 	str.w	r7, [r8]
 800ac5a:	e00f      	b.n	800ac7c <_malloc_r+0xa8>
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	1b52      	subs	r2, r2, r5
 800ac60:	d420      	bmi.n	800aca4 <_malloc_r+0xd0>
 800ac62:	2a0b      	cmp	r2, #11
 800ac64:	d917      	bls.n	800ac96 <_malloc_r+0xc2>
 800ac66:	1961      	adds	r1, r4, r5
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	6025      	str	r5, [r4, #0]
 800ac6c:	bf18      	it	ne
 800ac6e:	6059      	strne	r1, [r3, #4]
 800ac70:	6863      	ldr	r3, [r4, #4]
 800ac72:	bf08      	it	eq
 800ac74:	f8c8 1000 	streq.w	r1, [r8]
 800ac78:	5162      	str	r2, [r4, r5]
 800ac7a:	604b      	str	r3, [r1, #4]
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f000 f82f 	bl	800ace0 <__malloc_unlock>
 800ac82:	f104 000b 	add.w	r0, r4, #11
 800ac86:	1d23      	adds	r3, r4, #4
 800ac88:	f020 0007 	bic.w	r0, r0, #7
 800ac8c:	1ac2      	subs	r2, r0, r3
 800ac8e:	bf1c      	itt	ne
 800ac90:	1a1b      	subne	r3, r3, r0
 800ac92:	50a3      	strne	r3, [r4, r2]
 800ac94:	e7af      	b.n	800abf6 <_malloc_r+0x22>
 800ac96:	6862      	ldr	r2, [r4, #4]
 800ac98:	42a3      	cmp	r3, r4
 800ac9a:	bf0c      	ite	eq
 800ac9c:	f8c8 2000 	streq.w	r2, [r8]
 800aca0:	605a      	strne	r2, [r3, #4]
 800aca2:	e7eb      	b.n	800ac7c <_malloc_r+0xa8>
 800aca4:	4623      	mov	r3, r4
 800aca6:	6864      	ldr	r4, [r4, #4]
 800aca8:	e7ae      	b.n	800ac08 <_malloc_r+0x34>
 800acaa:	463c      	mov	r4, r7
 800acac:	687f      	ldr	r7, [r7, #4]
 800acae:	e7b6      	b.n	800ac1e <_malloc_r+0x4a>
 800acb0:	461a      	mov	r2, r3
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	d1fb      	bne.n	800acb0 <_malloc_r+0xdc>
 800acb8:	2300      	movs	r3, #0
 800acba:	6053      	str	r3, [r2, #4]
 800acbc:	e7de      	b.n	800ac7c <_malloc_r+0xa8>
 800acbe:	230c      	movs	r3, #12
 800acc0:	6033      	str	r3, [r6, #0]
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 f80c 	bl	800ace0 <__malloc_unlock>
 800acc8:	e794      	b.n	800abf4 <_malloc_r+0x20>
 800acca:	6005      	str	r5, [r0, #0]
 800accc:	e7d6      	b.n	800ac7c <_malloc_r+0xa8>
 800acce:	bf00      	nop
 800acd0:	24000450 	.word	0x24000450

0800acd4 <__malloc_lock>:
 800acd4:	4801      	ldr	r0, [pc, #4]	@ (800acdc <__malloc_lock+0x8>)
 800acd6:	f7ff b920 	b.w	8009f1a <__retarget_lock_acquire_recursive>
 800acda:	bf00      	nop
 800acdc:	24000448 	.word	0x24000448

0800ace0 <__malloc_unlock>:
 800ace0:	4801      	ldr	r0, [pc, #4]	@ (800ace8 <__malloc_unlock+0x8>)
 800ace2:	f7ff b91b 	b.w	8009f1c <__retarget_lock_release_recursive>
 800ace6:	bf00      	nop
 800ace8:	24000448 	.word	0x24000448

0800acec <_Balloc>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	69c6      	ldr	r6, [r0, #28]
 800acf0:	4604      	mov	r4, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	b976      	cbnz	r6, 800ad14 <_Balloc+0x28>
 800acf6:	2010      	movs	r0, #16
 800acf8:	f7ff ff42 	bl	800ab80 <malloc>
 800acfc:	4602      	mov	r2, r0
 800acfe:	61e0      	str	r0, [r4, #28]
 800ad00:	b920      	cbnz	r0, 800ad0c <_Balloc+0x20>
 800ad02:	4b18      	ldr	r3, [pc, #96]	@ (800ad64 <_Balloc+0x78>)
 800ad04:	4818      	ldr	r0, [pc, #96]	@ (800ad68 <_Balloc+0x7c>)
 800ad06:	216b      	movs	r1, #107	@ 0x6b
 800ad08:	f000 fdfa 	bl	800b900 <__assert_func>
 800ad0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad10:	6006      	str	r6, [r0, #0]
 800ad12:	60c6      	str	r6, [r0, #12]
 800ad14:	69e6      	ldr	r6, [r4, #28]
 800ad16:	68f3      	ldr	r3, [r6, #12]
 800ad18:	b183      	cbz	r3, 800ad3c <_Balloc+0x50>
 800ad1a:	69e3      	ldr	r3, [r4, #28]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad22:	b9b8      	cbnz	r0, 800ad54 <_Balloc+0x68>
 800ad24:	2101      	movs	r1, #1
 800ad26:	fa01 f605 	lsl.w	r6, r1, r5
 800ad2a:	1d72      	adds	r2, r6, #5
 800ad2c:	0092      	lsls	r2, r2, #2
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 fe04 	bl	800b93c <_calloc_r>
 800ad34:	b160      	cbz	r0, 800ad50 <_Balloc+0x64>
 800ad36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad3a:	e00e      	b.n	800ad5a <_Balloc+0x6e>
 800ad3c:	2221      	movs	r2, #33	@ 0x21
 800ad3e:	2104      	movs	r1, #4
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fdfb 	bl	800b93c <_calloc_r>
 800ad46:	69e3      	ldr	r3, [r4, #28]
 800ad48:	60f0      	str	r0, [r6, #12]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e4      	bne.n	800ad1a <_Balloc+0x2e>
 800ad50:	2000      	movs	r0, #0
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	6802      	ldr	r2, [r0, #0]
 800ad56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad60:	e7f7      	b.n	800ad52 <_Balloc+0x66>
 800ad62:	bf00      	nop
 800ad64:	0800bb19 	.word	0x0800bb19
 800ad68:	0800bb99 	.word	0x0800bb99

0800ad6c <_Bfree>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	69c6      	ldr	r6, [r0, #28]
 800ad70:	4605      	mov	r5, r0
 800ad72:	460c      	mov	r4, r1
 800ad74:	b976      	cbnz	r6, 800ad94 <_Bfree+0x28>
 800ad76:	2010      	movs	r0, #16
 800ad78:	f7ff ff02 	bl	800ab80 <malloc>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	61e8      	str	r0, [r5, #28]
 800ad80:	b920      	cbnz	r0, 800ad8c <_Bfree+0x20>
 800ad82:	4b09      	ldr	r3, [pc, #36]	@ (800ada8 <_Bfree+0x3c>)
 800ad84:	4809      	ldr	r0, [pc, #36]	@ (800adac <_Bfree+0x40>)
 800ad86:	218f      	movs	r1, #143	@ 0x8f
 800ad88:	f000 fdba 	bl	800b900 <__assert_func>
 800ad8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad90:	6006      	str	r6, [r0, #0]
 800ad92:	60c6      	str	r6, [r0, #12]
 800ad94:	b13c      	cbz	r4, 800ada6 <_Bfree+0x3a>
 800ad96:	69eb      	ldr	r3, [r5, #28]
 800ad98:	6862      	ldr	r2, [r4, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ada0:	6021      	str	r1, [r4, #0]
 800ada2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	0800bb19 	.word	0x0800bb19
 800adac:	0800bb99 	.word	0x0800bb99

0800adb0 <__multadd>:
 800adb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb4:	690d      	ldr	r5, [r1, #16]
 800adb6:	4607      	mov	r7, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	461e      	mov	r6, r3
 800adbc:	f101 0c14 	add.w	ip, r1, #20
 800adc0:	2000      	movs	r0, #0
 800adc2:	f8dc 3000 	ldr.w	r3, [ip]
 800adc6:	b299      	uxth	r1, r3
 800adc8:	fb02 6101 	mla	r1, r2, r1, r6
 800adcc:	0c1e      	lsrs	r6, r3, #16
 800adce:	0c0b      	lsrs	r3, r1, #16
 800add0:	fb02 3306 	mla	r3, r2, r6, r3
 800add4:	b289      	uxth	r1, r1
 800add6:	3001      	adds	r0, #1
 800add8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800addc:	4285      	cmp	r5, r0
 800adde:	f84c 1b04 	str.w	r1, [ip], #4
 800ade2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ade6:	dcec      	bgt.n	800adc2 <__multadd+0x12>
 800ade8:	b30e      	cbz	r6, 800ae2e <__multadd+0x7e>
 800adea:	68a3      	ldr	r3, [r4, #8]
 800adec:	42ab      	cmp	r3, r5
 800adee:	dc19      	bgt.n	800ae24 <__multadd+0x74>
 800adf0:	6861      	ldr	r1, [r4, #4]
 800adf2:	4638      	mov	r0, r7
 800adf4:	3101      	adds	r1, #1
 800adf6:	f7ff ff79 	bl	800acec <_Balloc>
 800adfa:	4680      	mov	r8, r0
 800adfc:	b928      	cbnz	r0, 800ae0a <__multadd+0x5a>
 800adfe:	4602      	mov	r2, r0
 800ae00:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <__multadd+0x84>)
 800ae02:	480d      	ldr	r0, [pc, #52]	@ (800ae38 <__multadd+0x88>)
 800ae04:	21ba      	movs	r1, #186	@ 0xba
 800ae06:	f000 fd7b 	bl	800b900 <__assert_func>
 800ae0a:	6922      	ldr	r2, [r4, #16]
 800ae0c:	3202      	adds	r2, #2
 800ae0e:	f104 010c 	add.w	r1, r4, #12
 800ae12:	0092      	lsls	r2, r2, #2
 800ae14:	300c      	adds	r0, #12
 800ae16:	f000 fd65 	bl	800b8e4 <memcpy>
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	f7ff ffa5 	bl	800ad6c <_Bfree>
 800ae22:	4644      	mov	r4, r8
 800ae24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae28:	3501      	adds	r5, #1
 800ae2a:	615e      	str	r6, [r3, #20]
 800ae2c:	6125      	str	r5, [r4, #16]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae34:	0800bb88 	.word	0x0800bb88
 800ae38:	0800bb99 	.word	0x0800bb99

0800ae3c <__hi0bits>:
 800ae3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae40:	4603      	mov	r3, r0
 800ae42:	bf36      	itet	cc
 800ae44:	0403      	lslcc	r3, r0, #16
 800ae46:	2000      	movcs	r0, #0
 800ae48:	2010      	movcc	r0, #16
 800ae4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae4e:	bf3c      	itt	cc
 800ae50:	021b      	lslcc	r3, r3, #8
 800ae52:	3008      	addcc	r0, #8
 800ae54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae58:	bf3c      	itt	cc
 800ae5a:	011b      	lslcc	r3, r3, #4
 800ae5c:	3004      	addcc	r0, #4
 800ae5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae62:	bf3c      	itt	cc
 800ae64:	009b      	lslcc	r3, r3, #2
 800ae66:	3002      	addcc	r0, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	db05      	blt.n	800ae78 <__hi0bits+0x3c>
 800ae6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae70:	f100 0001 	add.w	r0, r0, #1
 800ae74:	bf08      	it	eq
 800ae76:	2020      	moveq	r0, #32
 800ae78:	4770      	bx	lr

0800ae7a <__lo0bits>:
 800ae7a:	6803      	ldr	r3, [r0, #0]
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	f013 0007 	ands.w	r0, r3, #7
 800ae82:	d00b      	beq.n	800ae9c <__lo0bits+0x22>
 800ae84:	07d9      	lsls	r1, r3, #31
 800ae86:	d421      	bmi.n	800aecc <__lo0bits+0x52>
 800ae88:	0798      	lsls	r0, r3, #30
 800ae8a:	bf49      	itett	mi
 800ae8c:	085b      	lsrmi	r3, r3, #1
 800ae8e:	089b      	lsrpl	r3, r3, #2
 800ae90:	2001      	movmi	r0, #1
 800ae92:	6013      	strmi	r3, [r2, #0]
 800ae94:	bf5c      	itt	pl
 800ae96:	6013      	strpl	r3, [r2, #0]
 800ae98:	2002      	movpl	r0, #2
 800ae9a:	4770      	bx	lr
 800ae9c:	b299      	uxth	r1, r3
 800ae9e:	b909      	cbnz	r1, 800aea4 <__lo0bits+0x2a>
 800aea0:	0c1b      	lsrs	r3, r3, #16
 800aea2:	2010      	movs	r0, #16
 800aea4:	b2d9      	uxtb	r1, r3
 800aea6:	b909      	cbnz	r1, 800aeac <__lo0bits+0x32>
 800aea8:	3008      	adds	r0, #8
 800aeaa:	0a1b      	lsrs	r3, r3, #8
 800aeac:	0719      	lsls	r1, r3, #28
 800aeae:	bf04      	itt	eq
 800aeb0:	091b      	lsreq	r3, r3, #4
 800aeb2:	3004      	addeq	r0, #4
 800aeb4:	0799      	lsls	r1, r3, #30
 800aeb6:	bf04      	itt	eq
 800aeb8:	089b      	lsreq	r3, r3, #2
 800aeba:	3002      	addeq	r0, #2
 800aebc:	07d9      	lsls	r1, r3, #31
 800aebe:	d403      	bmi.n	800aec8 <__lo0bits+0x4e>
 800aec0:	085b      	lsrs	r3, r3, #1
 800aec2:	f100 0001 	add.w	r0, r0, #1
 800aec6:	d003      	beq.n	800aed0 <__lo0bits+0x56>
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	4770      	bx	lr
 800aecc:	2000      	movs	r0, #0
 800aece:	4770      	bx	lr
 800aed0:	2020      	movs	r0, #32
 800aed2:	4770      	bx	lr

0800aed4 <__i2b>:
 800aed4:	b510      	push	{r4, lr}
 800aed6:	460c      	mov	r4, r1
 800aed8:	2101      	movs	r1, #1
 800aeda:	f7ff ff07 	bl	800acec <_Balloc>
 800aede:	4602      	mov	r2, r0
 800aee0:	b928      	cbnz	r0, 800aeee <__i2b+0x1a>
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <__i2b+0x24>)
 800aee4:	4805      	ldr	r0, [pc, #20]	@ (800aefc <__i2b+0x28>)
 800aee6:	f240 1145 	movw	r1, #325	@ 0x145
 800aeea:	f000 fd09 	bl	800b900 <__assert_func>
 800aeee:	2301      	movs	r3, #1
 800aef0:	6144      	str	r4, [r0, #20]
 800aef2:	6103      	str	r3, [r0, #16]
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	bf00      	nop
 800aef8:	0800bb88 	.word	0x0800bb88
 800aefc:	0800bb99 	.word	0x0800bb99

0800af00 <__multiply>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	4617      	mov	r7, r2
 800af06:	690a      	ldr	r2, [r1, #16]
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	bfa8      	it	ge
 800af0e:	463b      	movge	r3, r7
 800af10:	4689      	mov	r9, r1
 800af12:	bfa4      	itt	ge
 800af14:	460f      	movge	r7, r1
 800af16:	4699      	movge	r9, r3
 800af18:	693d      	ldr	r5, [r7, #16]
 800af1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	6879      	ldr	r1, [r7, #4]
 800af22:	eb05 060a 	add.w	r6, r5, sl
 800af26:	42b3      	cmp	r3, r6
 800af28:	b085      	sub	sp, #20
 800af2a:	bfb8      	it	lt
 800af2c:	3101      	addlt	r1, #1
 800af2e:	f7ff fedd 	bl	800acec <_Balloc>
 800af32:	b930      	cbnz	r0, 800af42 <__multiply+0x42>
 800af34:	4602      	mov	r2, r0
 800af36:	4b41      	ldr	r3, [pc, #260]	@ (800b03c <__multiply+0x13c>)
 800af38:	4841      	ldr	r0, [pc, #260]	@ (800b040 <__multiply+0x140>)
 800af3a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af3e:	f000 fcdf 	bl	800b900 <__assert_func>
 800af42:	f100 0414 	add.w	r4, r0, #20
 800af46:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800af4a:	4623      	mov	r3, r4
 800af4c:	2200      	movs	r2, #0
 800af4e:	4573      	cmp	r3, lr
 800af50:	d320      	bcc.n	800af94 <__multiply+0x94>
 800af52:	f107 0814 	add.w	r8, r7, #20
 800af56:	f109 0114 	add.w	r1, r9, #20
 800af5a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800af5e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800af62:	9302      	str	r3, [sp, #8]
 800af64:	1beb      	subs	r3, r5, r7
 800af66:	3b15      	subs	r3, #21
 800af68:	f023 0303 	bic.w	r3, r3, #3
 800af6c:	3304      	adds	r3, #4
 800af6e:	3715      	adds	r7, #21
 800af70:	42bd      	cmp	r5, r7
 800af72:	bf38      	it	cc
 800af74:	2304      	movcc	r3, #4
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	9103      	str	r1, [sp, #12]
 800af7c:	428b      	cmp	r3, r1
 800af7e:	d80c      	bhi.n	800af9a <__multiply+0x9a>
 800af80:	2e00      	cmp	r6, #0
 800af82:	dd03      	ble.n	800af8c <__multiply+0x8c>
 800af84:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d055      	beq.n	800b038 <__multiply+0x138>
 800af8c:	6106      	str	r6, [r0, #16]
 800af8e:	b005      	add	sp, #20
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af94:	f843 2b04 	str.w	r2, [r3], #4
 800af98:	e7d9      	b.n	800af4e <__multiply+0x4e>
 800af9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800af9e:	f1ba 0f00 	cmp.w	sl, #0
 800afa2:	d01f      	beq.n	800afe4 <__multiply+0xe4>
 800afa4:	46c4      	mov	ip, r8
 800afa6:	46a1      	mov	r9, r4
 800afa8:	2700      	movs	r7, #0
 800afaa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800afae:	f8d9 3000 	ldr.w	r3, [r9]
 800afb2:	fa1f fb82 	uxth.w	fp, r2
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	fb0a 330b 	mla	r3, sl, fp, r3
 800afbc:	443b      	add	r3, r7
 800afbe:	f8d9 7000 	ldr.w	r7, [r9]
 800afc2:	0c12      	lsrs	r2, r2, #16
 800afc4:	0c3f      	lsrs	r7, r7, #16
 800afc6:	fb0a 7202 	mla	r2, sl, r2, r7
 800afca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800afce:	b29b      	uxth	r3, r3
 800afd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afd4:	4565      	cmp	r5, ip
 800afd6:	f849 3b04 	str.w	r3, [r9], #4
 800afda:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800afde:	d8e4      	bhi.n	800afaa <__multiply+0xaa>
 800afe0:	9b01      	ldr	r3, [sp, #4]
 800afe2:	50e7      	str	r7, [r4, r3]
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800afea:	3104      	adds	r1, #4
 800afec:	f1b9 0f00 	cmp.w	r9, #0
 800aff0:	d020      	beq.n	800b034 <__multiply+0x134>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	4647      	mov	r7, r8
 800aff6:	46a4      	mov	ip, r4
 800aff8:	f04f 0a00 	mov.w	sl, #0
 800affc:	f8b7 b000 	ldrh.w	fp, [r7]
 800b000:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b004:	fb09 220b 	mla	r2, r9, fp, r2
 800b008:	4452      	add	r2, sl
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b010:	f84c 3b04 	str.w	r3, [ip], #4
 800b014:	f857 3b04 	ldr.w	r3, [r7], #4
 800b018:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b01c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b020:	fb09 330a 	mla	r3, r9, sl, r3
 800b024:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b028:	42bd      	cmp	r5, r7
 800b02a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b02e:	d8e5      	bhi.n	800affc <__multiply+0xfc>
 800b030:	9a01      	ldr	r2, [sp, #4]
 800b032:	50a3      	str	r3, [r4, r2]
 800b034:	3404      	adds	r4, #4
 800b036:	e79f      	b.n	800af78 <__multiply+0x78>
 800b038:	3e01      	subs	r6, #1
 800b03a:	e7a1      	b.n	800af80 <__multiply+0x80>
 800b03c:	0800bb88 	.word	0x0800bb88
 800b040:	0800bb99 	.word	0x0800bb99

0800b044 <__pow5mult>:
 800b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b048:	4615      	mov	r5, r2
 800b04a:	f012 0203 	ands.w	r2, r2, #3
 800b04e:	4607      	mov	r7, r0
 800b050:	460e      	mov	r6, r1
 800b052:	d007      	beq.n	800b064 <__pow5mult+0x20>
 800b054:	4c25      	ldr	r4, [pc, #148]	@ (800b0ec <__pow5mult+0xa8>)
 800b056:	3a01      	subs	r2, #1
 800b058:	2300      	movs	r3, #0
 800b05a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b05e:	f7ff fea7 	bl	800adb0 <__multadd>
 800b062:	4606      	mov	r6, r0
 800b064:	10ad      	asrs	r5, r5, #2
 800b066:	d03d      	beq.n	800b0e4 <__pow5mult+0xa0>
 800b068:	69fc      	ldr	r4, [r7, #28]
 800b06a:	b97c      	cbnz	r4, 800b08c <__pow5mult+0x48>
 800b06c:	2010      	movs	r0, #16
 800b06e:	f7ff fd87 	bl	800ab80 <malloc>
 800b072:	4602      	mov	r2, r0
 800b074:	61f8      	str	r0, [r7, #28]
 800b076:	b928      	cbnz	r0, 800b084 <__pow5mult+0x40>
 800b078:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f0 <__pow5mult+0xac>)
 800b07a:	481e      	ldr	r0, [pc, #120]	@ (800b0f4 <__pow5mult+0xb0>)
 800b07c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b080:	f000 fc3e 	bl	800b900 <__assert_func>
 800b084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b088:	6004      	str	r4, [r0, #0]
 800b08a:	60c4      	str	r4, [r0, #12]
 800b08c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b094:	b94c      	cbnz	r4, 800b0aa <__pow5mult+0x66>
 800b096:	f240 2171 	movw	r1, #625	@ 0x271
 800b09a:	4638      	mov	r0, r7
 800b09c:	f7ff ff1a 	bl	800aed4 <__i2b>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	f04f 0900 	mov.w	r9, #0
 800b0ae:	07eb      	lsls	r3, r5, #31
 800b0b0:	d50a      	bpl.n	800b0c8 <__pow5mult+0x84>
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	f7ff ff22 	bl	800af00 <__multiply>
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4680      	mov	r8, r0
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f7ff fe53 	bl	800ad6c <_Bfree>
 800b0c6:	4646      	mov	r6, r8
 800b0c8:	106d      	asrs	r5, r5, #1
 800b0ca:	d00b      	beq.n	800b0e4 <__pow5mult+0xa0>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	b938      	cbnz	r0, 800b0e0 <__pow5mult+0x9c>
 800b0d0:	4622      	mov	r2, r4
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f7ff ff13 	bl	800af00 <__multiply>
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	f8c0 9000 	str.w	r9, [r0]
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	e7e4      	b.n	800b0ae <__pow5mult+0x6a>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	bf00      	nop
 800b0ec:	0800bc4c 	.word	0x0800bc4c
 800b0f0:	0800bb19 	.word	0x0800bb19
 800b0f4:	0800bb99 	.word	0x0800bb99

0800b0f8 <__lshift>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	6849      	ldr	r1, [r1, #4]
 800b100:	6923      	ldr	r3, [r4, #16]
 800b102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	4607      	mov	r7, r0
 800b10a:	4691      	mov	r9, r2
 800b10c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b110:	f108 0601 	add.w	r6, r8, #1
 800b114:	42b3      	cmp	r3, r6
 800b116:	db0b      	blt.n	800b130 <__lshift+0x38>
 800b118:	4638      	mov	r0, r7
 800b11a:	f7ff fde7 	bl	800acec <_Balloc>
 800b11e:	4605      	mov	r5, r0
 800b120:	b948      	cbnz	r0, 800b136 <__lshift+0x3e>
 800b122:	4602      	mov	r2, r0
 800b124:	4b28      	ldr	r3, [pc, #160]	@ (800b1c8 <__lshift+0xd0>)
 800b126:	4829      	ldr	r0, [pc, #164]	@ (800b1cc <__lshift+0xd4>)
 800b128:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b12c:	f000 fbe8 	bl	800b900 <__assert_func>
 800b130:	3101      	adds	r1, #1
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	e7ee      	b.n	800b114 <__lshift+0x1c>
 800b136:	2300      	movs	r3, #0
 800b138:	f100 0114 	add.w	r1, r0, #20
 800b13c:	f100 0210 	add.w	r2, r0, #16
 800b140:	4618      	mov	r0, r3
 800b142:	4553      	cmp	r3, sl
 800b144:	db33      	blt.n	800b1ae <__lshift+0xb6>
 800b146:	6920      	ldr	r0, [r4, #16]
 800b148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b14c:	f104 0314 	add.w	r3, r4, #20
 800b150:	f019 091f 	ands.w	r9, r9, #31
 800b154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b158:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b15c:	d02b      	beq.n	800b1b6 <__lshift+0xbe>
 800b15e:	f1c9 0e20 	rsb	lr, r9, #32
 800b162:	468a      	mov	sl, r1
 800b164:	2200      	movs	r2, #0
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	fa00 f009 	lsl.w	r0, r0, r9
 800b16c:	4310      	orrs	r0, r2
 800b16e:	f84a 0b04 	str.w	r0, [sl], #4
 800b172:	f853 2b04 	ldr.w	r2, [r3], #4
 800b176:	459c      	cmp	ip, r3
 800b178:	fa22 f20e 	lsr.w	r2, r2, lr
 800b17c:	d8f3      	bhi.n	800b166 <__lshift+0x6e>
 800b17e:	ebac 0304 	sub.w	r3, ip, r4
 800b182:	3b15      	subs	r3, #21
 800b184:	f023 0303 	bic.w	r3, r3, #3
 800b188:	3304      	adds	r3, #4
 800b18a:	f104 0015 	add.w	r0, r4, #21
 800b18e:	4560      	cmp	r0, ip
 800b190:	bf88      	it	hi
 800b192:	2304      	movhi	r3, #4
 800b194:	50ca      	str	r2, [r1, r3]
 800b196:	b10a      	cbz	r2, 800b19c <__lshift+0xa4>
 800b198:	f108 0602 	add.w	r6, r8, #2
 800b19c:	3e01      	subs	r6, #1
 800b19e:	4638      	mov	r0, r7
 800b1a0:	612e      	str	r6, [r5, #16]
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	f7ff fde2 	bl	800ad6c <_Bfree>
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	e7c5      	b.n	800b142 <__lshift+0x4a>
 800b1b6:	3904      	subs	r1, #4
 800b1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1c0:	459c      	cmp	ip, r3
 800b1c2:	d8f9      	bhi.n	800b1b8 <__lshift+0xc0>
 800b1c4:	e7ea      	b.n	800b19c <__lshift+0xa4>
 800b1c6:	bf00      	nop
 800b1c8:	0800bb88 	.word	0x0800bb88
 800b1cc:	0800bb99 	.word	0x0800bb99

0800b1d0 <__mcmp>:
 800b1d0:	690a      	ldr	r2, [r1, #16]
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	6900      	ldr	r0, [r0, #16]
 800b1d6:	1a80      	subs	r0, r0, r2
 800b1d8:	b530      	push	{r4, r5, lr}
 800b1da:	d10e      	bne.n	800b1fa <__mcmp+0x2a>
 800b1dc:	3314      	adds	r3, #20
 800b1de:	3114      	adds	r1, #20
 800b1e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1f0:	4295      	cmp	r5, r2
 800b1f2:	d003      	beq.n	800b1fc <__mcmp+0x2c>
 800b1f4:	d205      	bcs.n	800b202 <__mcmp+0x32>
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fa:	bd30      	pop	{r4, r5, pc}
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d3f3      	bcc.n	800b1e8 <__mcmp+0x18>
 800b200:	e7fb      	b.n	800b1fa <__mcmp+0x2a>
 800b202:	2001      	movs	r0, #1
 800b204:	e7f9      	b.n	800b1fa <__mcmp+0x2a>
	...

0800b208 <__mdiff>:
 800b208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	4689      	mov	r9, r1
 800b20e:	4606      	mov	r6, r0
 800b210:	4611      	mov	r1, r2
 800b212:	4648      	mov	r0, r9
 800b214:	4614      	mov	r4, r2
 800b216:	f7ff ffdb 	bl	800b1d0 <__mcmp>
 800b21a:	1e05      	subs	r5, r0, #0
 800b21c:	d112      	bne.n	800b244 <__mdiff+0x3c>
 800b21e:	4629      	mov	r1, r5
 800b220:	4630      	mov	r0, r6
 800b222:	f7ff fd63 	bl	800acec <_Balloc>
 800b226:	4602      	mov	r2, r0
 800b228:	b928      	cbnz	r0, 800b236 <__mdiff+0x2e>
 800b22a:	4b3f      	ldr	r3, [pc, #252]	@ (800b328 <__mdiff+0x120>)
 800b22c:	f240 2137 	movw	r1, #567	@ 0x237
 800b230:	483e      	ldr	r0, [pc, #248]	@ (800b32c <__mdiff+0x124>)
 800b232:	f000 fb65 	bl	800b900 <__assert_func>
 800b236:	2301      	movs	r3, #1
 800b238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b23c:	4610      	mov	r0, r2
 800b23e:	b003      	add	sp, #12
 800b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b244:	bfbc      	itt	lt
 800b246:	464b      	movlt	r3, r9
 800b248:	46a1      	movlt	r9, r4
 800b24a:	4630      	mov	r0, r6
 800b24c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b250:	bfba      	itte	lt
 800b252:	461c      	movlt	r4, r3
 800b254:	2501      	movlt	r5, #1
 800b256:	2500      	movge	r5, #0
 800b258:	f7ff fd48 	bl	800acec <_Balloc>
 800b25c:	4602      	mov	r2, r0
 800b25e:	b918      	cbnz	r0, 800b268 <__mdiff+0x60>
 800b260:	4b31      	ldr	r3, [pc, #196]	@ (800b328 <__mdiff+0x120>)
 800b262:	f240 2145 	movw	r1, #581	@ 0x245
 800b266:	e7e3      	b.n	800b230 <__mdiff+0x28>
 800b268:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b26c:	6926      	ldr	r6, [r4, #16]
 800b26e:	60c5      	str	r5, [r0, #12]
 800b270:	f109 0310 	add.w	r3, r9, #16
 800b274:	f109 0514 	add.w	r5, r9, #20
 800b278:	f104 0e14 	add.w	lr, r4, #20
 800b27c:	f100 0b14 	add.w	fp, r0, #20
 800b280:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b284:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	46d9      	mov	r9, fp
 800b28c:	f04f 0c00 	mov.w	ip, #0
 800b290:	9b01      	ldr	r3, [sp, #4]
 800b292:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b296:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	fa1f f38a 	uxth.w	r3, sl
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	b283      	uxth	r3, r0
 800b2a4:	1acb      	subs	r3, r1, r3
 800b2a6:	0c00      	lsrs	r0, r0, #16
 800b2a8:	4463      	add	r3, ip
 800b2aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2b8:	4576      	cmp	r6, lr
 800b2ba:	f849 3b04 	str.w	r3, [r9], #4
 800b2be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2c2:	d8e5      	bhi.n	800b290 <__mdiff+0x88>
 800b2c4:	1b33      	subs	r3, r6, r4
 800b2c6:	3b15      	subs	r3, #21
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	3415      	adds	r4, #21
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	42a6      	cmp	r6, r4
 800b2d2:	bf38      	it	cc
 800b2d4:	2304      	movcc	r3, #4
 800b2d6:	441d      	add	r5, r3
 800b2d8:	445b      	add	r3, fp
 800b2da:	461e      	mov	r6, r3
 800b2dc:	462c      	mov	r4, r5
 800b2de:	4544      	cmp	r4, r8
 800b2e0:	d30e      	bcc.n	800b300 <__mdiff+0xf8>
 800b2e2:	f108 0103 	add.w	r1, r8, #3
 800b2e6:	1b49      	subs	r1, r1, r5
 800b2e8:	f021 0103 	bic.w	r1, r1, #3
 800b2ec:	3d03      	subs	r5, #3
 800b2ee:	45a8      	cmp	r8, r5
 800b2f0:	bf38      	it	cc
 800b2f2:	2100      	movcc	r1, #0
 800b2f4:	440b      	add	r3, r1
 800b2f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2fa:	b191      	cbz	r1, 800b322 <__mdiff+0x11a>
 800b2fc:	6117      	str	r7, [r2, #16]
 800b2fe:	e79d      	b.n	800b23c <__mdiff+0x34>
 800b300:	f854 1b04 	ldr.w	r1, [r4], #4
 800b304:	46e6      	mov	lr, ip
 800b306:	0c08      	lsrs	r0, r1, #16
 800b308:	fa1c fc81 	uxtah	ip, ip, r1
 800b30c:	4471      	add	r1, lr
 800b30e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b312:	b289      	uxth	r1, r1
 800b314:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b318:	f846 1b04 	str.w	r1, [r6], #4
 800b31c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b320:	e7dd      	b.n	800b2de <__mdiff+0xd6>
 800b322:	3f01      	subs	r7, #1
 800b324:	e7e7      	b.n	800b2f6 <__mdiff+0xee>
 800b326:	bf00      	nop
 800b328:	0800bb88 	.word	0x0800bb88
 800b32c:	0800bb99 	.word	0x0800bb99

0800b330 <__d2b>:
 800b330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b334:	460f      	mov	r7, r1
 800b336:	2101      	movs	r1, #1
 800b338:	ec59 8b10 	vmov	r8, r9, d0
 800b33c:	4616      	mov	r6, r2
 800b33e:	f7ff fcd5 	bl	800acec <_Balloc>
 800b342:	4604      	mov	r4, r0
 800b344:	b930      	cbnz	r0, 800b354 <__d2b+0x24>
 800b346:	4602      	mov	r2, r0
 800b348:	4b23      	ldr	r3, [pc, #140]	@ (800b3d8 <__d2b+0xa8>)
 800b34a:	4824      	ldr	r0, [pc, #144]	@ (800b3dc <__d2b+0xac>)
 800b34c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b350:	f000 fad6 	bl	800b900 <__assert_func>
 800b354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b35c:	b10d      	cbz	r5, 800b362 <__d2b+0x32>
 800b35e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	f1b8 0300 	subs.w	r3, r8, #0
 800b368:	d023      	beq.n	800b3b2 <__d2b+0x82>
 800b36a:	4668      	mov	r0, sp
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	f7ff fd84 	bl	800ae7a <__lo0bits>
 800b372:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b376:	b1d0      	cbz	r0, 800b3ae <__d2b+0x7e>
 800b378:	f1c0 0320 	rsb	r3, r0, #32
 800b37c:	fa02 f303 	lsl.w	r3, r2, r3
 800b380:	430b      	orrs	r3, r1
 800b382:	40c2      	lsrs	r2, r0
 800b384:	6163      	str	r3, [r4, #20]
 800b386:	9201      	str	r2, [sp, #4]
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	61a3      	str	r3, [r4, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bf0c      	ite	eq
 800b390:	2201      	moveq	r2, #1
 800b392:	2202      	movne	r2, #2
 800b394:	6122      	str	r2, [r4, #16]
 800b396:	b1a5      	cbz	r5, 800b3c2 <__d2b+0x92>
 800b398:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b39c:	4405      	add	r5, r0
 800b39e:	603d      	str	r5, [r7, #0]
 800b3a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3a4:	6030      	str	r0, [r6, #0]
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	b003      	add	sp, #12
 800b3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ae:	6161      	str	r1, [r4, #20]
 800b3b0:	e7ea      	b.n	800b388 <__d2b+0x58>
 800b3b2:	a801      	add	r0, sp, #4
 800b3b4:	f7ff fd61 	bl	800ae7a <__lo0bits>
 800b3b8:	9b01      	ldr	r3, [sp, #4]
 800b3ba:	6163      	str	r3, [r4, #20]
 800b3bc:	3020      	adds	r0, #32
 800b3be:	2201      	movs	r2, #1
 800b3c0:	e7e8      	b.n	800b394 <__d2b+0x64>
 800b3c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3ca:	6038      	str	r0, [r7, #0]
 800b3cc:	6918      	ldr	r0, [r3, #16]
 800b3ce:	f7ff fd35 	bl	800ae3c <__hi0bits>
 800b3d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3d6:	e7e5      	b.n	800b3a4 <__d2b+0x74>
 800b3d8:	0800bb88 	.word	0x0800bb88
 800b3dc:	0800bb99 	.word	0x0800bb99

0800b3e0 <__sfputc_r>:
 800b3e0:	6893      	ldr	r3, [r2, #8]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	b410      	push	{r4}
 800b3e8:	6093      	str	r3, [r2, #8]
 800b3ea:	da08      	bge.n	800b3fe <__sfputc_r+0x1e>
 800b3ec:	6994      	ldr	r4, [r2, #24]
 800b3ee:	42a3      	cmp	r3, r4
 800b3f0:	db01      	blt.n	800b3f6 <__sfputc_r+0x16>
 800b3f2:	290a      	cmp	r1, #10
 800b3f4:	d103      	bne.n	800b3fe <__sfputc_r+0x1e>
 800b3f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3fa:	f7fe bc7c 	b.w	8009cf6 <__swbuf_r>
 800b3fe:	6813      	ldr	r3, [r2, #0]
 800b400:	1c58      	adds	r0, r3, #1
 800b402:	6010      	str	r0, [r2, #0]
 800b404:	7019      	strb	r1, [r3, #0]
 800b406:	4608      	mov	r0, r1
 800b408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <__sfputs_r>:
 800b40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b410:	4606      	mov	r6, r0
 800b412:	460f      	mov	r7, r1
 800b414:	4614      	mov	r4, r2
 800b416:	18d5      	adds	r5, r2, r3
 800b418:	42ac      	cmp	r4, r5
 800b41a:	d101      	bne.n	800b420 <__sfputs_r+0x12>
 800b41c:	2000      	movs	r0, #0
 800b41e:	e007      	b.n	800b430 <__sfputs_r+0x22>
 800b420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b424:	463a      	mov	r2, r7
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ffda 	bl	800b3e0 <__sfputc_r>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d1f3      	bne.n	800b418 <__sfputs_r+0xa>
 800b430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b434 <_vfiprintf_r>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	460d      	mov	r5, r1
 800b43a:	b09d      	sub	sp, #116	@ 0x74
 800b43c:	4614      	mov	r4, r2
 800b43e:	4698      	mov	r8, r3
 800b440:	4606      	mov	r6, r0
 800b442:	b118      	cbz	r0, 800b44c <_vfiprintf_r+0x18>
 800b444:	6a03      	ldr	r3, [r0, #32]
 800b446:	b90b      	cbnz	r3, 800b44c <_vfiprintf_r+0x18>
 800b448:	f7fe fb6c 	bl	8009b24 <__sinit>
 800b44c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b44e:	07d9      	lsls	r1, r3, #31
 800b450:	d405      	bmi.n	800b45e <_vfiprintf_r+0x2a>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	059a      	lsls	r2, r3, #22
 800b456:	d402      	bmi.n	800b45e <_vfiprintf_r+0x2a>
 800b458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b45a:	f7fe fd5e 	bl	8009f1a <__retarget_lock_acquire_recursive>
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	071b      	lsls	r3, r3, #28
 800b462:	d501      	bpl.n	800b468 <_vfiprintf_r+0x34>
 800b464:	692b      	ldr	r3, [r5, #16]
 800b466:	b99b      	cbnz	r3, 800b490 <_vfiprintf_r+0x5c>
 800b468:	4629      	mov	r1, r5
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7fe fc82 	bl	8009d74 <__swsetup_r>
 800b470:	b170      	cbz	r0, 800b490 <_vfiprintf_r+0x5c>
 800b472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b474:	07dc      	lsls	r4, r3, #31
 800b476:	d504      	bpl.n	800b482 <_vfiprintf_r+0x4e>
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	b01d      	add	sp, #116	@ 0x74
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	0598      	lsls	r0, r3, #22
 800b486:	d4f7      	bmi.n	800b478 <_vfiprintf_r+0x44>
 800b488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b48a:	f7fe fd47 	bl	8009f1c <__retarget_lock_release_recursive>
 800b48e:	e7f3      	b.n	800b478 <_vfiprintf_r+0x44>
 800b490:	2300      	movs	r3, #0
 800b492:	9309      	str	r3, [sp, #36]	@ 0x24
 800b494:	2320      	movs	r3, #32
 800b496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b49e:	2330      	movs	r3, #48	@ 0x30
 800b4a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b650 <_vfiprintf_r+0x21c>
 800b4a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4a8:	f04f 0901 	mov.w	r9, #1
 800b4ac:	4623      	mov	r3, r4
 800b4ae:	469a      	mov	sl, r3
 800b4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b4:	b10a      	cbz	r2, 800b4ba <_vfiprintf_r+0x86>
 800b4b6:	2a25      	cmp	r2, #37	@ 0x25
 800b4b8:	d1f9      	bne.n	800b4ae <_vfiprintf_r+0x7a>
 800b4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b4be:	d00b      	beq.n	800b4d8 <_vfiprintf_r+0xa4>
 800b4c0:	465b      	mov	r3, fp
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ffa1 	bl	800b40e <__sfputs_r>
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	f000 80a7 	beq.w	800b620 <_vfiprintf_r+0x1ec>
 800b4d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4d4:	445a      	add	r2, fp
 800b4d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 809f 	beq.w	800b620 <_vfiprintf_r+0x1ec>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ec:	f10a 0a01 	add.w	sl, sl, #1
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	9307      	str	r3, [sp, #28]
 800b4f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4fa:	4654      	mov	r4, sl
 800b4fc:	2205      	movs	r2, #5
 800b4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b502:	4853      	ldr	r0, [pc, #332]	@ (800b650 <_vfiprintf_r+0x21c>)
 800b504:	f7f4 feec 	bl	80002e0 <memchr>
 800b508:	9a04      	ldr	r2, [sp, #16]
 800b50a:	b9d8      	cbnz	r0, 800b544 <_vfiprintf_r+0x110>
 800b50c:	06d1      	lsls	r1, r2, #27
 800b50e:	bf44      	itt	mi
 800b510:	2320      	movmi	r3, #32
 800b512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b516:	0713      	lsls	r3, r2, #28
 800b518:	bf44      	itt	mi
 800b51a:	232b      	movmi	r3, #43	@ 0x2b
 800b51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b520:	f89a 3000 	ldrb.w	r3, [sl]
 800b524:	2b2a      	cmp	r3, #42	@ 0x2a
 800b526:	d015      	beq.n	800b554 <_vfiprintf_r+0x120>
 800b528:	9a07      	ldr	r2, [sp, #28]
 800b52a:	4654      	mov	r4, sl
 800b52c:	2000      	movs	r0, #0
 800b52e:	f04f 0c0a 	mov.w	ip, #10
 800b532:	4621      	mov	r1, r4
 800b534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b538:	3b30      	subs	r3, #48	@ 0x30
 800b53a:	2b09      	cmp	r3, #9
 800b53c:	d94b      	bls.n	800b5d6 <_vfiprintf_r+0x1a2>
 800b53e:	b1b0      	cbz	r0, 800b56e <_vfiprintf_r+0x13a>
 800b540:	9207      	str	r2, [sp, #28]
 800b542:	e014      	b.n	800b56e <_vfiprintf_r+0x13a>
 800b544:	eba0 0308 	sub.w	r3, r0, r8
 800b548:	fa09 f303 	lsl.w	r3, r9, r3
 800b54c:	4313      	orrs	r3, r2
 800b54e:	9304      	str	r3, [sp, #16]
 800b550:	46a2      	mov	sl, r4
 800b552:	e7d2      	b.n	800b4fa <_vfiprintf_r+0xc6>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	1d19      	adds	r1, r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	9103      	str	r1, [sp, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfbb      	ittet	lt
 800b560:	425b      	neglt	r3, r3
 800b562:	f042 0202 	orrlt.w	r2, r2, #2
 800b566:	9307      	strge	r3, [sp, #28]
 800b568:	9307      	strlt	r3, [sp, #28]
 800b56a:	bfb8      	it	lt
 800b56c:	9204      	strlt	r2, [sp, #16]
 800b56e:	7823      	ldrb	r3, [r4, #0]
 800b570:	2b2e      	cmp	r3, #46	@ 0x2e
 800b572:	d10a      	bne.n	800b58a <_vfiprintf_r+0x156>
 800b574:	7863      	ldrb	r3, [r4, #1]
 800b576:	2b2a      	cmp	r3, #42	@ 0x2a
 800b578:	d132      	bne.n	800b5e0 <_vfiprintf_r+0x1ac>
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	1d1a      	adds	r2, r3, #4
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	9203      	str	r2, [sp, #12]
 800b582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b586:	3402      	adds	r4, #2
 800b588:	9305      	str	r3, [sp, #20]
 800b58a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b660 <_vfiprintf_r+0x22c>
 800b58e:	7821      	ldrb	r1, [r4, #0]
 800b590:	2203      	movs	r2, #3
 800b592:	4650      	mov	r0, sl
 800b594:	f7f4 fea4 	bl	80002e0 <memchr>
 800b598:	b138      	cbz	r0, 800b5aa <_vfiprintf_r+0x176>
 800b59a:	9b04      	ldr	r3, [sp, #16]
 800b59c:	eba0 000a 	sub.w	r0, r0, sl
 800b5a0:	2240      	movs	r2, #64	@ 0x40
 800b5a2:	4082      	lsls	r2, r0
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ae:	4829      	ldr	r0, [pc, #164]	@ (800b654 <_vfiprintf_r+0x220>)
 800b5b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5b4:	2206      	movs	r2, #6
 800b5b6:	f7f4 fe93 	bl	80002e0 <memchr>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d03f      	beq.n	800b63e <_vfiprintf_r+0x20a>
 800b5be:	4b26      	ldr	r3, [pc, #152]	@ (800b658 <_vfiprintf_r+0x224>)
 800b5c0:	bb1b      	cbnz	r3, 800b60a <_vfiprintf_r+0x1d6>
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	3307      	adds	r3, #7
 800b5c6:	f023 0307 	bic.w	r3, r3, #7
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d0:	443b      	add	r3, r7
 800b5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d4:	e76a      	b.n	800b4ac <_vfiprintf_r+0x78>
 800b5d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5da:	460c      	mov	r4, r1
 800b5dc:	2001      	movs	r0, #1
 800b5de:	e7a8      	b.n	800b532 <_vfiprintf_r+0xfe>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	9305      	str	r3, [sp, #20]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	f04f 0c0a 	mov.w	ip, #10
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f2:	3a30      	subs	r2, #48	@ 0x30
 800b5f4:	2a09      	cmp	r2, #9
 800b5f6:	d903      	bls.n	800b600 <_vfiprintf_r+0x1cc>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d0c6      	beq.n	800b58a <_vfiprintf_r+0x156>
 800b5fc:	9105      	str	r1, [sp, #20]
 800b5fe:	e7c4      	b.n	800b58a <_vfiprintf_r+0x156>
 800b600:	fb0c 2101 	mla	r1, ip, r1, r2
 800b604:	4604      	mov	r4, r0
 800b606:	2301      	movs	r3, #1
 800b608:	e7f0      	b.n	800b5ec <_vfiprintf_r+0x1b8>
 800b60a:	ab03      	add	r3, sp, #12
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	462a      	mov	r2, r5
 800b610:	4b12      	ldr	r3, [pc, #72]	@ (800b65c <_vfiprintf_r+0x228>)
 800b612:	a904      	add	r1, sp, #16
 800b614:	4630      	mov	r0, r6
 800b616:	f7fd fe53 	bl	80092c0 <_printf_float>
 800b61a:	4607      	mov	r7, r0
 800b61c:	1c78      	adds	r0, r7, #1
 800b61e:	d1d6      	bne.n	800b5ce <_vfiprintf_r+0x19a>
 800b620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b622:	07d9      	lsls	r1, r3, #31
 800b624:	d405      	bmi.n	800b632 <_vfiprintf_r+0x1fe>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	059a      	lsls	r2, r3, #22
 800b62a:	d402      	bmi.n	800b632 <_vfiprintf_r+0x1fe>
 800b62c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b62e:	f7fe fc75 	bl	8009f1c <__retarget_lock_release_recursive>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	065b      	lsls	r3, r3, #25
 800b636:	f53f af1f 	bmi.w	800b478 <_vfiprintf_r+0x44>
 800b63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b63c:	e71e      	b.n	800b47c <_vfiprintf_r+0x48>
 800b63e:	ab03      	add	r3, sp, #12
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	462a      	mov	r2, r5
 800b644:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <_vfiprintf_r+0x228>)
 800b646:	a904      	add	r1, sp, #16
 800b648:	4630      	mov	r0, r6
 800b64a:	f7fe f8c1 	bl	80097d0 <_printf_i>
 800b64e:	e7e4      	b.n	800b61a <_vfiprintf_r+0x1e6>
 800b650:	0800bbf2 	.word	0x0800bbf2
 800b654:	0800bbfc 	.word	0x0800bbfc
 800b658:	080092c1 	.word	0x080092c1
 800b65c:	0800b40f 	.word	0x0800b40f
 800b660:	0800bbf8 	.word	0x0800bbf8

0800b664 <__sflush_r>:
 800b664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	0716      	lsls	r6, r2, #28
 800b66e:	4605      	mov	r5, r0
 800b670:	460c      	mov	r4, r1
 800b672:	d454      	bmi.n	800b71e <__sflush_r+0xba>
 800b674:	684b      	ldr	r3, [r1, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dc02      	bgt.n	800b680 <__sflush_r+0x1c>
 800b67a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dd48      	ble.n	800b712 <__sflush_r+0xae>
 800b680:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b682:	2e00      	cmp	r6, #0
 800b684:	d045      	beq.n	800b712 <__sflush_r+0xae>
 800b686:	2300      	movs	r3, #0
 800b688:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b68c:	682f      	ldr	r7, [r5, #0]
 800b68e:	6a21      	ldr	r1, [r4, #32]
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	d030      	beq.n	800b6f6 <__sflush_r+0x92>
 800b694:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	0759      	lsls	r1, r3, #29
 800b69a:	d505      	bpl.n	800b6a8 <__sflush_r+0x44>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6a2:	b10b      	cbz	r3, 800b6a8 <__sflush_r+0x44>
 800b6a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6ac:	6a21      	ldr	r1, [r4, #32]
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b0      	blx	r6
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	d106      	bne.n	800b6c6 <__sflush_r+0x62>
 800b6b8:	6829      	ldr	r1, [r5, #0]
 800b6ba:	291d      	cmp	r1, #29
 800b6bc:	d82b      	bhi.n	800b716 <__sflush_r+0xb2>
 800b6be:	4a2a      	ldr	r2, [pc, #168]	@ (800b768 <__sflush_r+0x104>)
 800b6c0:	40ca      	lsrs	r2, r1
 800b6c2:	07d6      	lsls	r6, r2, #31
 800b6c4:	d527      	bpl.n	800b716 <__sflush_r+0xb2>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	6062      	str	r2, [r4, #4]
 800b6ca:	04d9      	lsls	r1, r3, #19
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	6022      	str	r2, [r4, #0]
 800b6d0:	d504      	bpl.n	800b6dc <__sflush_r+0x78>
 800b6d2:	1c42      	adds	r2, r0, #1
 800b6d4:	d101      	bne.n	800b6da <__sflush_r+0x76>
 800b6d6:	682b      	ldr	r3, [r5, #0]
 800b6d8:	b903      	cbnz	r3, 800b6dc <__sflush_r+0x78>
 800b6da:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6de:	602f      	str	r7, [r5, #0]
 800b6e0:	b1b9      	cbz	r1, 800b712 <__sflush_r+0xae>
 800b6e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6e6:	4299      	cmp	r1, r3
 800b6e8:	d002      	beq.n	800b6f0 <__sflush_r+0x8c>
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f7ff f9fe 	bl	800aaec <_free_r>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6f4:	e00d      	b.n	800b712 <__sflush_r+0xae>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	47b0      	blx	r6
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	1c50      	adds	r0, r2, #1
 800b700:	d1c9      	bne.n	800b696 <__sflush_r+0x32>
 800b702:	682b      	ldr	r3, [r5, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0c6      	beq.n	800b696 <__sflush_r+0x32>
 800b708:	2b1d      	cmp	r3, #29
 800b70a:	d001      	beq.n	800b710 <__sflush_r+0xac>
 800b70c:	2b16      	cmp	r3, #22
 800b70e:	d11e      	bne.n	800b74e <__sflush_r+0xea>
 800b710:	602f      	str	r7, [r5, #0]
 800b712:	2000      	movs	r0, #0
 800b714:	e022      	b.n	800b75c <__sflush_r+0xf8>
 800b716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b71a:	b21b      	sxth	r3, r3
 800b71c:	e01b      	b.n	800b756 <__sflush_r+0xf2>
 800b71e:	690f      	ldr	r7, [r1, #16]
 800b720:	2f00      	cmp	r7, #0
 800b722:	d0f6      	beq.n	800b712 <__sflush_r+0xae>
 800b724:	0793      	lsls	r3, r2, #30
 800b726:	680e      	ldr	r6, [r1, #0]
 800b728:	bf08      	it	eq
 800b72a:	694b      	ldreq	r3, [r1, #20]
 800b72c:	600f      	str	r7, [r1, #0]
 800b72e:	bf18      	it	ne
 800b730:	2300      	movne	r3, #0
 800b732:	eba6 0807 	sub.w	r8, r6, r7
 800b736:	608b      	str	r3, [r1, #8]
 800b738:	f1b8 0f00 	cmp.w	r8, #0
 800b73c:	dde9      	ble.n	800b712 <__sflush_r+0xae>
 800b73e:	6a21      	ldr	r1, [r4, #32]
 800b740:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b742:	4643      	mov	r3, r8
 800b744:	463a      	mov	r2, r7
 800b746:	4628      	mov	r0, r5
 800b748:	47b0      	blx	r6
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dc08      	bgt.n	800b760 <__sflush_r+0xfc>
 800b74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	4407      	add	r7, r0
 800b762:	eba8 0800 	sub.w	r8, r8, r0
 800b766:	e7e7      	b.n	800b738 <__sflush_r+0xd4>
 800b768:	20400001 	.word	0x20400001

0800b76c <_fflush_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	690b      	ldr	r3, [r1, #16]
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	b913      	cbnz	r3, 800b77c <_fflush_r+0x10>
 800b776:	2500      	movs	r5, #0
 800b778:	4628      	mov	r0, r5
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	b118      	cbz	r0, 800b786 <_fflush_r+0x1a>
 800b77e:	6a03      	ldr	r3, [r0, #32]
 800b780:	b90b      	cbnz	r3, 800b786 <_fflush_r+0x1a>
 800b782:	f7fe f9cf 	bl	8009b24 <__sinit>
 800b786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0f3      	beq.n	800b776 <_fflush_r+0xa>
 800b78e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b790:	07d0      	lsls	r0, r2, #31
 800b792:	d404      	bmi.n	800b79e <_fflush_r+0x32>
 800b794:	0599      	lsls	r1, r3, #22
 800b796:	d402      	bmi.n	800b79e <_fflush_r+0x32>
 800b798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b79a:	f7fe fbbe 	bl	8009f1a <__retarget_lock_acquire_recursive>
 800b79e:	4628      	mov	r0, r5
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	f7ff ff5f 	bl	800b664 <__sflush_r>
 800b7a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7a8:	07da      	lsls	r2, r3, #31
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	d4e4      	bmi.n	800b778 <_fflush_r+0xc>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	059b      	lsls	r3, r3, #22
 800b7b2:	d4e1      	bmi.n	800b778 <_fflush_r+0xc>
 800b7b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7b6:	f7fe fbb1 	bl	8009f1c <__retarget_lock_release_recursive>
 800b7ba:	e7dd      	b.n	800b778 <_fflush_r+0xc>

0800b7bc <__swhatbuf_r>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	460c      	mov	r4, r1
 800b7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	b096      	sub	sp, #88	@ 0x58
 800b7c8:	4615      	mov	r5, r2
 800b7ca:	461e      	mov	r6, r3
 800b7cc:	da0d      	bge.n	800b7ea <__swhatbuf_r+0x2e>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7d4:	f04f 0100 	mov.w	r1, #0
 800b7d8:	bf14      	ite	ne
 800b7da:	2340      	movne	r3, #64	@ 0x40
 800b7dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	6031      	str	r1, [r6, #0]
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	b016      	add	sp, #88	@ 0x58
 800b7e8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ea:	466a      	mov	r2, sp
 800b7ec:	f000 f848 	bl	800b880 <_fstat_r>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	dbec      	blt.n	800b7ce <__swhatbuf_r+0x12>
 800b7f4:	9901      	ldr	r1, [sp, #4]
 800b7f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7fe:	4259      	negs	r1, r3
 800b800:	4159      	adcs	r1, r3
 800b802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b806:	e7eb      	b.n	800b7e0 <__swhatbuf_r+0x24>

0800b808 <__smakebuf_r>:
 800b808:	898b      	ldrh	r3, [r1, #12]
 800b80a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b80c:	079d      	lsls	r5, r3, #30
 800b80e:	4606      	mov	r6, r0
 800b810:	460c      	mov	r4, r1
 800b812:	d507      	bpl.n	800b824 <__smakebuf_r+0x1c>
 800b814:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	6123      	str	r3, [r4, #16]
 800b81c:	2301      	movs	r3, #1
 800b81e:	6163      	str	r3, [r4, #20]
 800b820:	b003      	add	sp, #12
 800b822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b824:	ab01      	add	r3, sp, #4
 800b826:	466a      	mov	r2, sp
 800b828:	f7ff ffc8 	bl	800b7bc <__swhatbuf_r>
 800b82c:	9f00      	ldr	r7, [sp, #0]
 800b82e:	4605      	mov	r5, r0
 800b830:	4639      	mov	r1, r7
 800b832:	4630      	mov	r0, r6
 800b834:	f7ff f9ce 	bl	800abd4 <_malloc_r>
 800b838:	b948      	cbnz	r0, 800b84e <__smakebuf_r+0x46>
 800b83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83e:	059a      	lsls	r2, r3, #22
 800b840:	d4ee      	bmi.n	800b820 <__smakebuf_r+0x18>
 800b842:	f023 0303 	bic.w	r3, r3, #3
 800b846:	f043 0302 	orr.w	r3, r3, #2
 800b84a:	81a3      	strh	r3, [r4, #12]
 800b84c:	e7e2      	b.n	800b814 <__smakebuf_r+0xc>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	6020      	str	r0, [r4, #0]
 800b852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b85e:	b15b      	cbz	r3, 800b878 <__smakebuf_r+0x70>
 800b860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b864:	4630      	mov	r0, r6
 800b866:	f000 f81d 	bl	800b8a4 <_isatty_r>
 800b86a:	b128      	cbz	r0, 800b878 <__smakebuf_r+0x70>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	f043 0301 	orr.w	r3, r3, #1
 800b876:	81a3      	strh	r3, [r4, #12]
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	431d      	orrs	r5, r3
 800b87c:	81a5      	strh	r5, [r4, #12]
 800b87e:	e7cf      	b.n	800b820 <__smakebuf_r+0x18>

0800b880 <_fstat_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	@ (800b8a0 <_fstat_r+0x20>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	f7f5 fa97 	bl	8000dc0 <_fstat>
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	d102      	bne.n	800b89c <_fstat_r+0x1c>
 800b896:	682b      	ldr	r3, [r5, #0]
 800b898:	b103      	cbz	r3, 800b89c <_fstat_r+0x1c>
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	24000444 	.word	0x24000444

0800b8a4 <_isatty_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	@ (800b8c0 <_isatty_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f5 fa96 	bl	8000de0 <_isatty>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_isatty_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_isatty_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	24000444 	.word	0x24000444

0800b8c4 <_sbrk_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d06      	ldr	r5, [pc, #24]	@ (800b8e0 <_sbrk_r+0x1c>)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	f7f5 fa9e 	bl	8000e10 <_sbrk>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_sbrk_r+0x1a>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_sbrk_r+0x1a>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	24000444 	.word	0x24000444

0800b8e4 <memcpy>:
 800b8e4:	440a      	add	r2, r1
 800b8e6:	4291      	cmp	r1, r2
 800b8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8ec:	d100      	bne.n	800b8f0 <memcpy+0xc>
 800b8ee:	4770      	bx	lr
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8fa:	4291      	cmp	r1, r2
 800b8fc:	d1f9      	bne.n	800b8f2 <memcpy+0xe>
 800b8fe:	bd10      	pop	{r4, pc}

0800b900 <__assert_func>:
 800b900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b902:	4614      	mov	r4, r2
 800b904:	461a      	mov	r2, r3
 800b906:	4b09      	ldr	r3, [pc, #36]	@ (800b92c <__assert_func+0x2c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4605      	mov	r5, r0
 800b90c:	68d8      	ldr	r0, [r3, #12]
 800b90e:	b14c      	cbz	r4, 800b924 <__assert_func+0x24>
 800b910:	4b07      	ldr	r3, [pc, #28]	@ (800b930 <__assert_func+0x30>)
 800b912:	9100      	str	r1, [sp, #0]
 800b914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b918:	4906      	ldr	r1, [pc, #24]	@ (800b934 <__assert_func+0x34>)
 800b91a:	462b      	mov	r3, r5
 800b91c:	f000 f842 	bl	800b9a4 <fiprintf>
 800b920:	f000 f852 	bl	800b9c8 <abort>
 800b924:	4b04      	ldr	r3, [pc, #16]	@ (800b938 <__assert_func+0x38>)
 800b926:	461c      	mov	r4, r3
 800b928:	e7f3      	b.n	800b912 <__assert_func+0x12>
 800b92a:	bf00      	nop
 800b92c:	2400001c 	.word	0x2400001c
 800b930:	0800bc0d 	.word	0x0800bc0d
 800b934:	0800bc1a 	.word	0x0800bc1a
 800b938:	0800bc48 	.word	0x0800bc48

0800b93c <_calloc_r>:
 800b93c:	b570      	push	{r4, r5, r6, lr}
 800b93e:	fba1 5402 	umull	r5, r4, r1, r2
 800b942:	b934      	cbnz	r4, 800b952 <_calloc_r+0x16>
 800b944:	4629      	mov	r1, r5
 800b946:	f7ff f945 	bl	800abd4 <_malloc_r>
 800b94a:	4606      	mov	r6, r0
 800b94c:	b928      	cbnz	r0, 800b95a <_calloc_r+0x1e>
 800b94e:	4630      	mov	r0, r6
 800b950:	bd70      	pop	{r4, r5, r6, pc}
 800b952:	220c      	movs	r2, #12
 800b954:	6002      	str	r2, [r0, #0]
 800b956:	2600      	movs	r6, #0
 800b958:	e7f9      	b.n	800b94e <_calloc_r+0x12>
 800b95a:	462a      	mov	r2, r5
 800b95c:	4621      	mov	r1, r4
 800b95e:	f7fe fa5f 	bl	8009e20 <memset>
 800b962:	e7f4      	b.n	800b94e <_calloc_r+0x12>

0800b964 <__ascii_mbtowc>:
 800b964:	b082      	sub	sp, #8
 800b966:	b901      	cbnz	r1, 800b96a <__ascii_mbtowc+0x6>
 800b968:	a901      	add	r1, sp, #4
 800b96a:	b142      	cbz	r2, 800b97e <__ascii_mbtowc+0x1a>
 800b96c:	b14b      	cbz	r3, 800b982 <__ascii_mbtowc+0x1e>
 800b96e:	7813      	ldrb	r3, [r2, #0]
 800b970:	600b      	str	r3, [r1, #0]
 800b972:	7812      	ldrb	r2, [r2, #0]
 800b974:	1e10      	subs	r0, r2, #0
 800b976:	bf18      	it	ne
 800b978:	2001      	movne	r0, #1
 800b97a:	b002      	add	sp, #8
 800b97c:	4770      	bx	lr
 800b97e:	4610      	mov	r0, r2
 800b980:	e7fb      	b.n	800b97a <__ascii_mbtowc+0x16>
 800b982:	f06f 0001 	mvn.w	r0, #1
 800b986:	e7f8      	b.n	800b97a <__ascii_mbtowc+0x16>

0800b988 <__ascii_wctomb>:
 800b988:	4603      	mov	r3, r0
 800b98a:	4608      	mov	r0, r1
 800b98c:	b141      	cbz	r1, 800b9a0 <__ascii_wctomb+0x18>
 800b98e:	2aff      	cmp	r2, #255	@ 0xff
 800b990:	d904      	bls.n	800b99c <__ascii_wctomb+0x14>
 800b992:	228a      	movs	r2, #138	@ 0x8a
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	4770      	bx	lr
 800b99c:	700a      	strb	r2, [r1, #0]
 800b99e:	2001      	movs	r0, #1
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <fiprintf>:
 800b9a4:	b40e      	push	{r1, r2, r3}
 800b9a6:	b503      	push	{r0, r1, lr}
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	ab03      	add	r3, sp, #12
 800b9ac:	4805      	ldr	r0, [pc, #20]	@ (800b9c4 <fiprintf+0x20>)
 800b9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b2:	6800      	ldr	r0, [r0, #0]
 800b9b4:	9301      	str	r3, [sp, #4]
 800b9b6:	f7ff fd3d 	bl	800b434 <_vfiprintf_r>
 800b9ba:	b002      	add	sp, #8
 800b9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c0:	b003      	add	sp, #12
 800b9c2:	4770      	bx	lr
 800b9c4:	2400001c 	.word	0x2400001c

0800b9c8 <abort>:
 800b9c8:	b508      	push	{r3, lr}
 800b9ca:	2006      	movs	r0, #6
 800b9cc:	f000 f82c 	bl	800ba28 <raise>
 800b9d0:	2001      	movs	r0, #1
 800b9d2:	f7f5 f9a5 	bl	8000d20 <_exit>

0800b9d6 <_raise_r>:
 800b9d6:	291f      	cmp	r1, #31
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4605      	mov	r5, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	d904      	bls.n	800b9ea <_raise_r+0x14>
 800b9e0:	2316      	movs	r3, #22
 800b9e2:	6003      	str	r3, [r0, #0]
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9ec:	b112      	cbz	r2, 800b9f4 <_raise_r+0x1e>
 800b9ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9f2:	b94b      	cbnz	r3, 800ba08 <_raise_r+0x32>
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f000 f831 	bl	800ba5c <_getpid_r>
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	4601      	mov	r1, r0
 800b9fe:	4628      	mov	r0, r5
 800ba00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba04:	f000 b818 	b.w	800ba38 <_kill_r>
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d00a      	beq.n	800ba22 <_raise_r+0x4c>
 800ba0c:	1c59      	adds	r1, r3, #1
 800ba0e:	d103      	bne.n	800ba18 <_raise_r+0x42>
 800ba10:	2316      	movs	r3, #22
 800ba12:	6003      	str	r3, [r0, #0]
 800ba14:	2001      	movs	r0, #1
 800ba16:	e7e7      	b.n	800b9e8 <_raise_r+0x12>
 800ba18:	2100      	movs	r1, #0
 800ba1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba1e:	4620      	mov	r0, r4
 800ba20:	4798      	blx	r3
 800ba22:	2000      	movs	r0, #0
 800ba24:	e7e0      	b.n	800b9e8 <_raise_r+0x12>
	...

0800ba28 <raise>:
 800ba28:	4b02      	ldr	r3, [pc, #8]	@ (800ba34 <raise+0xc>)
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	f7ff bfd2 	b.w	800b9d6 <_raise_r>
 800ba32:	bf00      	nop
 800ba34:	2400001c 	.word	0x2400001c

0800ba38 <_kill_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d07      	ldr	r5, [pc, #28]	@ (800ba58 <_kill_r+0x20>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	4611      	mov	r1, r2
 800ba44:	602b      	str	r3, [r5, #0]
 800ba46:	f7f5 f95b 	bl	8000d00 <_kill>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	d102      	bne.n	800ba54 <_kill_r+0x1c>
 800ba4e:	682b      	ldr	r3, [r5, #0]
 800ba50:	b103      	cbz	r3, 800ba54 <_kill_r+0x1c>
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	bf00      	nop
 800ba58:	24000444 	.word	0x24000444

0800ba5c <_getpid_r>:
 800ba5c:	f7f5 b948 	b.w	8000cf0 <_getpid>

0800ba60 <_init>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	bf00      	nop
 800ba64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba66:	bc08      	pop	{r3}
 800ba68:	469e      	mov	lr, r3
 800ba6a:	4770      	bx	lr

0800ba6c <_fini>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr
