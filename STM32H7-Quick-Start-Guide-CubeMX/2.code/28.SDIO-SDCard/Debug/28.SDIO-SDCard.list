
28.SDIO-SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c460  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c700  0800c700  0000d700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cbd4  0800cbd4  0000dbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cbdc  0800cbdc  0000dbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cbe0  0800cbe0  0000dbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800cbe4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002bc  240001dc  0800cdc0  0000e1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000498  0800cdc0  0000e498  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000175b2  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003421  00000000  00000000  000257bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a8  00000000  00000000  00028be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c9f  00000000  00000000  00029c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ccc0  00000000  00000000  0002a927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e319  00000000  00000000  000675e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179f52  00000000  00000000  00085900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff852  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005140  00000000  00000000  001ff898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  002049d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c6e8 	.word	0x0800c6e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800c6e8 	.word	0x0800c6e8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f002 f85e 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f001 fe89 	bl	8002424 <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <delay_us>:
 * @param     nus: 要延时的us数
 * @note      nus取值范围: 0 ~ (2^32 / fac_us) (fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_us(uint32_t nus)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <delay_us+0x74>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <delay_us+0x78>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	613b      	str	r3, [r7, #16]

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedlock();                    /* 锁定 OS 的任务调度器 */
#endif

    told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <delay_us+0x74>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <delay_us+0x74>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	429a      	cmp	r2, r3
 8000754:	d0f8      	beq.n	8000748 <delay_us+0x24>
        {
            if (tnow < told)
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	429a      	cmp	r2, r3
 800075c:	d206      	bcs.n	800076c <delay_us+0x48>
            {
                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	4413      	add	r3, r2
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	e007      	b.n	800077c <delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	4413      	add	r3, r2
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	4413      	add	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d200      	bcs.n	800078a <delay_us+0x66>
        tnow = SysTick->VAL;
 8000788:	e7de      	b.n	8000748 <delay_us+0x24>
            {
                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 800078a:	bf00      	nop

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedunlock();                  /* 恢复 OS 的任务调度器 */
#endif

}
 800078c:	bf00      	nop
 800078e:	3724      	adds	r7, #36	@ 0x24
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e010 	.word	0xe000e010
 800079c:	240001f8 	.word	0x240001f8

080007a0 <delay_ms>:
 * @brief     延时nms
 * @param     nms: 要延时的ms数 (0< nms <= (2^32 / fac_us / 1000))(fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_ms(uint16_t nms)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]

        nms %= g_fac_ms;                                /* OS已经无法提供这么小的延时了,采用普通方式延时 */
    }
#endif

    delay_us((uint32_t)(nms * 1000));                   /* 普通方式延时 */
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffb5 	bl	8000724 <delay_us>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
     delay_ms(Delay);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <delay_ms>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_KEY_GPIO_Init+0x68>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <MX_KEY_GPIO_Init+0x68>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_KEY_GPIO_Init+0x68>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000816:	2302      	movs	r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	480a      	ldr	r0, [pc, #40]	@ (8000848 <MX_KEY_GPIO_Init+0x6c>)
 8000820:	f001 fe00 	bl	8002424 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8000824:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000828:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082e:	2301      	movs	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_KEY_GPIO_Init+0x6c>)
 8000838:	f001 fdf4 	bl	8002424 <HAL_GPIO_Init>
}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58024400 	.word	0x58024400
 8000848:	58020000 	.word	0x58020000

0800084c <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <key_scan+0x1a>
 8000860:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <key_scan+0xd8>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 8000866:	2102      	movs	r1, #2
 8000868:	482f      	ldr	r0, [pc, #188]	@ (8000928 <key_scan+0xdc>)
 800086a:	f001 ff8b 	bl	8002784 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8000872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000876:	482c      	ldr	r0, [pc, #176]	@ (8000928 <key_scan+0xdc>)
 8000878:	f001 ff84 	bl	8002784 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 8000880:	2101      	movs	r1, #1
 8000882:	4829      	ldr	r0, [pc, #164]	@ (8000928 <key_scan+0xdc>)
 8000884:	f001 ff7e 	bl	8002784 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <key_scan+0xd8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d033      	beq.n	80008fc <key_scan+0xb0>
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <key_scan+0x5a>
 800089a:	7b7b      	ldrb	r3, [r7, #13]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <key_scan+0x5a>
 80008a0:	7b3b      	ldrb	r3, [r7, #12]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d12a      	bne.n	80008fc <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 80008a6:	200a      	movs	r0, #10
 80008a8:	f7ff ff8b 	bl	80007c2 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 80008ac:	2102      	movs	r1, #2
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <key_scan+0xdc>)
 80008b0:	f001 ff68 	bl	8002784 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80008b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008bc:	481a      	ldr	r0, [pc, #104]	@ (8000928 <key_scan+0xdc>)
 80008be:	f001 ff61 	bl	8002784 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80008c6:	2101      	movs	r1, #1
 80008c8:	4817      	ldr	r0, [pc, #92]	@ (8000928 <key_scan+0xdc>)
 80008ca:	f001 ff5b 	bl	8002784 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <key_scan+0xd8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 80008d8:	7b3b      	ldrb	r3, [r7, #12]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d102      	bne.n	80008e4 <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 80008de:	2303      	movs	r3, #3
 80008e0:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 80008e2:	e018      	b.n	8000916 <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 80008ea:	2302      	movs	r3, #2
 80008ec:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 80008ee:	e012      	b.n	8000916 <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10f      	bne.n	8000916 <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 80008fa:	e00c      	b.n	8000916 <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d10a      	bne.n	8000918 <key_scan+0xcc>
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d107      	bne.n	8000918 <key_scan+0xcc>
 8000908:	7b3b      	ldrb	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d104      	bne.n	8000918 <key_scan+0xcc>
    {
        key_up = 1;
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <key_scan+0xd8>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e000      	b.n	8000918 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 8000916:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	24000000 	.word	0x24000000
 8000928:	58020000 	.word	0x58020000

0800092c <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_LED_GPIO_Init+0xa8>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <MX_LED_GPIO_Init+0xa8>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <MX_LED_GPIO_Init+0xa8>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_LED_GPIO_Init+0xa8>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <MX_LED_GPIO_Init+0xa8>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_LED_GPIO_Init+0xa8>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2160      	movs	r1, #96	@ 0x60
 8000982:	4815      	ldr	r0, [pc, #84]	@ (80009d8 <MX_LED_GPIO_Init+0xac>)
 8000984:	f001 ff16 	bl	80027b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2110      	movs	r1, #16
 800098c:	4813      	ldr	r0, [pc, #76]	@ (80009dc <MX_LED_GPIO_Init+0xb0>)
 800098e:	f001 ff11 	bl	80027b4 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000992:	2360      	movs	r3, #96	@ 0x60
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_LED_GPIO_Init+0xac>)
 80009aa:	f001 fd3b 	bl	8002424 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80009ae:	2310      	movs	r3, #16
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_LED_GPIO_Init+0xb0>)
 80009c6:	f001 fd2d 	bl	8002424 <HAL_GPIO_Init>
}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	58024400 	.word	0x58024400
 80009d8:	58021000 	.word	0x58021000
 80009dc:	58020400 	.word	0x58020400

080009e0 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 80009e4:	f7ff ffa2 	bl	800092c <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 80009e8:	f7ff fe68 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 80009ec:	f7ff fef6 	bl	80007dc <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80009f0:	f000 fc92 	bl	8001318 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <sd_test_read>:
 * @param       secaddr : 扇区地址
 * @param       seccnt  : 扇区数
 * @retval      无
 */
void sd_test_read(uint32_t secaddr, uint32_t seccnt)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a04:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a08:	6018      	str	r0, [r3, #0]
 8000a0a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a0e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000a12:	6019      	str	r1, [r3, #0]
    uint32_t i;
    uint8_t buf[512];  // 为缓冲区分配内存
    uint8_t sta = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    sta = sd_read_disk(buf, secaddr, seccnt);   /* 读取secaddr扇区开始的内容 */
 8000a1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a1e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8000a22:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a26:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a2a:	f107 0008 	add.w	r0, r7, #8
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	f000 fa57 	bl	8000ee4 <sd_read_disk>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b

    if (sta == 0)
 8000a3c:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d12a      	bne.n	8000a9a <sd_test_read+0xa2>
    {
        printf("SECTOR %lu DATA:\r\n", secaddr);
 8000a44:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a48:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <sd_test_read+0xb8>)
 8000a50:	f009 fee2 	bl	800a818 <iprintf>

        for (i = 0; i < seccnt * 512; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000a5a:	e010      	b.n	8000a7e <sd_test_read+0x86>
        {
            printf("%x ", buf[i]);  /* 打印secaddr开始的扇区数据 */
 8000a5c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a60:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8000a64:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <sd_test_read+0xbc>)
 8000a70:	f009 fed2 	bl	800a818 <iprintf>
        for (i = 0; i < seccnt * 512; i++)
 8000a74:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000a7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a82:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	025b      	lsls	r3, r3, #9
 8000a8a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3e4      	bcc.n	8000a5c <sd_test_read+0x64>
        }

        printf("\r\nDATA ENDED\r\n");
 8000a92:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <sd_test_read+0xc0>)
 8000a94:	f009 ff28 	bl	800a8e8 <puts>
    }
    else
    {
        printf("err:%d\r\n", sta);
    }
}
 8000a98:	e005      	b.n	8000aa6 <sd_test_read+0xae>
        printf("err:%d\r\n", sta);
 8000a9a:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4806      	ldr	r0, [pc, #24]	@ (8000abc <sd_test_read+0xc4>)
 8000aa2:	f009 feb9 	bl	800a818 <iprintf>
}
 8000aa6:	bf00      	nop
 8000aa8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	0800c7bc 	.word	0x0800c7bc
 8000ab4:	0800c7d0 	.word	0x0800c7d0
 8000ab8:	0800c7d4 	.word	0x0800c7d4
 8000abc:	0800c7e4 	.word	0x0800c7e4

08000ac0 <main>:
        printf("err:%d\r\n", sta);
    }
}

int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  uint8_t key;
  uint8_t t = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  //uint64_t card_capacity;       /* SD卡容量 */
  MPU_Config();
 8000aca:	f000 f8d3 	bl	8000c74 <MPU_Config>
  HAL_Init();
 8000ace:	f000 fd1f 	bl	8001510 <HAL_Init>
  SystemClock_Config();
 8000ad2:	f000 f831 	bl	8000b38 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000ad6:	f000 f8af 	bl	8000c38 <PeriphCommonClock_Config>
  bsp_init();
 8000ada:	f7ff ff81 	bl	80009e0 <bsp_init>
  while(sd_init())           /* 初始化SD卡,直到成功 */
 8000ade:	e006      	b.n	8000aee <main+0x2e>
  {
	  printf("SD Card init failed! Please check!\r\n");
 8000ae0:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <main+0x70>)
 8000ae2:	f009 ff01 	bl	800a8e8 <puts>
	  HAL_Delay(1000);
 8000ae6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aea:	f7ff fe6a 	bl	80007c2 <HAL_Delay>
  while(sd_init())           /* 初始化SD卡,直到成功 */
 8000aee:	f000 f903 	bl	8000cf8 <sd_init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1f3      	bne.n	8000ae0 <main+0x20>
  }
  while (1)
  {
	  key = key_scan(0);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fea7 	bl	800084c <key_scan>
 8000afe:	4603      	mov	r3, r0
 8000b00:	71bb      	strb	r3, [r7, #6]
	  if(key == KEY0_PRES)
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d103      	bne.n	8000b10 <main+0x50>
	  {
		  sd_test_read(0, 1);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff ff74 	bl	80009f8 <sd_test_read>
	  }
	  t++;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	3301      	adds	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(10);
 8000b16:	200a      	movs	r0, #10
 8000b18:	f7ff fe53 	bl	80007c2 <HAL_Delay>
	  if(t == 20)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b14      	cmp	r3, #20
 8000b20:	d1ea      	bne.n	8000af8 <main+0x38>
	  {
		  t = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
		  HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000b26:	2140      	movs	r1, #64	@ 0x40
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <main+0x74>)
 8000b2a:	f001 fe5c 	bl	80027e6 <HAL_GPIO_TogglePin>
	  key = key_scan(0);
 8000b2e:	e7e3      	b.n	8000af8 <main+0x38>
 8000b30:	0800c800 	.word	0x0800c800
 8000b34:	58021000 	.word	0x58021000

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09c      	sub	sp, #112	@ 0x70
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	224c      	movs	r2, #76	@ 0x4c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f009 ffae 	bl	800aaa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2220      	movs	r2, #32
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f009 ffa8 	bl	800aaa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f001 fe83 	bl	8002864 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <SystemClock_Config+0xf8>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a32      	ldr	r2, [pc, #200]	@ (8000c30 <SystemClock_Config+0xf8>)
 8000b68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <SystemClock_Config+0xf8>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <SystemClock_Config+0xfc>)
 8000b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000c34 <SystemClock_Config+0xfc>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b84:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <SystemClock_Config+0xfc>)
 8000b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b90:	bf00      	nop
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <SystemClock_Config+0xf8>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b9e:	d1f8      	bne.n	8000b92 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000ba0:	230b      	movs	r3, #11
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bae:	2340      	movs	r3, #64	@ 0x40
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000bc2:	2378      	movs	r3, #120	@ 0x78
 8000bc4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fe78 	bl	80028d8 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000bee:	f000 f86d 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	233f      	movs	r3, #63	@ 0x3f
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c02:	2340      	movs	r3, #64	@ 0x40
 8000c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c10:	2340      	movs	r3, #64	@ 0x40
 8000c12:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fab7 	bl	800318c <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000c24:	f000 f852 	bl	8000ccc <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3770      	adds	r7, #112	@ 0x70
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024800 	.word	0x58024800
 8000c34:	58000400 	.word	0x58000400

08000c38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0b0      	sub	sp, #192	@ 0xc0
 8000c3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	22c0      	movs	r2, #192	@ 0xc0
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f009 ff2f 	bl	800aaa8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000c4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000c56:	2300      	movs	r3, #0
 8000c58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fe21 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000c68:	f000 f830 	bl	8000ccc <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	37c0      	adds	r7, #192	@ 0xc0
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c86:	f000 fdf1 	bl	800186c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c96:	231f      	movs	r3, #31
 8000c98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c9a:	2387      	movs	r3, #135	@ 0x87
 8000c9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fe0f 	bl	80018dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cbe:	2004      	movs	r0, #4
 8000cc0:	f000 fdec 	bl	800189c <HAL_MPU_Enable>

}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <sys_intx_disable>:
 * @brief       关闭所有中断(但是不包括fault和NMI中断)
 * @param       无
 * @retval      无
 */
void sys_intx_disable(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
    __ASM volatile("cpsid i");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <sys_intx_enable>:
 * @brief       开启所有中断
 * @param       无
 * @retval      无
 */
void sys_intx_enable(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    __ASM volatile("cpsie i");
 8000cec:	b662      	cpsie	i
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <sd_init>:
 * @brief       初始化SD卡
 * @param       无
 * @retval      返回值:0 初始化正确；其他值，初始化错误
 */
uint8_t sd_init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
    uint8_t SD_Error;

    HAL_SD_DeInit(&g_sd_handle);                                                /* 清零相应参数 */
 8000cfe:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <sd_init+0x58>)
 8000d00:	f005 fbee 	bl	80064e0 <HAL_SD_DeInit>

    /* 初始化时的时钟不能大于400KHZ */
    g_sd_handle.Instance = SDMMC1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <sd_init+0x58>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <sd_init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
    g_sd_handle.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;                       /* 上升沿 */
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <sd_init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
    g_sd_handle.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;           /* 空闲时不关闭时钟电源 */
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <sd_init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
    g_sd_handle.Init.BusWide = SDMMC_BUS_WIDE_4B;                               /* 4位数据线 */
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <sd_init+0x58>)
 8000d18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d1c:	60da      	str	r2, [r3, #12]
    g_sd_handle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE; /* 关闭硬件流控 */
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <sd_init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
    g_sd_handle.Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;                           /* SD传输时钟频率最大25MHZ */
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <sd_init+0x58>)
 8000d26:	2204      	movs	r2, #4
 8000d28:	615a      	str	r2, [r3, #20]

    SD_Error = HAL_SD_Init(&g_sd_handle);
 8000d2a:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <sd_init+0x58>)
 8000d2c:	f005 fab8 	bl	80062a0 <HAL_SD_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
    if (SD_Error != HAL_OK)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <sd_init+0x46>
    {
        return 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e004      	b.n	8000d48 <sd_init+0x50>
    }

    HAL_SD_GetCardInfo(&g_sd_handle, &g_sd_card_info_handle);   /* 获取SD卡信息 */
 8000d3e:	4906      	ldr	r1, [pc, #24]	@ (8000d58 <sd_init+0x60>)
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <sd_init+0x58>)
 8000d42:	f005 ffe3 	bl	8006d0c <HAL_SD_GetCardInfo>
    return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240001fc 	.word	0x240001fc
 8000d54:	52007000 	.word	0x52007000
 8000d58:	24000278 	.word	0x24000278

08000d5c <HAL_SD_MspInit>:
 * @param       hsd:SD卡句柄
 * @note        此函数会被HAL_SD_Init()调用
 * @retval      无
 */
void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    __HAL_RCC_SDMMC1_CLK_ENABLE();  /* 使能SDMMC1时钟 */
 8000d64:	4b54      	ldr	r3, [pc, #336]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000d66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d6a:	4a53      	ldr	r2, [pc, #332]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d70:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000d74:	4b50      	ldr	r3, [pc, #320]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000d76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d7e:	623b      	str	r3, [r7, #32]
 8000d80:	6a3b      	ldr	r3, [r7, #32]
    SD1_D0_GPIO_CLK_ENABLE();       /* D0引脚IO时钟使能 */
 8000d82:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d92:	4b49      	ldr	r3, [pc, #292]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
    SD1_D1_GPIO_CLK_ENABLE();       /* D1引脚IO时钟使能 */
 8000da0:	4b45      	ldr	r3, [pc, #276]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	4a44      	ldr	r2, [pc, #272]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db0:	4b41      	ldr	r3, [pc, #260]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
    SD1_D2_GPIO_CLK_ENABLE();       /* D2引脚IO时钟使能 */
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dce:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
    SD1_D3_GPIO_CLK_ENABLE();       /* D3引脚IO时钟使能 */
 8000ddc:	4b36      	ldr	r3, [pc, #216]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a35      	ldr	r2, [pc, #212]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    SD1_CLK_GPIO_CLK_ENABLE();      /* CLK引脚IO时钟使能 */
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a2d      	ldr	r2, [pc, #180]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    SD1_CMD_GPIO_CLK_ENABLE();      /* CMD引脚IO时钟使能 */
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <HAL_SD_MspInit+0x15c>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]

    gpio_init_struct.Pin = SD1_D0_GPIO_PIN;
 8000e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;                /* 推挽复用 */
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* 上拉 */
 8000e40:	2301      	movs	r3, #1
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;     /* 高速 */
 8000e44:	2303      	movs	r3, #3
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_struct.Alternate = GPIO_AF12_SDIO1;           /* 复用为SDIO */
 8000e48:	230c      	movs	r3, #12
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SD1_D0_GPIO_PORT, &gpio_init_struct);     /* 初始化D0引脚 */
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	481a      	ldr	r0, [pc, #104]	@ (8000ebc <HAL_SD_MspInit+0x160>)
 8000e54:	f001 fae6 	bl	8002424 <HAL_GPIO_Init>

    gpio_init_struct.Pin = SD1_D1_GPIO_PIN;
 8000e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SD1_D1_GPIO_PORT, &gpio_init_struct);     /* 初始化D1引脚 */
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4815      	ldr	r0, [pc, #84]	@ (8000ebc <HAL_SD_MspInit+0x160>)
 8000e66:	f001 fadd 	bl	8002424 <HAL_GPIO_Init>

    gpio_init_struct.Pin = SD1_D2_GPIO_PIN;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SD1_D2_GPIO_PORT, &gpio_init_struct);     /* 初始化D2引脚 */
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4811      	ldr	r0, [pc, #68]	@ (8000ebc <HAL_SD_MspInit+0x160>)
 8000e78:	f001 fad4 	bl	8002424 <HAL_GPIO_Init>

    gpio_init_struct.Pin = SD1_D3_GPIO_PIN;
 8000e7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SD1_D3_GPIO_PORT, &gpio_init_struct);     /* 初始化D3引脚 */
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <HAL_SD_MspInit+0x160>)
 8000e8a:	f001 facb 	bl	8002424 <HAL_GPIO_Init>

    gpio_init_struct.Pin = SD1_CLK_GPIO_PIN;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SD1_CLK_GPIO_PORT, &gpio_init_struct);    /* 初始化CLK引脚 */
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4808      	ldr	r0, [pc, #32]	@ (8000ebc <HAL_SD_MspInit+0x160>)
 8000e9c:	f001 fac2 	bl	8002424 <HAL_GPIO_Init>

    gpio_init_struct.Pin = SD1_CMD_GPIO_PIN;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SD1_CMD_GPIO_PORT, &gpio_init_struct);    /* 初始化CMD引脚 */
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <HAL_SD_MspInit+0x164>)
 8000eac:	f001 faba 	bl	8002424 <HAL_GPIO_Init>
}
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	@ 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58020800 	.word	0x58020800
 8000ec0:	58020c00 	.word	0x58020c00

08000ec4 <get_sd_card_state>:
 * @param       无
 * @retval      返回值:SD_TRANSFER_OK      传输完成，可以继续下一次传输
                       SD_TRANSFER_BUSY SD 卡正忙，不可以进行下一次传输
 */
uint8_t get_sd_card_state(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&g_sd_handle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <get_sd_card_state+0x1c>)
 8000eca:	f006 f85d 	bl	8006f88 <HAL_SD_GetCardState>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	240001fc 	.word	0x240001fc

08000ee4 <sd_read_disk>:
 * @param       sector:扇区地址
 * @param       cnt:扇区个数
 * @retval      返回值:0,正常;其他,错误;
 */
uint8_t sd_read_disk(uint8_t *buf, uint32_t sector, uint32_t cnt)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
    uint8_t sta = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	77fb      	strb	r3, [r7, #31]
    uint32_t timeout = SD_TIMEOUT;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <sd_read_disk+0x64>)
 8000ef6:	61bb      	str	r3, [r7, #24]
    long long lsector = sector;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2200      	movs	r2, #0
 8000efc:	461c      	mov	r4, r3
 8000efe:	4615      	mov	r5, r2
 8000f00:	e9c7 4504 	strd	r4, r5, [r7, #16]

    sys_intx_disable();                                                             /* 关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!) */
 8000f04:	f7ff fee8 	bl	8000cd8 <sys_intx_disable>
    sta = HAL_SD_ReadBlocks(&g_sd_handle, (uint8_t*)buf, lsector, cnt, SD_TIMEOUT); /* 多个sector的读操作 */
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <sd_read_disk+0x64>)
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <sd_read_disk+0x68>)
 8000f14:	f005 fb0e 	bl	8006534 <HAL_SD_ReadBlocks>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	77fb      	strb	r3, [r7, #31]

    /* 等待SD卡读完 */
    while (get_sd_card_state() != SD_TRANSFER_OK)
 8000f1c:	e007      	b.n	8000f2e <sd_read_disk+0x4a>
    {
        if (timeout-- == 0)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	61ba      	str	r2, [r7, #24]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <sd_read_disk+0x4a>
        {
            sta = SD_TRANSFER_BUSY;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	77fb      	strb	r3, [r7, #31]
            break;
 8000f2c:	e004      	b.n	8000f38 <sd_read_disk+0x54>
    while (get_sd_card_state() != SD_TRANSFER_OK)
 8000f2e:	f7ff ffc9 	bl	8000ec4 <get_sd_card_state>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f2      	bne.n	8000f1e <sd_read_disk+0x3a>
        }
    }

    sys_intx_enable();  /* 开启总中断 */
 8000f38:	f7ff fed6 	bl	8000ce8 <sys_intx_enable>
    return sta;
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bdb0      	pop	{r4, r5, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	05f5e100 	.word	0x05f5e100
 8000f4c:	240001fc 	.word	0x240001fc

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_MspInit+0x30>)
 8000f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_MspInit+0x30>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_MspInit+0x30>)
 8000f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58024400 	.word	0x58024400

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 fb0b 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <WWDG_IRQHandler+0x10>)
 8000fea:	f008 f96f 	bl	80092cc <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	24000334 	.word	0x24000334

08000ff8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f001 fc0c 	bl	800281a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <USART1_IRQHandler+0x10>)
 800100e:	f006 fc81 	bl	8007914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	240002a0 	.word	0x240002a0

0800101c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return 1;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_kill>:

int _kill(int pid, int sig)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001036:	f009 fd89 	bl	800ab4c <__errno>
 800103a:	4603      	mov	r3, r0
 800103c:	2216      	movs	r2, #22
 800103e:	601a      	str	r2, [r3, #0]
  return -1;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_exit>:

void _exit (int status)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffe7 	bl	800102c <_kill>
  while (1) {}    /* Make sure we hang here */
 800105e:	bf00      	nop
 8001060:	e7fd      	b.n	800105e <_exit+0x12>

08001062 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e00a      	b.n	800108a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001074:	f3af 8000 	nop.w
 8001078:	4601      	mov	r1, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	60ba      	str	r2, [r7, #8]
 8001080:	b2ca      	uxtb	r2, r1
 8001082:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	dbf0      	blt.n	8001074 <_read+0x12>
  }

  return len;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e009      	b.n	80010c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	60ba      	str	r2, [r7, #8]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f9ec 	bl	8001494 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbf1      	blt.n	80010ae <_write+0x12>
  }
  return len;
 80010ca:	687b      	ldr	r3, [r7, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_close>:

int _close(int file)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010fc:	605a      	str	r2, [r3, #4]
  return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_isatty>:

int _isatty(int file)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f009 fcee 	bl	800ab4c <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	24080000 	.word	0x24080000
 800119c:	00000400 	.word	0x00000400
 80011a0:	2400029c 	.word	0x2400029c
 80011a4:	24000498 	.word	0x24000498

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ac:	4b43      	ldr	r3, [pc, #268]	@ (80012bc <SystemInit+0x114>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b2:	4a42      	ldr	r2, [pc, #264]	@ (80012bc <SystemInit+0x114>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011bc:	4b40      	ldr	r3, [pc, #256]	@ (80012c0 <SystemInit+0x118>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d807      	bhi.n	80011d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c8:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <SystemInit+0x118>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 030f 	bic.w	r3, r3, #15
 80011d0:	4a3b      	ldr	r2, [pc, #236]	@ (80012c0 <SystemInit+0x118>)
 80011d2:	f043 0307 	orr.w	r3, r3, #7
 80011d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <SystemInit+0x11c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a39      	ldr	r2, [pc, #228]	@ (80012c4 <SystemInit+0x11c>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <SystemInit+0x11c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ea:	4b36      	ldr	r3, [pc, #216]	@ (80012c4 <SystemInit+0x11c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4935      	ldr	r1, [pc, #212]	@ (80012c4 <SystemInit+0x11c>)
 80011f0:	4b35      	ldr	r3, [pc, #212]	@ (80012c8 <SystemInit+0x120>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f6:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <SystemInit+0x118>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <SystemInit+0x118>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 030f 	bic.w	r3, r3, #15
 800120a:	4a2d      	ldr	r2, [pc, #180]	@ (80012c0 <SystemInit+0x118>)
 800120c:	f043 0307 	orr.w	r3, r3, #7
 8001210:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001212:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <SystemInit+0x11c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001218:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <SystemInit+0x11c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <SystemInit+0x11c>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001224:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <SystemInit+0x11c>)
 8001226:	4a29      	ldr	r2, [pc, #164]	@ (80012cc <SystemInit+0x124>)
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <SystemInit+0x11c>)
 800122c:	4a28      	ldr	r2, [pc, #160]	@ (80012d0 <SystemInit+0x128>)
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001230:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <SystemInit+0x11c>)
 8001232:	4a28      	ldr	r2, [pc, #160]	@ (80012d4 <SystemInit+0x12c>)
 8001234:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001236:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <SystemInit+0x11c>)
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800123c:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <SystemInit+0x11c>)
 800123e:	4a25      	ldr	r2, [pc, #148]	@ (80012d4 <SystemInit+0x12c>)
 8001240:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <SystemInit+0x11c>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <SystemInit+0x11c>)
 800124a:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <SystemInit+0x12c>)
 800124c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <SystemInit+0x11c>)
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <SystemInit+0x11c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <SystemInit+0x11c>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <SystemInit+0x11c>)
 8001262:	2200      	movs	r2, #0
 8001264:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <SystemInit+0x130>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <SystemInit+0x134>)
 800126c:	4013      	ands	r3, r2
 800126e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001272:	d202      	bcs.n	800127a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <SystemInit+0x138>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <SystemInit+0x11c>)
 800127c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d113      	bne.n	80012b0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <SystemInit+0x11c>)
 800128a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800128e:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <SystemInit+0x11c>)
 8001290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001294:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <SystemInit+0x13c>)
 800129a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800129e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <SystemInit+0x11c>)
 80012a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <SystemInit+0x11c>)
 80012a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	52002000 	.word	0x52002000
 80012c4:	58024400 	.word	0x58024400
 80012c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80012cc:	02020200 	.word	0x02020200
 80012d0:	01ff0000 	.word	0x01ff0000
 80012d4:	01010280 	.word	0x01010280
 80012d8:	5c001000 	.word	0x5c001000
 80012dc:	ffff0000 	.word	0xffff0000
 80012e0:	51008108 	.word	0x51008108
 80012e4:	52004000 	.word	0x52004000

080012e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <ExitRun0Mode+0x2c>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <ExitRun0Mode+0x2c>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80012f8:	bf00      	nop
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <ExitRun0Mode+0x2c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f9      	beq.n	80012fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	58024800 	.word	0x58024800

08001318 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 800131e:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <MX_USART1_UART_Init+0x94>)
 8001320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001360:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001362:	f006 f9f9 	bl	8007758 <HAL_UART_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800136c:	f7ff fcae 	bl	8000ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001374:	f007 fee0 	bl	8009138 <HAL_UARTEx_SetTxFifoThreshold>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800137e:	f7ff fca5 	bl	8000ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001386:	f007 ff15 	bl	80091b4 <HAL_UARTEx_SetRxFifoThreshold>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001390:	f7ff fc9c 	bl	8000ccc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_USART1_UART_Init+0x90>)
 8001396:	f007 fe96 	bl	80090c6 <HAL_UARTEx_DisableFifoMode>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f7ff fc94 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	240002a0 	.word	0x240002a0
 80013ac:	40011000 	.word	0x40011000

080013b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0ba      	sub	sp, #232	@ 0xe8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	22c0      	movs	r2, #192	@ 0xc0
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f009 fb69 	bl	800aaa8 <memset>
  if(uartHandle->Instance==USART1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <HAL_UART_MspInit+0xd8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d14e      	bne.n	800147e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013e0:	f04f 0201 	mov.w	r2, #1
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fa54 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001402:	f7ff fc63 	bl	8000ccc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_UART_MspInit+0xdc>)
 8001408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800140c:	4a1f      	ldr	r2, [pc, #124]	@ (800148c <HAL_UART_MspInit+0xdc>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_UART_MspInit+0xdc>)
 8001418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_UART_MspInit+0xdc>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	4a18      	ldr	r2, [pc, #96]	@ (800148c <HAL_UART_MspInit+0xdc>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_UART_MspInit+0xdc>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001442:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145c:	2307      	movs	r3, #7
 800145e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001466:	4619      	mov	r1, r3
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <HAL_UART_MspInit+0xe0>)
 800146a:	f000 ffdb 	bl	8002424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2025      	movs	r0, #37	@ 0x25
 8001474:	f000 f9c5 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001478:	2025      	movs	r0, #37	@ 0x25
 800147a:	f000 f9dc 	bl	8001836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800147e:	bf00      	nop
 8001480:	37e8      	adds	r7, #232	@ 0xe8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40011000 	.word	0x40011000
 800148c:	58024400 	.word	0x58024400
 8001490:	58020000 	.word	0x58020000

08001494 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2201      	movs	r2, #1
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <__io_putchar+0x20>)
 80014a6:	f006 f9a7 	bl	80077f8 <HAL_UART_Transmit>
    return ch;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240002a0 	.word	0x240002a0

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80014f4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80014bc:	f7ff ff14 	bl	80012e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014c0:	f7ff fe72 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	@ (80014fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ea:	f009 fb35 	bl	800ab58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff fae7 	bl	8000ac0 <main>
  bx  lr
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014fc:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001500:	0800cbe4 	.word	0x0800cbe4
  ldr r2, =_sbss
 8001504:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001508:	24000498 	.word	0x24000498

0800150c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC3_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
 8001518:	f000 f968 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800151c:	f001 ffec 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_Init+0x68>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	4913      	ldr	r1, [pc, #76]	@ (800157c <HAL_Init+0x6c>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
 8001538:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	4a0e      	ldr	r2, [pc, #56]	@ (800157c <HAL_Init+0x6c>)
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_Init+0x70>)
 8001552:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001554:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <HAL_Init+0x74>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155a:	200f      	movs	r0, #15
 800155c:	f000 f814 	bl	8001588 <HAL_InitTick>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e002      	b.n	8001570 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800156a:	f7ff fcf1 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58024400 	.word	0x58024400
 800157c:	0800c824 	.word	0x0800c824
 8001580:	24000008 	.word	0x24000008
 8001584:	24000004 	.word	0x24000004

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_InitTick+0x60>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e021      	b.n	80015e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_InitTick+0x64>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_InitTick+0x60>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f94d 	bl	8001852 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f917 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_InitTick+0x68>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	24000010 	.word	0x24000010
 80015ec:	24000004 	.word	0x24000004
 80015f0:	2400000c 	.word	0x2400000c

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	24000010 	.word	0x24000010
 8001618:	24000348 	.word	0x24000348

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	24000348 	.word	0x24000348

08001634 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_GetREVID+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0c1b      	lsrs	r3, r3, #16
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	5c001000 	.word	0x5c001000

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <__NVIC_SetPriorityGrouping+0x40>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	4313      	orrs	r3, r2
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	@ (800168c <__NVIC_SetPriorityGrouping+0x40>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	05fa0000 	.word	0x05fa0000

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4907      	ldr	r1, [pc, #28]	@ (80016e8 <__NVIC_EnableIRQ+0x38>)
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	@ (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	@ (800173c <__NVIC_SetPriority+0x50>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	@ 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	@ 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff29 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001810:	f7ff ff40 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff ff90 	bl	8001740 <NVIC_EncodePriority>
 8001820:	4602      	mov	r2, r0
 8001822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff5f 	bl	80016ec <__NVIC_SetPriority>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff33 	bl	80016b0 <__NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffa4 	bl	80017a8 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001870:	f3bf 8f5f 	dmb	sy
}
 8001874:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <HAL_MPU_Disable+0x28>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <HAL_MPU_Disable+0x28>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001880:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_MPU_Disable+0x2c>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	e000ed90 	.word	0xe000ed90

0800189c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80018a4:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_MPU_Enable+0x38>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_MPU_Enable+0x3c>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_MPU_Enable+0x3c>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80018ba:	f3bf 8f4f 	dsb	sy
}
 80018be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018c0:	f3bf 8f6f 	isb	sy
}
 80018c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed90 	.word	0xe000ed90
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	785a      	ldrb	r2, [r3, #1]
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_MPU_ConfigRegion+0x7c>)
 80018ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_MPU_ConfigRegion+0x7c>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_MPU_ConfigRegion+0x7c>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80018f8:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <HAL_MPU_ConfigRegion+0x7c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7b1b      	ldrb	r3, [r3, #12]
 8001904:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7adb      	ldrb	r3, [r3, #11]
 800190a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800190c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7a9b      	ldrb	r3, [r3, #10]
 8001912:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001914:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7b5b      	ldrb	r3, [r3, #13]
 800191a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800191c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b9b      	ldrb	r3, [r3, #14]
 8001922:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001924:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7bdb      	ldrb	r3, [r3, #15]
 800192a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800192c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7a5b      	ldrb	r3, [r3, #9]
 8001932:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001934:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7a1b      	ldrb	r3, [r3, #8]
 800193a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800193c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001946:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001948:	6113      	str	r3, [r2, #16]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed90 	.word	0xe000ed90

0800195c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fe5a 	bl	800161c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e2dc      	b.n	8001f2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e2cd      	b.n	8001f2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a76      	ldr	r2, [pc, #472]	@ (8001b70 <HAL_DMA_Abort+0x214>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04a      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a74      	ldr	r2, [pc, #464]	@ (8001b74 <HAL_DMA_Abort+0x218>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d045      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	@ (8001b78 <HAL_DMA_Abort+0x21c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d040      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a71      	ldr	r2, [pc, #452]	@ (8001b7c <HAL_DMA_Abort+0x220>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d03b      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a70      	ldr	r2, [pc, #448]	@ (8001b80 <HAL_DMA_Abort+0x224>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d036      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b84 <HAL_DMA_Abort+0x228>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d031      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001b88 <HAL_DMA_Abort+0x22c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d02c      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a6b      	ldr	r2, [pc, #428]	@ (8001b8c <HAL_DMA_Abort+0x230>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d027      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001b90 <HAL_DMA_Abort+0x234>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d022      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a68      	ldr	r2, [pc, #416]	@ (8001b94 <HAL_DMA_Abort+0x238>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01d      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a67      	ldr	r2, [pc, #412]	@ (8001b98 <HAL_DMA_Abort+0x23c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d018      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a65      	ldr	r2, [pc, #404]	@ (8001b9c <HAL_DMA_Abort+0x240>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a64      	ldr	r2, [pc, #400]	@ (8001ba0 <HAL_DMA_Abort+0x244>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a62      	ldr	r2, [pc, #392]	@ (8001ba4 <HAL_DMA_Abort+0x248>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a61      	ldr	r2, [pc, #388]	@ (8001ba8 <HAL_DMA_Abort+0x24c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_DMA_Abort+0xd6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001bac <HAL_DMA_Abort+0x250>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_DMA_Abort+0xda>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_DMA_Abort+0xdc>
 8001a36:	2300      	movs	r3, #0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 021e 	bic.w	r2, r2, #30
 8001a4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e00a      	b.n	8001a7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 020e 	bic.w	r2, r2, #14
 8001a72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b70 <HAL_DMA_Abort+0x214>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d072      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a3a      	ldr	r2, [pc, #232]	@ (8001b74 <HAL_DMA_Abort+0x218>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d06d      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a39      	ldr	r2, [pc, #228]	@ (8001b78 <HAL_DMA_Abort+0x21c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d068      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a37      	ldr	r2, [pc, #220]	@ (8001b7c <HAL_DMA_Abort+0x220>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d063      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a36      	ldr	r2, [pc, #216]	@ (8001b80 <HAL_DMA_Abort+0x224>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d05e      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a34      	ldr	r2, [pc, #208]	@ (8001b84 <HAL_DMA_Abort+0x228>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d059      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a33      	ldr	r2, [pc, #204]	@ (8001b88 <HAL_DMA_Abort+0x22c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d054      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a31      	ldr	r2, [pc, #196]	@ (8001b8c <HAL_DMA_Abort+0x230>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d04f      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <HAL_DMA_Abort+0x234>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04a      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b94 <HAL_DMA_Abort+0x238>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d045      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b98 <HAL_DMA_Abort+0x23c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d040      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2b      	ldr	r2, [pc, #172]	@ (8001b9c <HAL_DMA_Abort+0x240>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d03b      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba0 <HAL_DMA_Abort+0x244>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d036      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a28      	ldr	r2, [pc, #160]	@ (8001ba4 <HAL_DMA_Abort+0x248>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d031      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ba8 <HAL_DMA_Abort+0x24c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d02c      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a25      	ldr	r2, [pc, #148]	@ (8001bac <HAL_DMA_Abort+0x250>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d027      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a24      	ldr	r2, [pc, #144]	@ (8001bb0 <HAL_DMA_Abort+0x254>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d022      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a22      	ldr	r2, [pc, #136]	@ (8001bb4 <HAL_DMA_Abort+0x258>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01d      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <HAL_DMA_Abort+0x25c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bbc <HAL_DMA_Abort+0x260>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc0 <HAL_DMA_Abort+0x264>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc4 <HAL_DMA_Abort+0x268>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d009      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <HAL_DMA_Abort+0x26c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d004      	beq.n	8001b6a <HAL_DMA_Abort+0x20e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	@ (8001bcc <HAL_DMA_Abort+0x270>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d132      	bne.n	8001bd0 <HAL_DMA_Abort+0x274>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e031      	b.n	8001bd2 <HAL_DMA_Abort+0x276>
 8001b6e:	bf00      	nop
 8001b70:	40020010 	.word	0x40020010
 8001b74:	40020028 	.word	0x40020028
 8001b78:	40020040 	.word	0x40020040
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	40020070 	.word	0x40020070
 8001b84:	40020088 	.word	0x40020088
 8001b88:	400200a0 	.word	0x400200a0
 8001b8c:	400200b8 	.word	0x400200b8
 8001b90:	40020410 	.word	0x40020410
 8001b94:	40020428 	.word	0x40020428
 8001b98:	40020440 	.word	0x40020440
 8001b9c:	40020458 	.word	0x40020458
 8001ba0:	40020470 	.word	0x40020470
 8001ba4:	40020488 	.word	0x40020488
 8001ba8:	400204a0 	.word	0x400204a0
 8001bac:	400204b8 	.word	0x400204b8
 8001bb0:	58025408 	.word	0x58025408
 8001bb4:	5802541c 	.word	0x5802541c
 8001bb8:	58025430 	.word	0x58025430
 8001bbc:	58025444 	.word	0x58025444
 8001bc0:	58025458 	.word	0x58025458
 8001bc4:	5802546c 	.word	0x5802546c
 8001bc8:	58025480 	.word	0x58025480
 8001bcc:	58025494 	.word	0x58025494
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6d      	ldr	r2, [pc, #436]	@ (8001da0 <HAL_DMA_Abort+0x444>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d04a      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8001da4 <HAL_DMA_Abort+0x448>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d045      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8001da8 <HAL_DMA_Abort+0x44c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d040      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a68      	ldr	r2, [pc, #416]	@ (8001dac <HAL_DMA_Abort+0x450>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d03b      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a67      	ldr	r2, [pc, #412]	@ (8001db0 <HAL_DMA_Abort+0x454>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d036      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a65      	ldr	r2, [pc, #404]	@ (8001db4 <HAL_DMA_Abort+0x458>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d031      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a64      	ldr	r2, [pc, #400]	@ (8001db8 <HAL_DMA_Abort+0x45c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d02c      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a62      	ldr	r2, [pc, #392]	@ (8001dbc <HAL_DMA_Abort+0x460>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d027      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a61      	ldr	r2, [pc, #388]	@ (8001dc0 <HAL_DMA_Abort+0x464>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d022      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a5f      	ldr	r2, [pc, #380]	@ (8001dc4 <HAL_DMA_Abort+0x468>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01d      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc8 <HAL_DMA_Abort+0x46c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d018      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a5c      	ldr	r2, [pc, #368]	@ (8001dcc <HAL_DMA_Abort+0x470>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd0 <HAL_DMA_Abort+0x474>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00e      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a59      	ldr	r2, [pc, #356]	@ (8001dd4 <HAL_DMA_Abort+0x478>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d009      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a58      	ldr	r2, [pc, #352]	@ (8001dd8 <HAL_DMA_Abort+0x47c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d004      	beq.n	8001c86 <HAL_DMA_Abort+0x32a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a56      	ldr	r2, [pc, #344]	@ (8001ddc <HAL_DMA_Abort+0x480>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d108      	bne.n	8001c98 <HAL_DMA_Abort+0x33c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e007      	b.n	8001ca8 <HAL_DMA_Abort+0x34c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ca8:	e013      	b.n	8001cd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001caa:	f7ff fcb7 	bl	800161c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d90c      	bls.n	8001cd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e12d      	b.n	8001f2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1e5      	bne.n	8001caa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8001da0 <HAL_DMA_Abort+0x444>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04a      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2d      	ldr	r2, [pc, #180]	@ (8001da4 <HAL_DMA_Abort+0x448>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d045      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001da8 <HAL_DMA_Abort+0x44c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d040      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2a      	ldr	r2, [pc, #168]	@ (8001dac <HAL_DMA_Abort+0x450>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d03b      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a29      	ldr	r2, [pc, #164]	@ (8001db0 <HAL_DMA_Abort+0x454>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d036      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <HAL_DMA_Abort+0x458>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d031      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a26      	ldr	r2, [pc, #152]	@ (8001db8 <HAL_DMA_Abort+0x45c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d02c      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a24      	ldr	r2, [pc, #144]	@ (8001dbc <HAL_DMA_Abort+0x460>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d027      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a23      	ldr	r2, [pc, #140]	@ (8001dc0 <HAL_DMA_Abort+0x464>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_DMA_Abort+0x468>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01d      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <HAL_DMA_Abort+0x46c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d018      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <HAL_DMA_Abort+0x470>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd0 <HAL_DMA_Abort+0x474>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <HAL_DMA_Abort+0x478>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_DMA_Abort+0x47c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_DMA_Abort+0x422>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <HAL_DMA_Abort+0x480>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Abort+0x426>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_DMA_Abort+0x428>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d02b      	beq.n	8001de0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	223f      	movs	r2, #63	@ 0x3f
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	e02a      	b.n	8001df6 <HAL_DMA_Abort+0x49a>
 8001da0:	40020010 	.word	0x40020010
 8001da4:	40020028 	.word	0x40020028
 8001da8:	40020040 	.word	0x40020040
 8001dac:	40020058 	.word	0x40020058
 8001db0:	40020070 	.word	0x40020070
 8001db4:	40020088 	.word	0x40020088
 8001db8:	400200a0 	.word	0x400200a0
 8001dbc:	400200b8 	.word	0x400200b8
 8001dc0:	40020410 	.word	0x40020410
 8001dc4:	40020428 	.word	0x40020428
 8001dc8:	40020440 	.word	0x40020440
 8001dcc:	40020458 	.word	0x40020458
 8001dd0:	40020470 	.word	0x40020470
 8001dd4:	40020488 	.word	0x40020488
 8001dd8:	400204a0 	.word	0x400204a0
 8001ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2201      	movs	r2, #1
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8001f38 <HAL_DMA_Abort+0x5dc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d072      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	@ (8001f3c <HAL_DMA_Abort+0x5e0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d06d      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f40 <HAL_DMA_Abort+0x5e4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d068      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4a      	ldr	r2, [pc, #296]	@ (8001f44 <HAL_DMA_Abort+0x5e8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d063      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a49      	ldr	r2, [pc, #292]	@ (8001f48 <HAL_DMA_Abort+0x5ec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d05e      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a47      	ldr	r2, [pc, #284]	@ (8001f4c <HAL_DMA_Abort+0x5f0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d059      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a46      	ldr	r2, [pc, #280]	@ (8001f50 <HAL_DMA_Abort+0x5f4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d054      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a44      	ldr	r2, [pc, #272]	@ (8001f54 <HAL_DMA_Abort+0x5f8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d04f      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a43      	ldr	r2, [pc, #268]	@ (8001f58 <HAL_DMA_Abort+0x5fc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04a      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a41      	ldr	r2, [pc, #260]	@ (8001f5c <HAL_DMA_Abort+0x600>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d045      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a40      	ldr	r2, [pc, #256]	@ (8001f60 <HAL_DMA_Abort+0x604>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d040      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a3e      	ldr	r2, [pc, #248]	@ (8001f64 <HAL_DMA_Abort+0x608>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d03b      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a3d      	ldr	r2, [pc, #244]	@ (8001f68 <HAL_DMA_Abort+0x60c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d036      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f6c <HAL_DMA_Abort+0x610>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d031      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a3a      	ldr	r2, [pc, #232]	@ (8001f70 <HAL_DMA_Abort+0x614>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d02c      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a38      	ldr	r2, [pc, #224]	@ (8001f74 <HAL_DMA_Abort+0x618>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d027      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a37      	ldr	r2, [pc, #220]	@ (8001f78 <HAL_DMA_Abort+0x61c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d022      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a35      	ldr	r2, [pc, #212]	@ (8001f7c <HAL_DMA_Abort+0x620>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a34      	ldr	r2, [pc, #208]	@ (8001f80 <HAL_DMA_Abort+0x624>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d018      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a32      	ldr	r2, [pc, #200]	@ (8001f84 <HAL_DMA_Abort+0x628>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a31      	ldr	r2, [pc, #196]	@ (8001f88 <HAL_DMA_Abort+0x62c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <HAL_DMA_Abort+0x630>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f90 <HAL_DMA_Abort+0x634>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_DMA_Abort+0x58a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f94 <HAL_DMA_Abort+0x638>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Abort+0x58e>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_DMA_Abort+0x590>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ef8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40020010 	.word	0x40020010
 8001f3c:	40020028 	.word	0x40020028
 8001f40:	40020040 	.word	0x40020040
 8001f44:	40020058 	.word	0x40020058
 8001f48:	40020070 	.word	0x40020070
 8001f4c:	40020088 	.word	0x40020088
 8001f50:	400200a0 	.word	0x400200a0
 8001f54:	400200b8 	.word	0x400200b8
 8001f58:	40020410 	.word	0x40020410
 8001f5c:	40020428 	.word	0x40020428
 8001f60:	40020440 	.word	0x40020440
 8001f64:	40020458 	.word	0x40020458
 8001f68:	40020470 	.word	0x40020470
 8001f6c:	40020488 	.word	0x40020488
 8001f70:	400204a0 	.word	0x400204a0
 8001f74:	400204b8 	.word	0x400204b8
 8001f78:	58025408 	.word	0x58025408
 8001f7c:	5802541c 	.word	0x5802541c
 8001f80:	58025430 	.word	0x58025430
 8001f84:	58025444 	.word	0x58025444
 8001f88:	58025458 	.word	0x58025458
 8001f8c:	5802546c 	.word	0x5802546c
 8001f90:	58025480 	.word	0x58025480
 8001f94:	58025494 	.word	0x58025494

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e237      	b.n	800241a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2280      	movs	r2, #128	@ 0x80
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e22c      	b.n	800241a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8002138 <HAL_DMA_Abort_IT+0x1a0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04a      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a5b      	ldr	r2, [pc, #364]	@ (800213c <HAL_DMA_Abort_IT+0x1a4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d045      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a59      	ldr	r2, [pc, #356]	@ (8002140 <HAL_DMA_Abort_IT+0x1a8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d040      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a58      	ldr	r2, [pc, #352]	@ (8002144 <HAL_DMA_Abort_IT+0x1ac>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d03b      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a56      	ldr	r2, [pc, #344]	@ (8002148 <HAL_DMA_Abort_IT+0x1b0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d036      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a55      	ldr	r2, [pc, #340]	@ (800214c <HAL_DMA_Abort_IT+0x1b4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d031      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a53      	ldr	r2, [pc, #332]	@ (8002150 <HAL_DMA_Abort_IT+0x1b8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02c      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_DMA_Abort_IT+0x1bc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d027      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a50      	ldr	r2, [pc, #320]	@ (8002158 <HAL_DMA_Abort_IT+0x1c0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d022      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <HAL_DMA_Abort_IT+0x1c4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01d      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a4d      	ldr	r2, [pc, #308]	@ (8002160 <HAL_DMA_Abort_IT+0x1c8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d018      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <HAL_DMA_Abort_IT+0x1cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <HAL_DMA_Abort_IT+0x1d0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00e      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a49      	ldr	r2, [pc, #292]	@ (800216c <HAL_DMA_Abort_IT+0x1d4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a47      	ldr	r2, [pc, #284]	@ (8002170 <HAL_DMA_Abort_IT+0x1d8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a46      	ldr	r2, [pc, #280]	@ (8002174 <HAL_DMA_Abort_IT+0x1dc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_DMA_Abort_IT+0xcc>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_DMA_Abort_IT+0xce>
 8002064:	2300      	movs	r3, #0
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8086 	beq.w	8002178 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2204      	movs	r2, #4
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <HAL_DMA_Abort_IT+0x1a0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d04a      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <HAL_DMA_Abort_IT+0x1a4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d045      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2c      	ldr	r2, [pc, #176]	@ (8002140 <HAL_DMA_Abort_IT+0x1a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d040      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2b      	ldr	r2, [pc, #172]	@ (8002144 <HAL_DMA_Abort_IT+0x1ac>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d03b      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a29      	ldr	r2, [pc, #164]	@ (8002148 <HAL_DMA_Abort_IT+0x1b0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d036      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_DMA_Abort_IT+0x1b4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d031      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_DMA_Abort_IT+0x1b8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02c      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a25      	ldr	r2, [pc, #148]	@ (8002154 <HAL_DMA_Abort_IT+0x1bc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d027      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a23      	ldr	r2, [pc, #140]	@ (8002158 <HAL_DMA_Abort_IT+0x1c0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d022      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_DMA_Abort_IT+0x1c4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d01d      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a20      	ldr	r2, [pc, #128]	@ (8002160 <HAL_DMA_Abort_IT+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d018      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_DMA_Abort_IT+0x1cc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_DMA_Abort_IT+0x1d0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1c      	ldr	r2, [pc, #112]	@ (800216c <HAL_DMA_Abort_IT+0x1d4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <HAL_DMA_Abort_IT+0x1d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_DMA_Abort_IT+0x17c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <HAL_DMA_Abort_IT+0x1dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d108      	bne.n	8002126 <HAL_DMA_Abort_IT+0x18e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e178      	b.n	8002418 <HAL_DMA_Abort_IT+0x480>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e16f      	b.n	8002418 <HAL_DMA_Abort_IT+0x480>
 8002138:	40020010 	.word	0x40020010
 800213c:	40020028 	.word	0x40020028
 8002140:	40020040 	.word	0x40020040
 8002144:	40020058 	.word	0x40020058
 8002148:	40020070 	.word	0x40020070
 800214c:	40020088 	.word	0x40020088
 8002150:	400200a0 	.word	0x400200a0
 8002154:	400200b8 	.word	0x400200b8
 8002158:	40020410 	.word	0x40020410
 800215c:	40020428 	.word	0x40020428
 8002160:	40020440 	.word	0x40020440
 8002164:	40020458 	.word	0x40020458
 8002168:	40020470 	.word	0x40020470
 800216c:	40020488 	.word	0x40020488
 8002170:	400204a0 	.word	0x400204a0
 8002174:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020e 	bic.w	r2, r2, #14
 8002186:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6c      	ldr	r2, [pc, #432]	@ (8002340 <HAL_DMA_Abort_IT+0x3a8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d04a      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6b      	ldr	r2, [pc, #428]	@ (8002344 <HAL_DMA_Abort_IT+0x3ac>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d045      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a69      	ldr	r2, [pc, #420]	@ (8002348 <HAL_DMA_Abort_IT+0x3b0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d040      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a68      	ldr	r2, [pc, #416]	@ (800234c <HAL_DMA_Abort_IT+0x3b4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d03b      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a66      	ldr	r2, [pc, #408]	@ (8002350 <HAL_DMA_Abort_IT+0x3b8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d036      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_DMA_Abort_IT+0x3bc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d031      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a63      	ldr	r2, [pc, #396]	@ (8002358 <HAL_DMA_Abort_IT+0x3c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02c      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a62      	ldr	r2, [pc, #392]	@ (800235c <HAL_DMA_Abort_IT+0x3c4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d027      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a60      	ldr	r2, [pc, #384]	@ (8002360 <HAL_DMA_Abort_IT+0x3c8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d022      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002364 <HAL_DMA_Abort_IT+0x3cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d01d      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002368 <HAL_DMA_Abort_IT+0x3d0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d018      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_DMA_Abort_IT+0x3d4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5a      	ldr	r2, [pc, #360]	@ (8002370 <HAL_DMA_Abort_IT+0x3d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a59      	ldr	r2, [pc, #356]	@ (8002374 <HAL_DMA_Abort_IT+0x3dc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a57      	ldr	r2, [pc, #348]	@ (8002378 <HAL_DMA_Abort_IT+0x3e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_DMA_Abort_IT+0x290>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a56      	ldr	r2, [pc, #344]	@ (800237c <HAL_DMA_Abort_IT+0x3e4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d108      	bne.n	800223a <HAL_DMA_Abort_IT+0x2a2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e007      	b.n	800224a <HAL_DMA_Abort_IT+0x2b2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a3c      	ldr	r2, [pc, #240]	@ (8002340 <HAL_DMA_Abort_IT+0x3a8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d072      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a3a      	ldr	r2, [pc, #232]	@ (8002344 <HAL_DMA_Abort_IT+0x3ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d06d      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a39      	ldr	r2, [pc, #228]	@ (8002348 <HAL_DMA_Abort_IT+0x3b0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d068      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a37      	ldr	r2, [pc, #220]	@ (800234c <HAL_DMA_Abort_IT+0x3b4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d063      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a36      	ldr	r2, [pc, #216]	@ (8002350 <HAL_DMA_Abort_IT+0x3b8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d05e      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a34      	ldr	r2, [pc, #208]	@ (8002354 <HAL_DMA_Abort_IT+0x3bc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d059      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a33      	ldr	r2, [pc, #204]	@ (8002358 <HAL_DMA_Abort_IT+0x3c0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d054      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a31      	ldr	r2, [pc, #196]	@ (800235c <HAL_DMA_Abort_IT+0x3c4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04f      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a30      	ldr	r2, [pc, #192]	@ (8002360 <HAL_DMA_Abort_IT+0x3c8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d04a      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002364 <HAL_DMA_Abort_IT+0x3cc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d045      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002368 <HAL_DMA_Abort_IT+0x3d0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d040      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2b      	ldr	r2, [pc, #172]	@ (800236c <HAL_DMA_Abort_IT+0x3d4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d03b      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <HAL_DMA_Abort_IT+0x3d8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d036      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a28      	ldr	r2, [pc, #160]	@ (8002374 <HAL_DMA_Abort_IT+0x3dc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <HAL_DMA_Abort_IT+0x3e0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d02c      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a25      	ldr	r2, [pc, #148]	@ (800237c <HAL_DMA_Abort_IT+0x3e4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d027      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a24      	ldr	r2, [pc, #144]	@ (8002380 <HAL_DMA_Abort_IT+0x3e8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a22      	ldr	r2, [pc, #136]	@ (8002384 <HAL_DMA_Abort_IT+0x3ec>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01d      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <HAL_DMA_Abort_IT+0x3f0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d018      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_DMA_Abort_IT+0x3f4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <HAL_DMA_Abort_IT+0x3f8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00e      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1c      	ldr	r2, [pc, #112]	@ (8002394 <HAL_DMA_Abort_IT+0x3fc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d009      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <HAL_DMA_Abort_IT+0x400>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d004      	beq.n	800233a <HAL_DMA_Abort_IT+0x3a2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a19      	ldr	r2, [pc, #100]	@ (800239c <HAL_DMA_Abort_IT+0x404>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d132      	bne.n	80023a0 <HAL_DMA_Abort_IT+0x408>
 800233a:	2301      	movs	r3, #1
 800233c:	e031      	b.n	80023a2 <HAL_DMA_Abort_IT+0x40a>
 800233e:	bf00      	nop
 8002340:	40020010 	.word	0x40020010
 8002344:	40020028 	.word	0x40020028
 8002348:	40020040 	.word	0x40020040
 800234c:	40020058 	.word	0x40020058
 8002350:	40020070 	.word	0x40020070
 8002354:	40020088 	.word	0x40020088
 8002358:	400200a0 	.word	0x400200a0
 800235c:	400200b8 	.word	0x400200b8
 8002360:	40020410 	.word	0x40020410
 8002364:	40020428 	.word	0x40020428
 8002368:	40020440 	.word	0x40020440
 800236c:	40020458 	.word	0x40020458
 8002370:	40020470 	.word	0x40020470
 8002374:	40020488 	.word	0x40020488
 8002378:	400204a0 	.word	0x400204a0
 800237c:	400204b8 	.word	0x400204b8
 8002380:	58025408 	.word	0x58025408
 8002384:	5802541c 	.word	0x5802541c
 8002388:	58025430 	.word	0x58025430
 800238c:	58025444 	.word	0x58025444
 8002390:	58025458 	.word	0x58025458
 8002394:	5802546c 	.word	0x5802546c
 8002398:	58025480 	.word	0x58025480
 800239c:	58025494 	.word	0x58025494
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2201      	movs	r2, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002432:	4b89      	ldr	r3, [pc, #548]	@ (8002658 <HAL_GPIO_Init+0x234>)
 8002434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002436:	e194      	b.n	8002762 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8186 	beq.w	800275c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d005      	beq.n	8002468 <HAL_GPIO_Init+0x44>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d130      	bne.n	80024ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249e:	2201      	movs	r2, #1
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0201 	and.w	r2, r3, #1
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d017      	beq.n	8002506 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d123      	bne.n	800255a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80e0 	beq.w	800275c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <HAL_GPIO_Init+0x238>)
 800259e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025a2:	4a2e      	ldr	r2, [pc, #184]	@ (800265c <HAL_GPIO_Init+0x238>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80025ac:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <HAL_GPIO_Init+0x238>)
 80025ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a29      	ldr	r2, [pc, #164]	@ (8002660 <HAL_GPIO_Init+0x23c>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a20      	ldr	r2, [pc, #128]	@ (8002664 <HAL_GPIO_Init+0x240>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d052      	beq.n	800268c <HAL_GPIO_Init+0x268>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002668 <HAL_GPIO_Init+0x244>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_GPIO_Init+0x22e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1e      	ldr	r2, [pc, #120]	@ (800266c <HAL_GPIO_Init+0x248>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02b      	beq.n	800264e <HAL_GPIO_Init+0x22a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <HAL_GPIO_Init+0x24c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x226>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_GPIO_Init+0x250>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x222>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <HAL_GPIO_Init+0x254>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x21e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_GPIO_Init+0x258>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x21a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_GPIO_Init+0x25c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x216>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <HAL_GPIO_Init+0x260>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x212>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <HAL_GPIO_Init+0x264>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x20e>
 800262e:	2309      	movs	r3, #9
 8002630:	e02d      	b.n	800268e <HAL_GPIO_Init+0x26a>
 8002632:	230a      	movs	r3, #10
 8002634:	e02b      	b.n	800268e <HAL_GPIO_Init+0x26a>
 8002636:	2308      	movs	r3, #8
 8002638:	e029      	b.n	800268e <HAL_GPIO_Init+0x26a>
 800263a:	2307      	movs	r3, #7
 800263c:	e027      	b.n	800268e <HAL_GPIO_Init+0x26a>
 800263e:	2306      	movs	r3, #6
 8002640:	e025      	b.n	800268e <HAL_GPIO_Init+0x26a>
 8002642:	2305      	movs	r3, #5
 8002644:	e023      	b.n	800268e <HAL_GPIO_Init+0x26a>
 8002646:	2304      	movs	r3, #4
 8002648:	e021      	b.n	800268e <HAL_GPIO_Init+0x26a>
 800264a:	2303      	movs	r3, #3
 800264c:	e01f      	b.n	800268e <HAL_GPIO_Init+0x26a>
 800264e:	2302      	movs	r3, #2
 8002650:	e01d      	b.n	800268e <HAL_GPIO_Init+0x26a>
 8002652:	2301      	movs	r3, #1
 8002654:	e01b      	b.n	800268e <HAL_GPIO_Init+0x26a>
 8002656:	bf00      	nop
 8002658:	58000080 	.word	0x58000080
 800265c:	58024400 	.word	0x58024400
 8002660:	58000400 	.word	0x58000400
 8002664:	58020000 	.word	0x58020000
 8002668:	58020400 	.word	0x58020400
 800266c:	58020800 	.word	0x58020800
 8002670:	58020c00 	.word	0x58020c00
 8002674:	58021000 	.word	0x58021000
 8002678:	58021400 	.word	0x58021400
 800267c:	58021800 	.word	0x58021800
 8002680:	58021c00 	.word	0x58021c00
 8002684:	58022000 	.word	0x58022000
 8002688:	58022400 	.word	0x58022400
 800268c:	2300      	movs	r3, #0
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	4093      	lsls	r3, r2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269e:	4938      	ldr	r1, [pc, #224]	@ (8002780 <HAL_GPIO_Init+0x35c>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	3301      	adds	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f ae63 	bne.w	8002438 <HAL_GPIO_Init+0x14>
  }
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	3724      	adds	r7, #36	@ 0x24
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	58000400 	.word	0x58000400

08002784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e001      	b.n	80027a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80027d0:	e003      	b.n	80027da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	041a      	lsls	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	619a      	str	r2, [r3, #24]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	041a      	lsls	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43d9      	mvns	r1, r3
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	400b      	ands	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002828:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f804 	bl	800284e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_PWREx_ConfigSupply+0x70>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d00a      	beq.n	800288e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_PWREx_ConfigSupply+0x70>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e01f      	b.n	80028ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e01d      	b.n	80028ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 0207 	bic.w	r2, r3, #7
 8002896:	490f      	ldr	r1, [pc, #60]	@ (80028d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800289e:	f7fe febd 	bl	800161c <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028a4:	e009      	b.n	80028ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028a6:	f7fe feb9 	bl	800161c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028b4:	d901      	bls.n	80028ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e007      	b.n	80028ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_PWREx_ConfigSupply+0x70>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c6:	d1ee      	bne.n	80028a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	58024800 	.word	0x58024800

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f000 bc48 	b.w	800317c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8088 	beq.w	8002a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fa:	4b99      	ldr	r3, [pc, #612]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002904:	4b96      	ldr	r3, [pc, #600]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	2b10      	cmp	r3, #16
 800290e:	d007      	beq.n	8002920 <HAL_RCC_OscConfig+0x48>
 8002910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002912:	2b18      	cmp	r3, #24
 8002914:	d111      	bne.n	800293a <HAL_RCC_OscConfig+0x62>
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d10c      	bne.n	800293a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	4b8f      	ldr	r3, [pc, #572]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d06d      	beq.n	8002a08 <HAL_RCC_OscConfig+0x130>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d169      	bne.n	8002a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f000 bc21 	b.w	800317c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x7a>
 8002944:	4b86      	ldr	r3, [pc, #536]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a85      	ldr	r2, [pc, #532]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	e02e      	b.n	80029b0 <HAL_RCC_OscConfig+0xd8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x9c>
 800295a:	4b81      	ldr	r3, [pc, #516]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a80      	ldr	r2, [pc, #512]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b7e      	ldr	r3, [pc, #504]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 800296c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e01d      	b.n	80029b0 <HAL_RCC_OscConfig+0xd8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0xc0>
 800297e:	4b78      	ldr	r3, [pc, #480]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a77      	ldr	r2, [pc, #476]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b75      	ldr	r3, [pc, #468]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a74      	ldr	r2, [pc, #464]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0xd8>
 8002998:	4b71      	ldr	r3, [pc, #452]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a70      	ldr	r2, [pc, #448]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fe30 	bl	800161c <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fe2c 	bl	800161c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	@ 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e3d4      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d2:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0xe8>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fe1c 	bl	800161c <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fe18 	bl	800161c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	@ 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e3c0      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029fa:	4b59      	ldr	r3, [pc, #356]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x110>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80ca 	beq.w	8002bac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a18:	4b51      	ldr	r3, [pc, #324]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a22:	4b4f      	ldr	r3, [pc, #316]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_RCC_OscConfig+0x166>
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2b18      	cmp	r3, #24
 8002a32:	d156      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x20a>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d151      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a3e:	4b48      	ldr	r3, [pc, #288]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e392      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a56:	4b42      	ldr	r3, [pc, #264]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0219 	bic.w	r2, r3, #25
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	493f      	ldr	r1, [pc, #252]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fdd8 	bl	800161c <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a70:	f7fe fdd4 	bl	800161c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e37c      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a82:	4b37      	ldr	r3, [pc, #220]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	f7fe fdd1 	bl	8001634 <HAL_GetREVID>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d817      	bhi.n	8002acc <HAL_RCC_OscConfig+0x1f4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d108      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002aac:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e07a      	b.n	8002bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	031b      	lsls	r3, r3, #12
 8002ac4:	4926      	ldr	r1, [pc, #152]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aca:	e06f      	b.n	8002bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	4921      	ldr	r1, [pc, #132]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae0:	e064      	b.n	8002bac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d047      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aea:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0219 	bic.w	r2, r3, #25
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	491a      	ldr	r1, [pc, #104]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fd8e 	bl	800161c <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe fd8a 	bl	800161c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e332      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	f7fe fd87 	bl	8001634 <HAL_GetREVID>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d819      	bhi.n	8002b64 <HAL_RCC_OscConfig+0x28c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	d108      	bne.n	8002b4a <HAL_RCC_OscConfig+0x272>
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b40:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b46:	6053      	str	r3, [r2, #4]
 8002b48:	e030      	b.n	8002bac <HAL_RCC_OscConfig+0x2d4>
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	031b      	lsls	r3, r3, #12
 8002b58:	4901      	ldr	r1, [pc, #4]	@ (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
 8002b5e:	e025      	b.n	8002bac <HAL_RCC_OscConfig+0x2d4>
 8002b60:	58024400 	.word	0x58024400
 8002b64:	4b9a      	ldr	r3, [pc, #616]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4997      	ldr	r1, [pc, #604]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	e018      	b.n	8002bac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b95      	ldr	r3, [pc, #596]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a94      	ldr	r2, [pc, #592]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fd49 	bl	800161c <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fd45 	bl	800161c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e2ed      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ba0:	4b8b      	ldr	r3, [pc, #556]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a9 	beq.w	8002d0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4b85      	ldr	r3, [pc, #532]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bc4:	4b82      	ldr	r3, [pc, #520]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d007      	beq.n	8002be0 <HAL_RCC_OscConfig+0x308>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b18      	cmp	r3, #24
 8002bd4:	d13a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x374>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d135      	bne.n	8002c4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002be0:	4b7b      	ldr	r3, [pc, #492]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x320>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b80      	cmp	r3, #128	@ 0x80
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e2c1      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bf8:	f7fe fd1c 	bl	8001634 <HAL_GetREVID>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d817      	bhi.n	8002c36 <HAL_RCC_OscConfig+0x35e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d108      	bne.n	8002c20 <HAL_RCC_OscConfig+0x348>
 8002c0e:	4b70      	ldr	r3, [pc, #448]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c16:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c1e:	e075      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c20:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	069b      	lsls	r3, r3, #26
 8002c2e:	4968      	ldr	r1, [pc, #416]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c34:	e06a      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c36:	4b66      	ldr	r3, [pc, #408]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4962      	ldr	r1, [pc, #392]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4a:	e05f      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d042      	beq.n	8002cda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c54:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fcdc 	bl	800161c <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c68:	f7fe fcd8 	bl	800161c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e280      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7a:	4b55      	ldr	r3, [pc, #340]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c86:	f7fe fcd5 	bl	8001634 <HAL_GetREVID>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d817      	bhi.n	8002cc4 <HAL_RCC_OscConfig+0x3ec>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d108      	bne.n	8002cae <HAL_RCC_OscConfig+0x3d6>
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002caa:	6053      	str	r3, [r2, #4]
 8002cac:	e02e      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
 8002cae:	4b48      	ldr	r3, [pc, #288]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	069b      	lsls	r3, r3, #26
 8002cbc:	4944      	ldr	r1, [pc, #272]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
 8002cc2:	e023      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
 8002cc4:	4b42      	ldr	r3, [pc, #264]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	493f      	ldr	r1, [pc, #252]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
 8002cd8:	e018      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cda:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fc99 	bl	800161c <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cee:	f7fe fc95 	bl	800161c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e23d      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d00:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d036      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d019      	beq.n	8002d54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fc76 	bl	800161c <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fc72 	bl	800161c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e21a      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x45c>
 8002d52:	e018      	b.n	8002d86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fc5c 	bl	800161c <HAL_GetTick>
 8002d64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fc58 	bl	800161c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e200      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d039      	beq.n	8002e06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002da4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fc39 	bl	800161c <HAL_GetTick>
 8002daa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dae:	f7fe fc35 	bl	800161c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1dd      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x4d6>
 8002dcc:	e01b      	b.n	8002e06 <HAL_RCC_OscConfig+0x52e>
 8002dce:	bf00      	nop
 8002dd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dd4:	4b9b      	ldr	r3, [pc, #620]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a9a      	ldr	r2, [pc, #616]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002de0:	f7fe fc1c 	bl	800161c <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de8:	f7fe fc18 	bl	800161c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1c0      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dfa:	4b92      	ldr	r3, [pc, #584]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8081 	beq.w	8002f16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e14:	4b8c      	ldr	r3, [pc, #560]	@ (8003048 <HAL_RCC_OscConfig+0x770>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a8b      	ldr	r2, [pc, #556]	@ (8003048 <HAL_RCC_OscConfig+0x770>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fbfc 	bl	800161c <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe fbf8 	bl	800161c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1a0      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e3a:	4b83      	ldr	r3, [pc, #524]	@ (8003048 <HAL_RCC_OscConfig+0x770>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x584>
 8002e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a7c      	ldr	r2, [pc, #496]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	e02d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5e0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x5a6>
 8002e64:	4b77      	ldr	r3, [pc, #476]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	4a76      	ldr	r2, [pc, #472]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e70:	4b74      	ldr	r3, [pc, #464]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a73      	ldr	r2, [pc, #460]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5e0>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5c8>
 8002e86:	4b6f      	ldr	r3, [pc, #444]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	4b6c      	ldr	r3, [pc, #432]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a6b      	ldr	r2, [pc, #428]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5e0>
 8002ea0:	4b68      	ldr	r3, [pc, #416]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a67      	ldr	r2, [pc, #412]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eac:	4b65      	ldr	r3, [pc, #404]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a64      	ldr	r2, [pc, #400]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fbac 	bl	800161c <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fba8 	bl	800161c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e14e      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ede:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x5f0>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fb96 	bl	800161c <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fb92 	bl	800161c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e138      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 812d 	beq.w	800317a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f20:	4b48      	ldr	r3, [pc, #288]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f28:	2b18      	cmp	r3, #24
 8002f2a:	f000 80bd 	beq.w	80030a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 809e 	bne.w	8003074 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b42      	ldr	r3, [pc, #264]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a41      	ldr	r2, [pc, #260]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fb6a 	bl	800161c <HAL_GetTick>
 8002f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fb66 	bl	800161c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e10e      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f5e:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6a:	4b36      	ldr	r3, [pc, #216]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f6e:	4b37      	ldr	r3, [pc, #220]	@ (800304c <HAL_RCC_OscConfig+0x774>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	4931      	ldr	r1, [pc, #196]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	3b01      	subs	r3, #1
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	3b01      	subs	r3, #1
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002fb4:	4923      	ldr	r1, [pc, #140]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	4a21      	ldr	r2, [pc, #132]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fca:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <HAL_RCC_OscConfig+0x778>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fd2:	00d2      	lsls	r2, r2, #3
 8002fd4:	491b      	ldr	r1, [pc, #108]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	f023 020c 	bic.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	4917      	ldr	r1, [pc, #92]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fec:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	f023 0202 	bic.w	r2, r3, #2
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	4912      	ldr	r1, [pc, #72]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ffe:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300a:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	4a0d      	ldr	r2, [pc, #52]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 800301c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003022:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe faef 	bl	800161c <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003040:	e011      	b.n	8003066 <HAL_RCC_OscConfig+0x78e>
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400
 8003048:	58024800 	.word	0x58024800
 800304c:	fffffc0c 	.word	0xfffffc0c
 8003050:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fae2 	bl	800161c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e08a      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003066:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x77c>
 8003072:	e082      	b.n	800317a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b43      	ldr	r3, [pc, #268]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a42      	ldr	r2, [pc, #264]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe facc 	bl	800161c <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fac8 	bl	800161c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e070      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309a:	4b3a      	ldr	r3, [pc, #232]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x7b0>
 80030a6:	e068      	b.n	800317a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030a8:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030ae:	4b35      	ldr	r3, [pc, #212]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d031      	beq.n	8003120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d12a      	bne.n	8003120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d122      	bne.n	8003120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d11a      	bne.n	8003120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	0a5b      	lsrs	r3, r3, #9
 80030ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d111      	bne.n	8003120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d108      	bne.n	8003120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0e1b      	lsrs	r3, r3, #24
 8003112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e02b      	b.n	800317c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800312e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	429a      	cmp	r2, r3
 8003138:	d01f      	beq.n	800317a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	4a11      	ldr	r2, [pc, #68]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003146:	f7fe fa69 	bl	800161c <HAL_GetTick>
 800314a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800314c:	bf00      	nop
 800314e:	f7fe fa65 	bl	800161c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	4293      	cmp	r3, r2
 8003158:	d0f9      	beq.n	800314e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 800315c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800315e:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <HAL_RCC_OscConfig+0x8b0>)
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003166:	00d2      	lsls	r2, r2, #3
 8003168:	4906      	ldr	r1, [pc, #24]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 800316a:	4313      	orrs	r3, r2
 800316c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <HAL_RCC_OscConfig+0x8ac>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3730      	adds	r7, #48	@ 0x30
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	58024400 	.word	0x58024400
 8003188:	ffff0007 	.word	0xffff0007

0800318c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e19c      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b8a      	ldr	r3, [pc, #552]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b87      	ldr	r3, [pc, #540]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	4985      	ldr	r1, [pc, #532]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b83      	ldr	r3, [pc, #524]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e184      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	4b7b      	ldr	r3, [pc, #492]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d908      	bls.n	80031fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031ec:	4b78      	ldr	r3, [pc, #480]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	4975      	ldr	r1, [pc, #468]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	4b70      	ldr	r3, [pc, #448]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003216:	429a      	cmp	r2, r3
 8003218:	d908      	bls.n	800322c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800321a:	4b6d      	ldr	r3, [pc, #436]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	496a      	ldr	r1, [pc, #424]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003228:	4313      	orrs	r3, r2
 800322a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	4b64      	ldr	r3, [pc, #400]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003244:	429a      	cmp	r2, r3
 8003246:	d908      	bls.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003248:	4b61      	ldr	r3, [pc, #388]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	495e      	ldr	r1, [pc, #376]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003256:	4313      	orrs	r3, r2
 8003258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	4b59      	ldr	r3, [pc, #356]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003272:	429a      	cmp	r2, r3
 8003274:	d908      	bls.n	8003288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003276:	4b56      	ldr	r3, [pc, #344]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4953      	ldr	r1, [pc, #332]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003284:	4313      	orrs	r3, r2
 8003286:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4b4d      	ldr	r3, [pc, #308]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d908      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f023 020f 	bic.w	r2, r3, #15
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4947      	ldr	r1, [pc, #284]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d055      	beq.n	800336e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032c2:	4b43      	ldr	r3, [pc, #268]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4940      	ldr	r1, [pc, #256]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d107      	bne.n	80032ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032dc:	4b3c      	ldr	r3, [pc, #240]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d121      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0f6      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f4:	4b36      	ldr	r3, [pc, #216]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0ea      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800330c:	4b30      	ldr	r3, [pc, #192]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0de      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800331c:	4b2c      	ldr	r3, [pc, #176]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0d6      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800332c:	4b28      	ldr	r3, [pc, #160]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f023 0207 	bic.w	r2, r3, #7
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4925      	ldr	r1, [pc, #148]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800333a:	4313      	orrs	r3, r2
 800333c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333e:	f7fe f96d 	bl	800161c <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003344:	e00a      	b.n	800335c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003346:	f7fe f969 	bl	800161c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0be      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	4b1c      	ldr	r3, [pc, #112]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	429a      	cmp	r2, r3
 800336c:	d1eb      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b14      	ldr	r3, [pc, #80]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	429a      	cmp	r2, r3
 8003388:	d208      	bcs.n	800339c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338a:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f023 020f 	bic.w	r2, r3, #15
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	490e      	ldr	r1, [pc, #56]	@ (80033d0 <HAL_RCC_ClockConfig+0x244>)
 8003398:	4313      	orrs	r3, r2
 800339a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d214      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 020f 	bic.w	r2, r3, #15
 80033b2:	4906      	ldr	r1, [pc, #24]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <HAL_RCC_ClockConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e086      	b.n	80034da <HAL_RCC_ClockConfig+0x34e>
 80033cc:	52002000 	.word	0x52002000
 80033d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d010      	beq.n	8003402 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d208      	bcs.n	8003402 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033f0:	4b3c      	ldr	r3, [pc, #240]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4939      	ldr	r1, [pc, #228]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	4b34      	ldr	r3, [pc, #208]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800341a:	429a      	cmp	r2, r3
 800341c:	d208      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800341e:	4b31      	ldr	r3, [pc, #196]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	492e      	ldr	r1, [pc, #184]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	4b28      	ldr	r3, [pc, #160]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003448:	429a      	cmp	r2, r3
 800344a:	d208      	bcs.n	800345e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800344c:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4922      	ldr	r1, [pc, #136]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 800345a:	4313      	orrs	r3, r2
 800345c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003476:	429a      	cmp	r2, r3
 8003478:	d208      	bcs.n	800348c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800347a:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4917      	ldr	r1, [pc, #92]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 8003488:	4313      	orrs	r3, r2
 800348a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800348c:	f000 f834 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	4912      	ldr	r1, [pc, #72]	@ (80034e8 <HAL_RCC_ClockConfig+0x35c>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034aa:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_RCC_ClockConfig+0x358>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <HAL_RCC_ClockConfig+0x35c>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <HAL_RCC_ClockConfig+0x360>)
 80034c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034c4:	4a0a      	ldr	r2, [pc, #40]	@ (80034f0 <HAL_RCC_ClockConfig+0x364>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_RCC_ClockConfig+0x368>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe f85a 	bl	8001588 <HAL_InitTick>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	58024400 	.word	0x58024400
 80034e8:	0800c824 	.word	0x0800c824
 80034ec:	24000008 	.word	0x24000008
 80034f0:	24000004 	.word	0x24000004
 80034f4:	2400000c 	.word	0x2400000c

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fe:	4bb3      	ldr	r3, [pc, #716]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003506:	2b18      	cmp	r3, #24
 8003508:	f200 8155 	bhi.w	80037b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800350c:	a201      	add	r2, pc, #4	@ (adr r2, 8003514 <HAL_RCC_GetSysClockFreq+0x1c>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003579 	.word	0x08003579
 8003518:	080037b7 	.word	0x080037b7
 800351c:	080037b7 	.word	0x080037b7
 8003520:	080037b7 	.word	0x080037b7
 8003524:	080037b7 	.word	0x080037b7
 8003528:	080037b7 	.word	0x080037b7
 800352c:	080037b7 	.word	0x080037b7
 8003530:	080037b7 	.word	0x080037b7
 8003534:	0800359f 	.word	0x0800359f
 8003538:	080037b7 	.word	0x080037b7
 800353c:	080037b7 	.word	0x080037b7
 8003540:	080037b7 	.word	0x080037b7
 8003544:	080037b7 	.word	0x080037b7
 8003548:	080037b7 	.word	0x080037b7
 800354c:	080037b7 	.word	0x080037b7
 8003550:	080037b7 	.word	0x080037b7
 8003554:	080035a5 	.word	0x080035a5
 8003558:	080037b7 	.word	0x080037b7
 800355c:	080037b7 	.word	0x080037b7
 8003560:	080037b7 	.word	0x080037b7
 8003564:	080037b7 	.word	0x080037b7
 8003568:	080037b7 	.word	0x080037b7
 800356c:	080037b7 	.word	0x080037b7
 8003570:	080037b7 	.word	0x080037b7
 8003574:	080035ab 	.word	0x080035ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003578:	4b94      	ldr	r3, [pc, #592]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003584:	4b91      	ldr	r3, [pc, #580]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	4a90      	ldr	r2, [pc, #576]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003596:	e111      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003598:	4b8d      	ldr	r3, [pc, #564]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800359a:	61bb      	str	r3, [r7, #24]
      break;
 800359c:	e10e      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800359e:	4b8d      	ldr	r3, [pc, #564]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a0:	61bb      	str	r3, [r7, #24]
      break;
 80035a2:	e10b      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035a4:	4b8c      	ldr	r3, [pc, #560]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035a6:	61bb      	str	r3, [r7, #24]
      break;
 80035a8:	e108      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035aa:	4b88      	ldr	r3, [pc, #544]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035b4:	4b85      	ldr	r3, [pc, #532]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035c0:	4b82      	ldr	r3, [pc, #520]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035ca:	4b80      	ldr	r3, [pc, #512]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	08db      	lsrs	r3, r3, #3
 80035d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80e1 	beq.w	80037b0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f000 8083 	beq.w	80036fc <HAL_RCC_GetSysClockFreq+0x204>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f200 80a1 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x248>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x114>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d056      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800360a:	e099      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800360c:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02d      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003618:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	4a6b      	ldr	r2, [pc, #428]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003642:	4b62      	ldr	r3, [pc, #392]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	ed97 6a02 	vldr	s12, [r7, #8]
 8003656:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80037dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800365a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003672:	e087      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80037e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003686:	4b51      	ldr	r3, [pc, #324]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003696:	ed97 6a02 	vldr	s12, [r7, #8]
 800369a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80037dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036b6:	e065      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b40      	ldr	r3, [pc, #256]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a02 	vldr	s12, [r7, #8]
 80036de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80037dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036fa:	e043      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80037e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b2f      	ldr	r3, [pc, #188]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003722:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80037dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800373e:	e021      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80037e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	ed97 6a02 	vldr	s12, [r7, #8]
 8003766:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80037dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003782:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003784:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	0a5b      	lsrs	r3, r3, #9
 800378a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800378e:	3301      	adds	r3, #1
 8003790:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800379c:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a8:	ee17 3a90 	vmov	r3, s15
 80037ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037ae:	e005      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
      break;
 80037b4:	e002      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037b6:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037b8:	61bb      	str	r3, [r7, #24]
      break;
 80037ba:	bf00      	nop
  }

  return sysclockfreq;
 80037bc:	69bb      	ldr	r3, [r7, #24]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	@ 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
 80037d0:	03d09000 	.word	0x03d09000
 80037d4:	003d0900 	.word	0x003d0900
 80037d8:	007a1200 	.word	0x007a1200
 80037dc:	46000000 	.word	0x46000000
 80037e0:	4c742400 	.word	0x4c742400
 80037e4:	4a742400 	.word	0x4a742400
 80037e8:	4af42400 	.word	0x4af42400

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037f2:	f7ff fe81 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <HAL_RCC_GetHCLKFreq+0x50>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490f      	ldr	r1, [pc, #60]	@ (8003840 <HAL_RCC_GetHCLKFreq+0x54>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <HAL_RCC_GetHCLKFreq+0x50>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	4a09      	ldr	r2, [pc, #36]	@ (8003840 <HAL_RCC_GetHCLKFreq+0x54>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a07      	ldr	r2, [pc, #28]	@ (8003844 <HAL_RCC_GetHCLKFreq+0x58>)
 8003828:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800382a:	4a07      	ldr	r2, [pc, #28]	@ (8003848 <HAL_RCC_GetHCLKFreq+0x5c>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_RCC_GetHCLKFreq+0x58>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	58024400 	.word	0x58024400
 8003840:	0800c824 	.word	0x0800c824
 8003844:	24000008 	.word	0x24000008
 8003848:	24000004 	.word	0x24000004

0800384c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003850:	f7ff ffcc 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4904      	ldr	r1, [pc, #16]	@ (8003874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	58024400 	.word	0x58024400
 8003874:	0800c824 	.word	0x0800c824

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800387c:	f7ff ffb6 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	58024400 	.word	0x58024400
 80038a0:	0800c824 	.word	0x0800c824

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a8:	b0ca      	sub	sp, #296	@ 0x128
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80038c8:	2500      	movs	r5, #0
 80038ca:	ea54 0305 	orrs.w	r3, r4, r5
 80038ce:	d049      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038da:	d02f      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80038dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038e0:	d828      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038e6:	d01a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ec:	d822      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038f6:	d007      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038f8:	e01c      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fa:	4bb8      	ldr	r3, [pc, #736]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	4ab7      	ldr	r2, [pc, #732]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003906:	e01a      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	3308      	adds	r3, #8
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f002 fb61 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800391c:	e00f      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3328      	adds	r3, #40	@ 0x28
 8003924:	2102      	movs	r1, #2
 8003926:	4618      	mov	r0, r3
 8003928:	f002 fc08 	bl	800613c <RCCEx_PLL3_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003932:	e004      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800393c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003946:	4ba5      	ldr	r3, [pc, #660]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003954:	4aa1      	ldr	r2, [pc, #644]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003956:	430b      	orrs	r3, r1
 8003958:	6513      	str	r3, [r2, #80]	@ 0x50
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	ea58 0309 	orrs.w	r3, r8, r9
 8003978:	d047      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	2b04      	cmp	r3, #4
 8003982:	d82a      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003984:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039a1 	.word	0x080039a1
 8003990:	080039af 	.word	0x080039af
 8003994:	080039c5 	.word	0x080039c5
 8003998:	080039e3 	.word	0x080039e3
 800399c:	080039e3 	.word	0x080039e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a0:	4b8e      	ldr	r3, [pc, #568]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	4a8d      	ldr	r2, [pc, #564]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ac:	e01a      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	3308      	adds	r3, #8
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fb0e 	bl	8005fd8 <RCCEx_PLL2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039c2:	e00f      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	3328      	adds	r3, #40	@ 0x28
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fbb5 	bl	800613c <RCCEx_PLL3_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039d8:	e004      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80039e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ec:	4b7b      	ldr	r3, [pc, #492]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f0:	f023 0107 	bic.w	r1, r3, #7
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	4a78      	ldr	r2, [pc, #480]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003a16:	f04f 0b00 	mov.w	fp, #0
 8003a1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a1e:	d04c      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2a:	d030      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a30:	d829      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a34:	d02d      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a38:	d825      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d018      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a3e:	2b80      	cmp	r3, #128	@ 0x80
 8003a40:	d821      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a46:	2b40      	cmp	r3, #64	@ 0x40
 8003a48:	d007      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a4a:	e01c      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4b63      	ldr	r3, [pc, #396]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	4a62      	ldr	r2, [pc, #392]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a58:	e01c      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	3308      	adds	r3, #8
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 fab8 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	3328      	adds	r3, #40	@ 0x28
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fb5f 	bl	800613c <RCCEx_PLL3_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a8c:	e002      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ab0:	e003      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ac6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ad0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	d053      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ae6:	d035      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ae8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aec:	d82e      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003aee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003af2:	d031      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003af4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003af8:	d828      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003afe:	d01a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b04:	d822      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b0e:	d007      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b10:	e01c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b12:	4b32      	ldr	r3, [pc, #200]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	4a31      	ldr	r2, [pc, #196]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e01c      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	3308      	adds	r3, #8
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fa55 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b34:	e011      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	3328      	adds	r3, #40	@ 0x28
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f002 fafc 	bl	800613c <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b4a:	e006      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b54:	bf00      	nop
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b62:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b72:	4a1a      	ldr	r2, [pc, #104]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	d056      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003baa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bae:	d038      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003bb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bb4:	d831      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bba:	d034      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003bbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bc0:	d82b      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc6:	d01d      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bcc:	d825      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003bd8:	e01f      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003bda:	bf00      	nop
 8003bdc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be0:	4ba2      	ldr	r3, [pc, #648]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	4aa1      	ldr	r2, [pc, #644]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bec:	e01c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 f9ee 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c02:	e011      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	3328      	adds	r3, #40	@ 0x28
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 fa95 	bl	800613c <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c30:	4b8e      	ldr	r3, [pc, #568]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c40:	4a8a      	ldr	r2, [pc, #552]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	d03a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	2b30      	cmp	r3, #48	@ 0x30
 8003c78:	d01f      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c7a:	2b30      	cmp	r3, #48	@ 0x30
 8003c7c:	d819      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d00c      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d815      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d019      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d111      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8e:	4b77      	ldr	r3, [pc, #476]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	4a76      	ldr	r2, [pc, #472]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c9a:	e011      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 f997 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cb0:	e006      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cc8:	4b68      	ldr	r3, [pc, #416]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	4a65      	ldr	r2, [pc, #404]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cdc:	e003      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d051      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d10:	d035      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d16:	d82e      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d1c:	d031      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d22:	d828      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d28:	d01a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2e:	d822      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d38:	d007      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	4a4a      	ldr	r2, [pc, #296]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d48:	e01c      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	3308      	adds	r3, #8
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f002 f940 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d5e:	e011      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	3328      	adds	r3, #40	@ 0x28
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 f9e7 	bl	800613c <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d8c:	4b37      	ldr	r3, [pc, #220]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9a:	4a34      	ldr	r2, [pc, #208]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003db6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003dc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	d056      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd4:	d033      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003dd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dda:	d82c      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003de0:	d02f      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003de6:	d826      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003de8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dec:	d02b      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003dee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003df2:	d820      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003df8:	d012      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dfe:	d81a      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d022      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e08:	d115      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	3308      	adds	r3, #8
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f002 f8e0 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e1e:	e015      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	3328      	adds	r3, #40	@ 0x28
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 f987 	bl	800613c <RCCEx_PLL3_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e34:	e00a      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3c:	e006      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e62:	4a02      	ldr	r2, [pc, #8]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4313      	orrs	r3, r2
 8003e96:	d055      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ea4:	d033      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eaa:	d82c      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb0:	d02f      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d826      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003eb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ebc:	d02b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ec2:	d820      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ec8:	d012      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ece:	d81a      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d022      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ed8:	d115      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	3308      	adds	r3, #8
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 f878 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003eee:	e015      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	3328      	adds	r3, #40	@ 0x28
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f002 f91f 	bl	800613c <RCCEx_PLL3_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f04:	e00a      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0c:	e006      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f24:	4ba3      	ldr	r3, [pc, #652]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f34:	4a9f      	ldr	r2, [pc, #636]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	d037      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f6e:	d00e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f74:	d816      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d018      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f80:	4b8c      	ldr	r3, [pc, #560]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4a8b      	ldr	r2, [pc, #556]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f8c:	e00f      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	3308      	adds	r3, #8
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 f81e 	bl	8005fd8 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc4:	4a7b      	ldr	r2, [pc, #492]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003fea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	d039      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d81c      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004041 	.word	0x08004041
 8004008:	08004015 	.word	0x08004015
 800400c:	08004023 	.word	0x08004023
 8004010:	08004041 	.word	0x08004041
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b67      	ldr	r3, [pc, #412]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	4a66      	ldr	r2, [pc, #408]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	3308      	adds	r3, #8
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f001 ffd4 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800404a:	4b5a      	ldr	r3, [pc, #360]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	f023 0103 	bic.w	r1, r3, #3
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405a:	430b      	orrs	r3, r1
 800405c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800407e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004082:	460b      	mov	r3, r1
 8004084:	4313      	orrs	r3, r2
 8004086:	f000 809f 	beq.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800408a:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a4a      	ldr	r2, [pc, #296]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004096:	f7fd fac1 	bl	800161c <HAL_GetTick>
 800409a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800409e:	e00b      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fd fabc 	bl	800161c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b64      	cmp	r3, #100	@ 0x64
 80040ae:	d903      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b8:	4b3f      	ldr	r3, [pc, #252]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ed      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d179      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040cc:	4b39      	ldr	r3, [pc, #228]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040d8:	4053      	eors	r3, r2
 80040da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e2:	4b34      	ldr	r3, [pc, #208]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ee:	4b31      	ldr	r3, [pc, #196]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	4a30      	ldr	r2, [pc, #192]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040fa:	4b2e      	ldr	r3, [pc, #184]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	4a2d      	ldr	r2, [pc, #180]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004104:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004106:	4a2b      	ldr	r2, [pc, #172]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800410c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411a:	d118      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fa7e 	bl	800161c <HAL_GetTick>
 8004120:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004124:	e00d      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fd fa79 	bl	800161c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004130:	1ad2      	subs	r2, r2, r3
 8004132:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004136:	429a      	cmp	r2, r3
 8004138:	d903      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004140:	e005      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004142:	4b1c      	ldr	r3, [pc, #112]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0eb      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800414e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004152:	2b00      	cmp	r3, #0
 8004154:	d129      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800415e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004166:	d10e      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004168:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004178:	091a      	lsrs	r2, r3, #4
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800417c:	4013      	ands	r3, r2
 800417e:	4a0d      	ldr	r2, [pc, #52]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6113      	str	r3, [r2, #16]
 8004184:	e005      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004186:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4a0a      	ldr	r2, [pc, #40]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004190:	6113      	str	r3, [r2, #16]
 8004192:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004194:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800419e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a2:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	e00e      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80041b2:	e009      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80041b4:	58024400 	.word	0x58024400
 80041b8:	58024800 	.word	0x58024800
 80041bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 0301 	and.w	r3, r2, #1
 80041d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f000 8089 	beq.w	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f0:	2b28      	cmp	r3, #40	@ 0x28
 80041f2:	d86b      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80041f4:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	080042d5 	.word	0x080042d5
 8004200:	080042cd 	.word	0x080042cd
 8004204:	080042cd 	.word	0x080042cd
 8004208:	080042cd 	.word	0x080042cd
 800420c:	080042cd 	.word	0x080042cd
 8004210:	080042cd 	.word	0x080042cd
 8004214:	080042cd 	.word	0x080042cd
 8004218:	080042cd 	.word	0x080042cd
 800421c:	080042a1 	.word	0x080042a1
 8004220:	080042cd 	.word	0x080042cd
 8004224:	080042cd 	.word	0x080042cd
 8004228:	080042cd 	.word	0x080042cd
 800422c:	080042cd 	.word	0x080042cd
 8004230:	080042cd 	.word	0x080042cd
 8004234:	080042cd 	.word	0x080042cd
 8004238:	080042cd 	.word	0x080042cd
 800423c:	080042b7 	.word	0x080042b7
 8004240:	080042cd 	.word	0x080042cd
 8004244:	080042cd 	.word	0x080042cd
 8004248:	080042cd 	.word	0x080042cd
 800424c:	080042cd 	.word	0x080042cd
 8004250:	080042cd 	.word	0x080042cd
 8004254:	080042cd 	.word	0x080042cd
 8004258:	080042cd 	.word	0x080042cd
 800425c:	080042d5 	.word	0x080042d5
 8004260:	080042cd 	.word	0x080042cd
 8004264:	080042cd 	.word	0x080042cd
 8004268:	080042cd 	.word	0x080042cd
 800426c:	080042cd 	.word	0x080042cd
 8004270:	080042cd 	.word	0x080042cd
 8004274:	080042cd 	.word	0x080042cd
 8004278:	080042cd 	.word	0x080042cd
 800427c:	080042d5 	.word	0x080042d5
 8004280:	080042cd 	.word	0x080042cd
 8004284:	080042cd 	.word	0x080042cd
 8004288:	080042cd 	.word	0x080042cd
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042cd 	.word	0x080042cd
 8004294:	080042cd 	.word	0x080042cd
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080042d5 	.word	0x080042d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	3308      	adds	r3, #8
 80042a6:	2101      	movs	r1, #1
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fe95 	bl	8005fd8 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042b4:	e00f      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	3328      	adds	r3, #40	@ 0x28
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 ff3c 	bl	800613c <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042ca:	e004      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042de:	4bbf      	ldr	r3, [pc, #764]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ec:	4abb      	ldr	r2, [pc, #748]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ee:	430b      	orrs	r3, r1
 80042f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80042f2:	e003      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 0302 	and.w	r3, r2, #2
 8004308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004312:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d041      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004322:	2b05      	cmp	r3, #5
 8004324:	d824      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004326:	a201      	add	r2, pc, #4	@ (adr r2, 800432c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004379 	.word	0x08004379
 8004330:	08004345 	.word	0x08004345
 8004334:	0800435b 	.word	0x0800435b
 8004338:	08004379 	.word	0x08004379
 800433c:	08004379 	.word	0x08004379
 8004340:	08004379 	.word	0x08004379
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	3308      	adds	r3, #8
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fe43 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004358:	e00f      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	3328      	adds	r3, #40	@ 0x28
 8004360:	2101      	movs	r1, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f001 feea 	bl	800613c <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800436e:	e004      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004376:	e000      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004382:	4b96      	ldr	r3, [pc, #600]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	f023 0107 	bic.w	r1, r3, #7
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004390:	4a92      	ldr	r2, [pc, #584]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004392:	430b      	orrs	r3, r1
 8004394:	6553      	str	r3, [r2, #84]	@ 0x54
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f002 0304 	and.w	r3, r2, #4
 80043ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d044      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d825      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	08004421 	.word	0x08004421
 80043d8:	080043ed 	.word	0x080043ed
 80043dc:	08004403 	.word	0x08004403
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004421 	.word	0x08004421
 80043e8:	08004421 	.word	0x08004421
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	3308      	adds	r3, #8
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 fdef 	bl	8005fd8 <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fe96 	bl	800613c <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442a:	4b6c      	ldr	r3, [pc, #432]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f023 0107 	bic.w	r1, r3, #7
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443a:	4a68      	ldr	r2, [pc, #416]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004440:	e003      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f002 0320 	and.w	r3, r2, #32
 8004456:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800445a:	2300      	movs	r3, #0
 800445c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d055      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004476:	d033      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800447c:	d82c      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d02f      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004488:	d826      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800448a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800448e:	d02b      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004490:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004494:	d820      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800449a:	d012      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800449c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044a0:	d81a      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d022      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80044a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044aa:	d115      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	3308      	adds	r3, #8
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 fd8f 	bl	8005fd8 <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044c0:	e015      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	3328      	adds	r3, #40	@ 0x28
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 fe36 	bl	800613c <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044d6:	e00a      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044de:	e006      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044e0:	bf00      	nop
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044e4:	bf00      	nop
 80044e6:	e002      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f6:	4b39      	ldr	r3, [pc, #228]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a35      	ldr	r2, [pc, #212]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6553      	str	r3, [r2, #84]	@ 0x54
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800452c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004530:	460b      	mov	r3, r1
 8004532:	4313      	orrs	r3, r2
 8004534:	d058      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800453e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004542:	d033      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004544:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004548:	d82c      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454e:	d02f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004554:	d826      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800455a:	d02b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800455c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004560:	d820      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004566:	d012      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800456c:	d81a      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d022      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004576:	d115      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	3308      	adds	r3, #8
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fd29 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800458c:	e015      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	3328      	adds	r3, #40	@ 0x28
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f001 fdd0 	bl	800613c <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045a2:	e00a      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045aa:	e006      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045ac:	bf00      	nop
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045b0:	bf00      	nop
 80045b2:	e002      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10e      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045d2:	4a02      	ldr	r2, [pc, #8]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80045f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d055      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004610:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004614:	d033      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004616:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800461a:	d82c      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004620:	d02f      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004626:	d826      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004628:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800462c:	d02b      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800462e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004632:	d820      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004634:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004638:	d012      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800463a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800463e:	d81a      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d022      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004648:	d115      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	3308      	adds	r3, #8
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fcc0 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800465e:	e015      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	3328      	adds	r3, #40	@ 0x28
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fd67 	bl	800613c <RCCEx_PLL3_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004674:	e00a      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800467c:	e006      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800467e:	bf00      	nop
 8004680:	e004      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004682:	bf00      	nop
 8004684:	e002      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800468a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004694:	4ba1      	ldr	r3, [pc, #644]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004698:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046a4:	4a9d      	ldr	r2, [pc, #628]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046aa:	e003      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f002 0308 	and.w	r3, r2, #8
 80046c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046c4:	2300      	movs	r3, #0
 80046c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d01e      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	3328      	adds	r3, #40	@ 0x28
 80046e8:	2102      	movs	r1, #2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fd26 	bl	800613c <RCCEx_PLL3_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046fc:	4b87      	ldr	r3, [pc, #540]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800470c:	4a83      	ldr	r2, [pc, #524]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800470e:	430b      	orrs	r3, r1
 8004710:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f002 0310 	and.w	r3, r2, #16
 800471e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004728:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800472c:	460b      	mov	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	d01e      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800473a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473e:	d10c      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	3328      	adds	r3, #40	@ 0x28
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f001 fcf7 	bl	800613c <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800475a:	4b70      	ldr	r3, [pc, #448]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800476a:	4a6c      	ldr	r2, [pc, #432]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800477c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004786:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d03e      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800479c:	d022      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800479e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047a2:	d81b      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80047ae:	e015      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	3308      	adds	r3, #8
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fc0d 	bl	8005fd8 <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047c4:	e00f      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	3328      	adds	r3, #40	@ 0x28
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fcb4 	bl	800613c <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047da:	e004      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047e2:	e000      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80047e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ee:	4b4b      	ldr	r3, [pc, #300]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047fe:	4a47      	ldr	r2, [pc, #284]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004800:	430b      	orrs	r3, r1
 8004802:	6593      	str	r3, [r2, #88]	@ 0x58
 8004804:	e003      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800481a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800481c:	2300      	movs	r3, #0
 800481e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004820:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004824:	460b      	mov	r3, r1
 8004826:	4313      	orrs	r3, r2
 8004828:	d03b      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004836:	d01f      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004838:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800483c:	d818      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004848:	d007      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800484a:	e011      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800484c:	4b33      	ldr	r3, [pc, #204]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	4a32      	ldr	r2, [pc, #200]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004858:	e00f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fc6a 	bl	800613c <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004882:	4b26      	ldr	r3, [pc, #152]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	4a22      	ldr	r2, [pc, #136]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6553      	str	r3, [r2, #84]	@ 0x54
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80048ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80048b0:	2300      	movs	r3, #0
 80048b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80048b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d034      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048cc:	d007      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80048ce:	e011      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b12      	ldr	r3, [pc, #72]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	4a11      	ldr	r2, [pc, #68]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048dc:	e00e      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	3308      	adds	r3, #8
 80048e4:	2102      	movs	r1, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fb76 	bl	8005fd8 <RCCEx_PLL2_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048f2:	e003      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004908:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004912:	4a02      	ldr	r2, [pc, #8]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004914:	430b      	orrs	r3, r1
 8004916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004918:	e006      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004936:	2300      	movs	r3, #0
 8004938:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800493a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d00c      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	3328      	adds	r3, #40	@ 0x28
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fbf5 	bl	800613c <RCCEx_PLL3_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800496a:	663b      	str	r3, [r7, #96]	@ 0x60
 800496c:	2300      	movs	r3, #0
 800496e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004970:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d038      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004986:	d018      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004988:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800498c:	d811      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800498e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004992:	d014      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004998:	d80b      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d011      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800499e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a2:	d106      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a4:	4bc3      	ldr	r3, [pc, #780]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	4ac2      	ldr	r2, [pc, #776]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049b0:	e008      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b8:	e004      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80049c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049cc:	4bb9      	ldr	r3, [pc, #740]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049dc:	4ab5      	ldr	r2, [pc, #724]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049de:	430b      	orrs	r3, r1
 80049e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80049e2:	e003      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80049f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049fa:	2300      	movs	r3, #0
 80049fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a08:	4baa      	ldr	r3, [pc, #680]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a16:	4aa7      	ldr	r2, [pc, #668]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a32:	460b      	mov	r3, r1
 8004a34:	4313      	orrs	r3, r2
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a38:	4b9e      	ldr	r3, [pc, #632]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a48:	4a9a      	ldr	r2, [pc, #616]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a6a:	4b92      	ldr	r3, [pc, #584]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a78:	4a8e      	ldr	r2, [pc, #568]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a9a:	4b86      	ldr	r3, [pc, #536]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	4a85      	ldr	r2, [pc, #532]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004aa4:	6113      	str	r3, [r2, #16]
 8004aa6:	4b83      	ldr	r3, [pc, #524]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa8:	6919      	ldr	r1, [r3, #16]
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ab2:	4a80      	ldr	r2, [pc, #512]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ad4:	4b77      	ldr	r3, [pc, #476]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae2:	4a74      	ldr	r2, [pc, #464]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af6:	2300      	movs	r3, #0
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004afe:	460b      	mov	r3, r1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b04:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b14:	4a67      	ldr	r2, [pc, #412]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	2100      	movs	r1, #0
 8004b24:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b30:	460b      	mov	r3, r1
 8004b32:	4313      	orrs	r3, r2
 8004b34:	d011      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fa4a 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	2100      	movs	r1, #0
 8004b64:	6239      	str	r1, [r7, #32]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b70:	460b      	mov	r3, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	d011      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fa2a 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	61b9      	str	r1, [r7, #24]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	d011      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bba:	3308      	adds	r3, #8
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 fa0a 	bl	8005fd8 <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	2100      	movs	r1, #0
 8004be4:	6139      	str	r1, [r7, #16]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d011      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	3328      	adds	r3, #40	@ 0x28
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fa9c 	bl	800613c <RCCEx_PLL3_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	2100      	movs	r1, #0
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d011      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	3328      	adds	r3, #40	@ 0x28
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fa7c 	bl	800613c <RCCEx_PLL3_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	2100      	movs	r1, #0
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d011      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	3328      	adds	r3, #40	@ 0x28
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 fa5c 	bl	800613c <RCCEx_PLL3_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004c9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb4:	58024400 	.word	0x58024400

08004cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b090      	sub	sp, #64	@ 0x40
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f040 8094 	bne.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004cd0:	4b9e      	ldr	r3, [pc, #632]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	f200 8087 	bhi.w	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004cfd 	.word	0x08004cfd
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d4d 	.word	0x08004d4d
 8004cf4:	08004de9 	.word	0x08004de9
 8004cf8:	08004d75 	.word	0x08004d75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cfc:	4b93      	ldr	r3, [pc, #588]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d08:	d108      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f810 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d18:	f000 bd45 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d20:	f000 bd41 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d24:	4b89      	ldr	r3, [pc, #548]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d30:	d108      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d32:	f107 0318 	add.w	r3, r7, #24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd54 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d40:	f000 bd31 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d48:	f000 bd2d 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d4c:	4b7f      	ldr	r3, [pc, #508]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d58:	d108      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fe94 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d68:	f000 bd1d 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d70:	f000 bd19 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d74:	4b75      	ldr	r3, [pc, #468]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d7e:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d90:	4b6e      	ldr	r3, [pc, #440]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	4a6d      	ldr	r2, [pc, #436]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004da2:	e01f      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004da4:	4b69      	ldr	r3, [pc, #420]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004db8:	d102      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004dba:	4b66      	ldr	r3, [pc, #408]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dbe:	e011      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dc0:	4b62      	ldr	r3, [pc, #392]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd4:	d102      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004dd6:	4b60      	ldr	r3, [pc, #384]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004de0:	f000 bce1 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004de4:	f000 bcdf 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004de8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dec:	f000 bcdb 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004df4:	f000 bcd7 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004e00:	430b      	orrs	r3, r1
 8004e02:	f040 80ad 	bne.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004e06:	4b51      	ldr	r3, [pc, #324]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e16:	d056      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e1e:	f200 8090 	bhi.w	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e26:	f000 8088 	beq.w	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e2e:	f200 8088 	bhi.w	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	2b80      	cmp	r3, #128	@ 0x80
 8004e36:	d032      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	2b80      	cmp	r3, #128	@ 0x80
 8004e3c:	f200 8081 	bhi.w	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d014      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004e4c:	e079      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e5a:	d108      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 ff67 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e6a:	f000 bc9c 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e72:	f000 bc98 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e76:	4b35      	ldr	r3, [pc, #212]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e82:	d108      	bne.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e84:	f107 0318 	add.w	r3, r7, #24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fcab 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e92:	f000 bc88 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e9a:	f000 bc84 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eaa:	d108      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fdeb 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eba:	f000 bc74 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec2:	f000 bc70 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ec6:	4b21      	ldr	r3, [pc, #132]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef4:	e01f      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ef6:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f02:	d106      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f0a:	d102      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f0c:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f10:	e011      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f12:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f26:	d102      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f32:	f000 bc38 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f36:	f000 bc36 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f3a:	4b08      	ldr	r3, [pc, #32]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f3e:	f000 bc32 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f46:	f000 bc2e 	b.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f4a:	bf00      	nop
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	03d09000 	.word	0x03d09000
 8004f54:	003d0900 	.word	0x003d0900
 8004f58:	007a1200 	.word	0x007a1200
 8004f5c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f64:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	f040 809c 	bne.w	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8004f76:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f7e:	d054      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f86:	f200 808b 	bhi.w	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f90:	f000 8083 	beq.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f9a:	f200 8081 	bhi.w	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa4:	d02f      	beq.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fac:	d878      	bhi.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fba:	d012      	beq.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004fbc:	e070      	b.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fca:	d107      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 feaf 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fda:	e3e4      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fe0:	e3e1      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fe2:	4b81      	ldr	r3, [pc, #516]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fee:	d107      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ff0:	f107 0318 	add.w	r3, r7, #24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fbf5 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ffe:	e3d2      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005004:	e3cf      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005006:	4b78      	ldr	r3, [pc, #480]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800500e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005012:	d107      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fd37 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005022:	e3c0      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005028:	e3bd      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800502a:	4b6f      	ldr	r3, [pc, #444]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005034:	4b6c      	ldr	r3, [pc, #432]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d10c      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005046:	4b68      	ldr	r3, [pc, #416]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	08db      	lsrs	r3, r3, #3
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	4a66      	ldr	r2, [pc, #408]	@ (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005058:	e01e      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800505a:	4b63      	ldr	r3, [pc, #396]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005066:	d106      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800506e:	d102      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005070:	4b5f      	ldr	r3, [pc, #380]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005074:	e010      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005076:	4b5c      	ldr	r3, [pc, #368]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005082:	d106      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800508a:	d102      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800508c:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800508e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005090:	e002      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005096:	e386      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005098:	e385      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800509a:	4b57      	ldr	r3, [pc, #348]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800509e:	e382      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050a4:	e37f      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80050a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80050ae:	430b      	orrs	r3, r1
 80050b0:	f040 80a7 	bne.w	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80050b4:	4b4c      	ldr	r3, [pc, #304]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80050bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050c4:	d055      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050cc:	f200 8096 	bhi.w	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050d6:	f000 8084 	beq.w	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050e0:	f200 808c 	bhi.w	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ea:	d030      	beq.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050f2:	f200 8083 	bhi.w	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005102:	d012      	beq.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005104:	e07a      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005106:	4b38      	ldr	r3, [pc, #224]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005112:	d107      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fe0b 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005122:	e340      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005128:	e33d      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800512a:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005136:	d107      	bne.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005138:	f107 0318 	add.w	r3, r7, #24
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fb51 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005146:	e32e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800514c:	e32b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800514e:	4b26      	ldr	r3, [pc, #152]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800515a:	d107      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fc93 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800516a:	e31c      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005170:	e319      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005172:	4b1d      	ldr	r3, [pc, #116]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005176:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800517c:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d10c      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800518e:	4b16      	ldr	r3, [pc, #88]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	08db      	lsrs	r3, r3, #3
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	4a14      	ldr	r2, [pc, #80]	@ (80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800519a:	fa22 f303 	lsr.w	r3, r2, r3
 800519e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a0:	e01e      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051a2:	4b11      	ldr	r3, [pc, #68]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ae:	d106      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80051b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b6:	d102      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051b8:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051bc:	e010      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051be:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ca:	d106      	bne.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d2:	d102      	bne.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051d4:	4b07      	ldr	r3, [pc, #28]	@ (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80051de:	e2e2      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051e0:	e2e1      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80051e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e6:	e2de      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051e8:	58024400 	.word	0x58024400
 80051ec:	03d09000 	.word	0x03d09000
 80051f0:	003d0900 	.word	0x003d0900
 80051f4:	007a1200 	.word	0x007a1200
 80051f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005200:	e2d1      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005206:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800520a:	430b      	orrs	r3, r1
 800520c:	f040 809c 	bne.w	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005210:	4b93      	ldr	r3, [pc, #588]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005214:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005218:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005220:	d054      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005228:	f200 808b 	bhi.w	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005232:	f000 8083 	beq.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800523c:	f200 8081 	bhi.w	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005246:	d02f      	beq.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524e:	d878      	bhi.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525c:	d012      	beq.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800525e:	e070      	b.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005260:	4b7f      	ldr	r3, [pc, #508]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800526c:	d107      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800526e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fd5e 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800527c:	e293      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005282:	e290      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005284:	4b76      	ldr	r3, [pc, #472]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800528c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005290:	d107      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005292:	f107 0318 	add.w	r3, r7, #24
 8005296:	4618      	mov	r0, r3
 8005298:	f000 faa4 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052a0:	e281      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a6:	e27e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052a8:	4b6d      	ldr	r3, [pc, #436]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b4:	d107      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fbe6 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052c4:	e26f      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ca:	e26c      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052cc:	4b64      	ldr	r3, [pc, #400]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80052ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052d6:	4b62      	ldr	r3, [pc, #392]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052e8:	4b5d      	ldr	r3, [pc, #372]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
 80052f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fa:	e01e      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052fc:	4b58      	ldr	r3, [pc, #352]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005308:	d106      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800530a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005310:	d102      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005312:	4b55      	ldr	r3, [pc, #340]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005316:	e010      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005318:	4b51      	ldr	r3, [pc, #324]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005324:	d106      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800532c:	d102      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800532e:	4b4f      	ldr	r3, [pc, #316]	@ (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005332:	e002      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005338:	e235      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800533a:	e234      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800533c:	4b4c      	ldr	r3, [pc, #304]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005340:	e231      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005346:	e22e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800534c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005350:	430b      	orrs	r3, r1
 8005352:	f040 808f 	bne.w	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005356:	4b42      	ldr	r3, [pc, #264]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005362:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005366:	d06b      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800536e:	d874      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005376:	d056      	beq.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800537e:	d86c      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005386:	d03b      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800538e:	d864      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005396:	d021      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800539e:	d85c      	bhi.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ac:	d004      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80053ae:	e054      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7fe fa4c 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 80053b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053b6:	e1f6      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b8:	4b29      	ldr	r3, [pc, #164]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c4:	d107      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c6:	f107 0318 	add.w	r3, r7, #24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fa0a 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053d4:	e1e7      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053da:	e1e4      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053dc:	4b20      	ldr	r3, [pc, #128]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ea:	f107 030c 	add.w	r3, r7, #12
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fb4c 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053f8:	e1d5      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053fe:	e1d2      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005400:	4b17      	ldr	r3, [pc, #92]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d109      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800540c:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	4a13      	ldr	r2, [pc, #76]	@ (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800541e:	e1c2      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005424:	e1bf      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005432:	d102      	bne.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005434:	4b0c      	ldr	r3, [pc, #48]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005438:	e1b5      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800543e:	e1b2      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005440:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800544c:	d102      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005452:	e1a8      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005458:	e1a5      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800545e:	e1a2      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005460:	58024400 	.word	0x58024400
 8005464:	03d09000 	.word	0x03d09000
 8005468:	003d0900 	.word	0x003d0900
 800546c:	007a1200 	.word	0x007a1200
 8005470:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005478:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800547c:	430b      	orrs	r3, r1
 800547e:	d173      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005480:	4b9c      	ldr	r3, [pc, #624]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005490:	d02f      	beq.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005498:	d863      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a6:	d012      	beq.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80054a8:	e05b      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054aa:	4b92      	ldr	r3, [pc, #584]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b6:	d107      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b8:	f107 0318 	add.w	r3, r7, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f991 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c6:	e16e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054cc:	e16b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ce:	4b89      	ldr	r3, [pc, #548]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054da:	d107      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054dc:	f107 030c 	add.w	r3, r7, #12
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fad3 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054ea:	e15c      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054f0:	e159      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054f2:	4b80      	ldr	r3, [pc, #512]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054fc:	4b7d      	ldr	r3, [pc, #500]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d10c      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800550e:	4b79      	ldr	r3, [pc, #484]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	08db      	lsrs	r3, r3, #3
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	4a77      	ldr	r2, [pc, #476]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005520:	e01e      	b.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005522:	4b74      	ldr	r3, [pc, #464]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552e:	d106      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005536:	d102      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005538:	4b70      	ldr	r3, [pc, #448]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800553c:	e010      	b.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800553e:	4b6d      	ldr	r3, [pc, #436]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800554a:	d106      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800554c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005552:	d102      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005554:	4b6a      	ldr	r3, [pc, #424]	@ (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800555e:	e122      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005560:	e121      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005566:	e11e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005570:	430b      	orrs	r3, r1
 8005572:	d133      	bne.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005574:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800557c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558a:	d012      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800558c:	e023      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800558e:	4b59      	ldr	r3, [pc, #356]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800559a:	d107      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800559c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fbc7 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055aa:	e0fc      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b0:	e0f9      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055b2:	4b50      	ldr	r3, [pc, #320]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055be:	d107      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055c0:	f107 0318 	add.w	r3, r7, #24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f90d 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ce:	e0ea      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d4:	e0e7      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055da:	e0e4      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80055dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80055e4:	430b      	orrs	r3, r1
 80055e6:	f040 808d 	bne.w	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80055ea:	4b42      	ldr	r3, [pc, #264]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80055f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055fa:	d06b      	beq.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005602:	d874      	bhi.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560a:	d056      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005612:	d86c      	bhi.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800561a:	d03b      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005622:	d864      	bhi.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800562a:	d021      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005632:	d85c      	bhi.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005640:	d004      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005642:	e054      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005644:	f000 f8b8 	bl	80057b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005648:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800564a:	e0ac      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800564c:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005658:	d107      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800565a:	f107 0318 	add.w	r3, r7, #24
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f8c0 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005668:	e09d      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800566e:	e09a      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005670:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567c:	d107      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800567e:	f107 030c 	add.w	r3, r7, #12
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa02 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800568c:	e08b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005692:	e088      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d109      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056a0:	4b14      	ldr	r3, [pc, #80]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	4a13      	ldr	r2, [pc, #76]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056b2:	e078      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056b8:	e075      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80056ba:	4b0e      	ldr	r3, [pc, #56]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c6:	d102      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056cc:	e06b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d2:	e068      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056d4:	4b07      	ldr	r3, [pc, #28]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056e0:	d102      	bne.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80056e2:	4b07      	ldr	r3, [pc, #28]	@ (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80056e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056e6:	e05e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ec:	e05b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056f2:	e058      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056f4:	58024400 	.word	0x58024400
 80056f8:	03d09000 	.word	0x03d09000
 80056fc:	003d0900 	.word	0x003d0900
 8005700:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005708:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800570c:	430b      	orrs	r3, r1
 800570e:	d148      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005710:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005718:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005720:	d02a      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005728:	d838      	bhi.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005736:	d00d      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005738:	e030      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005746:	d102      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005748:	4b1a      	ldr	r3, [pc, #104]	@ (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800574c:	e02b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005752:	e028      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005754:	4b16      	ldr	r3, [pc, #88]	@ (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005760:	d107      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fae4 	bl	8005d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005770:	e019      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005776:	e016      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005778:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005786:	f107 0318 	add.w	r3, r7, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f82a 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005794:	e007      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800579a:	e004      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a0:	e001      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80057a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3740      	adds	r7, #64	@ 0x40
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	58024400 	.word	0x58024400
 80057b4:	007a1200 	.word	0x007a1200

080057b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80057bc:	f7fe f816 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 80057c0:	4602      	mov	r2, r0
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	4904      	ldr	r1, [pc, #16]	@ (80057e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057ce:	5ccb      	ldrb	r3, [r1, r3]
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	58024400 	.word	0x58024400
 80057e0:	0800c824 	.word	0x0800c824

080057e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	@ 0x24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	0b1b      	lsrs	r3, r3, #12
 80057fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005800:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005802:	4b9c      	ldr	r3, [pc, #624]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800580e:	4b99      	ldr	r3, [pc, #612]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005812:	08db      	lsrs	r3, r3, #3
 8005814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8111 	beq.w	8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b02      	cmp	r3, #2
 8005836:	f000 8083 	beq.w	8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b02      	cmp	r3, #2
 800583e:	f200 80a1 	bhi.w	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d056      	beq.n	80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800584e:	e099      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005850:	4b88      	ldr	r3, [pc, #544]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02d      	beq.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800585c:	4b85      	ldr	r3, [pc, #532]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	4a84      	ldr	r2, [pc, #528]	@ (8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005886:	4b7b      	ldr	r3, [pc, #492]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005896:	ed97 6a03 	vldr	s12, [r7, #12]
 800589a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058b6:	e087      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058da:	ed97 6a03 	vldr	s12, [r7, #12]
 80058de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058fa:	e065      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b59      	ldr	r3, [pc, #356]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005922:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800593e:	e043      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b48      	ldr	r3, [pc, #288]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a03 	vldr	s12, [r7, #12]
 8005966:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005982:	e021      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80059c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ee:	ee17 2a90 	vmov	r2, s15
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80059f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a1c:	ee17 2a90 	vmov	r2, s15
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005a24:	4b13      	ldr	r3, [pc, #76]	@ (8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4a:	ee17 2a90 	vmov	r2, s15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
}
 8005a66:	bf00      	nop
 8005a68:	3724      	adds	r7, #36	@ 0x24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400
 8005a78:	03d09000 	.word	0x03d09000
 8005a7c:	46000000 	.word	0x46000000
 8005a80:	4c742400 	.word	0x4c742400
 8005a84:	4a742400 	.word	0x4a742400
 8005a88:	4af42400 	.word	0x4af42400

08005a8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a94:	4ba1      	ldr	r3, [pc, #644]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a9e:	4b9f      	ldr	r3, [pc, #636]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	0d1b      	lsrs	r3, r3, #20
 8005aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aa8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ab6:	4b99      	ldr	r3, [pc, #612]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8111 	beq.w	8005cfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	f000 8083 	beq.w	8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f200 80a1 	bhi.w	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d056      	beq.n	8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005af6:	e099      	b.n	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af8:	4b88      	ldr	r3, [pc, #544]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02d      	beq.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b04:	4b85      	ldr	r3, [pc, #532]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	4a84      	ldr	r2, [pc, #528]	@ (8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b5e:	e087      	b.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b72:	4b6a      	ldr	r3, [pc, #424]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ba2:	e065      	b.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b59      	ldr	r3, [pc, #356]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005be6:	e043      	b.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b48      	ldr	r3, [pc, #288]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c2a:	e021      	b.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b37      	ldr	r3, [pc, #220]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c70:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	0a5b      	lsrs	r3, r3, #9
 8005c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c96:	ee17 2a90 	vmov	r2, s15
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc4:	ee17 2a90 	vmov	r2, s15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ccc:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	0e1b      	lsrs	r3, r3, #24
 8005cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf2:	ee17 2a90 	vmov	r2, s15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005cfa:	e008      	b.n	8005d0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	3724      	adds	r7, #36	@ 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	03d09000 	.word	0x03d09000
 8005d24:	46000000 	.word	0x46000000
 8005d28:	4c742400 	.word	0x4c742400
 8005d2c:	4a742400 	.word	0x4a742400
 8005d30:	4af42400 	.word	0x4af42400

08005d34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	@ 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d3c:	4ba0      	ldr	r3, [pc, #640]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005d46:	4b9e      	ldr	r3, [pc, #632]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d52:	4b9b      	ldr	r3, [pc, #620]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d5c:	4b98      	ldr	r3, [pc, #608]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d60:	08db      	lsrs	r3, r3, #3
 8005d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8111 	beq.w	8005fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	f000 8083 	beq.w	8005e8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	f200 80a1 	bhi.w	8005ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d056      	beq.n	8005e4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005d9c:	e099      	b.n	8005ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d9e:	4b88      	ldr	r3, [pc, #544]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d02d      	beq.n	8005e06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005daa:	4b85      	ldr	r3, [pc, #532]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	4a83      	ldr	r2, [pc, #524]	@ (8005fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd4:	4b7a      	ldr	r3, [pc, #488]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e04:	e087      	b.n	8005f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e18:	4b69      	ldr	r3, [pc, #420]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e28:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e48:	e065      	b.n	8005f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e54:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5c:	4b58      	ldr	r3, [pc, #352]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e70:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8c:	e043      	b.n	8005f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e98:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea0:	4b47      	ldr	r3, [pc, #284]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed0:	e021      	b.n	8005f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee4:	4b36      	ldr	r3, [pc, #216]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ef8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005f16:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1a:	0a5b      	lsrs	r3, r3, #9
 8005f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3c:	ee17 2a90 	vmov	r2, s15
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005f44:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6a:	ee17 2a90 	vmov	r2, s15
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005f72:	4b13      	ldr	r3, [pc, #76]	@ (8005fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f98:	ee17 2a90 	vmov	r2, s15
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3724      	adds	r7, #36	@ 0x24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	03d09000 	.word	0x03d09000
 8005fc8:	46000000 	.word	0x46000000
 8005fcc:	4c742400 	.word	0x4c742400
 8005fd0:	4a742400 	.word	0x4a742400
 8005fd4:	4af42400 	.word	0x4af42400

08005fd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fe6:	4b53      	ldr	r3, [pc, #332]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d101      	bne.n	8005ff6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e099      	b.n	800612a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8005ffc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006002:	f7fb fb0b 	bl	800161c <HAL_GetTick>
 8006006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006008:	e008      	b.n	800601c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800600a:	f7fb fb07 	bl	800161c <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e086      	b.n	800612a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800601c:	4b45      	ldr	r3, [pc, #276]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f0      	bne.n	800600a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006028:	4b42      	ldr	r3, [pc, #264]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 800602a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	031b      	lsls	r3, r3, #12
 8006036:	493f      	ldr	r1, [pc, #252]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8006038:	4313      	orrs	r3, r2
 800603a:	628b      	str	r3, [r1, #40]	@ 0x28
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	3b01      	subs	r3, #1
 8006042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	3b01      	subs	r3, #1
 800604c:	025b      	lsls	r3, r3, #9
 800604e:	b29b      	uxth	r3, r3
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	3b01      	subs	r3, #1
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	3b01      	subs	r3, #1
 8006066:	061b      	lsls	r3, r3, #24
 8006068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800606c:	4931      	ldr	r1, [pc, #196]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 800606e:	4313      	orrs	r3, r2
 8006070:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006072:	4b30      	ldr	r3, [pc, #192]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	492d      	ldr	r1, [pc, #180]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8006080:	4313      	orrs	r3, r2
 8006082:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006084:	4b2b      	ldr	r3, [pc, #172]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	f023 0220 	bic.w	r2, r3, #32
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4928      	ldr	r1, [pc, #160]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8006092:	4313      	orrs	r3, r2
 8006094:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006096:	4b27      	ldr	r3, [pc, #156]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060a2:	4b24      	ldr	r3, [pc, #144]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a6:	4b24      	ldr	r3, [pc, #144]	@ (8006138 <RCCEx_PLL2_Config+0x160>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	69d2      	ldr	r2, [r2, #28]
 80060ae:	00d2      	lsls	r2, r2, #3
 80060b0:	4920      	ldr	r1, [pc, #128]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	f043 0310 	orr.w	r3, r3, #16
 80060c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4a19      	ldr	r2, [pc, #100]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060d4:	e00f      	b.n	80060f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d106      	bne.n	80060ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060dc:	4b15      	ldr	r3, [pc, #84]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	4a14      	ldr	r2, [pc, #80]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060e8:	e005      	b.n	80060f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060ea:	4b12      	ldr	r3, [pc, #72]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	4a11      	ldr	r2, [pc, #68]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006102:	f7fb fa8b 	bl	800161c <HAL_GetTick>
 8006106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006108:	e008      	b.n	800611c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800610a:	f7fb fa87 	bl	800161c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e006      	b.n	800612a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <RCCEx_PLL2_Config+0x15c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0f0      	beq.n	800610a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
 8006138:	ffff0007 	.word	0xffff0007

0800613c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800614a:	4b53      	ldr	r3, [pc, #332]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d101      	bne.n	800615a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e099      	b.n	800628e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800615a:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4e      	ldr	r2, [pc, #312]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fb fa59 	bl	800161c <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800616c:	e008      	b.n	8006180 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800616e:	f7fb fa55 	bl	800161c <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e086      	b.n	800628e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006180:	4b45      	ldr	r3, [pc, #276]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800618c:	4b42      	ldr	r3, [pc, #264]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	051b      	lsls	r3, r3, #20
 800619a:	493f      	ldr	r1, [pc, #252]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	628b      	str	r3, [r1, #40]	@ 0x28
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	025b      	lsls	r3, r3, #9
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061d0:	4931      	ldr	r1, [pc, #196]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061d6:	4b30      	ldr	r3, [pc, #192]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	492d      	ldr	r1, [pc, #180]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4928      	ldr	r1, [pc, #160]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061fa:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006206:	4b24      	ldr	r3, [pc, #144]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800620a:	4b24      	ldr	r3, [pc, #144]	@ (800629c <RCCEx_PLL3_Config+0x160>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	69d2      	ldr	r2, [r2, #28]
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4920      	ldr	r1, [pc, #128]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800622c:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006238:	e00f      	b.n	800625a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006240:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006246:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800624c:	e005      	b.n	800625a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800624e:	4b12      	ldr	r3, [pc, #72]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800625a:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a0e      	ldr	r2, [pc, #56]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fb f9d9 	bl	800161c <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800626c:	e008      	b.n	8006280 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800626e:	f7fb f9d5 	bl	800161c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <RCCEx_PLL3_Config+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	ffff0007 	.word	0xffff0007

080062a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	@ 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e075      	b.n	800639e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fa fd49 	bl	8000d5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2204      	movs	r2, #4
 80062ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f868 	bl	80063a8 <HAL_SD_InitCard>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e05d      	b.n	800639e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc51 	bl	8006b90 <HAL_SD_GetCardStatus>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e052      	b.n	800639e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80062f8:	7e3b      	ldrb	r3, [r7, #24]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80062fe:	7e7b      	ldrb	r3, [r7, #25]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10a      	bne.n	8006322 <HAL_SD_Init+0x82>
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <HAL_SD_Init+0x78>
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800631e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006320:	e00b      	b.n	800633a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	2b01      	cmp	r3, #1
 8006328:	d104      	bne.n	8006334 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006330:	659a      	str	r2, [r3, #88]	@ 0x58
 8006332:	e002      	b.n	800633a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fd0f 	bl	8006d64 <HAL_SD_ConfigWideBusOperation>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e026      	b.n	800639e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006350:	f7fb f964 	bl	800161c <HAL_GetTick>
 8006354:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006356:	e011      	b.n	800637c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006358:	f7fb f960 	bl	800161c <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d109      	bne.n	800637c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800636e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e010      	b.n	800639e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fe03 	bl	8006f88 <HAL_SD_GetCardState>
 8006382:	4603      	mov	r3, r0
 8006384:	2b04      	cmp	r3, #4
 8006386:	d1e7      	bne.n	8006358 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3728      	adds	r7, #40	@ 0x28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b08d      	sub	sp, #52	@ 0x34
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80063c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80063c4:	f04f 0100 	mov.w	r1, #0
 80063c8:	f7fe fc76 	bl	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80063cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80063e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e070      	b.n	80064ca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	4a39      	ldr	r2, [pc, #228]	@ (80064d4 <HAL_SD_InitCard+0x12c>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	091b      	lsrs	r3, r3, #4
 80063f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681c      	ldr	r4, [r3, #0]
 80063fa:	466a      	mov	r2, sp
 80063fc:	f107 0318 	add.w	r3, r7, #24
 8006400:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006404:	e882 0003 	stmia.w	r2, {r0, r1}
 8006408:	f107 030c 	add.w	r3, r7, #12
 800640c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800640e:	4620      	mov	r0, r4
 8006410:	f002 ff86 	bl	8009320 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f002 ffb8 	bl	800938e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006436:	4a28      	ldr	r2, [pc, #160]	@ (80064d8 <HAL_SD_InitCard+0x130>)
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	3301      	adds	r3, #1
 8006440:	4618      	mov	r0, r3
 8006442:	f7fa f9be 	bl	80007c2 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fe8c 	bl	8007164 <SD_PowerON>
 800644c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e02e      	b.n	80064ca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fdab 	bl	8006fc8 <SD_InitCard>
 8006472:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e01b      	b.n	80064ca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800649a:	4618      	mov	r0, r3
 800649c:	f003 f81e 	bl	80094dc <SDMMC_CmdBlockLength>
 80064a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00f      	beq.n	80064c8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a0b      	ldr	r2, [pc, #44]	@ (80064dc <HAL_SD_InitCard+0x134>)
 80064ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	372c      	adds	r7, #44	@ 0x2c
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd90      	pop	{r4, r7, pc}
 80064d2:	bf00      	nop
 80064d4:	014f8b59 	.word	0x014f8b59
 80064d8:	00012110 	.word	0x00012110
 80064dc:	1fe00fff 	.word	0x1fe00fff

080064e0 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e011      	b.n	8006516 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fec0 	bl	8007280 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f80c 	bl	800651e <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_RESET;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_SD_MspDeInit>:
  * @brief  De-Initialize SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspDeInit(SD_HandleTypeDef *hsd)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspDeInit could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b092      	sub	sp, #72	@ 0x48
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006542:	f7fb f86b 	bl	800161c <HAL_GetTick>
 8006546:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d107      	bne.n	8006566 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e167      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b01      	cmp	r3, #1
 8006570:	f040 815a 	bne.w	8006828 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800657a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006584:	429a      	cmp	r2, r3
 8006586:	d907      	bls.n	8006598 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e14e      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2203      	movs	r2, #3
 800659c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2200      	movs	r2, #0
 80065a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d002      	beq.n	80065b6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	025b      	lsls	r3, r3, #9
 80065b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065b6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	025b      	lsls	r3, r3, #9
 80065c0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80065c2:	2390      	movs	r3, #144	@ 0x90
 80065c4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065c6:	2302      	movs	r3, #2
 80065c8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f107 0214 	add.w	r2, r7, #20
 80065da:	4611      	mov	r1, r2
 80065dc:	4618      	mov	r0, r3
 80065de:	f002 ff51 	bl	8009484 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065f0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d90a      	bls.n	800660e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2202      	movs	r2, #2
 80065fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006604:	4618      	mov	r0, r3
 8006606:	f002 ffaf 	bl	8009568 <SDMMC_CmdReadMultiBlock>
 800660a:	6478      	str	r0, [r7, #68]	@ 0x44
 800660c:	e009      	b.n	8006622 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800661a:	4618      	mov	r0, r3
 800661c:	f002 ff81 	bl	8009522 <SDMMC_CmdReadSingleBlock>
 8006620:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006624:	2b00      	cmp	r3, #0
 8006626:	d012      	beq.n	800664e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a84      	ldr	r2, [pc, #528]	@ (8006840 <HAL_SD_ReadBlocks+0x30c>)
 800662e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006636:	431a      	orrs	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e0f3      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006652:	e058      	b.n	8006706 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d033      	beq.n	80066ca <HAL_SD_ReadBlocks+0x196>
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	2b1f      	cmp	r3, #31
 8006666:	d930      	bls.n	80066ca <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8006668:	2300      	movs	r3, #0
 800666a:	643b      	str	r3, [r7, #64]	@ 0x40
 800666c:	e027      	b.n	80066be <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f002 fe7e 	bl	8009374 <SDMMC_ReadFIFO>
 8006678:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006680:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006684:	3301      	adds	r3, #1
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b2da      	uxtb	r2, r3
 800668e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006690:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006694:	3301      	adds	r3, #1
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80066a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a4:	3301      	adds	r3, #1
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80066a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80066b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b4:	3301      	adds	r3, #1
 80066b6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80066b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ba:	3301      	adds	r3, #1
 80066bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c0:	2b07      	cmp	r3, #7
 80066c2:	d9d4      	bls.n	800666e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 80066c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c6:	3b20      	subs	r3, #32
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80066ca:	f7fa ffa7 	bl	800161c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d902      	bls.n	80066e0 <HAL_SD_ReadBlocks+0x1ac>
 80066da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d112      	bne.n	8006706 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a56      	ldr	r2, [pc, #344]	@ (8006840 <HAL_SD_ReadBlocks+0x30c>)
 80066e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e097      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800670c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006710:	2b00      	cmp	r3, #0
 8006712:	d09f      	beq.n	8006654 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006722:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d022      	beq.n	8006778 <HAL_SD_ReadBlocks+0x244>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d91f      	bls.n	8006778 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	2b03      	cmp	r3, #3
 800673e:	d01b      	beq.n	8006778 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f002 ff33 	bl	80095b0 <SDMMC_CmdStopTransfer>
 800674a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800674c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800674e:	2b00      	cmp	r3, #0
 8006750:	d012      	beq.n	8006778 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a3a      	ldr	r2, [pc, #232]	@ (8006840 <HAL_SD_ReadBlocks+0x30c>)
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800675e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e05e      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d012      	beq.n	80067ac <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2d      	ldr	r2, [pc, #180]	@ (8006840 <HAL_SD_ReadBlocks+0x30c>)
 800678c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006792:	f043 0208 	orr.w	r2, r3, #8
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e044      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d012      	beq.n	80067e0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a20      	ldr	r2, [pc, #128]	@ (8006840 <HAL_SD_ReadBlocks+0x30c>)
 80067c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c6:	f043 0202 	orr.w	r2, r3, #2
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e02a      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d012      	beq.n	8006814 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a13      	ldr	r2, [pc, #76]	@ (8006840 <HAL_SD_ReadBlocks+0x30c>)
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fa:	f043 0220 	orr.w	r2, r3, #32
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e010      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a0a      	ldr	r2, [pc, #40]	@ (8006844 <HAL_SD_ReadBlocks+0x310>)
 800681a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	e006      	b.n	8006836 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3748      	adds	r7, #72	@ 0x48
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	1fe00fff 	.word	0x1fe00fff
 8006844:	18000f3a 	.word	0x18000f3a

08006848 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006856:	0f9b      	lsrs	r3, r3, #30
 8006858:	b2da      	uxtb	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006862:	0e9b      	lsrs	r3, r3, #26
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	b2da      	uxtb	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006874:	0e1b      	lsrs	r3, r3, #24
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	b2da      	uxtb	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006886:	0c1b      	lsrs	r3, r3, #16
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	b2da      	uxtb	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a8:	0d1b      	lsrs	r3, r3, #20
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c6:	0bdb      	lsrs	r3, r3, #15
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d8:	0b9b      	lsrs	r3, r3, #14
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ea:	0b5b      	lsrs	r3, r3, #13
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fc:	0b1b      	lsrs	r3, r3, #12
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2200      	movs	r2, #0
 800690e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d163      	bne.n	80069e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691c:	009a      	lsls	r2, r3, #2
 800691e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006922:	4013      	ands	r3, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006928:	0f92      	lsrs	r2, r2, #30
 800692a:	431a      	orrs	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006934:	0edb      	lsrs	r3, r3, #27
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	b2da      	uxtb	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006946:	0e1b      	lsrs	r3, r3, #24
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	b2da      	uxtb	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006958:	0d5b      	lsrs	r3, r3, #21
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	b2da      	uxtb	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800696a:	0c9b      	lsrs	r3, r3, #18
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	b2da      	uxtb	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800697c:	0bdb      	lsrs	r3, r3, #15
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	b2da      	uxtb	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	7e1b      	ldrb	r3, [r3, #24]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	3302      	adds	r3, #2
 80069a0:	2201      	movs	r2, #1
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069aa:	fb03 f202 	mul.w	r2, r3, r2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	7a1b      	ldrb	r3, [r3, #8]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	2201      	movs	r2, #1
 80069be:	409a      	lsls	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80069cc:	0a52      	lsrs	r2, r2, #9
 80069ce:	fb03 f202 	mul.w	r2, r3, r2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80069de:	e031      	b.n	8006a44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d11d      	bne.n	8006a24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	431a      	orrs	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	029a      	lsls	r2, r3, #10
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a18:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a22:	e00f      	b.n	8006a44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a58      	ldr	r2, [pc, #352]	@ (8006b8c <HAL_SD_GetCardCSD+0x344>)
 8006a2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e09d      	b.n	8006b80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a48:	0b9b      	lsrs	r3, r3, #14
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a5a:	09db      	lsrs	r3, r3, #7
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a7c:	0fdb      	lsrs	r3, r3, #31
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a88:	0f5b      	lsrs	r3, r3, #29
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a9a:	0e9b      	lsrs	r3, r3, #26
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aac:	0d9b      	lsrs	r3, r3, #22
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006abe:	0d5b      	lsrs	r3, r3, #21
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ada:	0c1b      	lsrs	r3, r3, #16
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aee:	0bdb      	lsrs	r3, r3, #15
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b02:	0b9b      	lsrs	r3, r3, #14
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b2a:	0b1b      	lsrs	r3, r3, #12
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b3e:	0a9b      	lsrs	r3, r3, #10
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	1fe00fff 	.word	0x1fe00fff

08006b90 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b094      	sub	sp, #80	@ 0x50
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d101      	bne.n	8006bb0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0a7      	b.n	8006d00 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006bb0:	f107 0308 	add.w	r3, r7, #8
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fb70 	bl	800729c <SD_SendSDStatus>
 8006bbc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d011      	beq.n	8006be8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8006d08 <HAL_SD_GetCardStatus+0x178>)
 8006bca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006be6:	e070      	b.n	8006cca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	0e1b      	lsrs	r3, r3, #24
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	061a      	lsls	r2, r3, #24
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006c38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	0d1b      	lsrs	r3, r3, #20
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	0a9b      	lsrs	r3, r3, #10
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	0e1b      	lsrs	r3, r3, #24
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f002 fc02 	bl	80094dc <SDMMC_CmdBlockLength>
 8006cd8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a08      	ldr	r2, [pc, #32]	@ (8006d08 <HAL_SD_GetCardStatus+0x178>)
 8006ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cec:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8006cfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3750      	adds	r7, #80	@ 0x50
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	1fe00fff 	.word	0x1fe00fff

08006d0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b08d      	sub	sp, #52	@ 0x34
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2203      	movs	r2, #3
 8006d78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d02e      	beq.n	8006de2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d8a:	d106      	bne.n	8006d9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d98:	e029      	b.n	8006dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da0:	d10a      	bne.n	8006db8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fb72 	bl	800748c <SD_WideBus_Enable>
 8006da8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006db6:	e01a      	b.n	8006dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fbaf 	bl	8007522 <SD_WideBus_Disable>
 8006dc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dd2:	e00c      	b.n	8006dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	635a      	str	r2, [r3, #52]	@ 0x34
 8006de0:	e005      	b.n	8006dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8006f78 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e04:	e096      	b.n	8006f34 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006e06:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	f7fd ff53 	bl	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e12:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8083 	beq.w	8006f22 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4950      	ldr	r1, [pc, #320]	@ (8006f7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8006e3e:	0e1b      	lsrs	r3, r3, #24
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d303      	bcc.n	8006e4c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e05a      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e54:	d103      	bne.n	8006e5e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e051      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e66:	d126      	bne.n	8006eb6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10e      	bne.n	8006e8e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4a43      	ldr	r2, [pc, #268]	@ (8006f80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d906      	bls.n	8006e86 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4a40      	ldr	r2, [pc, #256]	@ (8006f7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	0e5b      	lsrs	r3, r3, #25
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	e03d      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	e039      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	4a39      	ldr	r2, [pc, #228]	@ (8006f80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d906      	bls.n	8006eae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4a36      	ldr	r2, [pc, #216]	@ (8006f7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea8:	0e5b      	lsrs	r3, r3, #25
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e029      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	e025      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10e      	bne.n	8006edc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4a30      	ldr	r2, [pc, #192]	@ (8006f84 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d906      	bls.n	8006ed4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	e016      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	e012      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	4a26      	ldr	r2, [pc, #152]	@ (8006f84 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d906      	bls.n	8006efc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	@ (8006f7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	0e1b      	lsrs	r3, r3, #24
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	e002      	b.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681c      	ldr	r4, [r3, #0]
 8006f06:	466a      	mov	r2, sp
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f10:	e882 0003 	stmia.w	r2, {r0, r1}
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f002 fa00 	bl	8009320 <SDMMC_Init>
 8006f20:	e008      	b.n	8006f34 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f26:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 facd 	bl	80094dc <SDMMC_CmdBlockLength>
 8006f42:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f78 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8006f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	372c      	adds	r7, #44	@ 0x2c
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd90      	pop	{r4, r7, pc}
 8006f78:	1fe00fff 	.word	0x1fe00fff
 8006f7c:	55e63b89 	.word	0x55e63b89
 8006f80:	02faf080 	.word	0x02faf080
 8006f84:	017d7840 	.word	0x017d7840

08006f88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006f94:	f107 030c 	add.w	r3, r7, #12
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa4e 	bl	800743c <SD_SendStatus>
 8006fa0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0a5b      	lsrs	r3, r3, #9
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006fbe:	693b      	ldr	r3, [r7, #16]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b090      	sub	sp, #64	@ 0x40
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006fd4:	f7fa fb22 	bl	800161c <HAL_GetTick>
 8006fd8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 f9f7 	bl	80093d2 <SDMMC_GetPowerState>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006fee:	e0b5      	b.n	800715c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d02e      	beq.n	8007056 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f002 fbfc 	bl	80097fa <SDMMC_CmdSendCID>
 8007002:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <SD_InitCard+0x46>
    {
      return errorstate;
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	e0a6      	b.n	800715c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f002 fa22 	bl	800945e <SDMMC_GetResponse>
 800701a:	4602      	mov	r2, r0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2104      	movs	r1, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f002 fa19 	bl	800945e <SDMMC_GetResponse>
 800702c:	4602      	mov	r2, r0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2108      	movs	r1, #8
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fa10 	bl	800945e <SDMMC_GetResponse>
 800703e:	4602      	mov	r2, r0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	210c      	movs	r1, #12
 800704a:	4618      	mov	r0, r3
 800704c:	f002 fa07 	bl	800945e <SDMMC_GetResponse>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	2b03      	cmp	r3, #3
 800705c:	d01d      	beq.n	800709a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800705e:	e019      	b.n	8007094 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f107 020a 	add.w	r2, r7, #10
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f002 fc04 	bl	8009878 <SDMMC_CmdSetRelAdd>
 8007070:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <SD_InitCard+0xb4>
      {
        return errorstate;
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	e06f      	b.n	800715c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800707c:	f7fa face 	bl	800161c <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3287 	movw	r2, #4999	@ 0x1387
 800708a:	4293      	cmp	r3, r2
 800708c:	d902      	bls.n	8007094 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800708e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007092:	e063      	b.n	800715c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007094:	897b      	ldrh	r3, [r7, #10]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0e2      	beq.n	8007060 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d036      	beq.n	8007110 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80070a2:	897b      	ldrh	r3, [r7, #10]
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f002 fbbe 	bl	8009838 <SDMMC_CmdSendCSD>
 80070bc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <SD_InitCard+0x100>
    {
      return errorstate;
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	e049      	b.n	800715c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 f9c5 	bl	800945e <SDMMC_GetResponse>
 80070d4:	4602      	mov	r2, r0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2104      	movs	r1, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f002 f9bc 	bl	800945e <SDMMC_GetResponse>
 80070e6:	4602      	mov	r2, r0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2108      	movs	r1, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 f9b3 	bl	800945e <SDMMC_GetResponse>
 80070f8:	4602      	mov	r2, r0
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	210c      	movs	r1, #12
 8007104:	4618      	mov	r0, r3
 8007106:	f002 f9aa 	bl	800945e <SDMMC_GetResponse>
 800710a:	4602      	mov	r2, r0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2104      	movs	r1, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f002 f9a1 	bl	800945e <SDMMC_GetResponse>
 800711c:	4603      	mov	r3, r0
 800711e:	0d1a      	lsrs	r2, r3, #20
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007124:	f107 030c 	add.w	r3, r7, #12
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fb8c 	bl	8006848 <HAL_SD_GetCardCSD>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007136:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800713a:	e00f      	b.n	800715c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f002 fa6d 	bl	8009628 <SDMMC_CmdSelDesel>
 800714e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <SD_InitCard+0x192>
  {
    return errorstate;
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	e000      	b.n	800715c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3740      	adds	r7, #64	@ 0x40
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f002 fa76 	bl	800966e <SDMMC_CmdGoIdleState>
 8007182:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <SD_PowerON+0x2a>
  {
    return errorstate;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	e072      	b.n	8007274 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f002 fa89 	bl	80096aa <SDMMC_CmdOperCond>
 8007198:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071a0:	d10d      	bne.n	80071be <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 fa5e 	bl	800966e <SDMMC_CmdGoIdleState>
 80071b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <SD_PowerON+0x60>
    {
      return errorstate;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	e05a      	b.n	8007274 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d137      	bne.n	800723c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f002 fa89 	bl	80096ea <SDMMC_CmdAppCommand>
 80071d8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02d      	beq.n	800723c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80071e4:	e046      	b.n	8007274 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f002 fa7c 	bl	80096ea <SDMMC_CmdAppCommand>
 80071f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <SD_PowerON+0x9a>
    {
      return errorstate;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	e03a      	b.n	8007274 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	491e      	ldr	r1, [pc, #120]	@ (800727c <SD_PowerON+0x118>)
 8007204:	4618      	mov	r0, r3
 8007206:	f002 fa93 	bl	8009730 <SDMMC_CmdAppOperCommand>
 800720a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007212:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007216:	e02d      	b.n	8007274 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f002 f91d 	bl	800945e <SDMMC_GetResponse>
 8007224:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	0fdb      	lsrs	r3, r3, #31
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <SD_PowerON+0xce>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <SD_PowerON+0xd0>
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]

    count++;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	3301      	adds	r3, #1
 800723a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007242:	4293      	cmp	r3, r2
 8007244:	d802      	bhi.n	800724c <SD_PowerON+0xe8>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0cc      	beq.n	80071e6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007252:	4293      	cmp	r3, r2
 8007254:	d902      	bls.n	800725c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800725a:	e00b      	b.n	8007274 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	c1100000 	.word	0xc1100000

08007280 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f002 f88f 	bl	80093b0 <SDMMC_PowerState_OFF>
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08c      	sub	sp, #48	@ 0x30
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072a6:	f7fa f9b9 	bl	800161c <HAL_GetTick>
 80072aa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f002 f8d1 	bl	800945e <SDMMC_GetResponse>
 80072bc:	4603      	mov	r3, r0
 80072be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072c6:	d102      	bne.n	80072ce <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072cc:	e0b0      	b.n	8007430 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2140      	movs	r1, #64	@ 0x40
 80072d4:	4618      	mov	r0, r3
 80072d6:	f002 f901 	bl	80094dc <SDMMC_CmdBlockLength>
 80072da:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	e0a0      	b.n	8007430 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	4619      	mov	r1, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	f002 f9f5 	bl	80096ea <SDMMC_CmdAppCommand>
 8007300:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	e08d      	b.n	8007430 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800731a:	2340      	movs	r3, #64	@ 0x40
 800731c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800731e:	2360      	movs	r3, #96	@ 0x60
 8007320:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007322:	2302      	movs	r3, #2
 8007324:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007326:	2300      	movs	r3, #0
 8007328:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800732a:	2301      	movs	r3, #1
 800732c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f107 0208 	add.w	r2, r7, #8
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f002 f8a3 	bl	8009484 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f002 fadd 	bl	8009902 <SDMMC_CmdStatusRegister>
 8007348:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d02b      	beq.n	80073a8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	e069      	b.n	8007430 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007362:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d013      	beq.n	8007392 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800736a:	2300      	movs	r3, #0
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800736e:	e00d      	b.n	800738c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fffd 	bl	8009374 <SDMMC_ReadFIFO>
 800737a:	4602      	mov	r2, r0
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	601a      	str	r2, [r3, #0]
        pData++;
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	3304      	adds	r3, #4
 8007384:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007388:	3301      	adds	r3, #1
 800738a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800738c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738e:	2b07      	cmp	r3, #7
 8007390:	d9ee      	bls.n	8007370 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007392:	f7fa f943 	bl	800161c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d102      	bne.n	80073a8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80073a6:	e043      	b.n	8007430 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ae:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0d2      	beq.n	800735c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80073c4:	2308      	movs	r3, #8
 80073c6:	e033      	b.n	8007430 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80073d6:	2302      	movs	r3, #2
 80073d8:	e02a      	b.n	8007430 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d017      	beq.n	8007418 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80073e8:	2320      	movs	r3, #32
 80073ea:	e021      	b.n	8007430 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 ffbf 	bl	8009374 <SDMMC_ReadFIFO>
 80073f6:	4602      	mov	r2, r0
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	601a      	str	r2, [r3, #0]
    pData++;
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	3304      	adds	r3, #4
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007402:	f7fa f90b 	bl	800161c <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d102      	bne.n	8007418 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007412:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007416:	e00b      	b.n	8007430 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e2      	bne.n	80073ec <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a03      	ldr	r2, [pc, #12]	@ (8007438 <SD_SendSDStatus+0x19c>)
 800742c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3730      	adds	r7, #48	@ 0x30
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	18000f3a 	.word	0x18000f3a

0800743c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800744c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007450:	e018      	b.n	8007484 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f002 fa2c 	bl	80098bc <SDMMC_CmdSendStatus>
 8007464:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <SD_SendStatus+0x34>
  {
    return errorstate;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	e009      	b.n	8007484 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fff1 	bl	800945e <SDMMC_GetResponse>
 800747c:	4602      	mov	r2, r0
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 ffdb 	bl	800945e <SDMMC_GetResponse>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b2:	d102      	bne.n	80074ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80074b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80074b8:	e02f      	b.n	800751a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f879 	bl	80075b8 <SD_FindSCR>
 80074c6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	e023      	b.n	800751a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01c      	beq.n	8007516 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f002 f8fe 	bl	80096ea <SDMMC_CmdAppCommand>
 80074ee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	e00f      	b.n	800751a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2102      	movs	r1, #2
 8007500:	4618      	mov	r0, r3
 8007502:	f002 f935 	bl	8009770 <SDMMC_CmdBusWidth>
 8007506:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	e003      	b.n	800751a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007512:	2300      	movs	r3, #0
 8007514:	e001      	b.n	800751a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007516:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	2300      	movs	r3, #0
 8007530:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f001 ff90 	bl	800945e <SDMMC_GetResponse>
 800753e:	4603      	mov	r3, r0
 8007540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007548:	d102      	bne.n	8007550 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800754a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800754e:	e02f      	b.n	80075b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007550:	f107 030c 	add.w	r3, r7, #12
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f82e 	bl	80075b8 <SD_FindSCR>
 800755c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	e023      	b.n	80075b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01c      	beq.n	80075ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757a:	041b      	lsls	r3, r3, #16
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f002 f8b3 	bl	80096ea <SDMMC_CmdAppCommand>
 8007584:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	e00f      	b.n	80075b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f002 f8ea 	bl	8009770 <SDMMC_CmdBusWidth>
 800759c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	e003      	b.n	80075b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	e001      	b.n	80075b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	@ 0x38
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80075c2:	f7fa f82b 	bl	800161c <HAL_GetTick>
 80075c6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80075cc:	2300      	movs	r3, #0
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2108      	movs	r1, #8
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 ff7c 	bl	80094dc <SDMMC_CmdBlockLength>
 80075e4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80075ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ee:	e0ad      	b.n	800774c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f002 f874 	bl	80096ea <SDMMC_CmdAppCommand>
 8007602:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <SD_FindSCR+0x56>
  {
    return errorstate;
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	e09e      	b.n	800774c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800760e:	f04f 33ff 	mov.w	r3, #4294967295
 8007612:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007614:	2308      	movs	r3, #8
 8007616:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007618:	2330      	movs	r3, #48	@ 0x30
 800761a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800761c:	2302      	movs	r3, #2
 800761e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007620:	2300      	movs	r3, #0
 8007622:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007624:	2301      	movs	r3, #1
 8007626:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f107 0210 	add.w	r2, r7, #16
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f001 ff26 	bl	8009484 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f002 f8ba 	bl	80097b6 <SDMMC_CmdSendSCR>
 8007642:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	d027      	beq.n	800769a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	e07e      	b.n	800774c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007654:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d113      	bne.n	8007684 <SD_FindSCR+0xcc>
 800765c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d110      	bne.n	8007684 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f001 fe84 	bl	8009374 <SDMMC_ReadFIFO>
 800766c:	4603      	mov	r3, r0
 800766e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fe7d 	bl	8009374 <SDMMC_ReadFIFO>
 800767a:	4603      	mov	r3, r0
 800767c:	60fb      	str	r3, [r7, #12]
      index++;
 800767e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007680:	3301      	adds	r3, #1
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007684:	f7f9 ffca 	bl	800161c <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d102      	bne.n	800769a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007694:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007698:	e058      	b.n	800774c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076a0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0d1      	beq.n	800764e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2208      	movs	r2, #8
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80076c0:	2308      	movs	r3, #8
 80076c2:	e043      	b.n	800774c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2202      	movs	r2, #2
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80076da:	2302      	movs	r3, #2
 80076dc:	e036      	b.n	800774c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2220      	movs	r2, #32
 80076f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80076f4:	2320      	movs	r3, #32
 80076f6:	e029      	b.n	800774c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a15      	ldr	r2, [pc, #84]	@ (8007754 <SD_FindSCR+0x19c>)
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	061a      	lsls	r2, r3, #24
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800770c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007716:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0e1b      	lsrs	r3, r3, #24
 800771c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007720:	601a      	str	r2, [r3, #0]
    scr++;
 8007722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007724:	3304      	adds	r3, #4
 8007726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	061a      	lsls	r2, r3, #24
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007734:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800773e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	0e1b      	lsrs	r3, r3, #24
 8007744:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8007746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007748:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3738      	adds	r7, #56	@ 0x38
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	18000f3a 	.word	0x18000f3a

08007758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e042      	b.n	80077f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7f9 fe17 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2224      	movs	r2, #36	@ 0x24
 8007786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fa14 	bl	8008bd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fca9 	bl	8008100 <UART_SetConfig>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e01b      	b.n	80077f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fa93 	bl	8008d14 <UART_CheckIdleState>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780e:	2b20      	cmp	r3, #32
 8007810:	d17b      	bne.n	800790a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_UART_Transmit+0x26>
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e074      	b.n	800790c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2221      	movs	r2, #33	@ 0x21
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007832:	f7f9 fef3 	bl	800161c <HAL_GetTick>
 8007836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007850:	d108      	bne.n	8007864 <HAL_UART_Transmit+0x6c>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	e003      	b.n	800786c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800786c:	e030      	b.n	80078d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2200      	movs	r2, #0
 8007876:	2180      	movs	r1, #128	@ 0x80
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f001 faf5 	bl	8008e68 <UART_WaitOnFlagUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e03d      	b.n	800790c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10b      	bne.n	80078ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	3302      	adds	r3, #2
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e007      	b.n	80078be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1c8      	bne.n	800786e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2140      	movs	r1, #64	@ 0x40
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 fabe 	bl	8008e68 <UART_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e006      	b.n	800790c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800790a:	2302      	movs	r3, #2
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b0ba      	sub	sp, #232	@ 0xe8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800793a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800793e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007942:	4013      	ands	r3, r2
 8007944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11b      	bne.n	8007988 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d015      	beq.n	8007988 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800795c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d105      	bne.n	8007974 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800796c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8393 	beq.w	80080a4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
      }
      return;
 8007986:	e38d      	b.n	80080a4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8123 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007992:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007996:	4b8d      	ldr	r3, [pc, #564]	@ (8007bcc <HAL_UART_IRQHandler+0x2b8>)
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800799e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80079a2:	4b8b      	ldr	r3, [pc, #556]	@ (8007bd0 <HAL_UART_IRQHandler+0x2bc>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8116 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d011      	beq.n	80079dc <HAL_UART_IRQHandler+0xc8>
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2201      	movs	r2, #1
 80079ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d2:	f043 0201 	orr.w	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d011      	beq.n	8007a0c <HAL_UART_IRQHandler+0xf8>
 80079e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2202      	movs	r2, #2
 80079fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a02:	f043 0204 	orr.w	r2, r3, #4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d011      	beq.n	8007a3c <HAL_UART_IRQHandler+0x128>
 8007a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a32:	f043 0202 	orr.w	r2, r3, #2
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d017      	beq.n	8007a78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a58:	4b5c      	ldr	r3, [pc, #368]	@ (8007bcc <HAL_UART_IRQHandler+0x2b8>)
 8007a5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2208      	movs	r2, #8
 8007a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6e:	f043 0208 	orr.w	r2, r3, #8
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d012      	beq.n	8007aaa <HAL_UART_IRQHandler+0x196>
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00c      	beq.n	8007aaa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa0:	f043 0220 	orr.w	r2, r3, #32
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 82f9 	beq.w	80080a8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d013      	beq.n	8007aea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b40      	cmp	r3, #64	@ 0x40
 8007b00:	d005      	beq.n	8007b0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d054      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fa18 	bl	8008f44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1e:	2b40      	cmp	r3, #64	@ 0x40
 8007b20:	d146      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1d9      	bne.n	8007b22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7e:	4a15      	ldr	r2, [pc, #84]	@ (8007bd4 <HAL_UART_IRQHandler+0x2c0>)
 8007b80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fa fa05 	bl	8001f98 <HAL_DMA_Abort_IT>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d019      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba6:	e00f      	b.n	8007bc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fa93 	bl	80080d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bae:	e00b      	b.n	8007bc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fa8f 	bl	80080d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb6:	e007      	b.n	8007bc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fa8b 	bl	80080d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007bc6:	e26f      	b.n	80080a8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	bf00      	nop
    return;
 8007bca:	e26d      	b.n	80080a8 <HAL_UART_IRQHandler+0x794>
 8007bcc:	10000001 	.word	0x10000001
 8007bd0:	04000120 	.word	0x04000120
 8007bd4:	08009011 	.word	0x08009011

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	f040 8203 	bne.w	8007fe8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 81fc 	beq.w	8007fe8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 81f5 	beq.w	8007fe8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2210      	movs	r2, #16
 8007c04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c10:	2b40      	cmp	r3, #64	@ 0x40
 8007c12:	f040 816d 	bne.w	8007ef0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4aa4      	ldr	r2, [pc, #656]	@ (8007eb0 <HAL_UART_IRQHandler+0x59c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d068      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4aa1      	ldr	r2, [pc, #644]	@ (8007eb4 <HAL_UART_IRQHandler+0x5a0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d061      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a9f      	ldr	r2, [pc, #636]	@ (8007eb8 <HAL_UART_IRQHandler+0x5a4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d05a      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a9c      	ldr	r2, [pc, #624]	@ (8007ebc <HAL_UART_IRQHandler+0x5a8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d053      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a9a      	ldr	r2, [pc, #616]	@ (8007ec0 <HAL_UART_IRQHandler+0x5ac>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d04c      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a97      	ldr	r2, [pc, #604]	@ (8007ec4 <HAL_UART_IRQHandler+0x5b0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d045      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a95      	ldr	r2, [pc, #596]	@ (8007ec8 <HAL_UART_IRQHandler+0x5b4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d03e      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a92      	ldr	r2, [pc, #584]	@ (8007ecc <HAL_UART_IRQHandler+0x5b8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d037      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a90      	ldr	r2, [pc, #576]	@ (8007ed0 <HAL_UART_IRQHandler+0x5bc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d030      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a8d      	ldr	r2, [pc, #564]	@ (8007ed4 <HAL_UART_IRQHandler+0x5c0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d029      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a8b      	ldr	r2, [pc, #556]	@ (8007ed8 <HAL_UART_IRQHandler+0x5c4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a88      	ldr	r2, [pc, #544]	@ (8007edc <HAL_UART_IRQHandler+0x5c8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01b      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a86      	ldr	r2, [pc, #536]	@ (8007ee0 <HAL_UART_IRQHandler+0x5cc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d014      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a83      	ldr	r2, [pc, #524]	@ (8007ee4 <HAL_UART_IRQHandler+0x5d0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00d      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a81      	ldr	r2, [pc, #516]	@ (8007ee8 <HAL_UART_IRQHandler+0x5d4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d006      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x3e2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7e      	ldr	r2, [pc, #504]	@ (8007eec <HAL_UART_IRQHandler+0x5d8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d106      	bne.n	8007d04 <HAL_UART_IRQHandler+0x3f0>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	e005      	b.n	8007d10 <HAL_UART_IRQHandler+0x3fc>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80ad 	beq.w	8007e78 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	f080 80a5 	bcs.w	8007e78 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d44:	f000 8087 	beq.w	8007e56 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1da      	bne.n	8007d48 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007db6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e1      	bne.n	8007d92 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3308      	adds	r3, #8
 8007dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e3      	bne.n	8007dce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e24:	f023 0310 	bic.w	r3, r3, #16
 8007e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e4      	bne.n	8007e14 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7f9 fd83 	bl	800195c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f939 	bl	80080e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007e76:	e119      	b.n	80080ac <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e82:	429a      	cmp	r2, r3
 8007e84:	f040 8112 	bne.w	80080ac <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e94:	f040 810a 	bne.w	80080ac <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f91e 	bl	80080e8 <HAL_UARTEx_RxEventCallback>
      return;
 8007eac:	e0fe      	b.n	80080ac <HAL_UART_IRQHandler+0x798>
 8007eae:	bf00      	nop
 8007eb0:	40020010 	.word	0x40020010
 8007eb4:	40020028 	.word	0x40020028
 8007eb8:	40020040 	.word	0x40020040
 8007ebc:	40020058 	.word	0x40020058
 8007ec0:	40020070 	.word	0x40020070
 8007ec4:	40020088 	.word	0x40020088
 8007ec8:	400200a0 	.word	0x400200a0
 8007ecc:	400200b8 	.word	0x400200b8
 8007ed0:	40020410 	.word	0x40020410
 8007ed4:	40020428 	.word	0x40020428
 8007ed8:	40020440 	.word	0x40020440
 8007edc:	40020458 	.word	0x40020458
 8007ee0:	40020470 	.word	0x40020470
 8007ee4:	40020488 	.word	0x40020488
 8007ee8:	400204a0 	.word	0x400204a0
 8007eec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 80cf 	beq.w	80080b0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007f12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 80ca 	beq.w	80080b0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e4      	bne.n	8007f1c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	623b      	str	r3, [r7, #32]
   return(result);
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	4b55      	ldr	r3, [pc, #340]	@ (80080bc <HAL_UART_IRQHandler+0x7a8>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e3      	bne.n	8007f52 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0310 	bic.w	r3, r3, #16
 8007fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e4      	bne.n	8007f9e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f881 	bl	80080e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fe6:	e063      	b.n	80080b0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00e      	beq.n	8008012 <HAL_UART_IRQHandler+0x6fe>
 8007ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f83d 	bl	800908a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008010:	e051      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801a:	2b00      	cmp	r3, #0
 800801c:	d014      	beq.n	8008048 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800801e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800802a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800802e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800803a:	2b00      	cmp	r3, #0
 800803c:	d03a      	beq.n	80080b4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
    }
    return;
 8008046:	e035      	b.n	80080b4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d009      	beq.n	8008068 <HAL_UART_IRQHandler+0x754>
 8008054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 ffe7 	bl	8009034 <UART_EndTransmit_IT>
    return;
 8008066:	e026      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d009      	beq.n	8008088 <HAL_UART_IRQHandler+0x774>
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008078:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f816 	bl	80090b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008086:	e016      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008098:	2b00      	cmp	r3, #0
 800809a:	da0c      	bge.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fffe 	bl	800909e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080a2:	e008      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80080a4:	bf00      	nop
 80080a6:	e006      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80080a8:	bf00      	nop
 80080aa:	e004      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80080ac:	bf00      	nop
 80080ae:	e002      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80080b4:	bf00      	nop
  }
}
 80080b6:	37e8      	adds	r7, #232	@ 0xe8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	effffffe 	.word	0xeffffffe

080080c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008104:	b092      	sub	sp, #72	@ 0x48
 8008106:	af00      	add	r7, sp, #0
 8008108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	431a      	orrs	r2, r3
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	431a      	orrs	r2, r3
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	4313      	orrs	r3, r2
 8008126:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4bbe      	ldr	r3, [pc, #760]	@ (8008428 <UART_SetConfig+0x328>)
 8008130:	4013      	ands	r3, r2
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	6812      	ldr	r2, [r2, #0]
 8008136:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008138:	430b      	orrs	r3, r1
 800813a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4ab3      	ldr	r2, [pc, #716]	@ (800842c <UART_SetConfig+0x32c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008168:	4313      	orrs	r3, r2
 800816a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	4baf      	ldr	r3, [pc, #700]	@ (8008430 <UART_SetConfig+0x330>)
 8008174:	4013      	ands	r3, r2
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800817c:	430b      	orrs	r3, r1
 800817e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	f023 010f 	bic.w	r1, r3, #15
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4aa6      	ldr	r2, [pc, #664]	@ (8008434 <UART_SetConfig+0x334>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d177      	bne.n	8008290 <UART_SetConfig+0x190>
 80081a0:	4ba5      	ldr	r3, [pc, #660]	@ (8008438 <UART_SetConfig+0x338>)
 80081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081a8:	2b28      	cmp	r3, #40	@ 0x28
 80081aa:	d86d      	bhi.n	8008288 <UART_SetConfig+0x188>
 80081ac:	a201      	add	r2, pc, #4	@ (adr r2, 80081b4 <UART_SetConfig+0xb4>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	08008259 	.word	0x08008259
 80081b8:	08008289 	.word	0x08008289
 80081bc:	08008289 	.word	0x08008289
 80081c0:	08008289 	.word	0x08008289
 80081c4:	08008289 	.word	0x08008289
 80081c8:	08008289 	.word	0x08008289
 80081cc:	08008289 	.word	0x08008289
 80081d0:	08008289 	.word	0x08008289
 80081d4:	08008261 	.word	0x08008261
 80081d8:	08008289 	.word	0x08008289
 80081dc:	08008289 	.word	0x08008289
 80081e0:	08008289 	.word	0x08008289
 80081e4:	08008289 	.word	0x08008289
 80081e8:	08008289 	.word	0x08008289
 80081ec:	08008289 	.word	0x08008289
 80081f0:	08008289 	.word	0x08008289
 80081f4:	08008269 	.word	0x08008269
 80081f8:	08008289 	.word	0x08008289
 80081fc:	08008289 	.word	0x08008289
 8008200:	08008289 	.word	0x08008289
 8008204:	08008289 	.word	0x08008289
 8008208:	08008289 	.word	0x08008289
 800820c:	08008289 	.word	0x08008289
 8008210:	08008289 	.word	0x08008289
 8008214:	08008271 	.word	0x08008271
 8008218:	08008289 	.word	0x08008289
 800821c:	08008289 	.word	0x08008289
 8008220:	08008289 	.word	0x08008289
 8008224:	08008289 	.word	0x08008289
 8008228:	08008289 	.word	0x08008289
 800822c:	08008289 	.word	0x08008289
 8008230:	08008289 	.word	0x08008289
 8008234:	08008279 	.word	0x08008279
 8008238:	08008289 	.word	0x08008289
 800823c:	08008289 	.word	0x08008289
 8008240:	08008289 	.word	0x08008289
 8008244:	08008289 	.word	0x08008289
 8008248:	08008289 	.word	0x08008289
 800824c:	08008289 	.word	0x08008289
 8008250:	08008289 	.word	0x08008289
 8008254:	08008281 	.word	0x08008281
 8008258:	2301      	movs	r3, #1
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e222      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008260:	2304      	movs	r3, #4
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e21e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008268:	2308      	movs	r3, #8
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e21a      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008270:	2310      	movs	r3, #16
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e216      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008278:	2320      	movs	r3, #32
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e212      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008280:	2340      	movs	r3, #64	@ 0x40
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e20e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008288:	2380      	movs	r3, #128	@ 0x80
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e20a      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a69      	ldr	r2, [pc, #420]	@ (800843c <UART_SetConfig+0x33c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d130      	bne.n	80082fc <UART_SetConfig+0x1fc>
 800829a:	4b67      	ldr	r3, [pc, #412]	@ (8008438 <UART_SetConfig+0x338>)
 800829c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	2b05      	cmp	r3, #5
 80082a4:	d826      	bhi.n	80082f4 <UART_SetConfig+0x1f4>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <UART_SetConfig+0x1ac>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082c5 	.word	0x080082c5
 80082b0:	080082cd 	.word	0x080082cd
 80082b4:	080082d5 	.word	0x080082d5
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082ed 	.word	0x080082ed
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e1ec      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082cc:	2304      	movs	r3, #4
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e1e8      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082d4:	2308      	movs	r3, #8
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e1e4      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082dc:	2310      	movs	r3, #16
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e1e0      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082e4:	2320      	movs	r3, #32
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e1dc      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082ec:	2340      	movs	r3, #64	@ 0x40
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e1d8      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082f4:	2380      	movs	r3, #128	@ 0x80
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fa:	e1d4      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a4f      	ldr	r2, [pc, #316]	@ (8008440 <UART_SetConfig+0x340>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d130      	bne.n	8008368 <UART_SetConfig+0x268>
 8008306:	4b4c      	ldr	r3, [pc, #304]	@ (8008438 <UART_SetConfig+0x338>)
 8008308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	2b05      	cmp	r3, #5
 8008310:	d826      	bhi.n	8008360 <UART_SetConfig+0x260>
 8008312:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <UART_SetConfig+0x218>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008331 	.word	0x08008331
 800831c:	08008339 	.word	0x08008339
 8008320:	08008341 	.word	0x08008341
 8008324:	08008349 	.word	0x08008349
 8008328:	08008351 	.word	0x08008351
 800832c:	08008359 	.word	0x08008359
 8008330:	2300      	movs	r3, #0
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e1b6      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008338:	2304      	movs	r3, #4
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e1b2      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008340:	2308      	movs	r3, #8
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e1ae      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008348:	2310      	movs	r3, #16
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e1aa      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008350:	2320      	movs	r3, #32
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e1a6      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008358:	2340      	movs	r3, #64	@ 0x40
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e1a2      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008360:	2380      	movs	r3, #128	@ 0x80
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e19e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a35      	ldr	r2, [pc, #212]	@ (8008444 <UART_SetConfig+0x344>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d130      	bne.n	80083d4 <UART_SetConfig+0x2d4>
 8008372:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <UART_SetConfig+0x338>)
 8008374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b05      	cmp	r3, #5
 800837c:	d826      	bhi.n	80083cc <UART_SetConfig+0x2cc>
 800837e:	a201      	add	r2, pc, #4	@ (adr r2, 8008384 <UART_SetConfig+0x284>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	0800839d 	.word	0x0800839d
 8008388:	080083a5 	.word	0x080083a5
 800838c:	080083ad 	.word	0x080083ad
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083bd 	.word	0x080083bd
 8008398:	080083c5 	.word	0x080083c5
 800839c:	2300      	movs	r3, #0
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e180      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083a4:	2304      	movs	r3, #4
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e17c      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083ac:	2308      	movs	r3, #8
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e178      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083b4:	2310      	movs	r3, #16
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e174      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083bc:	2320      	movs	r3, #32
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e170      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083c4:	2340      	movs	r3, #64	@ 0x40
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ca:	e16c      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083cc:	2380      	movs	r3, #128	@ 0x80
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e168      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008448 <UART_SetConfig+0x348>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d142      	bne.n	8008464 <UART_SetConfig+0x364>
 80083de:	4b16      	ldr	r3, [pc, #88]	@ (8008438 <UART_SetConfig+0x338>)
 80083e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b05      	cmp	r3, #5
 80083e8:	d838      	bhi.n	800845c <UART_SetConfig+0x35c>
 80083ea:	a201      	add	r2, pc, #4	@ (adr r2, 80083f0 <UART_SetConfig+0x2f0>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008409 	.word	0x08008409
 80083f4:	08008411 	.word	0x08008411
 80083f8:	08008419 	.word	0x08008419
 80083fc:	08008421 	.word	0x08008421
 8008400:	0800844d 	.word	0x0800844d
 8008404:	08008455 	.word	0x08008455
 8008408:	2300      	movs	r3, #0
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e14a      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008410:	2304      	movs	r3, #4
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e146      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008418:	2308      	movs	r3, #8
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e142      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008420:	2310      	movs	r3, #16
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e13e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008428:	cfff69f3 	.word	0xcfff69f3
 800842c:	58000c00 	.word	0x58000c00
 8008430:	11fff4ff 	.word	0x11fff4ff
 8008434:	40011000 	.word	0x40011000
 8008438:	58024400 	.word	0x58024400
 800843c:	40004400 	.word	0x40004400
 8008440:	40004800 	.word	0x40004800
 8008444:	40004c00 	.word	0x40004c00
 8008448:	40005000 	.word	0x40005000
 800844c:	2320      	movs	r3, #32
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e128      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008454:	2340      	movs	r3, #64	@ 0x40
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e124      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800845c:	2380      	movs	r3, #128	@ 0x80
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e120      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4acb      	ldr	r2, [pc, #812]	@ (8008798 <UART_SetConfig+0x698>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d176      	bne.n	800855c <UART_SetConfig+0x45c>
 800846e:	4bcb      	ldr	r3, [pc, #812]	@ (800879c <UART_SetConfig+0x69c>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008476:	2b28      	cmp	r3, #40	@ 0x28
 8008478:	d86c      	bhi.n	8008554 <UART_SetConfig+0x454>
 800847a:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <UART_SetConfig+0x380>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008525 	.word	0x08008525
 8008484:	08008555 	.word	0x08008555
 8008488:	08008555 	.word	0x08008555
 800848c:	08008555 	.word	0x08008555
 8008490:	08008555 	.word	0x08008555
 8008494:	08008555 	.word	0x08008555
 8008498:	08008555 	.word	0x08008555
 800849c:	08008555 	.word	0x08008555
 80084a0:	0800852d 	.word	0x0800852d
 80084a4:	08008555 	.word	0x08008555
 80084a8:	08008555 	.word	0x08008555
 80084ac:	08008555 	.word	0x08008555
 80084b0:	08008555 	.word	0x08008555
 80084b4:	08008555 	.word	0x08008555
 80084b8:	08008555 	.word	0x08008555
 80084bc:	08008555 	.word	0x08008555
 80084c0:	08008535 	.word	0x08008535
 80084c4:	08008555 	.word	0x08008555
 80084c8:	08008555 	.word	0x08008555
 80084cc:	08008555 	.word	0x08008555
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008555 	.word	0x08008555
 80084d8:	08008555 	.word	0x08008555
 80084dc:	08008555 	.word	0x08008555
 80084e0:	0800853d 	.word	0x0800853d
 80084e4:	08008555 	.word	0x08008555
 80084e8:	08008555 	.word	0x08008555
 80084ec:	08008555 	.word	0x08008555
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008555 	.word	0x08008555
 80084f8:	08008555 	.word	0x08008555
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008545 	.word	0x08008545
 8008504:	08008555 	.word	0x08008555
 8008508:	08008555 	.word	0x08008555
 800850c:	08008555 	.word	0x08008555
 8008510:	08008555 	.word	0x08008555
 8008514:	08008555 	.word	0x08008555
 8008518:	08008555 	.word	0x08008555
 800851c:	08008555 	.word	0x08008555
 8008520:	0800854d 	.word	0x0800854d
 8008524:	2301      	movs	r3, #1
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e0bc      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800852c:	2304      	movs	r3, #4
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e0b8      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008534:	2308      	movs	r3, #8
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e0b4      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800853c:	2310      	movs	r3, #16
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e0b0      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008544:	2320      	movs	r3, #32
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e0ac      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800854c:	2340      	movs	r3, #64	@ 0x40
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e0a8      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008554:	2380      	movs	r3, #128	@ 0x80
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e0a4      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a8f      	ldr	r2, [pc, #572]	@ (80087a0 <UART_SetConfig+0x6a0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d130      	bne.n	80085c8 <UART_SetConfig+0x4c8>
 8008566:	4b8d      	ldr	r3, [pc, #564]	@ (800879c <UART_SetConfig+0x69c>)
 8008568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800856a:	f003 0307 	and.w	r3, r3, #7
 800856e:	2b05      	cmp	r3, #5
 8008570:	d826      	bhi.n	80085c0 <UART_SetConfig+0x4c0>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <UART_SetConfig+0x478>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008591 	.word	0x08008591
 800857c:	08008599 	.word	0x08008599
 8008580:	080085a1 	.word	0x080085a1
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085b1 	.word	0x080085b1
 800858c:	080085b9 	.word	0x080085b9
 8008590:	2300      	movs	r3, #0
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e086      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008598:	2304      	movs	r3, #4
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e082      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80085a0:	2308      	movs	r3, #8
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e07e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80085a8:	2310      	movs	r3, #16
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e07a      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80085b0:	2320      	movs	r3, #32
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e076      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80085b8:	2340      	movs	r3, #64	@ 0x40
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e072      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80085c0:	2380      	movs	r3, #128	@ 0x80
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c6:	e06e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a75      	ldr	r2, [pc, #468]	@ (80087a4 <UART_SetConfig+0x6a4>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d130      	bne.n	8008634 <UART_SetConfig+0x534>
 80085d2:	4b72      	ldr	r3, [pc, #456]	@ (800879c <UART_SetConfig+0x69c>)
 80085d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d826      	bhi.n	800862c <UART_SetConfig+0x52c>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <UART_SetConfig+0x4e4>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	080085fd 	.word	0x080085fd
 80085e8:	08008605 	.word	0x08008605
 80085ec:	0800860d 	.word	0x0800860d
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008625 	.word	0x08008625
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e050      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008604:	2304      	movs	r3, #4
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e04c      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800860c:	2308      	movs	r3, #8
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e048      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008614:	2310      	movs	r3, #16
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e044      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800861c:	2320      	movs	r3, #32
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e040      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008624:	2340      	movs	r3, #64	@ 0x40
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e03c      	b.n	80086a6 <UART_SetConfig+0x5a6>
 800862c:	2380      	movs	r3, #128	@ 0x80
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e038      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a5b      	ldr	r2, [pc, #364]	@ (80087a8 <UART_SetConfig+0x6a8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d130      	bne.n	80086a0 <UART_SetConfig+0x5a0>
 800863e:	4b57      	ldr	r3, [pc, #348]	@ (800879c <UART_SetConfig+0x69c>)
 8008640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b05      	cmp	r3, #5
 8008648:	d826      	bhi.n	8008698 <UART_SetConfig+0x598>
 800864a:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <UART_SetConfig+0x550>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008669 	.word	0x08008669
 8008654:	08008671 	.word	0x08008671
 8008658:	08008679 	.word	0x08008679
 800865c:	08008681 	.word	0x08008681
 8008660:	08008689 	.word	0x08008689
 8008664:	08008691 	.word	0x08008691
 8008668:	2302      	movs	r3, #2
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e01a      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008670:	2304      	movs	r3, #4
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e016      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008678:	2308      	movs	r3, #8
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e012      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008680:	2310      	movs	r3, #16
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e00e      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008688:	2320      	movs	r3, #32
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e00a      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008690:	2340      	movs	r3, #64	@ 0x40
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e006      	b.n	80086a6 <UART_SetConfig+0x5a6>
 8008698:	2380      	movs	r3, #128	@ 0x80
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e002      	b.n	80086a6 <UART_SetConfig+0x5a6>
 80086a0:	2380      	movs	r3, #128	@ 0x80
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a3f      	ldr	r2, [pc, #252]	@ (80087a8 <UART_SetConfig+0x6a8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	f040 80f8 	bne.w	80088a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	dc46      	bgt.n	8008748 <UART_SetConfig+0x648>
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	f2c0 8082 	blt.w	80087c4 <UART_SetConfig+0x6c4>
 80086c0:	3b02      	subs	r3, #2
 80086c2:	2b1e      	cmp	r3, #30
 80086c4:	d87e      	bhi.n	80087c4 <UART_SetConfig+0x6c4>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <UART_SetConfig+0x5cc>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	0800874f 	.word	0x0800874f
 80086d0:	080087c5 	.word	0x080087c5
 80086d4:	08008757 	.word	0x08008757
 80086d8:	080087c5 	.word	0x080087c5
 80086dc:	080087c5 	.word	0x080087c5
 80086e0:	080087c5 	.word	0x080087c5
 80086e4:	08008767 	.word	0x08008767
 80086e8:	080087c5 	.word	0x080087c5
 80086ec:	080087c5 	.word	0x080087c5
 80086f0:	080087c5 	.word	0x080087c5
 80086f4:	080087c5 	.word	0x080087c5
 80086f8:	080087c5 	.word	0x080087c5
 80086fc:	080087c5 	.word	0x080087c5
 8008700:	080087c5 	.word	0x080087c5
 8008704:	08008777 	.word	0x08008777
 8008708:	080087c5 	.word	0x080087c5
 800870c:	080087c5 	.word	0x080087c5
 8008710:	080087c5 	.word	0x080087c5
 8008714:	080087c5 	.word	0x080087c5
 8008718:	080087c5 	.word	0x080087c5
 800871c:	080087c5 	.word	0x080087c5
 8008720:	080087c5 	.word	0x080087c5
 8008724:	080087c5 	.word	0x080087c5
 8008728:	080087c5 	.word	0x080087c5
 800872c:	080087c5 	.word	0x080087c5
 8008730:	080087c5 	.word	0x080087c5
 8008734:	080087c5 	.word	0x080087c5
 8008738:	080087c5 	.word	0x080087c5
 800873c:	080087c5 	.word	0x080087c5
 8008740:	080087c5 	.word	0x080087c5
 8008744:	080087b7 	.word	0x080087b7
 8008748:	2b40      	cmp	r3, #64	@ 0x40
 800874a:	d037      	beq.n	80087bc <UART_SetConfig+0x6bc>
 800874c:	e03a      	b.n	80087c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800874e:	f7fd f833 	bl	80057b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008754:	e03c      	b.n	80087d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800875a:	4618      	mov	r0, r3
 800875c:	f7fd f842 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008764:	e034      	b.n	80087d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008766:	f107 0318 	add.w	r3, r7, #24
 800876a:	4618      	mov	r0, r3
 800876c:	f7fd f98e 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	e02c      	b.n	80087d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008776:	4b09      	ldr	r3, [pc, #36]	@ (800879c <UART_SetConfig+0x69c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d016      	beq.n	80087b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008782:	4b06      	ldr	r3, [pc, #24]	@ (800879c <UART_SetConfig+0x69c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	08db      	lsrs	r3, r3, #3
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	4a07      	ldr	r2, [pc, #28]	@ (80087ac <UART_SetConfig+0x6ac>)
 800878e:	fa22 f303 	lsr.w	r3, r2, r3
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008794:	e01c      	b.n	80087d0 <UART_SetConfig+0x6d0>
 8008796:	bf00      	nop
 8008798:	40011400 	.word	0x40011400
 800879c:	58024400 	.word	0x58024400
 80087a0:	40007800 	.word	0x40007800
 80087a4:	40007c00 	.word	0x40007c00
 80087a8:	58000c00 	.word	0x58000c00
 80087ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80087b0:	4b9d      	ldr	r3, [pc, #628]	@ (8008a28 <UART_SetConfig+0x928>)
 80087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b4:	e00c      	b.n	80087d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087b6:	4b9d      	ldr	r3, [pc, #628]	@ (8008a2c <UART_SetConfig+0x92c>)
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ba:	e009      	b.n	80087d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c2:	e005      	b.n	80087d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 81de 	beq.w	8008b94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087dc:	4a94      	ldr	r2, [pc, #592]	@ (8008a30 <UART_SetConfig+0x930>)
 80087de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	4613      	mov	r3, r2
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d305      	bcc.n	8008808 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008804:	429a      	cmp	r2, r3
 8008806:	d903      	bls.n	8008810 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800880e:	e1c1      	b.n	8008b94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008812:	2200      	movs	r2, #0
 8008814:	60bb      	str	r3, [r7, #8]
 8008816:	60fa      	str	r2, [r7, #12]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	4a84      	ldr	r2, [pc, #528]	@ (8008a30 <UART_SetConfig+0x930>)
 800881e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008822:	b29b      	uxth	r3, r3
 8008824:	2200      	movs	r2, #0
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008832:	f7f7 fdad 	bl	8000390 <__aeabi_uldivmod>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4610      	mov	r0, r2
 800883c:	4619      	mov	r1, r3
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	020b      	lsls	r3, r1, #8
 8008848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800884c:	0202      	lsls	r2, r0, #8
 800884e:	6979      	ldr	r1, [r7, #20]
 8008850:	6849      	ldr	r1, [r1, #4]
 8008852:	0849      	lsrs	r1, r1, #1
 8008854:	2000      	movs	r0, #0
 8008856:	460c      	mov	r4, r1
 8008858:	4605      	mov	r5, r0
 800885a:	eb12 0804 	adds.w	r8, r2, r4
 800885e:	eb43 0905 	adc.w	r9, r3, r5
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	469a      	mov	sl, r3
 800886a:	4693      	mov	fp, r2
 800886c:	4652      	mov	r2, sl
 800886e:	465b      	mov	r3, fp
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fd8c 	bl	8000390 <__aeabi_uldivmod>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4613      	mov	r3, r2
 800887e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008886:	d308      	bcc.n	800889a <UART_SetConfig+0x79a>
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800888e:	d204      	bcs.n	800889a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008896:	60da      	str	r2, [r3, #12]
 8008898:	e17c      	b.n	8008b94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088a0:	e178      	b.n	8008b94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088aa:	f040 80c5 	bne.w	8008a38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80088ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	dc48      	bgt.n	8008948 <UART_SetConfig+0x848>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	db7b      	blt.n	80089b2 <UART_SetConfig+0x8b2>
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d879      	bhi.n	80089b2 <UART_SetConfig+0x8b2>
 80088be:	a201      	add	r2, pc, #4	@ (adr r2, 80088c4 <UART_SetConfig+0x7c4>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	0800894f 	.word	0x0800894f
 80088c8:	08008957 	.word	0x08008957
 80088cc:	080089b3 	.word	0x080089b3
 80088d0:	080089b3 	.word	0x080089b3
 80088d4:	0800895f 	.word	0x0800895f
 80088d8:	080089b3 	.word	0x080089b3
 80088dc:	080089b3 	.word	0x080089b3
 80088e0:	080089b3 	.word	0x080089b3
 80088e4:	0800896f 	.word	0x0800896f
 80088e8:	080089b3 	.word	0x080089b3
 80088ec:	080089b3 	.word	0x080089b3
 80088f0:	080089b3 	.word	0x080089b3
 80088f4:	080089b3 	.word	0x080089b3
 80088f8:	080089b3 	.word	0x080089b3
 80088fc:	080089b3 	.word	0x080089b3
 8008900:	080089b3 	.word	0x080089b3
 8008904:	0800897f 	.word	0x0800897f
 8008908:	080089b3 	.word	0x080089b3
 800890c:	080089b3 	.word	0x080089b3
 8008910:	080089b3 	.word	0x080089b3
 8008914:	080089b3 	.word	0x080089b3
 8008918:	080089b3 	.word	0x080089b3
 800891c:	080089b3 	.word	0x080089b3
 8008920:	080089b3 	.word	0x080089b3
 8008924:	080089b3 	.word	0x080089b3
 8008928:	080089b3 	.word	0x080089b3
 800892c:	080089b3 	.word	0x080089b3
 8008930:	080089b3 	.word	0x080089b3
 8008934:	080089b3 	.word	0x080089b3
 8008938:	080089b3 	.word	0x080089b3
 800893c:	080089b3 	.word	0x080089b3
 8008940:	080089b3 	.word	0x080089b3
 8008944:	080089a5 	.word	0x080089a5
 8008948:	2b40      	cmp	r3, #64	@ 0x40
 800894a:	d02e      	beq.n	80089aa <UART_SetConfig+0x8aa>
 800894c:	e031      	b.n	80089b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800894e:	f7fa ff7d 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8008952:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008954:	e033      	b.n	80089be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008956:	f7fa ff8f 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 800895a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800895c:	e02f      	b.n	80089be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008962:	4618      	mov	r0, r3
 8008964:	f7fc ff3e 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896c:	e027      	b.n	80089be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800896e:	f107 0318 	add.w	r3, r7, #24
 8008972:	4618      	mov	r0, r3
 8008974:	f7fd f88a 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897c:	e01f      	b.n	80089be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800897e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a34 <UART_SetConfig+0x934>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0320 	and.w	r3, r3, #32
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800898a:	4b2a      	ldr	r3, [pc, #168]	@ (8008a34 <UART_SetConfig+0x934>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	08db      	lsrs	r3, r3, #3
 8008990:	f003 0303 	and.w	r3, r3, #3
 8008994:	4a24      	ldr	r2, [pc, #144]	@ (8008a28 <UART_SetConfig+0x928>)
 8008996:	fa22 f303 	lsr.w	r3, r2, r3
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800899c:	e00f      	b.n	80089be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800899e:	4b22      	ldr	r3, [pc, #136]	@ (8008a28 <UART_SetConfig+0x928>)
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a2:	e00c      	b.n	80089be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089a4:	4b21      	ldr	r3, [pc, #132]	@ (8008a2c <UART_SetConfig+0x92c>)
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	e009      	b.n	80089be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b0:	e005      	b.n	80089be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80e7 	beq.w	8008b94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ca:	4a19      	ldr	r2, [pc, #100]	@ (8008a30 <UART_SetConfig+0x930>)
 80089cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d8:	005a      	lsls	r2, r3, #1
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	441a      	add	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d916      	bls.n	8008a20 <UART_SetConfig+0x920>
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089f8:	d212      	bcs.n	8008a20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f023 030f 	bic.w	r3, r3, #15
 8008a02:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a12:	4313      	orrs	r3, r2
 8008a14:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	e0b9      	b.n	8008b94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a26:	e0b5      	b.n	8008b94 <UART_SetConfig+0xa94>
 8008a28:	03d09000 	.word	0x03d09000
 8008a2c:	003d0900 	.word	0x003d0900
 8008a30:	0800c834 	.word	0x0800c834
 8008a34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	dc49      	bgt.n	8008ad4 <UART_SetConfig+0x9d4>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	db7c      	blt.n	8008b3e <UART_SetConfig+0xa3e>
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d87a      	bhi.n	8008b3e <UART_SetConfig+0xa3e>
 8008a48:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <UART_SetConfig+0x950>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008adb 	.word	0x08008adb
 8008a54:	08008ae3 	.word	0x08008ae3
 8008a58:	08008b3f 	.word	0x08008b3f
 8008a5c:	08008b3f 	.word	0x08008b3f
 8008a60:	08008aeb 	.word	0x08008aeb
 8008a64:	08008b3f 	.word	0x08008b3f
 8008a68:	08008b3f 	.word	0x08008b3f
 8008a6c:	08008b3f 	.word	0x08008b3f
 8008a70:	08008afb 	.word	0x08008afb
 8008a74:	08008b3f 	.word	0x08008b3f
 8008a78:	08008b3f 	.word	0x08008b3f
 8008a7c:	08008b3f 	.word	0x08008b3f
 8008a80:	08008b3f 	.word	0x08008b3f
 8008a84:	08008b3f 	.word	0x08008b3f
 8008a88:	08008b3f 	.word	0x08008b3f
 8008a8c:	08008b3f 	.word	0x08008b3f
 8008a90:	08008b0b 	.word	0x08008b0b
 8008a94:	08008b3f 	.word	0x08008b3f
 8008a98:	08008b3f 	.word	0x08008b3f
 8008a9c:	08008b3f 	.word	0x08008b3f
 8008aa0:	08008b3f 	.word	0x08008b3f
 8008aa4:	08008b3f 	.word	0x08008b3f
 8008aa8:	08008b3f 	.word	0x08008b3f
 8008aac:	08008b3f 	.word	0x08008b3f
 8008ab0:	08008b3f 	.word	0x08008b3f
 8008ab4:	08008b3f 	.word	0x08008b3f
 8008ab8:	08008b3f 	.word	0x08008b3f
 8008abc:	08008b3f 	.word	0x08008b3f
 8008ac0:	08008b3f 	.word	0x08008b3f
 8008ac4:	08008b3f 	.word	0x08008b3f
 8008ac8:	08008b3f 	.word	0x08008b3f
 8008acc:	08008b3f 	.word	0x08008b3f
 8008ad0:	08008b31 	.word	0x08008b31
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d02e      	beq.n	8008b36 <UART_SetConfig+0xa36>
 8008ad8:	e031      	b.n	8008b3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ada:	f7fa feb7 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8008ade:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ae0:	e033      	b.n	8008b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ae2:	f7fa fec9 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 8008ae6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ae8:	e02f      	b.n	8008b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fc fe78 	bl	80057e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af8:	e027      	b.n	8008b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008afa:	f107 0318 	add.w	r3, r7, #24
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fc ffc4 	bl	8005a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b08:	e01f      	b.n	8008b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8008bc0 <UART_SetConfig+0xac0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b16:	4b2a      	ldr	r3, [pc, #168]	@ (8008bc0 <UART_SetConfig+0xac0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	4a28      	ldr	r2, [pc, #160]	@ (8008bc4 <UART_SetConfig+0xac4>)
 8008b22:	fa22 f303 	lsr.w	r3, r2, r3
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b28:	e00f      	b.n	8008b4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b2a:	4b26      	ldr	r3, [pc, #152]	@ (8008bc4 <UART_SetConfig+0xac4>)
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2e:	e00c      	b.n	8008b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b30:	4b25      	ldr	r3, [pc, #148]	@ (8008bc8 <UART_SetConfig+0xac8>)
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b34:	e009      	b.n	8008b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3c:	e005      	b.n	8008b4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b48:	bf00      	nop
    }

    if (pclk != 0U)
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d021      	beq.n	8008b94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b54:	4a1d      	ldr	r2, [pc, #116]	@ (8008bcc <UART_SetConfig+0xacc>)
 8008b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	441a      	add	r2, r3
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d909      	bls.n	8008b8e <UART_SetConfig+0xa8e>
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b80:	d205      	bcs.n	8008b8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60da      	str	r2, [r3, #12]
 8008b8c:	e002      	b.n	8008b94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2200      	movs	r2, #0
 8008bae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bb0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3748      	adds	r7, #72	@ 0x48
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bbe:	bf00      	nop
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	03d09000 	.word	0x03d09000
 8008bc8:	003d0900 	.word	0x003d0900
 8008bcc:	0800c834 	.word	0x0800c834

08008bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00a      	beq.n	8008c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00a      	beq.n	8008c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01a      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cce:	d10a      	bne.n	8008ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	605a      	str	r2, [r3, #4]
  }
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b098      	sub	sp, #96	@ 0x60
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d24:	f7f8 fc7a 	bl	800161c <HAL_GetTick>
 8008d28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d12f      	bne.n	8008d98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d40:	2200      	movs	r2, #0
 8008d42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f88e 	bl	8008e68 <UART_WaitOnFlagUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d022      	beq.n	8008d98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e6      	bne.n	8008d52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e063      	b.n	8008e60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d149      	bne.n	8008e3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008da6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dae:	2200      	movs	r2, #0
 8008db0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f857 	bl	8008e68 <UART_WaitOnFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d03c      	beq.n	8008e3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8008de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e6      	bne.n	8008dc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e12:	61fa      	str	r2, [r7, #28]
 8008e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	69b9      	ldr	r1, [r7, #24]
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e5      	bne.n	8008df2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e012      	b.n	8008e60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3758      	adds	r7, #88	@ 0x58
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	4613      	mov	r3, r2
 8008e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e78:	e04f      	b.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e80:	d04b      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e82:	f7f8 fbcb 	bl	800161c <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d302      	bcc.n	8008e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e04e      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d037      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b80      	cmp	r3, #128	@ 0x80
 8008eae:	d034      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b40      	cmp	r3, #64	@ 0x40
 8008eb4:	d031      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d110      	bne.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2208      	movs	r2, #8
 8008eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f839 	bl	8008f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e029      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ef4:	d111      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f81f 	bl	8008f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e00f      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4013      	ands	r3, r2
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	bf0c      	ite	eq
 8008f2a:	2301      	moveq	r3, #1
 8008f2c:	2300      	movne	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d0a0      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b095      	sub	sp, #84	@ 0x54
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e6      	bne.n	8008f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	4b1e      	ldr	r3, [pc, #120]	@ (800900c <UART_EndRxTransfer+0xc8>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e5      	bne.n	8008f7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d118      	bne.n	8008fec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	e853 3f00 	ldrex	r3, [r3]
 8008fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f023 0310 	bic.w	r3, r3, #16
 8008fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd8:	61bb      	str	r3, [r7, #24]
 8008fda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6979      	ldr	r1, [r7, #20]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e6      	bne.n	8008fba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009000:	bf00      	nop
 8009002:	3754      	adds	r7, #84	@ 0x54
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	effffffe 	.word	0xeffffffe

08009010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff f854 	bl	80080d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800902c:	bf00      	nop
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	60bb      	str	r3, [r7, #8]
   return(result);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	61bb      	str	r3, [r7, #24]
 800905c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	6979      	ldr	r1, [r7, #20]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	613b      	str	r3, [r7, #16]
   return(result);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e6      	bne.n	800903c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2220      	movs	r2, #32
 8009072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff f81f 	bl	80080c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009082:	bf00      	nop
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_UARTEx_DisableFifoMode+0x16>
 80090d8:	2302      	movs	r3, #2
 80090da:	e027      	b.n	800912c <HAL_UARTEx_DisableFifoMode+0x66>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2224      	movs	r2, #36	@ 0x24
 80090e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0201 	bic.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800910a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800914c:	2302      	movs	r3, #2
 800914e:	e02d      	b.n	80091ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2224      	movs	r2, #36	@ 0x24
 800915c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0201 	bic.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f84f 	bl	8009230 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d101      	bne.n	80091cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091c8:	2302      	movs	r3, #2
 80091ca:	e02d      	b.n	8009228 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2224      	movs	r2, #36	@ 0x24
 80091d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f811 	bl	8009230 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800923c:	2b00      	cmp	r3, #0
 800923e:	d108      	bne.n	8009252 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009250:	e031      	b.n	80092b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009252:	2310      	movs	r3, #16
 8009254:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009256:	2310      	movs	r3, #16
 8009258:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	0e5b      	lsrs	r3, r3, #25
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	0f5b      	lsrs	r3, r3, #29
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0307 	and.w	r3, r3, #7
 8009278:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	7b3a      	ldrb	r2, [r7, #12]
 800927e:	4911      	ldr	r1, [pc, #68]	@ (80092c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009280:	5c8a      	ldrb	r2, [r1, r2]
 8009282:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009286:	7b3a      	ldrb	r2, [r7, #12]
 8009288:	490f      	ldr	r1, [pc, #60]	@ (80092c8 <UARTEx_SetNbDataToProcess+0x98>)
 800928a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800928c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009290:	b29a      	uxth	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	7b7a      	ldrb	r2, [r7, #13]
 800929c:	4909      	ldr	r1, [pc, #36]	@ (80092c4 <UARTEx_SetNbDataToProcess+0x94>)
 800929e:	5c8a      	ldrb	r2, [r1, r2]
 80092a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092a4:	7b7a      	ldrb	r2, [r7, #13]
 80092a6:	4908      	ldr	r1, [pc, #32]	@ (80092c8 <UARTEx_SetNbDataToProcess+0x98>)
 80092a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	0800c84c 	.word	0x0800c84c
 80092c8:	0800c854 	.word	0x0800c854

080092cc <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092e2:	d10e      	bne.n	8009302 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d107      	bne.n	8009302 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f06f 0201 	mvn.w	r2, #1
 80092fa:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f804 	bl	800930a <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
	...

08009320 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009320:	b084      	sub	sp, #16
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	f107 001c 	add.w	r0, r7, #28
 800932e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009336:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009338:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800933a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800933c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800933e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009342:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009346:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <SDMMC_Init+0x50>)
 8009354:	4013      	ands	r3, r2
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	b004      	add	sp, #16
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	ffc02c00 	.word	0xffc02c00

08009374 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f043 0203 	orr.w	r2, r3, #3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f023 0203 	bic.w	r2, r3, #3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0303 	and.w	r3, r3, #3
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800940e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009414:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800941a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	4b06      	ldr	r3, [pc, #24]	@ (8009440 <SDMMC_SendCommand+0x50>)
 8009428:	4013      	ands	r3, r2
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	fffee0c0 	.word	0xfffee0c0

08009444 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	b2db      	uxtb	r3, r3
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3314      	adds	r3, #20
 800946c:	461a      	mov	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	4413      	add	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094aa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80094b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80094b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0

}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80094ea:	2310      	movs	r3, #16
 80094ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094fe:	f107 0308 	add.w	r3, r7, #8
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff73 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800950a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800950e:	2110      	movs	r1, #16
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fa19 	bl	8009948 <SDMMC_GetCmdResp1>
 8009516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009518:	69fb      	ldr	r3, [r7, #28]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3720      	adds	r7, #32
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b088      	sub	sp, #32
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009530:	2311      	movs	r3, #17
 8009532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800953e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009544:	f107 0308 	add.w	r3, r7, #8
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff ff50 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009554:	2111      	movs	r1, #17
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9f6 	bl	8009948 <SDMMC_GetCmdResp1>
 800955c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800955e:	69fb      	ldr	r3, [r7, #28]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009576:	2312      	movs	r3, #18
 8009578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800957a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800957e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ff2d 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800959a:	2112      	movs	r1, #18
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f9d3 	bl	8009948 <SDMMC_GetCmdResp1>
 80095a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a4:	69fb      	ldr	r3, [r7, #28]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80095bc:	230c      	movs	r3, #12
 80095be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095ce:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fefe 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80095f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009624 <SDMMC_CmdStopTransfer+0x74>)
 80095f6:	210c      	movs	r1, #12
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f9a5 	bl	8009948 <SDMMC_GetCmdResp1>
 80095fe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009612:	d101      	bne.n	8009618 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009618:	69fb      	ldr	r3, [r7, #28]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3720      	adds	r7, #32
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	05f5e100 	.word	0x05f5e100

08009628 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009636:	2307      	movs	r3, #7
 8009638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800963a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800963e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009640:	2300      	movs	r3, #0
 8009642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009648:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800964a:	f107 0308 	add.w	r3, r7, #8
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fecd 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965a:	2107      	movs	r1, #7
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f973 	bl	8009948 <SDMMC_GetCmdResp1>
 8009662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009664:	69fb      	ldr	r3, [r7, #28]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b088      	sub	sp, #32
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800968a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800968c:	f107 0308 	add.w	r3, r7, #8
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff feac 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fb97 	bl	8009dcc <SDMMC_GetCmdError>
 800969e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096a0:	69fb      	ldr	r3, [r7, #28]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b088      	sub	sp, #32
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80096b2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80096b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80096b8:	2308      	movs	r3, #8
 80096ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fe8c 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fb29 	bl	8009d30 <SDMMC_GetCmdResp7>
 80096de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096e0:	69fb      	ldr	r3, [r7, #28]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3720      	adds	r7, #32
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b088      	sub	sp, #32
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80096f8:	2337      	movs	r3, #55	@ 0x37
 80096fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009702:	2300      	movs	r3, #0
 8009704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800970a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fe6c 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800971c:	2137      	movs	r1, #55	@ 0x37
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f912 	bl	8009948 <SDMMC_GetCmdResp1>
 8009724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009726:	69fb      	ldr	r3, [r7, #28]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3720      	adds	r7, #32
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800973e:	2329      	movs	r3, #41	@ 0x29
 8009740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800974c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff fe49 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa2e 	bl	8009bc0 <SDMMC_GetCmdResp3>
 8009764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009766:	69fb      	ldr	r3, [r7, #28]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3720      	adds	r7, #32
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800977e:	2306      	movs	r3, #6
 8009780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009782:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800978c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009790:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009792:	f107 0308 	add.w	r3, r7, #8
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff fe29 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800979e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097a2:	2106      	movs	r1, #6
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f8cf 	bl	8009948 <SDMMC_GetCmdResp1>
 80097aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ac:	69fb      	ldr	r3, [r7, #28]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b088      	sub	sp, #32
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80097c2:	2333      	movs	r3, #51	@ 0x33
 80097c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff fe07 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80097e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097e6:	2133      	movs	r1, #51	@ 0x33
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8ad 	bl	8009948 <SDMMC_GetCmdResp1>
 80097ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f0:	69fb      	ldr	r3, [r7, #28]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009806:	2302      	movs	r3, #2
 8009808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800980a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800980e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009818:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800981a:	f107 0308 	add.w	r3, r7, #8
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff fde5 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f980 	bl	8009b2c <SDMMC_GetCmdResp2>
 800982c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800982e:	69fb      	ldr	r3, [r7, #28]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3720      	adds	r7, #32
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009846:	2309      	movs	r3, #9
 8009848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800984a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800984e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009858:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800985a:	f107 0308 	add.w	r3, r7, #8
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fdc5 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f960 	bl	8009b2c <SDMMC_GetCmdResp2>
 800986c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800986e:	69fb      	ldr	r3, [r7, #28]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3720      	adds	r7, #32
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009886:	2303      	movs	r3, #3
 8009888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800988a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800988e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009898:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff fda5 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	2103      	movs	r1, #3
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f9c8 	bl	8009c40 <SDMMC_GetCmdResp6>
 80098b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098b2:	69fb      	ldr	r3, [r7, #28]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3720      	adds	r7, #32
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80098ca:	230d      	movs	r3, #13
 80098cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098d4:	2300      	movs	r3, #0
 80098d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098de:	f107 0308 	add.w	r3, r7, #8
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff fd83 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80098ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098ee:	210d      	movs	r1, #13
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f829 	bl	8009948 <SDMMC_GetCmdResp1>
 80098f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098f8:	69fb      	ldr	r3, [r7, #28]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b088      	sub	sp, #32
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800990e:	230d      	movs	r3, #13
 8009910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009918:	2300      	movs	r3, #0
 800991a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800991c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009920:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff fd61 	bl	80093f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800992e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009932:	210d      	movs	r1, #13
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f807 	bl	8009948 <SDMMC_GetCmdResp1>
 800993a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800993c:	69fb      	ldr	r3, [r7, #28]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3720      	adds	r7, #32
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	460b      	mov	r3, r1
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009956:	4b70      	ldr	r3, [pc, #448]	@ (8009b18 <SDMMC_GetCmdResp1+0x1d0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a70      	ldr	r2, [pc, #448]	@ (8009b1c <SDMMC_GetCmdResp1+0x1d4>)
 800995c:	fba2 2303 	umull	r2, r3, r2, r3
 8009960:	0a5a      	lsrs	r2, r3, #9
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	fb02 f303 	mul.w	r3, r2, r3
 8009968:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	1e5a      	subs	r2, r3, #1
 800996e:	61fa      	str	r2, [r7, #28]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009974:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009978:	e0c9      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	4b67      	ldr	r3, [pc, #412]	@ (8009b20 <SDMMC_GetCmdResp1+0x1d8>)
 8009984:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0ef      	beq.n	800996a <SDMMC_GetCmdResp1+0x22>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1ea      	bne.n	800996a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2204      	movs	r2, #4
 80099a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099a6:	2304      	movs	r3, #4
 80099a8:	e0b1      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2201      	movs	r2, #1
 80099ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099bc:	2301      	movs	r3, #1
 80099be:	e0a6      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a58      	ldr	r2, [pc, #352]	@ (8009b24 <SDMMC_GetCmdResp1+0x1dc>)
 80099c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f7ff fd3c 	bl	8009444 <SDMMC_GetCommandResponse>
 80099cc:	4603      	mov	r3, r0
 80099ce:	461a      	mov	r2, r3
 80099d0:	7afb      	ldrb	r3, [r7, #11]
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d001      	beq.n	80099da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e099      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80099da:	2100      	movs	r1, #0
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff fd3e 	bl	800945e <SDMMC_GetResponse>
 80099e2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4b50      	ldr	r3, [pc, #320]	@ (8009b28 <SDMMC_GetCmdResp1+0x1e0>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	e08d      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da02      	bge.n	80099fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80099f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80099fc:	e087      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009a08:	2340      	movs	r3, #64	@ 0x40
 8009a0a:	e080      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009a16:	2380      	movs	r3, #128	@ 0x80
 8009a18:	e079      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a28:	e071      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a38:	e069      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009a44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a48:	e061      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009a54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a58:	e059      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a68:	e051      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009a78:	e049      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009a88:	e041      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009a94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a98:	e039      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009aa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009aa8:	e031      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ab4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009ab8:	e029      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009ac4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ac8:	e021      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ad4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009ad8:	e019      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ae4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009ae8:	e011      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009af4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009af8:	e009      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009b04:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009b08:	e001      	b.n	8009b0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	24000004 	.word	0x24000004
 8009b1c:	10624dd3 	.word	0x10624dd3
 8009b20:	00200045 	.word	0x00200045
 8009b24:	002000c5 	.word	0x002000c5
 8009b28:	fdffe008 	.word	0xfdffe008

08009b2c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009b34:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb4 <SDMMC_GetCmdResp2+0x88>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1f      	ldr	r2, [pc, #124]	@ (8009bb8 <SDMMC_GetCmdResp2+0x8c>)
 8009b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3e:	0a5b      	lsrs	r3, r3, #9
 8009b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b44:	fb02 f303 	mul.w	r3, r2, r3
 8009b48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	1e5a      	subs	r2, r3, #1
 8009b4e:	60fa      	str	r2, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b58:	e026      	b.n	8009ba8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0ef      	beq.n	8009b4a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1ea      	bne.n	8009b4a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b86:	2304      	movs	r3, #4
 8009b88:	e00e      	b.n	8009ba8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e003      	b.n	8009ba8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a06      	ldr	r2, [pc, #24]	@ (8009bbc <SDMMC_GetCmdResp2+0x90>)
 8009ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	24000004 	.word	0x24000004
 8009bb8:	10624dd3 	.word	0x10624dd3
 8009bbc:	002000c5 	.word	0x002000c5

08009bc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c34 <SDMMC_GetCmdResp3+0x74>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8009c38 <SDMMC_GetCmdResp3+0x78>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	0a5b      	lsrs	r3, r3, #9
 8009bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bd8:	fb02 f303 	mul.w	r3, r2, r3
 8009bdc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	1e5a      	subs	r2, r3, #1
 8009be2:	60fa      	str	r2, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009be8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009bec:	e01b      	b.n	8009c26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bf2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0ef      	beq.n	8009bde <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1ea      	bne.n	8009bde <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2204      	movs	r2, #4
 8009c18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	e003      	b.n	8009c26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a06      	ldr	r2, [pc, #24]	@ (8009c3c <SDMMC_GetCmdResp3+0x7c>)
 8009c22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	24000004 	.word	0x24000004
 8009c38:	10624dd3 	.word	0x10624dd3
 8009c3c:	002000c5 	.word	0x002000c5

08009c40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c4e:	4b35      	ldr	r3, [pc, #212]	@ (8009d24 <SDMMC_GetCmdResp6+0xe4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a35      	ldr	r2, [pc, #212]	@ (8009d28 <SDMMC_GetCmdResp6+0xe8>)
 8009c54:	fba2 2303 	umull	r2, r3, r2, r3
 8009c58:	0a5b      	lsrs	r3, r3, #9
 8009c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c5e:	fb02 f303 	mul.w	r3, r2, r3
 8009c62:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	61fa      	str	r2, [r7, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c72:	e052      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c78:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0ef      	beq.n	8009c64 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1ea      	bne.n	8009c64 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c92:	f003 0304 	and.w	r3, r3, #4
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	e03a      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d004      	beq.n	8009cba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e02f      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fbc2 	bl	8009444 <SDMMC_GetCommandResponse>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d001      	beq.n	8009cce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e025      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4a16      	ldr	r2, [pc, #88]	@ (8009d2c <SDMMC_GetCmdResp6+0xec>)
 8009cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7ff fbc1 	bl	800945e <SDMMC_GetResponse>
 8009cdc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d106      	bne.n	8009cf6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	0c1b      	lsrs	r3, r3, #16
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e011      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d04:	e009      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d14:	e001      	b.n	8009d1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3720      	adds	r7, #32
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	24000004 	.word	0x24000004
 8009d28:	10624dd3 	.word	0x10624dd3
 8009d2c:	002000c5 	.word	0x002000c5

08009d30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d38:	4b22      	ldr	r3, [pc, #136]	@ (8009dc4 <SDMMC_GetCmdResp7+0x94>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a22      	ldr	r2, [pc, #136]	@ (8009dc8 <SDMMC_GetCmdResp7+0x98>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	0a5b      	lsrs	r3, r3, #9
 8009d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d48:	fb02 f303 	mul.w	r3, r2, r3
 8009d4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1e5a      	subs	r2, r3, #1
 8009d52:	60fa      	str	r2, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d5c:	e02c      	b.n	8009db8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d62:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0ef      	beq.n	8009d4e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1ea      	bne.n	8009d4e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2204      	movs	r2, #4
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	e014      	b.n	8009db8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e009      	b.n	8009db8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2240      	movs	r2, #64	@ 0x40
 8009db4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009db6:	2300      	movs	r3, #0

}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	24000004 	.word	0x24000004
 8009dc8:	10624dd3 	.word	0x10624dd3

08009dcc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009dd4:	4b11      	ldr	r3, [pc, #68]	@ (8009e1c <SDMMC_GetCmdError+0x50>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a11      	ldr	r2, [pc, #68]	@ (8009e20 <SDMMC_GetCmdError+0x54>)
 8009dda:	fba2 2303 	umull	r2, r3, r2, r3
 8009dde:	0a5b      	lsrs	r3, r3, #9
 8009de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009de4:	fb02 f303 	mul.w	r3, r2, r3
 8009de8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	1e5a      	subs	r2, r3, #1
 8009dee:	60fa      	str	r2, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009df4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009df8:	e009      	b.n	8009e0e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f1      	beq.n	8009dea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a06      	ldr	r2, [pc, #24]	@ (8009e24 <SDMMC_GetCmdError+0x58>)
 8009e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	24000004 	.word	0x24000004
 8009e20:	10624dd3 	.word	0x10624dd3
 8009e24:	002000c5 	.word	0x002000c5

08009e28 <__cvt>:
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2a:	ed2d 8b02 	vpush	{d8}
 8009e2e:	eeb0 8b40 	vmov.f64	d8, d0
 8009e32:	b085      	sub	sp, #20
 8009e34:	4617      	mov	r7, r2
 8009e36:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009e38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e3a:	ee18 2a90 	vmov	r2, s17
 8009e3e:	f025 0520 	bic.w	r5, r5, #32
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	bfb6      	itet	lt
 8009e46:	222d      	movlt	r2, #45	@ 0x2d
 8009e48:	2200      	movge	r2, #0
 8009e4a:	eeb1 8b40 	vneglt.f64	d8, d0
 8009e4e:	2d46      	cmp	r5, #70	@ 0x46
 8009e50:	460c      	mov	r4, r1
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	d004      	beq.n	8009e60 <__cvt+0x38>
 8009e56:	2d45      	cmp	r5, #69	@ 0x45
 8009e58:	d100      	bne.n	8009e5c <__cvt+0x34>
 8009e5a:	3401      	adds	r4, #1
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	e000      	b.n	8009e62 <__cvt+0x3a>
 8009e60:	2103      	movs	r1, #3
 8009e62:	ab03      	add	r3, sp, #12
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	ab02      	add	r3, sp, #8
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	4633      	mov	r3, r6
 8009e6e:	eeb0 0b48 	vmov.f64	d0, d8
 8009e72:	f000 ff21 	bl	800acb8 <_dtoa_r>
 8009e76:	2d47      	cmp	r5, #71	@ 0x47
 8009e78:	d114      	bne.n	8009ea4 <__cvt+0x7c>
 8009e7a:	07fb      	lsls	r3, r7, #31
 8009e7c:	d50a      	bpl.n	8009e94 <__cvt+0x6c>
 8009e7e:	1902      	adds	r2, r0, r4
 8009e80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	bf08      	it	eq
 8009e8a:	9203      	streq	r2, [sp, #12]
 8009e8c:	2130      	movs	r1, #48	@ 0x30
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d319      	bcc.n	8009ec8 <__cvt+0xa0>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e98:	1a1b      	subs	r3, r3, r0
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	b005      	add	sp, #20
 8009e9e:	ecbd 8b02 	vpop	{d8}
 8009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea4:	2d46      	cmp	r5, #70	@ 0x46
 8009ea6:	eb00 0204 	add.w	r2, r0, r4
 8009eaa:	d1e9      	bne.n	8009e80 <__cvt+0x58>
 8009eac:	7803      	ldrb	r3, [r0, #0]
 8009eae:	2b30      	cmp	r3, #48	@ 0x30
 8009eb0:	d107      	bne.n	8009ec2 <__cvt+0x9a>
 8009eb2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eba:	bf1c      	itt	ne
 8009ebc:	f1c4 0401 	rsbne	r4, r4, #1
 8009ec0:	6034      	strne	r4, [r6, #0]
 8009ec2:	6833      	ldr	r3, [r6, #0]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	e7db      	b.n	8009e80 <__cvt+0x58>
 8009ec8:	1c5c      	adds	r4, r3, #1
 8009eca:	9403      	str	r4, [sp, #12]
 8009ecc:	7019      	strb	r1, [r3, #0]
 8009ece:	e7de      	b.n	8009e8e <__cvt+0x66>

08009ed0 <__exponent>:
 8009ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ed2:	2900      	cmp	r1, #0
 8009ed4:	bfba      	itte	lt
 8009ed6:	4249      	neglt	r1, r1
 8009ed8:	232d      	movlt	r3, #45	@ 0x2d
 8009eda:	232b      	movge	r3, #43	@ 0x2b
 8009edc:	2909      	cmp	r1, #9
 8009ede:	7002      	strb	r2, [r0, #0]
 8009ee0:	7043      	strb	r3, [r0, #1]
 8009ee2:	dd29      	ble.n	8009f38 <__exponent+0x68>
 8009ee4:	f10d 0307 	add.w	r3, sp, #7
 8009ee8:	461d      	mov	r5, r3
 8009eea:	270a      	movs	r7, #10
 8009eec:	461a      	mov	r2, r3
 8009eee:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ef2:	fb07 1416 	mls	r4, r7, r6, r1
 8009ef6:	3430      	adds	r4, #48	@ 0x30
 8009ef8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009efc:	460c      	mov	r4, r1
 8009efe:	2c63      	cmp	r4, #99	@ 0x63
 8009f00:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f04:	4631      	mov	r1, r6
 8009f06:	dcf1      	bgt.n	8009eec <__exponent+0x1c>
 8009f08:	3130      	adds	r1, #48	@ 0x30
 8009f0a:	1e94      	subs	r4, r2, #2
 8009f0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f10:	1c41      	adds	r1, r0, #1
 8009f12:	4623      	mov	r3, r4
 8009f14:	42ab      	cmp	r3, r5
 8009f16:	d30a      	bcc.n	8009f2e <__exponent+0x5e>
 8009f18:	f10d 0309 	add.w	r3, sp, #9
 8009f1c:	1a9b      	subs	r3, r3, r2
 8009f1e:	42ac      	cmp	r4, r5
 8009f20:	bf88      	it	hi
 8009f22:	2300      	movhi	r3, #0
 8009f24:	3302      	adds	r3, #2
 8009f26:	4403      	add	r3, r0
 8009f28:	1a18      	subs	r0, r3, r0
 8009f2a:	b003      	add	sp, #12
 8009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f36:	e7ed      	b.n	8009f14 <__exponent+0x44>
 8009f38:	2330      	movs	r3, #48	@ 0x30
 8009f3a:	3130      	adds	r1, #48	@ 0x30
 8009f3c:	7083      	strb	r3, [r0, #2]
 8009f3e:	70c1      	strb	r1, [r0, #3]
 8009f40:	1d03      	adds	r3, r0, #4
 8009f42:	e7f1      	b.n	8009f28 <__exponent+0x58>
 8009f44:	0000      	movs	r0, r0
	...

08009f48 <_printf_float>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	b08d      	sub	sp, #52	@ 0x34
 8009f4e:	460c      	mov	r4, r1
 8009f50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f54:	4616      	mov	r6, r2
 8009f56:	461f      	mov	r7, r3
 8009f58:	4605      	mov	r5, r0
 8009f5a:	f000 fdad 	bl	800aab8 <_localeconv_r>
 8009f5e:	f8d0 b000 	ldr.w	fp, [r0]
 8009f62:	4658      	mov	r0, fp
 8009f64:	f7f6 fa0c 	bl	8000380 <strlen>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009f74:	6822      	ldr	r2, [r4, #0]
 8009f76:	9005      	str	r0, [sp, #20]
 8009f78:	3307      	adds	r3, #7
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	f103 0108 	add.w	r1, r3, #8
 8009f82:	f8c8 1000 	str.w	r1, [r8]
 8009f86:	ed93 0b00 	vldr	d0, [r3]
 8009f8a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a1e8 <_printf_float+0x2a0>
 8009f8e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009f92:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009f9e:	dd24      	ble.n	8009fea <_printf_float+0xa2>
 8009fa0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa8:	d502      	bpl.n	8009fb0 <_printf_float+0x68>
 8009faa:	232d      	movs	r3, #45	@ 0x2d
 8009fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb0:	498f      	ldr	r1, [pc, #572]	@ (800a1f0 <_printf_float+0x2a8>)
 8009fb2:	4b90      	ldr	r3, [pc, #576]	@ (800a1f4 <_printf_float+0x2ac>)
 8009fb4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009fb8:	bf8c      	ite	hi
 8009fba:	4688      	movhi	r8, r1
 8009fbc:	4698      	movls	r8, r3
 8009fbe:	f022 0204 	bic.w	r2, r2, #4
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	6123      	str	r3, [r4, #16]
 8009fc6:	6022      	str	r2, [r4, #0]
 8009fc8:	f04f 0a00 	mov.w	sl, #0
 8009fcc:	9700      	str	r7, [sp, #0]
 8009fce:	4633      	mov	r3, r6
 8009fd0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f000 f9d1 	bl	800a37c <_printf_common>
 8009fda:	3001      	adds	r0, #1
 8009fdc:	f040 8089 	bne.w	800a0f2 <_printf_float+0x1aa>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	b00d      	add	sp, #52	@ 0x34
 8009fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fea:	eeb4 0b40 	vcmp.f64	d0, d0
 8009fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff2:	d709      	bvc.n	800a008 <_printf_float+0xc0>
 8009ff4:	ee10 3a90 	vmov	r3, s1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfbc      	itt	lt
 8009ffc:	232d      	movlt	r3, #45	@ 0x2d
 8009ffe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a002:	497d      	ldr	r1, [pc, #500]	@ (800a1f8 <_printf_float+0x2b0>)
 800a004:	4b7d      	ldr	r3, [pc, #500]	@ (800a1fc <_printf_float+0x2b4>)
 800a006:	e7d5      	b.n	8009fb4 <_printf_float+0x6c>
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a010:	d139      	bne.n	800a086 <_printf_float+0x13e>
 800a012:	2306      	movs	r3, #6
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a01a:	2300      	movs	r3, #0
 800a01c:	6022      	str	r2, [r4, #0]
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	ab0a      	add	r3, sp, #40	@ 0x28
 800a022:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a026:	ab09      	add	r3, sp, #36	@ 0x24
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	6861      	ldr	r1, [r4, #4]
 800a02c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a030:	4628      	mov	r0, r5
 800a032:	f7ff fef9 	bl	8009e28 <__cvt>
 800a036:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a03a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a03c:	4680      	mov	r8, r0
 800a03e:	d129      	bne.n	800a094 <_printf_float+0x14c>
 800a040:	1cc8      	adds	r0, r1, #3
 800a042:	db02      	blt.n	800a04a <_printf_float+0x102>
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	4299      	cmp	r1, r3
 800a048:	dd41      	ble.n	800a0ce <_printf_float+0x186>
 800a04a:	f1a9 0902 	sub.w	r9, r9, #2
 800a04e:	fa5f f989 	uxtb.w	r9, r9
 800a052:	3901      	subs	r1, #1
 800a054:	464a      	mov	r2, r9
 800a056:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a05a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a05c:	f7ff ff38 	bl	8009ed0 <__exponent>
 800a060:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a062:	1813      	adds	r3, r2, r0
 800a064:	2a01      	cmp	r2, #1
 800a066:	4682      	mov	sl, r0
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	dc02      	bgt.n	800a072 <_printf_float+0x12a>
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	07d2      	lsls	r2, r2, #31
 800a070:	d501      	bpl.n	800a076 <_printf_float+0x12e>
 800a072:	3301      	adds	r3, #1
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0a6      	beq.n	8009fcc <_printf_float+0x84>
 800a07e:	232d      	movs	r3, #45	@ 0x2d
 800a080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a084:	e7a2      	b.n	8009fcc <_printf_float+0x84>
 800a086:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a08a:	d1c4      	bne.n	800a016 <_printf_float+0xce>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1c2      	bne.n	800a016 <_printf_float+0xce>
 800a090:	2301      	movs	r3, #1
 800a092:	e7bf      	b.n	800a014 <_printf_float+0xcc>
 800a094:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a098:	d9db      	bls.n	800a052 <_printf_float+0x10a>
 800a09a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a09e:	d118      	bne.n	800a0d2 <_printf_float+0x18a>
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	dd0b      	ble.n	800a0be <_printf_float+0x176>
 800a0a6:	6121      	str	r1, [r4, #16]
 800a0a8:	b913      	cbnz	r3, 800a0b0 <_printf_float+0x168>
 800a0aa:	6822      	ldr	r2, [r4, #0]
 800a0ac:	07d0      	lsls	r0, r2, #31
 800a0ae:	d502      	bpl.n	800a0b6 <_printf_float+0x16e>
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	440b      	add	r3, r1
 800a0b4:	6123      	str	r3, [r4, #16]
 800a0b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0b8:	f04f 0a00 	mov.w	sl, #0
 800a0bc:	e7db      	b.n	800a076 <_printf_float+0x12e>
 800a0be:	b913      	cbnz	r3, 800a0c6 <_printf_float+0x17e>
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	07d2      	lsls	r2, r2, #31
 800a0c4:	d501      	bpl.n	800a0ca <_printf_float+0x182>
 800a0c6:	3302      	adds	r3, #2
 800a0c8:	e7f4      	b.n	800a0b4 <_printf_float+0x16c>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f2      	b.n	800a0b4 <_printf_float+0x16c>
 800a0ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	db05      	blt.n	800a0e4 <_printf_float+0x19c>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	6121      	str	r1, [r4, #16]
 800a0dc:	07d8      	lsls	r0, r3, #31
 800a0de:	d5ea      	bpl.n	800a0b6 <_printf_float+0x16e>
 800a0e0:	1c4b      	adds	r3, r1, #1
 800a0e2:	e7e7      	b.n	800a0b4 <_printf_float+0x16c>
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	bfd4      	ite	le
 800a0e8:	f1c1 0202 	rsble	r2, r1, #2
 800a0ec:	2201      	movgt	r2, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	e7e0      	b.n	800a0b4 <_printf_float+0x16c>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	055a      	lsls	r2, r3, #21
 800a0f6:	d407      	bmi.n	800a108 <_printf_float+0x1c0>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	d12a      	bne.n	800a15c <_printf_float+0x214>
 800a106:	e76b      	b.n	8009fe0 <_printf_float+0x98>
 800a108:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a10c:	f240 80e0 	bls.w	800a2d0 <_printf_float+0x388>
 800a110:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a114:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	d133      	bne.n	800a186 <_printf_float+0x23e>
 800a11e:	4a38      	ldr	r2, [pc, #224]	@ (800a200 <_printf_float+0x2b8>)
 800a120:	2301      	movs	r3, #1
 800a122:	4631      	mov	r1, r6
 800a124:	4628      	mov	r0, r5
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	f43f af59 	beq.w	8009fe0 <_printf_float+0x98>
 800a12e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a132:	4543      	cmp	r3, r8
 800a134:	db02      	blt.n	800a13c <_printf_float+0x1f4>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	07d8      	lsls	r0, r3, #31
 800a13a:	d50f      	bpl.n	800a15c <_printf_float+0x214>
 800a13c:	9b05      	ldr	r3, [sp, #20]
 800a13e:	465a      	mov	r2, fp
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f af4a 	beq.w	8009fe0 <_printf_float+0x98>
 800a14c:	f04f 0900 	mov.w	r9, #0
 800a150:	f108 38ff 	add.w	r8, r8, #4294967295
 800a154:	f104 0a1a 	add.w	sl, r4, #26
 800a158:	45c8      	cmp	r8, r9
 800a15a:	dc09      	bgt.n	800a170 <_printf_float+0x228>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	079b      	lsls	r3, r3, #30
 800a160:	f100 8107 	bmi.w	800a372 <_printf_float+0x42a>
 800a164:	68e0      	ldr	r0, [r4, #12]
 800a166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a168:	4298      	cmp	r0, r3
 800a16a:	bfb8      	it	lt
 800a16c:	4618      	movlt	r0, r3
 800a16e:	e739      	b.n	8009fe4 <_printf_float+0x9c>
 800a170:	2301      	movs	r3, #1
 800a172:	4652      	mov	r2, sl
 800a174:	4631      	mov	r1, r6
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	f43f af30 	beq.w	8009fe0 <_printf_float+0x98>
 800a180:	f109 0901 	add.w	r9, r9, #1
 800a184:	e7e8      	b.n	800a158 <_printf_float+0x210>
 800a186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dc3b      	bgt.n	800a204 <_printf_float+0x2bc>
 800a18c:	4a1c      	ldr	r2, [pc, #112]	@ (800a200 <_printf_float+0x2b8>)
 800a18e:	2301      	movs	r3, #1
 800a190:	4631      	mov	r1, r6
 800a192:	4628      	mov	r0, r5
 800a194:	47b8      	blx	r7
 800a196:	3001      	adds	r0, #1
 800a198:	f43f af22 	beq.w	8009fe0 <_printf_float+0x98>
 800a19c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1a0:	ea59 0303 	orrs.w	r3, r9, r3
 800a1a4:	d102      	bne.n	800a1ac <_printf_float+0x264>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	07d9      	lsls	r1, r3, #31
 800a1aa:	d5d7      	bpl.n	800a15c <_printf_float+0x214>
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	465a      	mov	r2, fp
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	47b8      	blx	r7
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f43f af12 	beq.w	8009fe0 <_printf_float+0x98>
 800a1bc:	f04f 0a00 	mov.w	sl, #0
 800a1c0:	f104 0b1a 	add.w	fp, r4, #26
 800a1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c6:	425b      	negs	r3, r3
 800a1c8:	4553      	cmp	r3, sl
 800a1ca:	dc01      	bgt.n	800a1d0 <_printf_float+0x288>
 800a1cc:	464b      	mov	r3, r9
 800a1ce:	e794      	b.n	800a0fa <_printf_float+0x1b2>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	465a      	mov	r2, fp
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	47b8      	blx	r7
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f43f af00 	beq.w	8009fe0 <_printf_float+0x98>
 800a1e0:	f10a 0a01 	add.w	sl, sl, #1
 800a1e4:	e7ee      	b.n	800a1c4 <_printf_float+0x27c>
 800a1e6:	bf00      	nop
 800a1e8:	ffffffff 	.word	0xffffffff
 800a1ec:	7fefffff 	.word	0x7fefffff
 800a1f0:	0800c860 	.word	0x0800c860
 800a1f4:	0800c85c 	.word	0x0800c85c
 800a1f8:	0800c868 	.word	0x0800c868
 800a1fc:	0800c864 	.word	0x0800c864
 800a200:	0800c86c 	.word	0x0800c86c
 800a204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a206:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a20a:	4553      	cmp	r3, sl
 800a20c:	bfa8      	it	ge
 800a20e:	4653      	movge	r3, sl
 800a210:	2b00      	cmp	r3, #0
 800a212:	4699      	mov	r9, r3
 800a214:	dc37      	bgt.n	800a286 <_printf_float+0x33e>
 800a216:	2300      	movs	r3, #0
 800a218:	9307      	str	r3, [sp, #28]
 800a21a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a21e:	f104 021a 	add.w	r2, r4, #26
 800a222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a224:	9907      	ldr	r1, [sp, #28]
 800a226:	9306      	str	r3, [sp, #24]
 800a228:	eba3 0309 	sub.w	r3, r3, r9
 800a22c:	428b      	cmp	r3, r1
 800a22e:	dc31      	bgt.n	800a294 <_printf_float+0x34c>
 800a230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a232:	459a      	cmp	sl, r3
 800a234:	dc3b      	bgt.n	800a2ae <_printf_float+0x366>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	07da      	lsls	r2, r3, #31
 800a23a:	d438      	bmi.n	800a2ae <_printf_float+0x366>
 800a23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23e:	ebaa 0903 	sub.w	r9, sl, r3
 800a242:	9b06      	ldr	r3, [sp, #24]
 800a244:	ebaa 0303 	sub.w	r3, sl, r3
 800a248:	4599      	cmp	r9, r3
 800a24a:	bfa8      	it	ge
 800a24c:	4699      	movge	r9, r3
 800a24e:	f1b9 0f00 	cmp.w	r9, #0
 800a252:	dc34      	bgt.n	800a2be <_printf_float+0x376>
 800a254:	f04f 0800 	mov.w	r8, #0
 800a258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a25c:	f104 0b1a 	add.w	fp, r4, #26
 800a260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a262:	ebaa 0303 	sub.w	r3, sl, r3
 800a266:	eba3 0309 	sub.w	r3, r3, r9
 800a26a:	4543      	cmp	r3, r8
 800a26c:	f77f af76 	ble.w	800a15c <_printf_float+0x214>
 800a270:	2301      	movs	r3, #1
 800a272:	465a      	mov	r2, fp
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f aeb0 	beq.w	8009fe0 <_printf_float+0x98>
 800a280:	f108 0801 	add.w	r8, r8, #1
 800a284:	e7ec      	b.n	800a260 <_printf_float+0x318>
 800a286:	4642      	mov	r2, r8
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	d1c1      	bne.n	800a216 <_printf_float+0x2ce>
 800a292:	e6a5      	b.n	8009fe0 <_printf_float+0x98>
 800a294:	2301      	movs	r3, #1
 800a296:	4631      	mov	r1, r6
 800a298:	4628      	mov	r0, r5
 800a29a:	9206      	str	r2, [sp, #24]
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f43f ae9e 	beq.w	8009fe0 <_printf_float+0x98>
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	9a06      	ldr	r2, [sp, #24]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	9307      	str	r3, [sp, #28]
 800a2ac:	e7b9      	b.n	800a222 <_printf_float+0x2da>
 800a2ae:	9b05      	ldr	r3, [sp, #20]
 800a2b0:	465a      	mov	r2, fp
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d1bf      	bne.n	800a23c <_printf_float+0x2f4>
 800a2bc:	e690      	b.n	8009fe0 <_printf_float+0x98>
 800a2be:	9a06      	ldr	r2, [sp, #24]
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	4442      	add	r2, r8
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	47b8      	blx	r7
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d1c2      	bne.n	800a254 <_printf_float+0x30c>
 800a2ce:	e687      	b.n	8009fe0 <_printf_float+0x98>
 800a2d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a2d4:	f1b9 0f01 	cmp.w	r9, #1
 800a2d8:	dc01      	bgt.n	800a2de <_printf_float+0x396>
 800a2da:	07db      	lsls	r3, r3, #31
 800a2dc:	d536      	bpl.n	800a34c <_printf_float+0x404>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4642      	mov	r2, r8
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b8      	blx	r7
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	f43f ae79 	beq.w	8009fe0 <_printf_float+0x98>
 800a2ee:	9b05      	ldr	r3, [sp, #20]
 800a2f0:	465a      	mov	r2, fp
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	47b8      	blx	r7
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	f43f ae71 	beq.w	8009fe0 <_printf_float+0x98>
 800a2fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a302:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a30e:	d018      	beq.n	800a342 <_printf_float+0x3fa>
 800a310:	464b      	mov	r3, r9
 800a312:	f108 0201 	add.w	r2, r8, #1
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	d10c      	bne.n	800a33a <_printf_float+0x3f2>
 800a320:	e65e      	b.n	8009fe0 <_printf_float+0x98>
 800a322:	2301      	movs	r3, #1
 800a324:	465a      	mov	r2, fp
 800a326:	4631      	mov	r1, r6
 800a328:	4628      	mov	r0, r5
 800a32a:	47b8      	blx	r7
 800a32c:	3001      	adds	r0, #1
 800a32e:	f43f ae57 	beq.w	8009fe0 <_printf_float+0x98>
 800a332:	f108 0801 	add.w	r8, r8, #1
 800a336:	45c8      	cmp	r8, r9
 800a338:	dbf3      	blt.n	800a322 <_printf_float+0x3da>
 800a33a:	4653      	mov	r3, sl
 800a33c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a340:	e6dc      	b.n	800a0fc <_printf_float+0x1b4>
 800a342:	f04f 0800 	mov.w	r8, #0
 800a346:	f104 0b1a 	add.w	fp, r4, #26
 800a34a:	e7f4      	b.n	800a336 <_printf_float+0x3ee>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4642      	mov	r2, r8
 800a350:	e7e1      	b.n	800a316 <_printf_float+0x3ce>
 800a352:	2301      	movs	r3, #1
 800a354:	464a      	mov	r2, r9
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f ae3f 	beq.w	8009fe0 <_printf_float+0x98>
 800a362:	f108 0801 	add.w	r8, r8, #1
 800a366:	68e3      	ldr	r3, [r4, #12]
 800a368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a36a:	1a5b      	subs	r3, r3, r1
 800a36c:	4543      	cmp	r3, r8
 800a36e:	dcf0      	bgt.n	800a352 <_printf_float+0x40a>
 800a370:	e6f8      	b.n	800a164 <_printf_float+0x21c>
 800a372:	f04f 0800 	mov.w	r8, #0
 800a376:	f104 0919 	add.w	r9, r4, #25
 800a37a:	e7f4      	b.n	800a366 <_printf_float+0x41e>

0800a37c <_printf_common>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	4616      	mov	r6, r2
 800a382:	4698      	mov	r8, r3
 800a384:	688a      	ldr	r2, [r1, #8]
 800a386:	690b      	ldr	r3, [r1, #16]
 800a388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bfb8      	it	lt
 800a390:	4613      	movlt	r3, r2
 800a392:	6033      	str	r3, [r6, #0]
 800a394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a398:	4607      	mov	r7, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_printf_common+0x26>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	0699      	lsls	r1, r3, #26
 800a3a6:	bf42      	ittt	mi
 800a3a8:	6833      	ldrmi	r3, [r6, #0]
 800a3aa:	3302      	addmi	r3, #2
 800a3ac:	6033      	strmi	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	f015 0506 	ands.w	r5, r5, #6
 800a3b4:	d106      	bne.n	800a3c4 <_printf_common+0x48>
 800a3b6:	f104 0a19 	add.w	sl, r4, #25
 800a3ba:	68e3      	ldr	r3, [r4, #12]
 800a3bc:	6832      	ldr	r2, [r6, #0]
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	42ab      	cmp	r3, r5
 800a3c2:	dc26      	bgt.n	800a412 <_printf_common+0x96>
 800a3c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	3b00      	subs	r3, #0
 800a3cc:	bf18      	it	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	0692      	lsls	r2, r2, #26
 800a3d2:	d42b      	bmi.n	800a42c <_printf_common+0xb0>
 800a3d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3d8:	4641      	mov	r1, r8
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c8      	blx	r9
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d01e      	beq.n	800a420 <_printf_common+0xa4>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	6922      	ldr	r2, [r4, #16]
 800a3e6:	f003 0306 	and.w	r3, r3, #6
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	bf02      	ittt	eq
 800a3ee:	68e5      	ldreq	r5, [r4, #12]
 800a3f0:	6833      	ldreq	r3, [r6, #0]
 800a3f2:	1aed      	subeq	r5, r5, r3
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	bf0c      	ite	eq
 800a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3fc:	2500      	movne	r5, #0
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bfc4      	itt	gt
 800a402:	1a9b      	subgt	r3, r3, r2
 800a404:	18ed      	addgt	r5, r5, r3
 800a406:	2600      	movs	r6, #0
 800a408:	341a      	adds	r4, #26
 800a40a:	42b5      	cmp	r5, r6
 800a40c:	d11a      	bne.n	800a444 <_printf_common+0xc8>
 800a40e:	2000      	movs	r0, #0
 800a410:	e008      	b.n	800a424 <_printf_common+0xa8>
 800a412:	2301      	movs	r3, #1
 800a414:	4652      	mov	r2, sl
 800a416:	4641      	mov	r1, r8
 800a418:	4638      	mov	r0, r7
 800a41a:	47c8      	blx	r9
 800a41c:	3001      	adds	r0, #1
 800a41e:	d103      	bne.n	800a428 <_printf_common+0xac>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a428:	3501      	adds	r5, #1
 800a42a:	e7c6      	b.n	800a3ba <_printf_common+0x3e>
 800a42c:	18e1      	adds	r1, r4, r3
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	2030      	movs	r0, #48	@ 0x30
 800a432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a436:	4422      	add	r2, r4
 800a438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a43c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a440:	3302      	adds	r3, #2
 800a442:	e7c7      	b.n	800a3d4 <_printf_common+0x58>
 800a444:	2301      	movs	r3, #1
 800a446:	4622      	mov	r2, r4
 800a448:	4641      	mov	r1, r8
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c8      	blx	r9
 800a44e:	3001      	adds	r0, #1
 800a450:	d0e6      	beq.n	800a420 <_printf_common+0xa4>
 800a452:	3601      	adds	r6, #1
 800a454:	e7d9      	b.n	800a40a <_printf_common+0x8e>
	...

0800a458 <_printf_i>:
 800a458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	7e0f      	ldrb	r7, [r1, #24]
 800a45e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a460:	2f78      	cmp	r7, #120	@ 0x78
 800a462:	4691      	mov	r9, r2
 800a464:	4680      	mov	r8, r0
 800a466:	460c      	mov	r4, r1
 800a468:	469a      	mov	sl, r3
 800a46a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a46e:	d807      	bhi.n	800a480 <_printf_i+0x28>
 800a470:	2f62      	cmp	r7, #98	@ 0x62
 800a472:	d80a      	bhi.n	800a48a <_printf_i+0x32>
 800a474:	2f00      	cmp	r7, #0
 800a476:	f000 80d1 	beq.w	800a61c <_printf_i+0x1c4>
 800a47a:	2f58      	cmp	r7, #88	@ 0x58
 800a47c:	f000 80b8 	beq.w	800a5f0 <_printf_i+0x198>
 800a480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a488:	e03a      	b.n	800a500 <_printf_i+0xa8>
 800a48a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a48e:	2b15      	cmp	r3, #21
 800a490:	d8f6      	bhi.n	800a480 <_printf_i+0x28>
 800a492:	a101      	add	r1, pc, #4	@ (adr r1, 800a498 <_printf_i+0x40>)
 800a494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a481 	.word	0x0800a481
 800a4a4:	0800a481 	.word	0x0800a481
 800a4a8:	0800a481 	.word	0x0800a481
 800a4ac:	0800a481 	.word	0x0800a481
 800a4b0:	0800a505 	.word	0x0800a505
 800a4b4:	0800a481 	.word	0x0800a481
 800a4b8:	0800a481 	.word	0x0800a481
 800a4bc:	0800a481 	.word	0x0800a481
 800a4c0:	0800a481 	.word	0x0800a481
 800a4c4:	0800a603 	.word	0x0800a603
 800a4c8:	0800a52f 	.word	0x0800a52f
 800a4cc:	0800a5bd 	.word	0x0800a5bd
 800a4d0:	0800a481 	.word	0x0800a481
 800a4d4:	0800a481 	.word	0x0800a481
 800a4d8:	0800a625 	.word	0x0800a625
 800a4dc:	0800a481 	.word	0x0800a481
 800a4e0:	0800a52f 	.word	0x0800a52f
 800a4e4:	0800a481 	.word	0x0800a481
 800a4e8:	0800a481 	.word	0x0800a481
 800a4ec:	0800a5c5 	.word	0x0800a5c5
 800a4f0:	6833      	ldr	r3, [r6, #0]
 800a4f2:	1d1a      	adds	r2, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6032      	str	r2, [r6, #0]
 800a4f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a500:	2301      	movs	r3, #1
 800a502:	e09c      	b.n	800a63e <_printf_i+0x1e6>
 800a504:	6833      	ldr	r3, [r6, #0]
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	1d19      	adds	r1, r3, #4
 800a50a:	6031      	str	r1, [r6, #0]
 800a50c:	0606      	lsls	r6, r0, #24
 800a50e:	d501      	bpl.n	800a514 <_printf_i+0xbc>
 800a510:	681d      	ldr	r5, [r3, #0]
 800a512:	e003      	b.n	800a51c <_printf_i+0xc4>
 800a514:	0645      	lsls	r5, r0, #25
 800a516:	d5fb      	bpl.n	800a510 <_printf_i+0xb8>
 800a518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	da03      	bge.n	800a528 <_printf_i+0xd0>
 800a520:	232d      	movs	r3, #45	@ 0x2d
 800a522:	426d      	negs	r5, r5
 800a524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a528:	4858      	ldr	r0, [pc, #352]	@ (800a68c <_printf_i+0x234>)
 800a52a:	230a      	movs	r3, #10
 800a52c:	e011      	b.n	800a552 <_printf_i+0xfa>
 800a52e:	6821      	ldr	r1, [r4, #0]
 800a530:	6833      	ldr	r3, [r6, #0]
 800a532:	0608      	lsls	r0, r1, #24
 800a534:	f853 5b04 	ldr.w	r5, [r3], #4
 800a538:	d402      	bmi.n	800a540 <_printf_i+0xe8>
 800a53a:	0649      	lsls	r1, r1, #25
 800a53c:	bf48      	it	mi
 800a53e:	b2ad      	uxthmi	r5, r5
 800a540:	2f6f      	cmp	r7, #111	@ 0x6f
 800a542:	4852      	ldr	r0, [pc, #328]	@ (800a68c <_printf_i+0x234>)
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	bf14      	ite	ne
 800a548:	230a      	movne	r3, #10
 800a54a:	2308      	moveq	r3, #8
 800a54c:	2100      	movs	r1, #0
 800a54e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a552:	6866      	ldr	r6, [r4, #4]
 800a554:	60a6      	str	r6, [r4, #8]
 800a556:	2e00      	cmp	r6, #0
 800a558:	db05      	blt.n	800a566 <_printf_i+0x10e>
 800a55a:	6821      	ldr	r1, [r4, #0]
 800a55c:	432e      	orrs	r6, r5
 800a55e:	f021 0104 	bic.w	r1, r1, #4
 800a562:	6021      	str	r1, [r4, #0]
 800a564:	d04b      	beq.n	800a5fe <_printf_i+0x1a6>
 800a566:	4616      	mov	r6, r2
 800a568:	fbb5 f1f3 	udiv	r1, r5, r3
 800a56c:	fb03 5711 	mls	r7, r3, r1, r5
 800a570:	5dc7      	ldrb	r7, [r0, r7]
 800a572:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a576:	462f      	mov	r7, r5
 800a578:	42bb      	cmp	r3, r7
 800a57a:	460d      	mov	r5, r1
 800a57c:	d9f4      	bls.n	800a568 <_printf_i+0x110>
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d10b      	bne.n	800a59a <_printf_i+0x142>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	07df      	lsls	r7, r3, #31
 800a586:	d508      	bpl.n	800a59a <_printf_i+0x142>
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	6861      	ldr	r1, [r4, #4]
 800a58c:	4299      	cmp	r1, r3
 800a58e:	bfde      	ittt	le
 800a590:	2330      	movle	r3, #48	@ 0x30
 800a592:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a596:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a59a:	1b92      	subs	r2, r2, r6
 800a59c:	6122      	str	r2, [r4, #16]
 800a59e:	f8cd a000 	str.w	sl, [sp]
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	aa03      	add	r2, sp, #12
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	f7ff fee7 	bl	800a37c <_printf_common>
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d14a      	bne.n	800a648 <_printf_i+0x1f0>
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	b004      	add	sp, #16
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	f043 0320 	orr.w	r3, r3, #32
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	4832      	ldr	r0, [pc, #200]	@ (800a690 <_printf_i+0x238>)
 800a5c6:	2778      	movs	r7, #120	@ 0x78
 800a5c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	6831      	ldr	r1, [r6, #0]
 800a5d0:	061f      	lsls	r7, r3, #24
 800a5d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5d6:	d402      	bmi.n	800a5de <_printf_i+0x186>
 800a5d8:	065f      	lsls	r7, r3, #25
 800a5da:	bf48      	it	mi
 800a5dc:	b2ad      	uxthmi	r5, r5
 800a5de:	6031      	str	r1, [r6, #0]
 800a5e0:	07d9      	lsls	r1, r3, #31
 800a5e2:	bf44      	itt	mi
 800a5e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e8:	6023      	strmi	r3, [r4, #0]
 800a5ea:	b11d      	cbz	r5, 800a5f4 <_printf_i+0x19c>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	e7ad      	b.n	800a54c <_printf_i+0xf4>
 800a5f0:	4826      	ldr	r0, [pc, #152]	@ (800a68c <_printf_i+0x234>)
 800a5f2:	e7e9      	b.n	800a5c8 <_printf_i+0x170>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	f023 0320 	bic.w	r3, r3, #32
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	e7f6      	b.n	800a5ec <_printf_i+0x194>
 800a5fe:	4616      	mov	r6, r2
 800a600:	e7bd      	b.n	800a57e <_printf_i+0x126>
 800a602:	6833      	ldr	r3, [r6, #0]
 800a604:	6825      	ldr	r5, [r4, #0]
 800a606:	6961      	ldr	r1, [r4, #20]
 800a608:	1d18      	adds	r0, r3, #4
 800a60a:	6030      	str	r0, [r6, #0]
 800a60c:	062e      	lsls	r6, r5, #24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	d501      	bpl.n	800a616 <_printf_i+0x1be>
 800a612:	6019      	str	r1, [r3, #0]
 800a614:	e002      	b.n	800a61c <_printf_i+0x1c4>
 800a616:	0668      	lsls	r0, r5, #25
 800a618:	d5fb      	bpl.n	800a612 <_printf_i+0x1ba>
 800a61a:	8019      	strh	r1, [r3, #0]
 800a61c:	2300      	movs	r3, #0
 800a61e:	6123      	str	r3, [r4, #16]
 800a620:	4616      	mov	r6, r2
 800a622:	e7bc      	b.n	800a59e <_printf_i+0x146>
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	6032      	str	r2, [r6, #0]
 800a62a:	681e      	ldr	r6, [r3, #0]
 800a62c:	6862      	ldr	r2, [r4, #4]
 800a62e:	2100      	movs	r1, #0
 800a630:	4630      	mov	r0, r6
 800a632:	f7f5 fe55 	bl	80002e0 <memchr>
 800a636:	b108      	cbz	r0, 800a63c <_printf_i+0x1e4>
 800a638:	1b80      	subs	r0, r0, r6
 800a63a:	6060      	str	r0, [r4, #4]
 800a63c:	6863      	ldr	r3, [r4, #4]
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	2300      	movs	r3, #0
 800a642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a646:	e7aa      	b.n	800a59e <_printf_i+0x146>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	4632      	mov	r2, r6
 800a64c:	4649      	mov	r1, r9
 800a64e:	4640      	mov	r0, r8
 800a650:	47d0      	blx	sl
 800a652:	3001      	adds	r0, #1
 800a654:	d0ad      	beq.n	800a5b2 <_printf_i+0x15a>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	079b      	lsls	r3, r3, #30
 800a65a:	d413      	bmi.n	800a684 <_printf_i+0x22c>
 800a65c:	68e0      	ldr	r0, [r4, #12]
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	4298      	cmp	r0, r3
 800a662:	bfb8      	it	lt
 800a664:	4618      	movlt	r0, r3
 800a666:	e7a6      	b.n	800a5b6 <_printf_i+0x15e>
 800a668:	2301      	movs	r3, #1
 800a66a:	4632      	mov	r2, r6
 800a66c:	4649      	mov	r1, r9
 800a66e:	4640      	mov	r0, r8
 800a670:	47d0      	blx	sl
 800a672:	3001      	adds	r0, #1
 800a674:	d09d      	beq.n	800a5b2 <_printf_i+0x15a>
 800a676:	3501      	adds	r5, #1
 800a678:	68e3      	ldr	r3, [r4, #12]
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	1a5b      	subs	r3, r3, r1
 800a67e:	42ab      	cmp	r3, r5
 800a680:	dcf2      	bgt.n	800a668 <_printf_i+0x210>
 800a682:	e7eb      	b.n	800a65c <_printf_i+0x204>
 800a684:	2500      	movs	r5, #0
 800a686:	f104 0619 	add.w	r6, r4, #25
 800a68a:	e7f5      	b.n	800a678 <_printf_i+0x220>
 800a68c:	0800c86e 	.word	0x0800c86e
 800a690:	0800c87f 	.word	0x0800c87f

0800a694 <std>:
 800a694:	2300      	movs	r3, #0
 800a696:	b510      	push	{r4, lr}
 800a698:	4604      	mov	r4, r0
 800a69a:	e9c0 3300 	strd	r3, r3, [r0]
 800a69e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6a2:	6083      	str	r3, [r0, #8]
 800a6a4:	8181      	strh	r1, [r0, #12]
 800a6a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6a8:	81c2      	strh	r2, [r0, #14]
 800a6aa:	6183      	str	r3, [r0, #24]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	2208      	movs	r2, #8
 800a6b0:	305c      	adds	r0, #92	@ 0x5c
 800a6b2:	f000 f9f9 	bl	800aaa8 <memset>
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <std+0x58>)
 800a6b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f0 <std+0x5c>)
 800a6bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6be:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <std+0x60>)
 800a6c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f8 <std+0x64>)
 800a6c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <std+0x68>)
 800a6c8:	6224      	str	r4, [r4, #32]
 800a6ca:	429c      	cmp	r4, r3
 800a6cc:	d006      	beq.n	800a6dc <std+0x48>
 800a6ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6d2:	4294      	cmp	r4, r2
 800a6d4:	d002      	beq.n	800a6dc <std+0x48>
 800a6d6:	33d0      	adds	r3, #208	@ 0xd0
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	d105      	bne.n	800a6e8 <std+0x54>
 800a6dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f000 ba5c 	b.w	800aba0 <__retarget_lock_init_recursive>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	bf00      	nop
 800a6ec:	0800a8f9 	.word	0x0800a8f9
 800a6f0:	0800a91b 	.word	0x0800a91b
 800a6f4:	0800a953 	.word	0x0800a953
 800a6f8:	0800a977 	.word	0x0800a977
 800a6fc:	2400034c 	.word	0x2400034c

0800a700 <stdio_exit_handler>:
 800a700:	4a02      	ldr	r2, [pc, #8]	@ (800a70c <stdio_exit_handler+0xc>)
 800a702:	4903      	ldr	r1, [pc, #12]	@ (800a710 <stdio_exit_handler+0x10>)
 800a704:	4803      	ldr	r0, [pc, #12]	@ (800a714 <stdio_exit_handler+0x14>)
 800a706:	f000 b869 	b.w	800a7dc <_fwalk_sglue>
 800a70a:	bf00      	nop
 800a70c:	24000014 	.word	0x24000014
 800a710:	0800c3f5 	.word	0x0800c3f5
 800a714:	24000024 	.word	0x24000024

0800a718 <cleanup_stdio>:
 800a718:	6841      	ldr	r1, [r0, #4]
 800a71a:	4b0c      	ldr	r3, [pc, #48]	@ (800a74c <cleanup_stdio+0x34>)
 800a71c:	4299      	cmp	r1, r3
 800a71e:	b510      	push	{r4, lr}
 800a720:	4604      	mov	r4, r0
 800a722:	d001      	beq.n	800a728 <cleanup_stdio+0x10>
 800a724:	f001 fe66 	bl	800c3f4 <_fflush_r>
 800a728:	68a1      	ldr	r1, [r4, #8]
 800a72a:	4b09      	ldr	r3, [pc, #36]	@ (800a750 <cleanup_stdio+0x38>)
 800a72c:	4299      	cmp	r1, r3
 800a72e:	d002      	beq.n	800a736 <cleanup_stdio+0x1e>
 800a730:	4620      	mov	r0, r4
 800a732:	f001 fe5f 	bl	800c3f4 <_fflush_r>
 800a736:	68e1      	ldr	r1, [r4, #12]
 800a738:	4b06      	ldr	r3, [pc, #24]	@ (800a754 <cleanup_stdio+0x3c>)
 800a73a:	4299      	cmp	r1, r3
 800a73c:	d004      	beq.n	800a748 <cleanup_stdio+0x30>
 800a73e:	4620      	mov	r0, r4
 800a740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a744:	f001 be56 	b.w	800c3f4 <_fflush_r>
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	2400034c 	.word	0x2400034c
 800a750:	240003b4 	.word	0x240003b4
 800a754:	2400041c 	.word	0x2400041c

0800a758 <global_stdio_init.part.0>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <global_stdio_init.part.0+0x30>)
 800a75c:	4c0b      	ldr	r4, [pc, #44]	@ (800a78c <global_stdio_init.part.0+0x34>)
 800a75e:	4a0c      	ldr	r2, [pc, #48]	@ (800a790 <global_stdio_init.part.0+0x38>)
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	4620      	mov	r0, r4
 800a764:	2200      	movs	r2, #0
 800a766:	2104      	movs	r1, #4
 800a768:	f7ff ff94 	bl	800a694 <std>
 800a76c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a770:	2201      	movs	r2, #1
 800a772:	2109      	movs	r1, #9
 800a774:	f7ff ff8e 	bl	800a694 <std>
 800a778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a77c:	2202      	movs	r2, #2
 800a77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a782:	2112      	movs	r1, #18
 800a784:	f7ff bf86 	b.w	800a694 <std>
 800a788:	24000484 	.word	0x24000484
 800a78c:	2400034c 	.word	0x2400034c
 800a790:	0800a701 	.word	0x0800a701

0800a794 <__sfp_lock_acquire>:
 800a794:	4801      	ldr	r0, [pc, #4]	@ (800a79c <__sfp_lock_acquire+0x8>)
 800a796:	f000 ba04 	b.w	800aba2 <__retarget_lock_acquire_recursive>
 800a79a:	bf00      	nop
 800a79c:	2400048d 	.word	0x2400048d

0800a7a0 <__sfp_lock_release>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	@ (800a7a8 <__sfp_lock_release+0x8>)
 800a7a2:	f000 b9ff 	b.w	800aba4 <__retarget_lock_release_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	2400048d 	.word	0x2400048d

0800a7ac <__sinit>:
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	f7ff fff0 	bl	800a794 <__sfp_lock_acquire>
 800a7b4:	6a23      	ldr	r3, [r4, #32]
 800a7b6:	b11b      	cbz	r3, 800a7c0 <__sinit+0x14>
 800a7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7bc:	f7ff bff0 	b.w	800a7a0 <__sfp_lock_release>
 800a7c0:	4b04      	ldr	r3, [pc, #16]	@ (800a7d4 <__sinit+0x28>)
 800a7c2:	6223      	str	r3, [r4, #32]
 800a7c4:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <__sinit+0x2c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1f5      	bne.n	800a7b8 <__sinit+0xc>
 800a7cc:	f7ff ffc4 	bl	800a758 <global_stdio_init.part.0>
 800a7d0:	e7f2      	b.n	800a7b8 <__sinit+0xc>
 800a7d2:	bf00      	nop
 800a7d4:	0800a719 	.word	0x0800a719
 800a7d8:	24000484 	.word	0x24000484

0800a7dc <_fwalk_sglue>:
 800a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	4688      	mov	r8, r1
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a7f0:	d505      	bpl.n	800a7fe <_fwalk_sglue+0x22>
 800a7f2:	6824      	ldr	r4, [r4, #0]
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d1f7      	bne.n	800a7e8 <_fwalk_sglue+0xc>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d907      	bls.n	800a814 <_fwalk_sglue+0x38>
 800a804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a808:	3301      	adds	r3, #1
 800a80a:	d003      	beq.n	800a814 <_fwalk_sglue+0x38>
 800a80c:	4629      	mov	r1, r5
 800a80e:	4638      	mov	r0, r7
 800a810:	47c0      	blx	r8
 800a812:	4306      	orrs	r6, r0
 800a814:	3568      	adds	r5, #104	@ 0x68
 800a816:	e7e9      	b.n	800a7ec <_fwalk_sglue+0x10>

0800a818 <iprintf>:
 800a818:	b40f      	push	{r0, r1, r2, r3}
 800a81a:	b507      	push	{r0, r1, r2, lr}
 800a81c:	4906      	ldr	r1, [pc, #24]	@ (800a838 <iprintf+0x20>)
 800a81e:	ab04      	add	r3, sp, #16
 800a820:	6808      	ldr	r0, [r1, #0]
 800a822:	f853 2b04 	ldr.w	r2, [r3], #4
 800a826:	6881      	ldr	r1, [r0, #8]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	f001 fc47 	bl	800c0bc <_vfiprintf_r>
 800a82e:	b003      	add	sp, #12
 800a830:	f85d eb04 	ldr.w	lr, [sp], #4
 800a834:	b004      	add	sp, #16
 800a836:	4770      	bx	lr
 800a838:	24000020 	.word	0x24000020

0800a83c <_puts_r>:
 800a83c:	6a03      	ldr	r3, [r0, #32]
 800a83e:	b570      	push	{r4, r5, r6, lr}
 800a840:	6884      	ldr	r4, [r0, #8]
 800a842:	4605      	mov	r5, r0
 800a844:	460e      	mov	r6, r1
 800a846:	b90b      	cbnz	r3, 800a84c <_puts_r+0x10>
 800a848:	f7ff ffb0 	bl	800a7ac <__sinit>
 800a84c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a84e:	07db      	lsls	r3, r3, #31
 800a850:	d405      	bmi.n	800a85e <_puts_r+0x22>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	0598      	lsls	r0, r3, #22
 800a856:	d402      	bmi.n	800a85e <_puts_r+0x22>
 800a858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a85a:	f000 f9a2 	bl	800aba2 <__retarget_lock_acquire_recursive>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	0719      	lsls	r1, r3, #28
 800a862:	d502      	bpl.n	800a86a <_puts_r+0x2e>
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d135      	bne.n	800a8d6 <_puts_r+0x9a>
 800a86a:	4621      	mov	r1, r4
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 f8c5 	bl	800a9fc <__swsetup_r>
 800a872:	b380      	cbz	r0, 800a8d6 <_puts_r+0x9a>
 800a874:	f04f 35ff 	mov.w	r5, #4294967295
 800a878:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a87a:	07da      	lsls	r2, r3, #31
 800a87c:	d405      	bmi.n	800a88a <_puts_r+0x4e>
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	059b      	lsls	r3, r3, #22
 800a882:	d402      	bmi.n	800a88a <_puts_r+0x4e>
 800a884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a886:	f000 f98d 	bl	800aba4 <__retarget_lock_release_recursive>
 800a88a:	4628      	mov	r0, r5
 800a88c:	bd70      	pop	{r4, r5, r6, pc}
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da04      	bge.n	800a89c <_puts_r+0x60>
 800a892:	69a2      	ldr	r2, [r4, #24]
 800a894:	429a      	cmp	r2, r3
 800a896:	dc17      	bgt.n	800a8c8 <_puts_r+0x8c>
 800a898:	290a      	cmp	r1, #10
 800a89a:	d015      	beq.n	800a8c8 <_puts_r+0x8c>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	6022      	str	r2, [r4, #0]
 800a8a2:	7019      	strb	r1, [r3, #0]
 800a8a4:	68a3      	ldr	r3, [r4, #8]
 800a8a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	60a3      	str	r3, [r4, #8]
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	d1ed      	bne.n	800a88e <_puts_r+0x52>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da11      	bge.n	800a8da <_puts_r+0x9e>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	210a      	movs	r1, #10
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 f85f 	bl	800a97e <__swbuf_r>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d0d7      	beq.n	800a874 <_puts_r+0x38>
 800a8c4:	250a      	movs	r5, #10
 800a8c6:	e7d7      	b.n	800a878 <_puts_r+0x3c>
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f857 	bl	800a97e <__swbuf_r>
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	d1e7      	bne.n	800a8a4 <_puts_r+0x68>
 800a8d4:	e7ce      	b.n	800a874 <_puts_r+0x38>
 800a8d6:	3e01      	subs	r6, #1
 800a8d8:	e7e4      	b.n	800a8a4 <_puts_r+0x68>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	220a      	movs	r2, #10
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e7ee      	b.n	800a8c4 <_puts_r+0x88>
	...

0800a8e8 <puts>:
 800a8e8:	4b02      	ldr	r3, [pc, #8]	@ (800a8f4 <puts+0xc>)
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f7ff bfa5 	b.w	800a83c <_puts_r>
 800a8f2:	bf00      	nop
 800a8f4:	24000020 	.word	0x24000020

0800a8f8 <__sread>:
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	f000 f900 	bl	800ab04 <_read_r>
 800a904:	2800      	cmp	r0, #0
 800a906:	bfab      	itete	ge
 800a908:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a90a:	89a3      	ldrhlt	r3, [r4, #12]
 800a90c:	181b      	addge	r3, r3, r0
 800a90e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a912:	bfac      	ite	ge
 800a914:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a916:	81a3      	strhlt	r3, [r4, #12]
 800a918:	bd10      	pop	{r4, pc}

0800a91a <__swrite>:
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	461f      	mov	r7, r3
 800a920:	898b      	ldrh	r3, [r1, #12]
 800a922:	05db      	lsls	r3, r3, #23
 800a924:	4605      	mov	r5, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4616      	mov	r6, r2
 800a92a:	d505      	bpl.n	800a938 <__swrite+0x1e>
 800a92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a930:	2302      	movs	r3, #2
 800a932:	2200      	movs	r2, #0
 800a934:	f000 f8d4 	bl	800aae0 <_lseek_r>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a93e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	4632      	mov	r2, r6
 800a946:	463b      	mov	r3, r7
 800a948:	4628      	mov	r0, r5
 800a94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94e:	f000 b8eb 	b.w	800ab28 <_write_r>

0800a952 <__sseek>:
 800a952:	b510      	push	{r4, lr}
 800a954:	460c      	mov	r4, r1
 800a956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95a:	f000 f8c1 	bl	800aae0 <_lseek_r>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	bf15      	itete	ne
 800a964:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a966:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a96a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a96e:	81a3      	strheq	r3, [r4, #12]
 800a970:	bf18      	it	ne
 800a972:	81a3      	strhne	r3, [r4, #12]
 800a974:	bd10      	pop	{r4, pc}

0800a976 <__sclose>:
 800a976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97a:	f000 b8a1 	b.w	800aac0 <_close_r>

0800a97e <__swbuf_r>:
 800a97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a980:	460e      	mov	r6, r1
 800a982:	4614      	mov	r4, r2
 800a984:	4605      	mov	r5, r0
 800a986:	b118      	cbz	r0, 800a990 <__swbuf_r+0x12>
 800a988:	6a03      	ldr	r3, [r0, #32]
 800a98a:	b90b      	cbnz	r3, 800a990 <__swbuf_r+0x12>
 800a98c:	f7ff ff0e 	bl	800a7ac <__sinit>
 800a990:	69a3      	ldr	r3, [r4, #24]
 800a992:	60a3      	str	r3, [r4, #8]
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	071a      	lsls	r2, r3, #28
 800a998:	d501      	bpl.n	800a99e <__swbuf_r+0x20>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	b943      	cbnz	r3, 800a9b0 <__swbuf_r+0x32>
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f000 f82b 	bl	800a9fc <__swsetup_r>
 800a9a6:	b118      	cbz	r0, 800a9b0 <__swbuf_r+0x32>
 800a9a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	6922      	ldr	r2, [r4, #16]
 800a9b4:	1a98      	subs	r0, r3, r2
 800a9b6:	6963      	ldr	r3, [r4, #20]
 800a9b8:	b2f6      	uxtb	r6, r6
 800a9ba:	4283      	cmp	r3, r0
 800a9bc:	4637      	mov	r7, r6
 800a9be:	dc05      	bgt.n	800a9cc <__swbuf_r+0x4e>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f001 fd16 	bl	800c3f4 <_fflush_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d1ed      	bne.n	800a9a8 <__swbuf_r+0x2a>
 800a9cc:	68a3      	ldr	r3, [r4, #8]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	6022      	str	r2, [r4, #0]
 800a9d8:	701e      	strb	r6, [r3, #0]
 800a9da:	6962      	ldr	r2, [r4, #20]
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d004      	beq.n	800a9ec <__swbuf_r+0x6e>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	07db      	lsls	r3, r3, #31
 800a9e6:	d5e1      	bpl.n	800a9ac <__swbuf_r+0x2e>
 800a9e8:	2e0a      	cmp	r6, #10
 800a9ea:	d1df      	bne.n	800a9ac <__swbuf_r+0x2e>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f001 fd00 	bl	800c3f4 <_fflush_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d0d9      	beq.n	800a9ac <__swbuf_r+0x2e>
 800a9f8:	e7d6      	b.n	800a9a8 <__swbuf_r+0x2a>
	...

0800a9fc <__swsetup_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	4b29      	ldr	r3, [pc, #164]	@ (800aaa4 <__swsetup_r+0xa8>)
 800aa00:	4605      	mov	r5, r0
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	460c      	mov	r4, r1
 800aa06:	b118      	cbz	r0, 800aa10 <__swsetup_r+0x14>
 800aa08:	6a03      	ldr	r3, [r0, #32]
 800aa0a:	b90b      	cbnz	r3, 800aa10 <__swsetup_r+0x14>
 800aa0c:	f7ff fece 	bl	800a7ac <__sinit>
 800aa10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa14:	0719      	lsls	r1, r3, #28
 800aa16:	d422      	bmi.n	800aa5e <__swsetup_r+0x62>
 800aa18:	06da      	lsls	r2, r3, #27
 800aa1a:	d407      	bmi.n	800aa2c <__swsetup_r+0x30>
 800aa1c:	2209      	movs	r2, #9
 800aa1e:	602a      	str	r2, [r5, #0]
 800aa20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2a:	e033      	b.n	800aa94 <__swsetup_r+0x98>
 800aa2c:	0758      	lsls	r0, r3, #29
 800aa2e:	d512      	bpl.n	800aa56 <__swsetup_r+0x5a>
 800aa30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa32:	b141      	cbz	r1, 800aa46 <__swsetup_r+0x4a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__swsetup_r+0x46>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 fe99 	bl	800b774 <_free_r>
 800aa42:	2300      	movs	r3, #0
 800aa44:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f043 0308 	orr.w	r3, r3, #8
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	b94b      	cbnz	r3, 800aa76 <__swsetup_r+0x7a>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa6c:	d003      	beq.n	800aa76 <__swsetup_r+0x7a>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f001 fd0d 	bl	800c490 <__smakebuf_r>
 800aa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7a:	f013 0201 	ands.w	r2, r3, #1
 800aa7e:	d00a      	beq.n	800aa96 <__swsetup_r+0x9a>
 800aa80:	2200      	movs	r2, #0
 800aa82:	60a2      	str	r2, [r4, #8]
 800aa84:	6962      	ldr	r2, [r4, #20]
 800aa86:	4252      	negs	r2, r2
 800aa88:	61a2      	str	r2, [r4, #24]
 800aa8a:	6922      	ldr	r2, [r4, #16]
 800aa8c:	b942      	cbnz	r2, 800aaa0 <__swsetup_r+0xa4>
 800aa8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa92:	d1c5      	bne.n	800aa20 <__swsetup_r+0x24>
 800aa94:	bd38      	pop	{r3, r4, r5, pc}
 800aa96:	0799      	lsls	r1, r3, #30
 800aa98:	bf58      	it	pl
 800aa9a:	6962      	ldrpl	r2, [r4, #20]
 800aa9c:	60a2      	str	r2, [r4, #8]
 800aa9e:	e7f4      	b.n	800aa8a <__swsetup_r+0x8e>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e7f7      	b.n	800aa94 <__swsetup_r+0x98>
 800aaa4:	24000020 	.word	0x24000020

0800aaa8 <memset>:
 800aaa8:	4402      	add	r2, r0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d100      	bne.n	800aab2 <memset+0xa>
 800aab0:	4770      	bx	lr
 800aab2:	f803 1b01 	strb.w	r1, [r3], #1
 800aab6:	e7f9      	b.n	800aaac <memset+0x4>

0800aab8 <_localeconv_r>:
 800aab8:	4800      	ldr	r0, [pc, #0]	@ (800aabc <_localeconv_r+0x4>)
 800aaba:	4770      	bx	lr
 800aabc:	24000160 	.word	0x24000160

0800aac0 <_close_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d06      	ldr	r5, [pc, #24]	@ (800aadc <_close_r+0x1c>)
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	4608      	mov	r0, r1
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	f7f6 fb02 	bl	80010d4 <_close>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_close_r+0x1a>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_close_r+0x1a>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	24000488 	.word	0x24000488

0800aae0 <_lseek_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	@ (800ab00 <_lseek_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7f6 fb17 	bl	8001122 <_lseek>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_lseek_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_lseek_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	24000488 	.word	0x24000488

0800ab04 <_read_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4d07      	ldr	r5, [pc, #28]	@ (800ab24 <_read_r+0x20>)
 800ab08:	4604      	mov	r4, r0
 800ab0a:	4608      	mov	r0, r1
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	602a      	str	r2, [r5, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	f7f6 faa5 	bl	8001062 <_read>
 800ab18:	1c43      	adds	r3, r0, #1
 800ab1a:	d102      	bne.n	800ab22 <_read_r+0x1e>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	b103      	cbz	r3, 800ab22 <_read_r+0x1e>
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	24000488 	.word	0x24000488

0800ab28 <_write_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	@ (800ab48 <_write_r+0x20>)
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	4608      	mov	r0, r1
 800ab30:	4611      	mov	r1, r2
 800ab32:	2200      	movs	r2, #0
 800ab34:	602a      	str	r2, [r5, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f7f6 fab0 	bl	800109c <_write>
 800ab3c:	1c43      	adds	r3, r0, #1
 800ab3e:	d102      	bne.n	800ab46 <_write_r+0x1e>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	b103      	cbz	r3, 800ab46 <_write_r+0x1e>
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	24000488 	.word	0x24000488

0800ab4c <__errno>:
 800ab4c:	4b01      	ldr	r3, [pc, #4]	@ (800ab54 <__errno+0x8>)
 800ab4e:	6818      	ldr	r0, [r3, #0]
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	24000020 	.word	0x24000020

0800ab58 <__libc_init_array>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	4d0d      	ldr	r5, [pc, #52]	@ (800ab90 <__libc_init_array+0x38>)
 800ab5c:	4c0d      	ldr	r4, [pc, #52]	@ (800ab94 <__libc_init_array+0x3c>)
 800ab5e:	1b64      	subs	r4, r4, r5
 800ab60:	10a4      	asrs	r4, r4, #2
 800ab62:	2600      	movs	r6, #0
 800ab64:	42a6      	cmp	r6, r4
 800ab66:	d109      	bne.n	800ab7c <__libc_init_array+0x24>
 800ab68:	4d0b      	ldr	r5, [pc, #44]	@ (800ab98 <__libc_init_array+0x40>)
 800ab6a:	4c0c      	ldr	r4, [pc, #48]	@ (800ab9c <__libc_init_array+0x44>)
 800ab6c:	f001 fdbc 	bl	800c6e8 <_init>
 800ab70:	1b64      	subs	r4, r4, r5
 800ab72:	10a4      	asrs	r4, r4, #2
 800ab74:	2600      	movs	r6, #0
 800ab76:	42a6      	cmp	r6, r4
 800ab78:	d105      	bne.n	800ab86 <__libc_init_array+0x2e>
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab80:	4798      	blx	r3
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7ee      	b.n	800ab64 <__libc_init_array+0xc>
 800ab86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8a:	4798      	blx	r3
 800ab8c:	3601      	adds	r6, #1
 800ab8e:	e7f2      	b.n	800ab76 <__libc_init_array+0x1e>
 800ab90:	0800cbdc 	.word	0x0800cbdc
 800ab94:	0800cbdc 	.word	0x0800cbdc
 800ab98:	0800cbdc 	.word	0x0800cbdc
 800ab9c:	0800cbe0 	.word	0x0800cbe0

0800aba0 <__retarget_lock_init_recursive>:
 800aba0:	4770      	bx	lr

0800aba2 <__retarget_lock_acquire_recursive>:
 800aba2:	4770      	bx	lr

0800aba4 <__retarget_lock_release_recursive>:
 800aba4:	4770      	bx	lr

0800aba6 <quorem>:
 800aba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abaa:	6903      	ldr	r3, [r0, #16]
 800abac:	690c      	ldr	r4, [r1, #16]
 800abae:	42a3      	cmp	r3, r4
 800abb0:	4607      	mov	r7, r0
 800abb2:	db7e      	blt.n	800acb2 <quorem+0x10c>
 800abb4:	3c01      	subs	r4, #1
 800abb6:	f101 0814 	add.w	r8, r1, #20
 800abba:	00a3      	lsls	r3, r4, #2
 800abbc:	f100 0514 	add.w	r5, r0, #20
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd0:	3301      	adds	r3, #1
 800abd2:	429a      	cmp	r2, r3
 800abd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abd8:	fbb2 f6f3 	udiv	r6, r2, r3
 800abdc:	d32e      	bcc.n	800ac3c <quorem+0x96>
 800abde:	f04f 0a00 	mov.w	sl, #0
 800abe2:	46c4      	mov	ip, r8
 800abe4:	46ae      	mov	lr, r5
 800abe6:	46d3      	mov	fp, sl
 800abe8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abec:	b298      	uxth	r0, r3
 800abee:	fb06 a000 	mla	r0, r6, r0, sl
 800abf2:	0c02      	lsrs	r2, r0, #16
 800abf4:	0c1b      	lsrs	r3, r3, #16
 800abf6:	fb06 2303 	mla	r3, r6, r3, r2
 800abfa:	f8de 2000 	ldr.w	r2, [lr]
 800abfe:	b280      	uxth	r0, r0
 800ac00:	b292      	uxth	r2, r2
 800ac02:	1a12      	subs	r2, r2, r0
 800ac04:	445a      	add	r2, fp
 800ac06:	f8de 0000 	ldr.w	r0, [lr]
 800ac0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac18:	b292      	uxth	r2, r2
 800ac1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac1e:	45e1      	cmp	r9, ip
 800ac20:	f84e 2b04 	str.w	r2, [lr], #4
 800ac24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac28:	d2de      	bcs.n	800abe8 <quorem+0x42>
 800ac2a:	9b00      	ldr	r3, [sp, #0]
 800ac2c:	58eb      	ldr	r3, [r5, r3]
 800ac2e:	b92b      	cbnz	r3, 800ac3c <quorem+0x96>
 800ac30:	9b01      	ldr	r3, [sp, #4]
 800ac32:	3b04      	subs	r3, #4
 800ac34:	429d      	cmp	r5, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	d32f      	bcc.n	800ac9a <quorem+0xf4>
 800ac3a:	613c      	str	r4, [r7, #16]
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f001 f90b 	bl	800be58 <__mcmp>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	db25      	blt.n	800ac92 <quorem+0xec>
 800ac46:	4629      	mov	r1, r5
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac4e:	f8d1 c000 	ldr.w	ip, [r1]
 800ac52:	fa1f fe82 	uxth.w	lr, r2
 800ac56:	fa1f f38c 	uxth.w	r3, ip
 800ac5a:	eba3 030e 	sub.w	r3, r3, lr
 800ac5e:	4403      	add	r3, r0
 800ac60:	0c12      	lsrs	r2, r2, #16
 800ac62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac70:	45c1      	cmp	r9, r8
 800ac72:	f841 3b04 	str.w	r3, [r1], #4
 800ac76:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac7a:	d2e6      	bcs.n	800ac4a <quorem+0xa4>
 800ac7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac84:	b922      	cbnz	r2, 800ac90 <quorem+0xea>
 800ac86:	3b04      	subs	r3, #4
 800ac88:	429d      	cmp	r5, r3
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	d30b      	bcc.n	800aca6 <quorem+0x100>
 800ac8e:	613c      	str	r4, [r7, #16]
 800ac90:	3601      	adds	r6, #1
 800ac92:	4630      	mov	r0, r6
 800ac94:	b003      	add	sp, #12
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	6812      	ldr	r2, [r2, #0]
 800ac9c:	3b04      	subs	r3, #4
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	d1cb      	bne.n	800ac3a <quorem+0x94>
 800aca2:	3c01      	subs	r4, #1
 800aca4:	e7c6      	b.n	800ac34 <quorem+0x8e>
 800aca6:	6812      	ldr	r2, [r2, #0]
 800aca8:	3b04      	subs	r3, #4
 800acaa:	2a00      	cmp	r2, #0
 800acac:	d1ef      	bne.n	800ac8e <quorem+0xe8>
 800acae:	3c01      	subs	r4, #1
 800acb0:	e7ea      	b.n	800ac88 <quorem+0xe2>
 800acb2:	2000      	movs	r0, #0
 800acb4:	e7ee      	b.n	800ac94 <quorem+0xee>
	...

0800acb8 <_dtoa_r>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	ed2d 8b02 	vpush	{d8}
 800acc0:	69c7      	ldr	r7, [r0, #28]
 800acc2:	b091      	sub	sp, #68	@ 0x44
 800acc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acc8:	ec55 4b10 	vmov	r4, r5, d0
 800accc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800acce:	9107      	str	r1, [sp, #28]
 800acd0:	4681      	mov	r9, r0
 800acd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800acd4:	930d      	str	r3, [sp, #52]	@ 0x34
 800acd6:	b97f      	cbnz	r7, 800acf8 <_dtoa_r+0x40>
 800acd8:	2010      	movs	r0, #16
 800acda:	f000 fd95 	bl	800b808 <malloc>
 800acde:	4602      	mov	r2, r0
 800ace0:	f8c9 001c 	str.w	r0, [r9, #28]
 800ace4:	b920      	cbnz	r0, 800acf0 <_dtoa_r+0x38>
 800ace6:	4ba0      	ldr	r3, [pc, #640]	@ (800af68 <_dtoa_r+0x2b0>)
 800ace8:	21ef      	movs	r1, #239	@ 0xef
 800acea:	48a0      	ldr	r0, [pc, #640]	@ (800af6c <_dtoa_r+0x2b4>)
 800acec:	f001 fc4c 	bl	800c588 <__assert_func>
 800acf0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acf4:	6007      	str	r7, [r0, #0]
 800acf6:	60c7      	str	r7, [r0, #12]
 800acf8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800acfc:	6819      	ldr	r1, [r3, #0]
 800acfe:	b159      	cbz	r1, 800ad18 <_dtoa_r+0x60>
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	604a      	str	r2, [r1, #4]
 800ad04:	2301      	movs	r3, #1
 800ad06:	4093      	lsls	r3, r2
 800ad08:	608b      	str	r3, [r1, #8]
 800ad0a:	4648      	mov	r0, r9
 800ad0c:	f000 fe72 	bl	800b9f4 <_Bfree>
 800ad10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	1e2b      	subs	r3, r5, #0
 800ad1a:	bfbb      	ittet	lt
 800ad1c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad20:	9303      	strlt	r3, [sp, #12]
 800ad22:	2300      	movge	r3, #0
 800ad24:	2201      	movlt	r2, #1
 800ad26:	bfac      	ite	ge
 800ad28:	6033      	strge	r3, [r6, #0]
 800ad2a:	6032      	strlt	r2, [r6, #0]
 800ad2c:	4b90      	ldr	r3, [pc, #576]	@ (800af70 <_dtoa_r+0x2b8>)
 800ad2e:	9e03      	ldr	r6, [sp, #12]
 800ad30:	43b3      	bics	r3, r6
 800ad32:	d110      	bne.n	800ad56 <_dtoa_r+0x9e>
 800ad34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad36:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ad40:	4323      	orrs	r3, r4
 800ad42:	f000 84e6 	beq.w	800b712 <_dtoa_r+0xa5a>
 800ad46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad48:	4f8a      	ldr	r7, [pc, #552]	@ (800af74 <_dtoa_r+0x2bc>)
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 84e8 	beq.w	800b720 <_dtoa_r+0xa68>
 800ad50:	1cfb      	adds	r3, r7, #3
 800ad52:	f000 bce3 	b.w	800b71c <_dtoa_r+0xa64>
 800ad56:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ad5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad62:	d10a      	bne.n	800ad7a <_dtoa_r+0xc2>
 800ad64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad66:	2301      	movs	r3, #1
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad6c:	b113      	cbz	r3, 800ad74 <_dtoa_r+0xbc>
 800ad6e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ad70:	4b81      	ldr	r3, [pc, #516]	@ (800af78 <_dtoa_r+0x2c0>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	4f81      	ldr	r7, [pc, #516]	@ (800af7c <_dtoa_r+0x2c4>)
 800ad76:	f000 bcd3 	b.w	800b720 <_dtoa_r+0xa68>
 800ad7a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ad7c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ad7e:	4648      	mov	r0, r9
 800ad80:	eeb0 0b48 	vmov.f64	d0, d8
 800ad84:	f001 f918 	bl	800bfb8 <__d2b>
 800ad88:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ad8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad8e:	9001      	str	r0, [sp, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d045      	beq.n	800ae20 <_dtoa_r+0x168>
 800ad94:	eeb0 7b48 	vmov.f64	d7, d8
 800ad98:	ee18 1a90 	vmov	r1, s17
 800ad9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ada0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ada4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ada8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800adac:	2500      	movs	r5, #0
 800adae:	ee07 1a90 	vmov	s15, r1
 800adb2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800adb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800af50 <_dtoa_r+0x298>
 800adba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800adbe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800af58 <_dtoa_r+0x2a0>
 800adc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800adc6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800af60 <_dtoa_r+0x2a8>
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800add2:	eeb0 7b46 	vmov.f64	d7, d6
 800add6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800adda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800adde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade6:	ee16 8a90 	vmov	r8, s13
 800adea:	d508      	bpl.n	800adfe <_dtoa_r+0x146>
 800adec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800adf0:	eeb4 6b47 	vcmp.f64	d6, d7
 800adf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf8:	bf18      	it	ne
 800adfa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800adfe:	f1b8 0f16 	cmp.w	r8, #22
 800ae02:	d82b      	bhi.n	800ae5c <_dtoa_r+0x1a4>
 800ae04:	495e      	ldr	r1, [pc, #376]	@ (800af80 <_dtoa_r+0x2c8>)
 800ae06:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ae0a:	ed91 7b00 	vldr	d7, [r1]
 800ae0e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae16:	d501      	bpl.n	800ae1c <_dtoa_r+0x164>
 800ae18:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	e01e      	b.n	800ae5e <_dtoa_r+0x1a6>
 800ae20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae22:	4413      	add	r3, r2
 800ae24:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ae28:	2920      	cmp	r1, #32
 800ae2a:	bfc1      	itttt	gt
 800ae2c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ae30:	408e      	lslgt	r6, r1
 800ae32:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ae36:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ae3a:	bfd6      	itet	le
 800ae3c:	f1c1 0120 	rsble	r1, r1, #32
 800ae40:	4331      	orrgt	r1, r6
 800ae42:	fa04 f101 	lslle.w	r1, r4, r1
 800ae46:	ee07 1a90 	vmov	s15, r1
 800ae4a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	ee17 1a90 	vmov	r1, s15
 800ae54:	2501      	movs	r5, #1
 800ae56:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ae5a:	e7a8      	b.n	800adae <_dtoa_r+0xf6>
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	1ad2      	subs	r2, r2, r3
 800ae60:	1e53      	subs	r3, r2, #1
 800ae62:	9306      	str	r3, [sp, #24]
 800ae64:	bf45      	ittet	mi
 800ae66:	f1c2 0301 	rsbmi	r3, r2, #1
 800ae6a:	9304      	strmi	r3, [sp, #16]
 800ae6c:	2300      	movpl	r3, #0
 800ae6e:	2300      	movmi	r3, #0
 800ae70:	bf4c      	ite	mi
 800ae72:	9306      	strmi	r3, [sp, #24]
 800ae74:	9304      	strpl	r3, [sp, #16]
 800ae76:	f1b8 0f00 	cmp.w	r8, #0
 800ae7a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ae7c:	db18      	blt.n	800aeb0 <_dtoa_r+0x1f8>
 800ae7e:	9b06      	ldr	r3, [sp, #24]
 800ae80:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ae84:	4443      	add	r3, r8
 800ae86:	9306      	str	r3, [sp, #24]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9a07      	ldr	r2, [sp, #28]
 800ae8c:	2a09      	cmp	r2, #9
 800ae8e:	d845      	bhi.n	800af1c <_dtoa_r+0x264>
 800ae90:	2a05      	cmp	r2, #5
 800ae92:	bfc4      	itt	gt
 800ae94:	3a04      	subgt	r2, #4
 800ae96:	9207      	strgt	r2, [sp, #28]
 800ae98:	9a07      	ldr	r2, [sp, #28]
 800ae9a:	f1a2 0202 	sub.w	r2, r2, #2
 800ae9e:	bfcc      	ite	gt
 800aea0:	2400      	movgt	r4, #0
 800aea2:	2401      	movle	r4, #1
 800aea4:	2a03      	cmp	r2, #3
 800aea6:	d844      	bhi.n	800af32 <_dtoa_r+0x27a>
 800aea8:	e8df f002 	tbb	[pc, r2]
 800aeac:	0b173634 	.word	0x0b173634
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	eba3 0308 	sub.w	r3, r3, r8
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	920a      	str	r2, [sp, #40]	@ 0x28
 800aebc:	f1c8 0300 	rsb	r3, r8, #0
 800aec0:	e7e3      	b.n	800ae8a <_dtoa_r+0x1d2>
 800aec2:	2201      	movs	r2, #1
 800aec4:	9208      	str	r2, [sp, #32]
 800aec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aec8:	eb08 0b02 	add.w	fp, r8, r2
 800aecc:	f10b 0a01 	add.w	sl, fp, #1
 800aed0:	4652      	mov	r2, sl
 800aed2:	2a01      	cmp	r2, #1
 800aed4:	bfb8      	it	lt
 800aed6:	2201      	movlt	r2, #1
 800aed8:	e006      	b.n	800aee8 <_dtoa_r+0x230>
 800aeda:	2201      	movs	r2, #1
 800aedc:	9208      	str	r2, [sp, #32]
 800aede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee0:	2a00      	cmp	r2, #0
 800aee2:	dd29      	ble.n	800af38 <_dtoa_r+0x280>
 800aee4:	4693      	mov	fp, r2
 800aee6:	4692      	mov	sl, r2
 800aee8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800aeec:	2100      	movs	r1, #0
 800aeee:	2004      	movs	r0, #4
 800aef0:	f100 0614 	add.w	r6, r0, #20
 800aef4:	4296      	cmp	r6, r2
 800aef6:	d926      	bls.n	800af46 <_dtoa_r+0x28e>
 800aef8:	6079      	str	r1, [r7, #4]
 800aefa:	4648      	mov	r0, r9
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	f000 fd39 	bl	800b974 <_Balloc>
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	4607      	mov	r7, r0
 800af06:	2800      	cmp	r0, #0
 800af08:	d13e      	bne.n	800af88 <_dtoa_r+0x2d0>
 800af0a:	4b1e      	ldr	r3, [pc, #120]	@ (800af84 <_dtoa_r+0x2cc>)
 800af0c:	4602      	mov	r2, r0
 800af0e:	f240 11af 	movw	r1, #431	@ 0x1af
 800af12:	e6ea      	b.n	800acea <_dtoa_r+0x32>
 800af14:	2200      	movs	r2, #0
 800af16:	e7e1      	b.n	800aedc <_dtoa_r+0x224>
 800af18:	2200      	movs	r2, #0
 800af1a:	e7d3      	b.n	800aec4 <_dtoa_r+0x20c>
 800af1c:	2401      	movs	r4, #1
 800af1e:	2200      	movs	r2, #0
 800af20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800af24:	f04f 3bff 	mov.w	fp, #4294967295
 800af28:	2100      	movs	r1, #0
 800af2a:	46da      	mov	sl, fp
 800af2c:	2212      	movs	r2, #18
 800af2e:	9109      	str	r1, [sp, #36]	@ 0x24
 800af30:	e7da      	b.n	800aee8 <_dtoa_r+0x230>
 800af32:	2201      	movs	r2, #1
 800af34:	9208      	str	r2, [sp, #32]
 800af36:	e7f5      	b.n	800af24 <_dtoa_r+0x26c>
 800af38:	f04f 0b01 	mov.w	fp, #1
 800af3c:	46da      	mov	sl, fp
 800af3e:	465a      	mov	r2, fp
 800af40:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800af44:	e7d0      	b.n	800aee8 <_dtoa_r+0x230>
 800af46:	3101      	adds	r1, #1
 800af48:	0040      	lsls	r0, r0, #1
 800af4a:	e7d1      	b.n	800aef0 <_dtoa_r+0x238>
 800af4c:	f3af 8000 	nop.w
 800af50:	636f4361 	.word	0x636f4361
 800af54:	3fd287a7 	.word	0x3fd287a7
 800af58:	8b60c8b3 	.word	0x8b60c8b3
 800af5c:	3fc68a28 	.word	0x3fc68a28
 800af60:	509f79fb 	.word	0x509f79fb
 800af64:	3fd34413 	.word	0x3fd34413
 800af68:	0800c89d 	.word	0x0800c89d
 800af6c:	0800c8b4 	.word	0x0800c8b4
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	0800c899 	.word	0x0800c899
 800af78:	0800c86d 	.word	0x0800c86d
 800af7c:	0800c86c 	.word	0x0800c86c
 800af80:	0800ca08 	.word	0x0800ca08
 800af84:	0800c90c 	.word	0x0800c90c
 800af88:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800af8c:	f1ba 0f0e 	cmp.w	sl, #14
 800af90:	6010      	str	r0, [r2, #0]
 800af92:	d86e      	bhi.n	800b072 <_dtoa_r+0x3ba>
 800af94:	2c00      	cmp	r4, #0
 800af96:	d06c      	beq.n	800b072 <_dtoa_r+0x3ba>
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	f340 80b4 	ble.w	800b108 <_dtoa_r+0x450>
 800afa0:	4ac8      	ldr	r2, [pc, #800]	@ (800b2c4 <_dtoa_r+0x60c>)
 800afa2:	f008 010f 	and.w	r1, r8, #15
 800afa6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800afaa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800afae:	ed92 7b00 	vldr	d7, [r2]
 800afb2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800afb6:	f000 809b 	beq.w	800b0f0 <_dtoa_r+0x438>
 800afba:	4ac3      	ldr	r2, [pc, #780]	@ (800b2c8 <_dtoa_r+0x610>)
 800afbc:	ed92 6b08 	vldr	d6, [r2, #32]
 800afc0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800afc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800afc8:	f001 010f 	and.w	r1, r1, #15
 800afcc:	2203      	movs	r2, #3
 800afce:	48be      	ldr	r0, [pc, #760]	@ (800b2c8 <_dtoa_r+0x610>)
 800afd0:	2900      	cmp	r1, #0
 800afd2:	f040 808f 	bne.w	800b0f4 <_dtoa_r+0x43c>
 800afd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800afda:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800afde:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afe2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afe8:	2900      	cmp	r1, #0
 800afea:	f000 80b3 	beq.w	800b154 <_dtoa_r+0x49c>
 800afee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800aff2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800affa:	f140 80ab 	bpl.w	800b154 <_dtoa_r+0x49c>
 800affe:	f1ba 0f00 	cmp.w	sl, #0
 800b002:	f000 80a7 	beq.w	800b154 <_dtoa_r+0x49c>
 800b006:	f1bb 0f00 	cmp.w	fp, #0
 800b00a:	dd30      	ble.n	800b06e <_dtoa_r+0x3b6>
 800b00c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b010:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b014:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b018:	f108 31ff 	add.w	r1, r8, #4294967295
 800b01c:	9105      	str	r1, [sp, #20]
 800b01e:	3201      	adds	r2, #1
 800b020:	465c      	mov	r4, fp
 800b022:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b026:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b02a:	ee07 2a90 	vmov	s15, r2
 800b02e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b032:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b036:	ee15 2a90 	vmov	r2, s11
 800b03a:	ec51 0b15 	vmov	r0, r1, d5
 800b03e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b042:	2c00      	cmp	r4, #0
 800b044:	f040 808a 	bne.w	800b15c <_dtoa_r+0x4a4>
 800b048:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b04c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b050:	ec41 0b17 	vmov	d7, r0, r1
 800b054:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05c:	f300 826a 	bgt.w	800b534 <_dtoa_r+0x87c>
 800b060:	eeb1 7b47 	vneg.f64	d7, d7
 800b064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	d423      	bmi.n	800b0b6 <_dtoa_r+0x3fe>
 800b06e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b072:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b074:	2a00      	cmp	r2, #0
 800b076:	f2c0 8129 	blt.w	800b2cc <_dtoa_r+0x614>
 800b07a:	f1b8 0f0e 	cmp.w	r8, #14
 800b07e:	f300 8125 	bgt.w	800b2cc <_dtoa_r+0x614>
 800b082:	4b90      	ldr	r3, [pc, #576]	@ (800b2c4 <_dtoa_r+0x60c>)
 800b084:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b088:	ed93 6b00 	vldr	d6, [r3]
 800b08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f280 80c8 	bge.w	800b224 <_dtoa_r+0x56c>
 800b094:	f1ba 0f00 	cmp.w	sl, #0
 800b098:	f300 80c4 	bgt.w	800b224 <_dtoa_r+0x56c>
 800b09c:	d10b      	bne.n	800b0b6 <_dtoa_r+0x3fe>
 800b09e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b0a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b0a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b2:	f2c0 823c 	blt.w	800b52e <_dtoa_r+0x876>
 800b0b6:	2400      	movs	r4, #0
 800b0b8:	4625      	mov	r5, r4
 800b0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	9305      	str	r3, [sp, #20]
 800b0c0:	463e      	mov	r6, r7
 800b0c2:	f04f 0800 	mov.w	r8, #0
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4648      	mov	r0, r9
 800b0ca:	f000 fc93 	bl	800b9f4 <_Bfree>
 800b0ce:	2d00      	cmp	r5, #0
 800b0d0:	f000 80a2 	beq.w	800b218 <_dtoa_r+0x560>
 800b0d4:	f1b8 0f00 	cmp.w	r8, #0
 800b0d8:	d005      	beq.n	800b0e6 <_dtoa_r+0x42e>
 800b0da:	45a8      	cmp	r8, r5
 800b0dc:	d003      	beq.n	800b0e6 <_dtoa_r+0x42e>
 800b0de:	4641      	mov	r1, r8
 800b0e0:	4648      	mov	r0, r9
 800b0e2:	f000 fc87 	bl	800b9f4 <_Bfree>
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4648      	mov	r0, r9
 800b0ea:	f000 fc83 	bl	800b9f4 <_Bfree>
 800b0ee:	e093      	b.n	800b218 <_dtoa_r+0x560>
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	e76c      	b.n	800afce <_dtoa_r+0x316>
 800b0f4:	07cc      	lsls	r4, r1, #31
 800b0f6:	d504      	bpl.n	800b102 <_dtoa_r+0x44a>
 800b0f8:	ed90 6b00 	vldr	d6, [r0]
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b102:	1049      	asrs	r1, r1, #1
 800b104:	3008      	adds	r0, #8
 800b106:	e763      	b.n	800afd0 <_dtoa_r+0x318>
 800b108:	d022      	beq.n	800b150 <_dtoa_r+0x498>
 800b10a:	f1c8 0100 	rsb	r1, r8, #0
 800b10e:	4a6d      	ldr	r2, [pc, #436]	@ (800b2c4 <_dtoa_r+0x60c>)
 800b110:	f001 000f 	and.w	r0, r1, #15
 800b114:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b118:	ed92 7b00 	vldr	d7, [r2]
 800b11c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b120:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b124:	4868      	ldr	r0, [pc, #416]	@ (800b2c8 <_dtoa_r+0x610>)
 800b126:	1109      	asrs	r1, r1, #4
 800b128:	2400      	movs	r4, #0
 800b12a:	2202      	movs	r2, #2
 800b12c:	b929      	cbnz	r1, 800b13a <_dtoa_r+0x482>
 800b12e:	2c00      	cmp	r4, #0
 800b130:	f43f af57 	beq.w	800afe2 <_dtoa_r+0x32a>
 800b134:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b138:	e753      	b.n	800afe2 <_dtoa_r+0x32a>
 800b13a:	07ce      	lsls	r6, r1, #31
 800b13c:	d505      	bpl.n	800b14a <_dtoa_r+0x492>
 800b13e:	ed90 6b00 	vldr	d6, [r0]
 800b142:	3201      	adds	r2, #1
 800b144:	2401      	movs	r4, #1
 800b146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b14a:	1049      	asrs	r1, r1, #1
 800b14c:	3008      	adds	r0, #8
 800b14e:	e7ed      	b.n	800b12c <_dtoa_r+0x474>
 800b150:	2202      	movs	r2, #2
 800b152:	e746      	b.n	800afe2 <_dtoa_r+0x32a>
 800b154:	f8cd 8014 	str.w	r8, [sp, #20]
 800b158:	4654      	mov	r4, sl
 800b15a:	e762      	b.n	800b022 <_dtoa_r+0x36a>
 800b15c:	4a59      	ldr	r2, [pc, #356]	@ (800b2c4 <_dtoa_r+0x60c>)
 800b15e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b162:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b166:	9a08      	ldr	r2, [sp, #32]
 800b168:	ec41 0b17 	vmov	d7, r0, r1
 800b16c:	443c      	add	r4, r7
 800b16e:	b34a      	cbz	r2, 800b1c4 <_dtoa_r+0x50c>
 800b170:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b174:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b178:	463e      	mov	r6, r7
 800b17a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b17e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b182:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b186:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b18a:	ee14 2a90 	vmov	r2, s9
 800b18e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b192:	3230      	adds	r2, #48	@ 0x30
 800b194:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b198:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a0:	f806 2b01 	strb.w	r2, [r6], #1
 800b1a4:	d438      	bmi.n	800b218 <_dtoa_r+0x560>
 800b1a6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b1aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b2:	d46e      	bmi.n	800b292 <_dtoa_r+0x5da>
 800b1b4:	42a6      	cmp	r6, r4
 800b1b6:	f43f af5a 	beq.w	800b06e <_dtoa_r+0x3b6>
 800b1ba:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b1be:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b1c2:	e7e0      	b.n	800b186 <_dtoa_r+0x4ce>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	463e      	mov	r6, r7
 800b1c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1cc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b1d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b1d4:	ee14 2a90 	vmov	r2, s9
 800b1d8:	3230      	adds	r2, #48	@ 0x30
 800b1da:	f806 2b01 	strb.w	r2, [r6], #1
 800b1de:	42a6      	cmp	r6, r4
 800b1e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b1e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b1e8:	d119      	bne.n	800b21e <_dtoa_r+0x566>
 800b1ea:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b1ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b1f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fa:	dc4a      	bgt.n	800b292 <_dtoa_r+0x5da>
 800b1fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b200:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b208:	f57f af31 	bpl.w	800b06e <_dtoa_r+0x3b6>
 800b20c:	460e      	mov	r6, r1
 800b20e:	3901      	subs	r1, #1
 800b210:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b214:	2b30      	cmp	r3, #48	@ 0x30
 800b216:	d0f9      	beq.n	800b20c <_dtoa_r+0x554>
 800b218:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b21c:	e027      	b.n	800b26e <_dtoa_r+0x5b6>
 800b21e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b222:	e7d5      	b.n	800b1d0 <_dtoa_r+0x518>
 800b224:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b228:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b22c:	463e      	mov	r6, r7
 800b22e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b232:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b236:	ee15 3a10 	vmov	r3, s10
 800b23a:	3330      	adds	r3, #48	@ 0x30
 800b23c:	f806 3b01 	strb.w	r3, [r6], #1
 800b240:	1bf3      	subs	r3, r6, r7
 800b242:	459a      	cmp	sl, r3
 800b244:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b248:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b24c:	d132      	bne.n	800b2b4 <_dtoa_r+0x5fc>
 800b24e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b252:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	dc18      	bgt.n	800b28e <_dtoa_r+0x5d6>
 800b25c:	eeb4 7b46 	vcmp.f64	d7, d6
 800b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b264:	d103      	bne.n	800b26e <_dtoa_r+0x5b6>
 800b266:	ee15 3a10 	vmov	r3, s10
 800b26a:	07db      	lsls	r3, r3, #31
 800b26c:	d40f      	bmi.n	800b28e <_dtoa_r+0x5d6>
 800b26e:	9901      	ldr	r1, [sp, #4]
 800b270:	4648      	mov	r0, r9
 800b272:	f000 fbbf 	bl	800b9f4 <_Bfree>
 800b276:	2300      	movs	r3, #0
 800b278:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b27a:	7033      	strb	r3, [r6, #0]
 800b27c:	f108 0301 	add.w	r3, r8, #1
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 824b 	beq.w	800b720 <_dtoa_r+0xa68>
 800b28a:	601e      	str	r6, [r3, #0]
 800b28c:	e248      	b.n	800b720 <_dtoa_r+0xa68>
 800b28e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b292:	4633      	mov	r3, r6
 800b294:	461e      	mov	r6, r3
 800b296:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b29a:	2a39      	cmp	r2, #57	@ 0x39
 800b29c:	d106      	bne.n	800b2ac <_dtoa_r+0x5f4>
 800b29e:	429f      	cmp	r7, r3
 800b2a0:	d1f8      	bne.n	800b294 <_dtoa_r+0x5dc>
 800b2a2:	9a05      	ldr	r2, [sp, #20]
 800b2a4:	3201      	adds	r2, #1
 800b2a6:	9205      	str	r2, [sp, #20]
 800b2a8:	2230      	movs	r2, #48	@ 0x30
 800b2aa:	703a      	strb	r2, [r7, #0]
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	3201      	adds	r2, #1
 800b2b0:	701a      	strb	r2, [r3, #0]
 800b2b2:	e7b1      	b.n	800b218 <_dtoa_r+0x560>
 800b2b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b2b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c0:	d1b5      	bne.n	800b22e <_dtoa_r+0x576>
 800b2c2:	e7d4      	b.n	800b26e <_dtoa_r+0x5b6>
 800b2c4:	0800ca08 	.word	0x0800ca08
 800b2c8:	0800c9e0 	.word	0x0800c9e0
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	2900      	cmp	r1, #0
 800b2d0:	f000 80e9 	beq.w	800b4a6 <_dtoa_r+0x7ee>
 800b2d4:	9907      	ldr	r1, [sp, #28]
 800b2d6:	2901      	cmp	r1, #1
 800b2d8:	f300 80cb 	bgt.w	800b472 <_dtoa_r+0x7ba>
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	f000 80c4 	beq.w	800b46a <_dtoa_r+0x7b2>
 800b2e2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b2e6:	9e04      	ldr	r6, [sp, #16]
 800b2e8:	461c      	mov	r4, r3
 800b2ea:	9305      	str	r3, [sp, #20]
 800b2ec:	9b04      	ldr	r3, [sp, #16]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	9b06      	ldr	r3, [sp, #24]
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	4413      	add	r3, r2
 800b2f8:	4648      	mov	r0, r9
 800b2fa:	9306      	str	r3, [sp, #24]
 800b2fc:	f000 fc2e 	bl	800bb5c <__i2b>
 800b300:	9b05      	ldr	r3, [sp, #20]
 800b302:	4605      	mov	r5, r0
 800b304:	b166      	cbz	r6, 800b320 <_dtoa_r+0x668>
 800b306:	9a06      	ldr	r2, [sp, #24]
 800b308:	2a00      	cmp	r2, #0
 800b30a:	dd09      	ble.n	800b320 <_dtoa_r+0x668>
 800b30c:	42b2      	cmp	r2, r6
 800b30e:	9904      	ldr	r1, [sp, #16]
 800b310:	bfa8      	it	ge
 800b312:	4632      	movge	r2, r6
 800b314:	1a89      	subs	r1, r1, r2
 800b316:	9104      	str	r1, [sp, #16]
 800b318:	9906      	ldr	r1, [sp, #24]
 800b31a:	1ab6      	subs	r6, r6, r2
 800b31c:	1a8a      	subs	r2, r1, r2
 800b31e:	9206      	str	r2, [sp, #24]
 800b320:	b30b      	cbz	r3, 800b366 <_dtoa_r+0x6ae>
 800b322:	9a08      	ldr	r2, [sp, #32]
 800b324:	2a00      	cmp	r2, #0
 800b326:	f000 80c5 	beq.w	800b4b4 <_dtoa_r+0x7fc>
 800b32a:	2c00      	cmp	r4, #0
 800b32c:	f000 80bf 	beq.w	800b4ae <_dtoa_r+0x7f6>
 800b330:	4629      	mov	r1, r5
 800b332:	4622      	mov	r2, r4
 800b334:	4648      	mov	r0, r9
 800b336:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b338:	f000 fcc8 	bl	800bccc <__pow5mult>
 800b33c:	9a01      	ldr	r2, [sp, #4]
 800b33e:	4601      	mov	r1, r0
 800b340:	4605      	mov	r5, r0
 800b342:	4648      	mov	r0, r9
 800b344:	f000 fc20 	bl	800bb88 <__multiply>
 800b348:	9901      	ldr	r1, [sp, #4]
 800b34a:	9005      	str	r0, [sp, #20]
 800b34c:	4648      	mov	r0, r9
 800b34e:	f000 fb51 	bl	800b9f4 <_Bfree>
 800b352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b354:	1b1b      	subs	r3, r3, r4
 800b356:	f000 80b0 	beq.w	800b4ba <_dtoa_r+0x802>
 800b35a:	9905      	ldr	r1, [sp, #20]
 800b35c:	461a      	mov	r2, r3
 800b35e:	4648      	mov	r0, r9
 800b360:	f000 fcb4 	bl	800bccc <__pow5mult>
 800b364:	9001      	str	r0, [sp, #4]
 800b366:	2101      	movs	r1, #1
 800b368:	4648      	mov	r0, r9
 800b36a:	f000 fbf7 	bl	800bb5c <__i2b>
 800b36e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b370:	4604      	mov	r4, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 81da 	beq.w	800b72c <_dtoa_r+0xa74>
 800b378:	461a      	mov	r2, r3
 800b37a:	4601      	mov	r1, r0
 800b37c:	4648      	mov	r0, r9
 800b37e:	f000 fca5 	bl	800bccc <__pow5mult>
 800b382:	9b07      	ldr	r3, [sp, #28]
 800b384:	2b01      	cmp	r3, #1
 800b386:	4604      	mov	r4, r0
 800b388:	f300 80a0 	bgt.w	800b4cc <_dtoa_r+0x814>
 800b38c:	9b02      	ldr	r3, [sp, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 8096 	bne.w	800b4c0 <_dtoa_r+0x808>
 800b394:	9b03      	ldr	r3, [sp, #12]
 800b396:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	f040 8092 	bne.w	800b4c4 <_dtoa_r+0x80c>
 800b3a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b3a4:	0d12      	lsrs	r2, r2, #20
 800b3a6:	0512      	lsls	r2, r2, #20
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	f000 808d 	beq.w	800b4c8 <_dtoa_r+0x810>
 800b3ae:	9b04      	ldr	r3, [sp, #16]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	9b06      	ldr	r3, [sp, #24]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	9306      	str	r3, [sp, #24]
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 81b9 	beq.w	800b738 <_dtoa_r+0xa80>
 800b3c6:	6922      	ldr	r2, [r4, #16]
 800b3c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b3cc:	6910      	ldr	r0, [r2, #16]
 800b3ce:	f000 fb79 	bl	800bac4 <__hi0bits>
 800b3d2:	f1c0 0020 	rsb	r0, r0, #32
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	4418      	add	r0, r3
 800b3da:	f010 001f 	ands.w	r0, r0, #31
 800b3de:	f000 8081 	beq.w	800b4e4 <_dtoa_r+0x82c>
 800b3e2:	f1c0 0220 	rsb	r2, r0, #32
 800b3e6:	2a04      	cmp	r2, #4
 800b3e8:	dd73      	ble.n	800b4d2 <_dtoa_r+0x81a>
 800b3ea:	9b04      	ldr	r3, [sp, #16]
 800b3ec:	f1c0 001c 	rsb	r0, r0, #28
 800b3f0:	4403      	add	r3, r0
 800b3f2:	9304      	str	r3, [sp, #16]
 800b3f4:	9b06      	ldr	r3, [sp, #24]
 800b3f6:	4406      	add	r6, r0
 800b3f8:	4403      	add	r3, r0
 800b3fa:	9306      	str	r3, [sp, #24]
 800b3fc:	9b04      	ldr	r3, [sp, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd05      	ble.n	800b40e <_dtoa_r+0x756>
 800b402:	9901      	ldr	r1, [sp, #4]
 800b404:	461a      	mov	r2, r3
 800b406:	4648      	mov	r0, r9
 800b408:	f000 fcba 	bl	800bd80 <__lshift>
 800b40c:	9001      	str	r0, [sp, #4]
 800b40e:	9b06      	ldr	r3, [sp, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	dd05      	ble.n	800b420 <_dtoa_r+0x768>
 800b414:	4621      	mov	r1, r4
 800b416:	461a      	mov	r2, r3
 800b418:	4648      	mov	r0, r9
 800b41a:	f000 fcb1 	bl	800bd80 <__lshift>
 800b41e:	4604      	mov	r4, r0
 800b420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b422:	2b00      	cmp	r3, #0
 800b424:	d060      	beq.n	800b4e8 <_dtoa_r+0x830>
 800b426:	9801      	ldr	r0, [sp, #4]
 800b428:	4621      	mov	r1, r4
 800b42a:	f000 fd15 	bl	800be58 <__mcmp>
 800b42e:	2800      	cmp	r0, #0
 800b430:	da5a      	bge.n	800b4e8 <_dtoa_r+0x830>
 800b432:	f108 33ff 	add.w	r3, r8, #4294967295
 800b436:	9305      	str	r3, [sp, #20]
 800b438:	9901      	ldr	r1, [sp, #4]
 800b43a:	2300      	movs	r3, #0
 800b43c:	220a      	movs	r2, #10
 800b43e:	4648      	mov	r0, r9
 800b440:	f000 fafa 	bl	800ba38 <__multadd>
 800b444:	9b08      	ldr	r3, [sp, #32]
 800b446:	9001      	str	r0, [sp, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 8177 	beq.w	800b73c <_dtoa_r+0xa84>
 800b44e:	4629      	mov	r1, r5
 800b450:	2300      	movs	r3, #0
 800b452:	220a      	movs	r2, #10
 800b454:	4648      	mov	r0, r9
 800b456:	f000 faef 	bl	800ba38 <__multadd>
 800b45a:	f1bb 0f00 	cmp.w	fp, #0
 800b45e:	4605      	mov	r5, r0
 800b460:	dc6e      	bgt.n	800b540 <_dtoa_r+0x888>
 800b462:	9b07      	ldr	r3, [sp, #28]
 800b464:	2b02      	cmp	r3, #2
 800b466:	dc48      	bgt.n	800b4fa <_dtoa_r+0x842>
 800b468:	e06a      	b.n	800b540 <_dtoa_r+0x888>
 800b46a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b46c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b470:	e739      	b.n	800b2e6 <_dtoa_r+0x62e>
 800b472:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b476:	42a3      	cmp	r3, r4
 800b478:	db07      	blt.n	800b48a <_dtoa_r+0x7d2>
 800b47a:	f1ba 0f00 	cmp.w	sl, #0
 800b47e:	eba3 0404 	sub.w	r4, r3, r4
 800b482:	db0b      	blt.n	800b49c <_dtoa_r+0x7e4>
 800b484:	9e04      	ldr	r6, [sp, #16]
 800b486:	4652      	mov	r2, sl
 800b488:	e72f      	b.n	800b2ea <_dtoa_r+0x632>
 800b48a:	1ae2      	subs	r2, r4, r3
 800b48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b48e:	9e04      	ldr	r6, [sp, #16]
 800b490:	4413      	add	r3, r2
 800b492:	930a      	str	r3, [sp, #40]	@ 0x28
 800b494:	4652      	mov	r2, sl
 800b496:	4623      	mov	r3, r4
 800b498:	2400      	movs	r4, #0
 800b49a:	e726      	b.n	800b2ea <_dtoa_r+0x632>
 800b49c:	9a04      	ldr	r2, [sp, #16]
 800b49e:	eba2 060a 	sub.w	r6, r2, sl
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	e721      	b.n	800b2ea <_dtoa_r+0x632>
 800b4a6:	9e04      	ldr	r6, [sp, #16]
 800b4a8:	9d08      	ldr	r5, [sp, #32]
 800b4aa:	461c      	mov	r4, r3
 800b4ac:	e72a      	b.n	800b304 <_dtoa_r+0x64c>
 800b4ae:	9a01      	ldr	r2, [sp, #4]
 800b4b0:	9205      	str	r2, [sp, #20]
 800b4b2:	e752      	b.n	800b35a <_dtoa_r+0x6a2>
 800b4b4:	9901      	ldr	r1, [sp, #4]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	e751      	b.n	800b35e <_dtoa_r+0x6a6>
 800b4ba:	9b05      	ldr	r3, [sp, #20]
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	e752      	b.n	800b366 <_dtoa_r+0x6ae>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e77b      	b.n	800b3bc <_dtoa_r+0x704>
 800b4c4:	9b02      	ldr	r3, [sp, #8]
 800b4c6:	e779      	b.n	800b3bc <_dtoa_r+0x704>
 800b4c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4ca:	e778      	b.n	800b3be <_dtoa_r+0x706>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4d0:	e779      	b.n	800b3c6 <_dtoa_r+0x70e>
 800b4d2:	d093      	beq.n	800b3fc <_dtoa_r+0x744>
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	321c      	adds	r2, #28
 800b4d8:	4413      	add	r3, r2
 800b4da:	9304      	str	r3, [sp, #16]
 800b4dc:	9b06      	ldr	r3, [sp, #24]
 800b4de:	4416      	add	r6, r2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	e78a      	b.n	800b3fa <_dtoa_r+0x742>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	e7f5      	b.n	800b4d4 <_dtoa_r+0x81c>
 800b4e8:	f1ba 0f00 	cmp.w	sl, #0
 800b4ec:	f8cd 8014 	str.w	r8, [sp, #20]
 800b4f0:	46d3      	mov	fp, sl
 800b4f2:	dc21      	bgt.n	800b538 <_dtoa_r+0x880>
 800b4f4:	9b07      	ldr	r3, [sp, #28]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	dd1e      	ble.n	800b538 <_dtoa_r+0x880>
 800b4fa:	f1bb 0f00 	cmp.w	fp, #0
 800b4fe:	f47f addc 	bne.w	800b0ba <_dtoa_r+0x402>
 800b502:	4621      	mov	r1, r4
 800b504:	465b      	mov	r3, fp
 800b506:	2205      	movs	r2, #5
 800b508:	4648      	mov	r0, r9
 800b50a:	f000 fa95 	bl	800ba38 <__multadd>
 800b50e:	4601      	mov	r1, r0
 800b510:	4604      	mov	r4, r0
 800b512:	9801      	ldr	r0, [sp, #4]
 800b514:	f000 fca0 	bl	800be58 <__mcmp>
 800b518:	2800      	cmp	r0, #0
 800b51a:	f77f adce 	ble.w	800b0ba <_dtoa_r+0x402>
 800b51e:	463e      	mov	r6, r7
 800b520:	2331      	movs	r3, #49	@ 0x31
 800b522:	f806 3b01 	strb.w	r3, [r6], #1
 800b526:	9b05      	ldr	r3, [sp, #20]
 800b528:	3301      	adds	r3, #1
 800b52a:	9305      	str	r3, [sp, #20]
 800b52c:	e5c9      	b.n	800b0c2 <_dtoa_r+0x40a>
 800b52e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b532:	4654      	mov	r4, sl
 800b534:	4625      	mov	r5, r4
 800b536:	e7f2      	b.n	800b51e <_dtoa_r+0x866>
 800b538:	9b08      	ldr	r3, [sp, #32]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 8102 	beq.w	800b744 <_dtoa_r+0xa8c>
 800b540:	2e00      	cmp	r6, #0
 800b542:	dd05      	ble.n	800b550 <_dtoa_r+0x898>
 800b544:	4629      	mov	r1, r5
 800b546:	4632      	mov	r2, r6
 800b548:	4648      	mov	r0, r9
 800b54a:	f000 fc19 	bl	800bd80 <__lshift>
 800b54e:	4605      	mov	r5, r0
 800b550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d058      	beq.n	800b608 <_dtoa_r+0x950>
 800b556:	6869      	ldr	r1, [r5, #4]
 800b558:	4648      	mov	r0, r9
 800b55a:	f000 fa0b 	bl	800b974 <_Balloc>
 800b55e:	4606      	mov	r6, r0
 800b560:	b928      	cbnz	r0, 800b56e <_dtoa_r+0x8b6>
 800b562:	4b82      	ldr	r3, [pc, #520]	@ (800b76c <_dtoa_r+0xab4>)
 800b564:	4602      	mov	r2, r0
 800b566:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b56a:	f7ff bbbe 	b.w	800acea <_dtoa_r+0x32>
 800b56e:	692a      	ldr	r2, [r5, #16]
 800b570:	3202      	adds	r2, #2
 800b572:	0092      	lsls	r2, r2, #2
 800b574:	f105 010c 	add.w	r1, r5, #12
 800b578:	300c      	adds	r0, #12
 800b57a:	f000 fff7 	bl	800c56c <memcpy>
 800b57e:	2201      	movs	r2, #1
 800b580:	4631      	mov	r1, r6
 800b582:	4648      	mov	r0, r9
 800b584:	f000 fbfc 	bl	800bd80 <__lshift>
 800b588:	1c7b      	adds	r3, r7, #1
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	eb07 030b 	add.w	r3, r7, fp
 800b590:	9309      	str	r3, [sp, #36]	@ 0x24
 800b592:	9b02      	ldr	r3, [sp, #8]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	46a8      	mov	r8, r5
 800b59a:	9308      	str	r3, [sp, #32]
 800b59c:	4605      	mov	r5, r0
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	9801      	ldr	r0, [sp, #4]
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	f103 3bff 	add.w	fp, r3, #4294967295
 800b5a8:	f7ff fafd 	bl	800aba6 <quorem>
 800b5ac:	4641      	mov	r1, r8
 800b5ae:	9002      	str	r0, [sp, #8]
 800b5b0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b5b4:	9801      	ldr	r0, [sp, #4]
 800b5b6:	f000 fc4f 	bl	800be58 <__mcmp>
 800b5ba:	462a      	mov	r2, r5
 800b5bc:	9006      	str	r0, [sp, #24]
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	f000 fc65 	bl	800be90 <__mdiff>
 800b5c6:	68c2      	ldr	r2, [r0, #12]
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	b9fa      	cbnz	r2, 800b60c <_dtoa_r+0x954>
 800b5cc:	4601      	mov	r1, r0
 800b5ce:	9801      	ldr	r0, [sp, #4]
 800b5d0:	f000 fc42 	bl	800be58 <__mcmp>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4648      	mov	r0, r9
 800b5da:	920a      	str	r2, [sp, #40]	@ 0x28
 800b5dc:	f000 fa0a 	bl	800b9f4 <_Bfree>
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5e4:	9e04      	ldr	r6, [sp, #16]
 800b5e6:	ea42 0103 	orr.w	r1, r2, r3
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	4319      	orrs	r1, r3
 800b5ee:	d10f      	bne.n	800b610 <_dtoa_r+0x958>
 800b5f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b5f4:	d028      	beq.n	800b648 <_dtoa_r+0x990>
 800b5f6:	9b06      	ldr	r3, [sp, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dd02      	ble.n	800b602 <_dtoa_r+0x94a>
 800b5fc:	9b02      	ldr	r3, [sp, #8]
 800b5fe:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b602:	f88b a000 	strb.w	sl, [fp]
 800b606:	e55e      	b.n	800b0c6 <_dtoa_r+0x40e>
 800b608:	4628      	mov	r0, r5
 800b60a:	e7bd      	b.n	800b588 <_dtoa_r+0x8d0>
 800b60c:	2201      	movs	r2, #1
 800b60e:	e7e2      	b.n	800b5d6 <_dtoa_r+0x91e>
 800b610:	9b06      	ldr	r3, [sp, #24]
 800b612:	2b00      	cmp	r3, #0
 800b614:	db04      	blt.n	800b620 <_dtoa_r+0x968>
 800b616:	9907      	ldr	r1, [sp, #28]
 800b618:	430b      	orrs	r3, r1
 800b61a:	9908      	ldr	r1, [sp, #32]
 800b61c:	430b      	orrs	r3, r1
 800b61e:	d120      	bne.n	800b662 <_dtoa_r+0x9aa>
 800b620:	2a00      	cmp	r2, #0
 800b622:	ddee      	ble.n	800b602 <_dtoa_r+0x94a>
 800b624:	9901      	ldr	r1, [sp, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	4648      	mov	r0, r9
 800b62a:	f000 fba9 	bl	800bd80 <__lshift>
 800b62e:	4621      	mov	r1, r4
 800b630:	9001      	str	r0, [sp, #4]
 800b632:	f000 fc11 	bl	800be58 <__mcmp>
 800b636:	2800      	cmp	r0, #0
 800b638:	dc03      	bgt.n	800b642 <_dtoa_r+0x98a>
 800b63a:	d1e2      	bne.n	800b602 <_dtoa_r+0x94a>
 800b63c:	f01a 0f01 	tst.w	sl, #1
 800b640:	d0df      	beq.n	800b602 <_dtoa_r+0x94a>
 800b642:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b646:	d1d9      	bne.n	800b5fc <_dtoa_r+0x944>
 800b648:	2339      	movs	r3, #57	@ 0x39
 800b64a:	f88b 3000 	strb.w	r3, [fp]
 800b64e:	4633      	mov	r3, r6
 800b650:	461e      	mov	r6, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b658:	2a39      	cmp	r2, #57	@ 0x39
 800b65a:	d052      	beq.n	800b702 <_dtoa_r+0xa4a>
 800b65c:	3201      	adds	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	e531      	b.n	800b0c6 <_dtoa_r+0x40e>
 800b662:	2a00      	cmp	r2, #0
 800b664:	dd07      	ble.n	800b676 <_dtoa_r+0x9be>
 800b666:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b66a:	d0ed      	beq.n	800b648 <_dtoa_r+0x990>
 800b66c:	f10a 0301 	add.w	r3, sl, #1
 800b670:	f88b 3000 	strb.w	r3, [fp]
 800b674:	e527      	b.n	800b0c6 <_dtoa_r+0x40e>
 800b676:	9b04      	ldr	r3, [sp, #16]
 800b678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b67a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b67e:	4293      	cmp	r3, r2
 800b680:	d029      	beq.n	800b6d6 <_dtoa_r+0xa1e>
 800b682:	9901      	ldr	r1, [sp, #4]
 800b684:	2300      	movs	r3, #0
 800b686:	220a      	movs	r2, #10
 800b688:	4648      	mov	r0, r9
 800b68a:	f000 f9d5 	bl	800ba38 <__multadd>
 800b68e:	45a8      	cmp	r8, r5
 800b690:	9001      	str	r0, [sp, #4]
 800b692:	f04f 0300 	mov.w	r3, #0
 800b696:	f04f 020a 	mov.w	r2, #10
 800b69a:	4641      	mov	r1, r8
 800b69c:	4648      	mov	r0, r9
 800b69e:	d107      	bne.n	800b6b0 <_dtoa_r+0x9f8>
 800b6a0:	f000 f9ca 	bl	800ba38 <__multadd>
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	9b04      	ldr	r3, [sp, #16]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	e776      	b.n	800b59e <_dtoa_r+0x8e6>
 800b6b0:	f000 f9c2 	bl	800ba38 <__multadd>
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	220a      	movs	r2, #10
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f000 f9bb 	bl	800ba38 <__multadd>
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	e7f0      	b.n	800b6a8 <_dtoa_r+0x9f0>
 800b6c6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ca:	bfcc      	ite	gt
 800b6cc:	465e      	movgt	r6, fp
 800b6ce:	2601      	movle	r6, #1
 800b6d0:	443e      	add	r6, r7
 800b6d2:	f04f 0800 	mov.w	r8, #0
 800b6d6:	9901      	ldr	r1, [sp, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	4648      	mov	r0, r9
 800b6dc:	f000 fb50 	bl	800bd80 <__lshift>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	9001      	str	r0, [sp, #4]
 800b6e4:	f000 fbb8 	bl	800be58 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	dcb0      	bgt.n	800b64e <_dtoa_r+0x996>
 800b6ec:	d102      	bne.n	800b6f4 <_dtoa_r+0xa3c>
 800b6ee:	f01a 0f01 	tst.w	sl, #1
 800b6f2:	d1ac      	bne.n	800b64e <_dtoa_r+0x996>
 800b6f4:	4633      	mov	r3, r6
 800b6f6:	461e      	mov	r6, r3
 800b6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6fc:	2a30      	cmp	r2, #48	@ 0x30
 800b6fe:	d0fa      	beq.n	800b6f6 <_dtoa_r+0xa3e>
 800b700:	e4e1      	b.n	800b0c6 <_dtoa_r+0x40e>
 800b702:	429f      	cmp	r7, r3
 800b704:	d1a4      	bne.n	800b650 <_dtoa_r+0x998>
 800b706:	9b05      	ldr	r3, [sp, #20]
 800b708:	3301      	adds	r3, #1
 800b70a:	9305      	str	r3, [sp, #20]
 800b70c:	2331      	movs	r3, #49	@ 0x31
 800b70e:	703b      	strb	r3, [r7, #0]
 800b710:	e4d9      	b.n	800b0c6 <_dtoa_r+0x40e>
 800b712:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b714:	4f16      	ldr	r7, [pc, #88]	@ (800b770 <_dtoa_r+0xab8>)
 800b716:	b11b      	cbz	r3, 800b720 <_dtoa_r+0xa68>
 800b718:	f107 0308 	add.w	r3, r7, #8
 800b71c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	4638      	mov	r0, r7
 800b722:	b011      	add	sp, #68	@ 0x44
 800b724:	ecbd 8b02 	vpop	{d8}
 800b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	f77f ae2c 	ble.w	800b38c <_dtoa_r+0x6d4>
 800b734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b736:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b738:	2001      	movs	r0, #1
 800b73a:	e64c      	b.n	800b3d6 <_dtoa_r+0x71e>
 800b73c:	f1bb 0f00 	cmp.w	fp, #0
 800b740:	f77f aed8 	ble.w	800b4f4 <_dtoa_r+0x83c>
 800b744:	463e      	mov	r6, r7
 800b746:	9801      	ldr	r0, [sp, #4]
 800b748:	4621      	mov	r1, r4
 800b74a:	f7ff fa2c 	bl	800aba6 <quorem>
 800b74e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b752:	f806 ab01 	strb.w	sl, [r6], #1
 800b756:	1bf2      	subs	r2, r6, r7
 800b758:	4593      	cmp	fp, r2
 800b75a:	ddb4      	ble.n	800b6c6 <_dtoa_r+0xa0e>
 800b75c:	9901      	ldr	r1, [sp, #4]
 800b75e:	2300      	movs	r3, #0
 800b760:	220a      	movs	r2, #10
 800b762:	4648      	mov	r0, r9
 800b764:	f000 f968 	bl	800ba38 <__multadd>
 800b768:	9001      	str	r0, [sp, #4]
 800b76a:	e7ec      	b.n	800b746 <_dtoa_r+0xa8e>
 800b76c:	0800c90c 	.word	0x0800c90c
 800b770:	0800c890 	.word	0x0800c890

0800b774 <_free_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4605      	mov	r5, r0
 800b778:	2900      	cmp	r1, #0
 800b77a:	d041      	beq.n	800b800 <_free_r+0x8c>
 800b77c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b780:	1f0c      	subs	r4, r1, #4
 800b782:	2b00      	cmp	r3, #0
 800b784:	bfb8      	it	lt
 800b786:	18e4      	addlt	r4, r4, r3
 800b788:	f000 f8e8 	bl	800b95c <__malloc_lock>
 800b78c:	4a1d      	ldr	r2, [pc, #116]	@ (800b804 <_free_r+0x90>)
 800b78e:	6813      	ldr	r3, [r2, #0]
 800b790:	b933      	cbnz	r3, 800b7a0 <_free_r+0x2c>
 800b792:	6063      	str	r3, [r4, #4]
 800b794:	6014      	str	r4, [r2, #0]
 800b796:	4628      	mov	r0, r5
 800b798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b79c:	f000 b8e4 	b.w	800b968 <__malloc_unlock>
 800b7a0:	42a3      	cmp	r3, r4
 800b7a2:	d908      	bls.n	800b7b6 <_free_r+0x42>
 800b7a4:	6820      	ldr	r0, [r4, #0]
 800b7a6:	1821      	adds	r1, r4, r0
 800b7a8:	428b      	cmp	r3, r1
 800b7aa:	bf01      	itttt	eq
 800b7ac:	6819      	ldreq	r1, [r3, #0]
 800b7ae:	685b      	ldreq	r3, [r3, #4]
 800b7b0:	1809      	addeq	r1, r1, r0
 800b7b2:	6021      	streq	r1, [r4, #0]
 800b7b4:	e7ed      	b.n	800b792 <_free_r+0x1e>
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	b10b      	cbz	r3, 800b7c0 <_free_r+0x4c>
 800b7bc:	42a3      	cmp	r3, r4
 800b7be:	d9fa      	bls.n	800b7b6 <_free_r+0x42>
 800b7c0:	6811      	ldr	r1, [r2, #0]
 800b7c2:	1850      	adds	r0, r2, r1
 800b7c4:	42a0      	cmp	r0, r4
 800b7c6:	d10b      	bne.n	800b7e0 <_free_r+0x6c>
 800b7c8:	6820      	ldr	r0, [r4, #0]
 800b7ca:	4401      	add	r1, r0
 800b7cc:	1850      	adds	r0, r2, r1
 800b7ce:	4283      	cmp	r3, r0
 800b7d0:	6011      	str	r1, [r2, #0]
 800b7d2:	d1e0      	bne.n	800b796 <_free_r+0x22>
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	6053      	str	r3, [r2, #4]
 800b7da:	4408      	add	r0, r1
 800b7dc:	6010      	str	r0, [r2, #0]
 800b7de:	e7da      	b.n	800b796 <_free_r+0x22>
 800b7e0:	d902      	bls.n	800b7e8 <_free_r+0x74>
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	e7d6      	b.n	800b796 <_free_r+0x22>
 800b7e8:	6820      	ldr	r0, [r4, #0]
 800b7ea:	1821      	adds	r1, r4, r0
 800b7ec:	428b      	cmp	r3, r1
 800b7ee:	bf04      	itt	eq
 800b7f0:	6819      	ldreq	r1, [r3, #0]
 800b7f2:	685b      	ldreq	r3, [r3, #4]
 800b7f4:	6063      	str	r3, [r4, #4]
 800b7f6:	bf04      	itt	eq
 800b7f8:	1809      	addeq	r1, r1, r0
 800b7fa:	6021      	streq	r1, [r4, #0]
 800b7fc:	6054      	str	r4, [r2, #4]
 800b7fe:	e7ca      	b.n	800b796 <_free_r+0x22>
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	bf00      	nop
 800b804:	24000494 	.word	0x24000494

0800b808 <malloc>:
 800b808:	4b02      	ldr	r3, [pc, #8]	@ (800b814 <malloc+0xc>)
 800b80a:	4601      	mov	r1, r0
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f000 b825 	b.w	800b85c <_malloc_r>
 800b812:	bf00      	nop
 800b814:	24000020 	.word	0x24000020

0800b818 <sbrk_aligned>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	4e0f      	ldr	r6, [pc, #60]	@ (800b858 <sbrk_aligned+0x40>)
 800b81c:	460c      	mov	r4, r1
 800b81e:	6831      	ldr	r1, [r6, #0]
 800b820:	4605      	mov	r5, r0
 800b822:	b911      	cbnz	r1, 800b82a <sbrk_aligned+0x12>
 800b824:	f000 fe92 	bl	800c54c <_sbrk_r>
 800b828:	6030      	str	r0, [r6, #0]
 800b82a:	4621      	mov	r1, r4
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 fe8d 	bl	800c54c <_sbrk_r>
 800b832:	1c43      	adds	r3, r0, #1
 800b834:	d103      	bne.n	800b83e <sbrk_aligned+0x26>
 800b836:	f04f 34ff 	mov.w	r4, #4294967295
 800b83a:	4620      	mov	r0, r4
 800b83c:	bd70      	pop	{r4, r5, r6, pc}
 800b83e:	1cc4      	adds	r4, r0, #3
 800b840:	f024 0403 	bic.w	r4, r4, #3
 800b844:	42a0      	cmp	r0, r4
 800b846:	d0f8      	beq.n	800b83a <sbrk_aligned+0x22>
 800b848:	1a21      	subs	r1, r4, r0
 800b84a:	4628      	mov	r0, r5
 800b84c:	f000 fe7e 	bl	800c54c <_sbrk_r>
 800b850:	3001      	adds	r0, #1
 800b852:	d1f2      	bne.n	800b83a <sbrk_aligned+0x22>
 800b854:	e7ef      	b.n	800b836 <sbrk_aligned+0x1e>
 800b856:	bf00      	nop
 800b858:	24000490 	.word	0x24000490

0800b85c <_malloc_r>:
 800b85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b860:	1ccd      	adds	r5, r1, #3
 800b862:	f025 0503 	bic.w	r5, r5, #3
 800b866:	3508      	adds	r5, #8
 800b868:	2d0c      	cmp	r5, #12
 800b86a:	bf38      	it	cc
 800b86c:	250c      	movcc	r5, #12
 800b86e:	2d00      	cmp	r5, #0
 800b870:	4606      	mov	r6, r0
 800b872:	db01      	blt.n	800b878 <_malloc_r+0x1c>
 800b874:	42a9      	cmp	r1, r5
 800b876:	d904      	bls.n	800b882 <_malloc_r+0x26>
 800b878:	230c      	movs	r3, #12
 800b87a:	6033      	str	r3, [r6, #0]
 800b87c:	2000      	movs	r0, #0
 800b87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b958 <_malloc_r+0xfc>
 800b886:	f000 f869 	bl	800b95c <__malloc_lock>
 800b88a:	f8d8 3000 	ldr.w	r3, [r8]
 800b88e:	461c      	mov	r4, r3
 800b890:	bb44      	cbnz	r4, 800b8e4 <_malloc_r+0x88>
 800b892:	4629      	mov	r1, r5
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff ffbf 	bl	800b818 <sbrk_aligned>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	4604      	mov	r4, r0
 800b89e:	d158      	bne.n	800b952 <_malloc_r+0xf6>
 800b8a0:	f8d8 4000 	ldr.w	r4, [r8]
 800b8a4:	4627      	mov	r7, r4
 800b8a6:	2f00      	cmp	r7, #0
 800b8a8:	d143      	bne.n	800b932 <_malloc_r+0xd6>
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	d04b      	beq.n	800b946 <_malloc_r+0xea>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	eb04 0903 	add.w	r9, r4, r3
 800b8b8:	f000 fe48 	bl	800c54c <_sbrk_r>
 800b8bc:	4581      	cmp	r9, r0
 800b8be:	d142      	bne.n	800b946 <_malloc_r+0xea>
 800b8c0:	6821      	ldr	r1, [r4, #0]
 800b8c2:	1a6d      	subs	r5, r5, r1
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f7ff ffa6 	bl	800b818 <sbrk_aligned>
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d03a      	beq.n	800b946 <_malloc_r+0xea>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	442b      	add	r3, r5
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	bb62      	cbnz	r2, 800b938 <_malloc_r+0xdc>
 800b8de:	f8c8 7000 	str.w	r7, [r8]
 800b8e2:	e00f      	b.n	800b904 <_malloc_r+0xa8>
 800b8e4:	6822      	ldr	r2, [r4, #0]
 800b8e6:	1b52      	subs	r2, r2, r5
 800b8e8:	d420      	bmi.n	800b92c <_malloc_r+0xd0>
 800b8ea:	2a0b      	cmp	r2, #11
 800b8ec:	d917      	bls.n	800b91e <_malloc_r+0xc2>
 800b8ee:	1961      	adds	r1, r4, r5
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	6025      	str	r5, [r4, #0]
 800b8f4:	bf18      	it	ne
 800b8f6:	6059      	strne	r1, [r3, #4]
 800b8f8:	6863      	ldr	r3, [r4, #4]
 800b8fa:	bf08      	it	eq
 800b8fc:	f8c8 1000 	streq.w	r1, [r8]
 800b900:	5162      	str	r2, [r4, r5]
 800b902:	604b      	str	r3, [r1, #4]
 800b904:	4630      	mov	r0, r6
 800b906:	f000 f82f 	bl	800b968 <__malloc_unlock>
 800b90a:	f104 000b 	add.w	r0, r4, #11
 800b90e:	1d23      	adds	r3, r4, #4
 800b910:	f020 0007 	bic.w	r0, r0, #7
 800b914:	1ac2      	subs	r2, r0, r3
 800b916:	bf1c      	itt	ne
 800b918:	1a1b      	subne	r3, r3, r0
 800b91a:	50a3      	strne	r3, [r4, r2]
 800b91c:	e7af      	b.n	800b87e <_malloc_r+0x22>
 800b91e:	6862      	ldr	r2, [r4, #4]
 800b920:	42a3      	cmp	r3, r4
 800b922:	bf0c      	ite	eq
 800b924:	f8c8 2000 	streq.w	r2, [r8]
 800b928:	605a      	strne	r2, [r3, #4]
 800b92a:	e7eb      	b.n	800b904 <_malloc_r+0xa8>
 800b92c:	4623      	mov	r3, r4
 800b92e:	6864      	ldr	r4, [r4, #4]
 800b930:	e7ae      	b.n	800b890 <_malloc_r+0x34>
 800b932:	463c      	mov	r4, r7
 800b934:	687f      	ldr	r7, [r7, #4]
 800b936:	e7b6      	b.n	800b8a6 <_malloc_r+0x4a>
 800b938:	461a      	mov	r2, r3
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d1fb      	bne.n	800b938 <_malloc_r+0xdc>
 800b940:	2300      	movs	r3, #0
 800b942:	6053      	str	r3, [r2, #4]
 800b944:	e7de      	b.n	800b904 <_malloc_r+0xa8>
 800b946:	230c      	movs	r3, #12
 800b948:	6033      	str	r3, [r6, #0]
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 f80c 	bl	800b968 <__malloc_unlock>
 800b950:	e794      	b.n	800b87c <_malloc_r+0x20>
 800b952:	6005      	str	r5, [r0, #0]
 800b954:	e7d6      	b.n	800b904 <_malloc_r+0xa8>
 800b956:	bf00      	nop
 800b958:	24000494 	.word	0x24000494

0800b95c <__malloc_lock>:
 800b95c:	4801      	ldr	r0, [pc, #4]	@ (800b964 <__malloc_lock+0x8>)
 800b95e:	f7ff b920 	b.w	800aba2 <__retarget_lock_acquire_recursive>
 800b962:	bf00      	nop
 800b964:	2400048c 	.word	0x2400048c

0800b968 <__malloc_unlock>:
 800b968:	4801      	ldr	r0, [pc, #4]	@ (800b970 <__malloc_unlock+0x8>)
 800b96a:	f7ff b91b 	b.w	800aba4 <__retarget_lock_release_recursive>
 800b96e:	bf00      	nop
 800b970:	2400048c 	.word	0x2400048c

0800b974 <_Balloc>:
 800b974:	b570      	push	{r4, r5, r6, lr}
 800b976:	69c6      	ldr	r6, [r0, #28]
 800b978:	4604      	mov	r4, r0
 800b97a:	460d      	mov	r5, r1
 800b97c:	b976      	cbnz	r6, 800b99c <_Balloc+0x28>
 800b97e:	2010      	movs	r0, #16
 800b980:	f7ff ff42 	bl	800b808 <malloc>
 800b984:	4602      	mov	r2, r0
 800b986:	61e0      	str	r0, [r4, #28]
 800b988:	b920      	cbnz	r0, 800b994 <_Balloc+0x20>
 800b98a:	4b18      	ldr	r3, [pc, #96]	@ (800b9ec <_Balloc+0x78>)
 800b98c:	4818      	ldr	r0, [pc, #96]	@ (800b9f0 <_Balloc+0x7c>)
 800b98e:	216b      	movs	r1, #107	@ 0x6b
 800b990:	f000 fdfa 	bl	800c588 <__assert_func>
 800b994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b998:	6006      	str	r6, [r0, #0]
 800b99a:	60c6      	str	r6, [r0, #12]
 800b99c:	69e6      	ldr	r6, [r4, #28]
 800b99e:	68f3      	ldr	r3, [r6, #12]
 800b9a0:	b183      	cbz	r3, 800b9c4 <_Balloc+0x50>
 800b9a2:	69e3      	ldr	r3, [r4, #28]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9aa:	b9b8      	cbnz	r0, 800b9dc <_Balloc+0x68>
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b9b2:	1d72      	adds	r2, r6, #5
 800b9b4:	0092      	lsls	r2, r2, #2
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 fe04 	bl	800c5c4 <_calloc_r>
 800b9bc:	b160      	cbz	r0, 800b9d8 <_Balloc+0x64>
 800b9be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9c2:	e00e      	b.n	800b9e2 <_Balloc+0x6e>
 800b9c4:	2221      	movs	r2, #33	@ 0x21
 800b9c6:	2104      	movs	r1, #4
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 fdfb 	bl	800c5c4 <_calloc_r>
 800b9ce:	69e3      	ldr	r3, [r4, #28]
 800b9d0:	60f0      	str	r0, [r6, #12]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e4      	bne.n	800b9a2 <_Balloc+0x2e>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
 800b9dc:	6802      	ldr	r2, [r0, #0]
 800b9de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9e8:	e7f7      	b.n	800b9da <_Balloc+0x66>
 800b9ea:	bf00      	nop
 800b9ec:	0800c89d 	.word	0x0800c89d
 800b9f0:	0800c91d 	.word	0x0800c91d

0800b9f4 <_Bfree>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	69c6      	ldr	r6, [r0, #28]
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	b976      	cbnz	r6, 800ba1c <_Bfree+0x28>
 800b9fe:	2010      	movs	r0, #16
 800ba00:	f7ff ff02 	bl	800b808 <malloc>
 800ba04:	4602      	mov	r2, r0
 800ba06:	61e8      	str	r0, [r5, #28]
 800ba08:	b920      	cbnz	r0, 800ba14 <_Bfree+0x20>
 800ba0a:	4b09      	ldr	r3, [pc, #36]	@ (800ba30 <_Bfree+0x3c>)
 800ba0c:	4809      	ldr	r0, [pc, #36]	@ (800ba34 <_Bfree+0x40>)
 800ba0e:	218f      	movs	r1, #143	@ 0x8f
 800ba10:	f000 fdba 	bl	800c588 <__assert_func>
 800ba14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba18:	6006      	str	r6, [r0, #0]
 800ba1a:	60c6      	str	r6, [r0, #12]
 800ba1c:	b13c      	cbz	r4, 800ba2e <_Bfree+0x3a>
 800ba1e:	69eb      	ldr	r3, [r5, #28]
 800ba20:	6862      	ldr	r2, [r4, #4]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba28:	6021      	str	r1, [r4, #0]
 800ba2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba2e:	bd70      	pop	{r4, r5, r6, pc}
 800ba30:	0800c89d 	.word	0x0800c89d
 800ba34:	0800c91d 	.word	0x0800c91d

0800ba38 <__multadd>:
 800ba38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3c:	690d      	ldr	r5, [r1, #16]
 800ba3e:	4607      	mov	r7, r0
 800ba40:	460c      	mov	r4, r1
 800ba42:	461e      	mov	r6, r3
 800ba44:	f101 0c14 	add.w	ip, r1, #20
 800ba48:	2000      	movs	r0, #0
 800ba4a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba4e:	b299      	uxth	r1, r3
 800ba50:	fb02 6101 	mla	r1, r2, r1, r6
 800ba54:	0c1e      	lsrs	r6, r3, #16
 800ba56:	0c0b      	lsrs	r3, r1, #16
 800ba58:	fb02 3306 	mla	r3, r2, r6, r3
 800ba5c:	b289      	uxth	r1, r1
 800ba5e:	3001      	adds	r0, #1
 800ba60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba64:	4285      	cmp	r5, r0
 800ba66:	f84c 1b04 	str.w	r1, [ip], #4
 800ba6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba6e:	dcec      	bgt.n	800ba4a <__multadd+0x12>
 800ba70:	b30e      	cbz	r6, 800bab6 <__multadd+0x7e>
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	42ab      	cmp	r3, r5
 800ba76:	dc19      	bgt.n	800baac <__multadd+0x74>
 800ba78:	6861      	ldr	r1, [r4, #4]
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	3101      	adds	r1, #1
 800ba7e:	f7ff ff79 	bl	800b974 <_Balloc>
 800ba82:	4680      	mov	r8, r0
 800ba84:	b928      	cbnz	r0, 800ba92 <__multadd+0x5a>
 800ba86:	4602      	mov	r2, r0
 800ba88:	4b0c      	ldr	r3, [pc, #48]	@ (800babc <__multadd+0x84>)
 800ba8a:	480d      	ldr	r0, [pc, #52]	@ (800bac0 <__multadd+0x88>)
 800ba8c:	21ba      	movs	r1, #186	@ 0xba
 800ba8e:	f000 fd7b 	bl	800c588 <__assert_func>
 800ba92:	6922      	ldr	r2, [r4, #16]
 800ba94:	3202      	adds	r2, #2
 800ba96:	f104 010c 	add.w	r1, r4, #12
 800ba9a:	0092      	lsls	r2, r2, #2
 800ba9c:	300c      	adds	r0, #12
 800ba9e:	f000 fd65 	bl	800c56c <memcpy>
 800baa2:	4621      	mov	r1, r4
 800baa4:	4638      	mov	r0, r7
 800baa6:	f7ff ffa5 	bl	800b9f4 <_Bfree>
 800baaa:	4644      	mov	r4, r8
 800baac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bab0:	3501      	adds	r5, #1
 800bab2:	615e      	str	r6, [r3, #20]
 800bab4:	6125      	str	r5, [r4, #16]
 800bab6:	4620      	mov	r0, r4
 800bab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800babc:	0800c90c 	.word	0x0800c90c
 800bac0:	0800c91d 	.word	0x0800c91d

0800bac4 <__hi0bits>:
 800bac4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bac8:	4603      	mov	r3, r0
 800baca:	bf36      	itet	cc
 800bacc:	0403      	lslcc	r3, r0, #16
 800bace:	2000      	movcs	r0, #0
 800bad0:	2010      	movcc	r0, #16
 800bad2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bad6:	bf3c      	itt	cc
 800bad8:	021b      	lslcc	r3, r3, #8
 800bada:	3008      	addcc	r0, #8
 800badc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bae0:	bf3c      	itt	cc
 800bae2:	011b      	lslcc	r3, r3, #4
 800bae4:	3004      	addcc	r0, #4
 800bae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baea:	bf3c      	itt	cc
 800baec:	009b      	lslcc	r3, r3, #2
 800baee:	3002      	addcc	r0, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db05      	blt.n	800bb00 <__hi0bits+0x3c>
 800baf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800baf8:	f100 0001 	add.w	r0, r0, #1
 800bafc:	bf08      	it	eq
 800bafe:	2020      	moveq	r0, #32
 800bb00:	4770      	bx	lr

0800bb02 <__lo0bits>:
 800bb02:	6803      	ldr	r3, [r0, #0]
 800bb04:	4602      	mov	r2, r0
 800bb06:	f013 0007 	ands.w	r0, r3, #7
 800bb0a:	d00b      	beq.n	800bb24 <__lo0bits+0x22>
 800bb0c:	07d9      	lsls	r1, r3, #31
 800bb0e:	d421      	bmi.n	800bb54 <__lo0bits+0x52>
 800bb10:	0798      	lsls	r0, r3, #30
 800bb12:	bf49      	itett	mi
 800bb14:	085b      	lsrmi	r3, r3, #1
 800bb16:	089b      	lsrpl	r3, r3, #2
 800bb18:	2001      	movmi	r0, #1
 800bb1a:	6013      	strmi	r3, [r2, #0]
 800bb1c:	bf5c      	itt	pl
 800bb1e:	6013      	strpl	r3, [r2, #0]
 800bb20:	2002      	movpl	r0, #2
 800bb22:	4770      	bx	lr
 800bb24:	b299      	uxth	r1, r3
 800bb26:	b909      	cbnz	r1, 800bb2c <__lo0bits+0x2a>
 800bb28:	0c1b      	lsrs	r3, r3, #16
 800bb2a:	2010      	movs	r0, #16
 800bb2c:	b2d9      	uxtb	r1, r3
 800bb2e:	b909      	cbnz	r1, 800bb34 <__lo0bits+0x32>
 800bb30:	3008      	adds	r0, #8
 800bb32:	0a1b      	lsrs	r3, r3, #8
 800bb34:	0719      	lsls	r1, r3, #28
 800bb36:	bf04      	itt	eq
 800bb38:	091b      	lsreq	r3, r3, #4
 800bb3a:	3004      	addeq	r0, #4
 800bb3c:	0799      	lsls	r1, r3, #30
 800bb3e:	bf04      	itt	eq
 800bb40:	089b      	lsreq	r3, r3, #2
 800bb42:	3002      	addeq	r0, #2
 800bb44:	07d9      	lsls	r1, r3, #31
 800bb46:	d403      	bmi.n	800bb50 <__lo0bits+0x4e>
 800bb48:	085b      	lsrs	r3, r3, #1
 800bb4a:	f100 0001 	add.w	r0, r0, #1
 800bb4e:	d003      	beq.n	800bb58 <__lo0bits+0x56>
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	4770      	bx	lr
 800bb54:	2000      	movs	r0, #0
 800bb56:	4770      	bx	lr
 800bb58:	2020      	movs	r0, #32
 800bb5a:	4770      	bx	lr

0800bb5c <__i2b>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	460c      	mov	r4, r1
 800bb60:	2101      	movs	r1, #1
 800bb62:	f7ff ff07 	bl	800b974 <_Balloc>
 800bb66:	4602      	mov	r2, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__i2b+0x1a>
 800bb6a:	4b05      	ldr	r3, [pc, #20]	@ (800bb80 <__i2b+0x24>)
 800bb6c:	4805      	ldr	r0, [pc, #20]	@ (800bb84 <__i2b+0x28>)
 800bb6e:	f240 1145 	movw	r1, #325	@ 0x145
 800bb72:	f000 fd09 	bl	800c588 <__assert_func>
 800bb76:	2301      	movs	r3, #1
 800bb78:	6144      	str	r4, [r0, #20]
 800bb7a:	6103      	str	r3, [r0, #16]
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800c90c 	.word	0x0800c90c
 800bb84:	0800c91d 	.word	0x0800c91d

0800bb88 <__multiply>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	4617      	mov	r7, r2
 800bb8e:	690a      	ldr	r2, [r1, #16]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	bfa8      	it	ge
 800bb96:	463b      	movge	r3, r7
 800bb98:	4689      	mov	r9, r1
 800bb9a:	bfa4      	itt	ge
 800bb9c:	460f      	movge	r7, r1
 800bb9e:	4699      	movge	r9, r3
 800bba0:	693d      	ldr	r5, [r7, #16]
 800bba2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	eb05 060a 	add.w	r6, r5, sl
 800bbae:	42b3      	cmp	r3, r6
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	bfb8      	it	lt
 800bbb4:	3101      	addlt	r1, #1
 800bbb6:	f7ff fedd 	bl	800b974 <_Balloc>
 800bbba:	b930      	cbnz	r0, 800bbca <__multiply+0x42>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	4b41      	ldr	r3, [pc, #260]	@ (800bcc4 <__multiply+0x13c>)
 800bbc0:	4841      	ldr	r0, [pc, #260]	@ (800bcc8 <__multiply+0x140>)
 800bbc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bbc6:	f000 fcdf 	bl	800c588 <__assert_func>
 800bbca:	f100 0414 	add.w	r4, r0, #20
 800bbce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bbd2:	4623      	mov	r3, r4
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4573      	cmp	r3, lr
 800bbd8:	d320      	bcc.n	800bc1c <__multiply+0x94>
 800bbda:	f107 0814 	add.w	r8, r7, #20
 800bbde:	f109 0114 	add.w	r1, r9, #20
 800bbe2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bbe6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bbea:	9302      	str	r3, [sp, #8]
 800bbec:	1beb      	subs	r3, r5, r7
 800bbee:	3b15      	subs	r3, #21
 800bbf0:	f023 0303 	bic.w	r3, r3, #3
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	3715      	adds	r7, #21
 800bbf8:	42bd      	cmp	r5, r7
 800bbfa:	bf38      	it	cc
 800bbfc:	2304      	movcc	r3, #4
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	9b02      	ldr	r3, [sp, #8]
 800bc02:	9103      	str	r1, [sp, #12]
 800bc04:	428b      	cmp	r3, r1
 800bc06:	d80c      	bhi.n	800bc22 <__multiply+0x9a>
 800bc08:	2e00      	cmp	r6, #0
 800bc0a:	dd03      	ble.n	800bc14 <__multiply+0x8c>
 800bc0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d055      	beq.n	800bcc0 <__multiply+0x138>
 800bc14:	6106      	str	r6, [r0, #16]
 800bc16:	b005      	add	sp, #20
 800bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	f843 2b04 	str.w	r2, [r3], #4
 800bc20:	e7d9      	b.n	800bbd6 <__multiply+0x4e>
 800bc22:	f8b1 a000 	ldrh.w	sl, [r1]
 800bc26:	f1ba 0f00 	cmp.w	sl, #0
 800bc2a:	d01f      	beq.n	800bc6c <__multiply+0xe4>
 800bc2c:	46c4      	mov	ip, r8
 800bc2e:	46a1      	mov	r9, r4
 800bc30:	2700      	movs	r7, #0
 800bc32:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc36:	f8d9 3000 	ldr.w	r3, [r9]
 800bc3a:	fa1f fb82 	uxth.w	fp, r2
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc44:	443b      	add	r3, r7
 800bc46:	f8d9 7000 	ldr.w	r7, [r9]
 800bc4a:	0c12      	lsrs	r2, r2, #16
 800bc4c:	0c3f      	lsrs	r7, r7, #16
 800bc4e:	fb0a 7202 	mla	r2, sl, r2, r7
 800bc52:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc5c:	4565      	cmp	r5, ip
 800bc5e:	f849 3b04 	str.w	r3, [r9], #4
 800bc62:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bc66:	d8e4      	bhi.n	800bc32 <__multiply+0xaa>
 800bc68:	9b01      	ldr	r3, [sp, #4]
 800bc6a:	50e7      	str	r7, [r4, r3]
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc72:	3104      	adds	r1, #4
 800bc74:	f1b9 0f00 	cmp.w	r9, #0
 800bc78:	d020      	beq.n	800bcbc <__multiply+0x134>
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	4647      	mov	r7, r8
 800bc7e:	46a4      	mov	ip, r4
 800bc80:	f04f 0a00 	mov.w	sl, #0
 800bc84:	f8b7 b000 	ldrh.w	fp, [r7]
 800bc88:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bc8c:	fb09 220b 	mla	r2, r9, fp, r2
 800bc90:	4452      	add	r2, sl
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc98:	f84c 3b04 	str.w	r3, [ip], #4
 800bc9c:	f857 3b04 	ldr.w	r3, [r7], #4
 800bca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bca4:	f8bc 3000 	ldrh.w	r3, [ip]
 800bca8:	fb09 330a 	mla	r3, r9, sl, r3
 800bcac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bcb0:	42bd      	cmp	r5, r7
 800bcb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcb6:	d8e5      	bhi.n	800bc84 <__multiply+0xfc>
 800bcb8:	9a01      	ldr	r2, [sp, #4]
 800bcba:	50a3      	str	r3, [r4, r2]
 800bcbc:	3404      	adds	r4, #4
 800bcbe:	e79f      	b.n	800bc00 <__multiply+0x78>
 800bcc0:	3e01      	subs	r6, #1
 800bcc2:	e7a1      	b.n	800bc08 <__multiply+0x80>
 800bcc4:	0800c90c 	.word	0x0800c90c
 800bcc8:	0800c91d 	.word	0x0800c91d

0800bccc <__pow5mult>:
 800bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd0:	4615      	mov	r5, r2
 800bcd2:	f012 0203 	ands.w	r2, r2, #3
 800bcd6:	4607      	mov	r7, r0
 800bcd8:	460e      	mov	r6, r1
 800bcda:	d007      	beq.n	800bcec <__pow5mult+0x20>
 800bcdc:	4c25      	ldr	r4, [pc, #148]	@ (800bd74 <__pow5mult+0xa8>)
 800bcde:	3a01      	subs	r2, #1
 800bce0:	2300      	movs	r3, #0
 800bce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bce6:	f7ff fea7 	bl	800ba38 <__multadd>
 800bcea:	4606      	mov	r6, r0
 800bcec:	10ad      	asrs	r5, r5, #2
 800bcee:	d03d      	beq.n	800bd6c <__pow5mult+0xa0>
 800bcf0:	69fc      	ldr	r4, [r7, #28]
 800bcf2:	b97c      	cbnz	r4, 800bd14 <__pow5mult+0x48>
 800bcf4:	2010      	movs	r0, #16
 800bcf6:	f7ff fd87 	bl	800b808 <malloc>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	61f8      	str	r0, [r7, #28]
 800bcfe:	b928      	cbnz	r0, 800bd0c <__pow5mult+0x40>
 800bd00:	4b1d      	ldr	r3, [pc, #116]	@ (800bd78 <__pow5mult+0xac>)
 800bd02:	481e      	ldr	r0, [pc, #120]	@ (800bd7c <__pow5mult+0xb0>)
 800bd04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd08:	f000 fc3e 	bl	800c588 <__assert_func>
 800bd0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd10:	6004      	str	r4, [r0, #0]
 800bd12:	60c4      	str	r4, [r0, #12]
 800bd14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd1c:	b94c      	cbnz	r4, 800bd32 <__pow5mult+0x66>
 800bd1e:	f240 2171 	movw	r1, #625	@ 0x271
 800bd22:	4638      	mov	r0, r7
 800bd24:	f7ff ff1a 	bl	800bb5c <__i2b>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd2e:	4604      	mov	r4, r0
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	f04f 0900 	mov.w	r9, #0
 800bd36:	07eb      	lsls	r3, r5, #31
 800bd38:	d50a      	bpl.n	800bd50 <__pow5mult+0x84>
 800bd3a:	4631      	mov	r1, r6
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4638      	mov	r0, r7
 800bd40:	f7ff ff22 	bl	800bb88 <__multiply>
 800bd44:	4631      	mov	r1, r6
 800bd46:	4680      	mov	r8, r0
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff fe53 	bl	800b9f4 <_Bfree>
 800bd4e:	4646      	mov	r6, r8
 800bd50:	106d      	asrs	r5, r5, #1
 800bd52:	d00b      	beq.n	800bd6c <__pow5mult+0xa0>
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	b938      	cbnz	r0, 800bd68 <__pow5mult+0x9c>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f7ff ff13 	bl	800bb88 <__multiply>
 800bd62:	6020      	str	r0, [r4, #0]
 800bd64:	f8c0 9000 	str.w	r9, [r0]
 800bd68:	4604      	mov	r4, r0
 800bd6a:	e7e4      	b.n	800bd36 <__pow5mult+0x6a>
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd72:	bf00      	nop
 800bd74:	0800c9d0 	.word	0x0800c9d0
 800bd78:	0800c89d 	.word	0x0800c89d
 800bd7c:	0800c91d 	.word	0x0800c91d

0800bd80 <__lshift>:
 800bd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd84:	460c      	mov	r4, r1
 800bd86:	6849      	ldr	r1, [r1, #4]
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	4607      	mov	r7, r0
 800bd92:	4691      	mov	r9, r2
 800bd94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd98:	f108 0601 	add.w	r6, r8, #1
 800bd9c:	42b3      	cmp	r3, r6
 800bd9e:	db0b      	blt.n	800bdb8 <__lshift+0x38>
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7ff fde7 	bl	800b974 <_Balloc>
 800bda6:	4605      	mov	r5, r0
 800bda8:	b948      	cbnz	r0, 800bdbe <__lshift+0x3e>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	4b28      	ldr	r3, [pc, #160]	@ (800be50 <__lshift+0xd0>)
 800bdae:	4829      	ldr	r0, [pc, #164]	@ (800be54 <__lshift+0xd4>)
 800bdb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bdb4:	f000 fbe8 	bl	800c588 <__assert_func>
 800bdb8:	3101      	adds	r1, #1
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	e7ee      	b.n	800bd9c <__lshift+0x1c>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f100 0114 	add.w	r1, r0, #20
 800bdc4:	f100 0210 	add.w	r2, r0, #16
 800bdc8:	4618      	mov	r0, r3
 800bdca:	4553      	cmp	r3, sl
 800bdcc:	db33      	blt.n	800be36 <__lshift+0xb6>
 800bdce:	6920      	ldr	r0, [r4, #16]
 800bdd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdd4:	f104 0314 	add.w	r3, r4, #20
 800bdd8:	f019 091f 	ands.w	r9, r9, #31
 800bddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bde0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bde4:	d02b      	beq.n	800be3e <__lshift+0xbe>
 800bde6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdea:	468a      	mov	sl, r1
 800bdec:	2200      	movs	r2, #0
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	fa00 f009 	lsl.w	r0, r0, r9
 800bdf4:	4310      	orrs	r0, r2
 800bdf6:	f84a 0b04 	str.w	r0, [sl], #4
 800bdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdfe:	459c      	cmp	ip, r3
 800be00:	fa22 f20e 	lsr.w	r2, r2, lr
 800be04:	d8f3      	bhi.n	800bdee <__lshift+0x6e>
 800be06:	ebac 0304 	sub.w	r3, ip, r4
 800be0a:	3b15      	subs	r3, #21
 800be0c:	f023 0303 	bic.w	r3, r3, #3
 800be10:	3304      	adds	r3, #4
 800be12:	f104 0015 	add.w	r0, r4, #21
 800be16:	4560      	cmp	r0, ip
 800be18:	bf88      	it	hi
 800be1a:	2304      	movhi	r3, #4
 800be1c:	50ca      	str	r2, [r1, r3]
 800be1e:	b10a      	cbz	r2, 800be24 <__lshift+0xa4>
 800be20:	f108 0602 	add.w	r6, r8, #2
 800be24:	3e01      	subs	r6, #1
 800be26:	4638      	mov	r0, r7
 800be28:	612e      	str	r6, [r5, #16]
 800be2a:	4621      	mov	r1, r4
 800be2c:	f7ff fde2 	bl	800b9f4 <_Bfree>
 800be30:	4628      	mov	r0, r5
 800be32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be36:	f842 0f04 	str.w	r0, [r2, #4]!
 800be3a:	3301      	adds	r3, #1
 800be3c:	e7c5      	b.n	800bdca <__lshift+0x4a>
 800be3e:	3904      	subs	r1, #4
 800be40:	f853 2b04 	ldr.w	r2, [r3], #4
 800be44:	f841 2f04 	str.w	r2, [r1, #4]!
 800be48:	459c      	cmp	ip, r3
 800be4a:	d8f9      	bhi.n	800be40 <__lshift+0xc0>
 800be4c:	e7ea      	b.n	800be24 <__lshift+0xa4>
 800be4e:	bf00      	nop
 800be50:	0800c90c 	.word	0x0800c90c
 800be54:	0800c91d 	.word	0x0800c91d

0800be58 <__mcmp>:
 800be58:	690a      	ldr	r2, [r1, #16]
 800be5a:	4603      	mov	r3, r0
 800be5c:	6900      	ldr	r0, [r0, #16]
 800be5e:	1a80      	subs	r0, r0, r2
 800be60:	b530      	push	{r4, r5, lr}
 800be62:	d10e      	bne.n	800be82 <__mcmp+0x2a>
 800be64:	3314      	adds	r3, #20
 800be66:	3114      	adds	r1, #20
 800be68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be78:	4295      	cmp	r5, r2
 800be7a:	d003      	beq.n	800be84 <__mcmp+0x2c>
 800be7c:	d205      	bcs.n	800be8a <__mcmp+0x32>
 800be7e:	f04f 30ff 	mov.w	r0, #4294967295
 800be82:	bd30      	pop	{r4, r5, pc}
 800be84:	42a3      	cmp	r3, r4
 800be86:	d3f3      	bcc.n	800be70 <__mcmp+0x18>
 800be88:	e7fb      	b.n	800be82 <__mcmp+0x2a>
 800be8a:	2001      	movs	r0, #1
 800be8c:	e7f9      	b.n	800be82 <__mcmp+0x2a>
	...

0800be90 <__mdiff>:
 800be90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	4689      	mov	r9, r1
 800be96:	4606      	mov	r6, r0
 800be98:	4611      	mov	r1, r2
 800be9a:	4648      	mov	r0, r9
 800be9c:	4614      	mov	r4, r2
 800be9e:	f7ff ffdb 	bl	800be58 <__mcmp>
 800bea2:	1e05      	subs	r5, r0, #0
 800bea4:	d112      	bne.n	800becc <__mdiff+0x3c>
 800bea6:	4629      	mov	r1, r5
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff fd63 	bl	800b974 <_Balloc>
 800beae:	4602      	mov	r2, r0
 800beb0:	b928      	cbnz	r0, 800bebe <__mdiff+0x2e>
 800beb2:	4b3f      	ldr	r3, [pc, #252]	@ (800bfb0 <__mdiff+0x120>)
 800beb4:	f240 2137 	movw	r1, #567	@ 0x237
 800beb8:	483e      	ldr	r0, [pc, #248]	@ (800bfb4 <__mdiff+0x124>)
 800beba:	f000 fb65 	bl	800c588 <__assert_func>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bec4:	4610      	mov	r0, r2
 800bec6:	b003      	add	sp, #12
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	bfbc      	itt	lt
 800bece:	464b      	movlt	r3, r9
 800bed0:	46a1      	movlt	r9, r4
 800bed2:	4630      	mov	r0, r6
 800bed4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bed8:	bfba      	itte	lt
 800beda:	461c      	movlt	r4, r3
 800bedc:	2501      	movlt	r5, #1
 800bede:	2500      	movge	r5, #0
 800bee0:	f7ff fd48 	bl	800b974 <_Balloc>
 800bee4:	4602      	mov	r2, r0
 800bee6:	b918      	cbnz	r0, 800bef0 <__mdiff+0x60>
 800bee8:	4b31      	ldr	r3, [pc, #196]	@ (800bfb0 <__mdiff+0x120>)
 800beea:	f240 2145 	movw	r1, #581	@ 0x245
 800beee:	e7e3      	b.n	800beb8 <__mdiff+0x28>
 800bef0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bef4:	6926      	ldr	r6, [r4, #16]
 800bef6:	60c5      	str	r5, [r0, #12]
 800bef8:	f109 0310 	add.w	r3, r9, #16
 800befc:	f109 0514 	add.w	r5, r9, #20
 800bf00:	f104 0e14 	add.w	lr, r4, #20
 800bf04:	f100 0b14 	add.w	fp, r0, #20
 800bf08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	46d9      	mov	r9, fp
 800bf14:	f04f 0c00 	mov.w	ip, #0
 800bf18:	9b01      	ldr	r3, [sp, #4]
 800bf1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf22:	9301      	str	r3, [sp, #4]
 800bf24:	fa1f f38a 	uxth.w	r3, sl
 800bf28:	4619      	mov	r1, r3
 800bf2a:	b283      	uxth	r3, r0
 800bf2c:	1acb      	subs	r3, r1, r3
 800bf2e:	0c00      	lsrs	r0, r0, #16
 800bf30:	4463      	add	r3, ip
 800bf32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bf36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf40:	4576      	cmp	r6, lr
 800bf42:	f849 3b04 	str.w	r3, [r9], #4
 800bf46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf4a:	d8e5      	bhi.n	800bf18 <__mdiff+0x88>
 800bf4c:	1b33      	subs	r3, r6, r4
 800bf4e:	3b15      	subs	r3, #21
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	3415      	adds	r4, #21
 800bf56:	3304      	adds	r3, #4
 800bf58:	42a6      	cmp	r6, r4
 800bf5a:	bf38      	it	cc
 800bf5c:	2304      	movcc	r3, #4
 800bf5e:	441d      	add	r5, r3
 800bf60:	445b      	add	r3, fp
 800bf62:	461e      	mov	r6, r3
 800bf64:	462c      	mov	r4, r5
 800bf66:	4544      	cmp	r4, r8
 800bf68:	d30e      	bcc.n	800bf88 <__mdiff+0xf8>
 800bf6a:	f108 0103 	add.w	r1, r8, #3
 800bf6e:	1b49      	subs	r1, r1, r5
 800bf70:	f021 0103 	bic.w	r1, r1, #3
 800bf74:	3d03      	subs	r5, #3
 800bf76:	45a8      	cmp	r8, r5
 800bf78:	bf38      	it	cc
 800bf7a:	2100      	movcc	r1, #0
 800bf7c:	440b      	add	r3, r1
 800bf7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf82:	b191      	cbz	r1, 800bfaa <__mdiff+0x11a>
 800bf84:	6117      	str	r7, [r2, #16]
 800bf86:	e79d      	b.n	800bec4 <__mdiff+0x34>
 800bf88:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf8c:	46e6      	mov	lr, ip
 800bf8e:	0c08      	lsrs	r0, r1, #16
 800bf90:	fa1c fc81 	uxtah	ip, ip, r1
 800bf94:	4471      	add	r1, lr
 800bf96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf9a:	b289      	uxth	r1, r1
 800bf9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bfa0:	f846 1b04 	str.w	r1, [r6], #4
 800bfa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfa8:	e7dd      	b.n	800bf66 <__mdiff+0xd6>
 800bfaa:	3f01      	subs	r7, #1
 800bfac:	e7e7      	b.n	800bf7e <__mdiff+0xee>
 800bfae:	bf00      	nop
 800bfb0:	0800c90c 	.word	0x0800c90c
 800bfb4:	0800c91d 	.word	0x0800c91d

0800bfb8 <__d2b>:
 800bfb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfbc:	460f      	mov	r7, r1
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	ec59 8b10 	vmov	r8, r9, d0
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	f7ff fcd5 	bl	800b974 <_Balloc>
 800bfca:	4604      	mov	r4, r0
 800bfcc:	b930      	cbnz	r0, 800bfdc <__d2b+0x24>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	4b23      	ldr	r3, [pc, #140]	@ (800c060 <__d2b+0xa8>)
 800bfd2:	4824      	ldr	r0, [pc, #144]	@ (800c064 <__d2b+0xac>)
 800bfd4:	f240 310f 	movw	r1, #783	@ 0x30f
 800bfd8:	f000 fad6 	bl	800c588 <__assert_func>
 800bfdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfe4:	b10d      	cbz	r5, 800bfea <__d2b+0x32>
 800bfe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfea:	9301      	str	r3, [sp, #4]
 800bfec:	f1b8 0300 	subs.w	r3, r8, #0
 800bff0:	d023      	beq.n	800c03a <__d2b+0x82>
 800bff2:	4668      	mov	r0, sp
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	f7ff fd84 	bl	800bb02 <__lo0bits>
 800bffa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bffe:	b1d0      	cbz	r0, 800c036 <__d2b+0x7e>
 800c000:	f1c0 0320 	rsb	r3, r0, #32
 800c004:	fa02 f303 	lsl.w	r3, r2, r3
 800c008:	430b      	orrs	r3, r1
 800c00a:	40c2      	lsrs	r2, r0
 800c00c:	6163      	str	r3, [r4, #20]
 800c00e:	9201      	str	r2, [sp, #4]
 800c010:	9b01      	ldr	r3, [sp, #4]
 800c012:	61a3      	str	r3, [r4, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	bf0c      	ite	eq
 800c018:	2201      	moveq	r2, #1
 800c01a:	2202      	movne	r2, #2
 800c01c:	6122      	str	r2, [r4, #16]
 800c01e:	b1a5      	cbz	r5, 800c04a <__d2b+0x92>
 800c020:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c024:	4405      	add	r5, r0
 800c026:	603d      	str	r5, [r7, #0]
 800c028:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c02c:	6030      	str	r0, [r6, #0]
 800c02e:	4620      	mov	r0, r4
 800c030:	b003      	add	sp, #12
 800c032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c036:	6161      	str	r1, [r4, #20]
 800c038:	e7ea      	b.n	800c010 <__d2b+0x58>
 800c03a:	a801      	add	r0, sp, #4
 800c03c:	f7ff fd61 	bl	800bb02 <__lo0bits>
 800c040:	9b01      	ldr	r3, [sp, #4]
 800c042:	6163      	str	r3, [r4, #20]
 800c044:	3020      	adds	r0, #32
 800c046:	2201      	movs	r2, #1
 800c048:	e7e8      	b.n	800c01c <__d2b+0x64>
 800c04a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c04e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c052:	6038      	str	r0, [r7, #0]
 800c054:	6918      	ldr	r0, [r3, #16]
 800c056:	f7ff fd35 	bl	800bac4 <__hi0bits>
 800c05a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c05e:	e7e5      	b.n	800c02c <__d2b+0x74>
 800c060:	0800c90c 	.word	0x0800c90c
 800c064:	0800c91d 	.word	0x0800c91d

0800c068 <__sfputc_r>:
 800c068:	6893      	ldr	r3, [r2, #8]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	b410      	push	{r4}
 800c070:	6093      	str	r3, [r2, #8]
 800c072:	da08      	bge.n	800c086 <__sfputc_r+0x1e>
 800c074:	6994      	ldr	r4, [r2, #24]
 800c076:	42a3      	cmp	r3, r4
 800c078:	db01      	blt.n	800c07e <__sfputc_r+0x16>
 800c07a:	290a      	cmp	r1, #10
 800c07c:	d103      	bne.n	800c086 <__sfputc_r+0x1e>
 800c07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c082:	f7fe bc7c 	b.w	800a97e <__swbuf_r>
 800c086:	6813      	ldr	r3, [r2, #0]
 800c088:	1c58      	adds	r0, r3, #1
 800c08a:	6010      	str	r0, [r2, #0]
 800c08c:	7019      	strb	r1, [r3, #0]
 800c08e:	4608      	mov	r0, r1
 800c090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <__sfputs_r>:
 800c096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c098:	4606      	mov	r6, r0
 800c09a:	460f      	mov	r7, r1
 800c09c:	4614      	mov	r4, r2
 800c09e:	18d5      	adds	r5, r2, r3
 800c0a0:	42ac      	cmp	r4, r5
 800c0a2:	d101      	bne.n	800c0a8 <__sfputs_r+0x12>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	e007      	b.n	800c0b8 <__sfputs_r+0x22>
 800c0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ac:	463a      	mov	r2, r7
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7ff ffda 	bl	800c068 <__sfputc_r>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d1f3      	bne.n	800c0a0 <__sfputs_r+0xa>
 800c0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0bc <_vfiprintf_r>:
 800c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	b09d      	sub	sp, #116	@ 0x74
 800c0c4:	4614      	mov	r4, r2
 800c0c6:	4698      	mov	r8, r3
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	b118      	cbz	r0, 800c0d4 <_vfiprintf_r+0x18>
 800c0cc:	6a03      	ldr	r3, [r0, #32]
 800c0ce:	b90b      	cbnz	r3, 800c0d4 <_vfiprintf_r+0x18>
 800c0d0:	f7fe fb6c 	bl	800a7ac <__sinit>
 800c0d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0d6:	07d9      	lsls	r1, r3, #31
 800c0d8:	d405      	bmi.n	800c0e6 <_vfiprintf_r+0x2a>
 800c0da:	89ab      	ldrh	r3, [r5, #12]
 800c0dc:	059a      	lsls	r2, r3, #22
 800c0de:	d402      	bmi.n	800c0e6 <_vfiprintf_r+0x2a>
 800c0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0e2:	f7fe fd5e 	bl	800aba2 <__retarget_lock_acquire_recursive>
 800c0e6:	89ab      	ldrh	r3, [r5, #12]
 800c0e8:	071b      	lsls	r3, r3, #28
 800c0ea:	d501      	bpl.n	800c0f0 <_vfiprintf_r+0x34>
 800c0ec:	692b      	ldr	r3, [r5, #16]
 800c0ee:	b99b      	cbnz	r3, 800c118 <_vfiprintf_r+0x5c>
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7fe fc82 	bl	800a9fc <__swsetup_r>
 800c0f8:	b170      	cbz	r0, 800c118 <_vfiprintf_r+0x5c>
 800c0fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0fc:	07dc      	lsls	r4, r3, #31
 800c0fe:	d504      	bpl.n	800c10a <_vfiprintf_r+0x4e>
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	b01d      	add	sp, #116	@ 0x74
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10a:	89ab      	ldrh	r3, [r5, #12]
 800c10c:	0598      	lsls	r0, r3, #22
 800c10e:	d4f7      	bmi.n	800c100 <_vfiprintf_r+0x44>
 800c110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c112:	f7fe fd47 	bl	800aba4 <__retarget_lock_release_recursive>
 800c116:	e7f3      	b.n	800c100 <_vfiprintf_r+0x44>
 800c118:	2300      	movs	r3, #0
 800c11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c11c:	2320      	movs	r3, #32
 800c11e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c122:	f8cd 800c 	str.w	r8, [sp, #12]
 800c126:	2330      	movs	r3, #48	@ 0x30
 800c128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c2d8 <_vfiprintf_r+0x21c>
 800c12c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c130:	f04f 0901 	mov.w	r9, #1
 800c134:	4623      	mov	r3, r4
 800c136:	469a      	mov	sl, r3
 800c138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c13c:	b10a      	cbz	r2, 800c142 <_vfiprintf_r+0x86>
 800c13e:	2a25      	cmp	r2, #37	@ 0x25
 800c140:	d1f9      	bne.n	800c136 <_vfiprintf_r+0x7a>
 800c142:	ebba 0b04 	subs.w	fp, sl, r4
 800c146:	d00b      	beq.n	800c160 <_vfiprintf_r+0xa4>
 800c148:	465b      	mov	r3, fp
 800c14a:	4622      	mov	r2, r4
 800c14c:	4629      	mov	r1, r5
 800c14e:	4630      	mov	r0, r6
 800c150:	f7ff ffa1 	bl	800c096 <__sfputs_r>
 800c154:	3001      	adds	r0, #1
 800c156:	f000 80a7 	beq.w	800c2a8 <_vfiprintf_r+0x1ec>
 800c15a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c15c:	445a      	add	r2, fp
 800c15e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c160:	f89a 3000 	ldrb.w	r3, [sl]
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 809f 	beq.w	800c2a8 <_vfiprintf_r+0x1ec>
 800c16a:	2300      	movs	r3, #0
 800c16c:	f04f 32ff 	mov.w	r2, #4294967295
 800c170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c174:	f10a 0a01 	add.w	sl, sl, #1
 800c178:	9304      	str	r3, [sp, #16]
 800c17a:	9307      	str	r3, [sp, #28]
 800c17c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c180:	931a      	str	r3, [sp, #104]	@ 0x68
 800c182:	4654      	mov	r4, sl
 800c184:	2205      	movs	r2, #5
 800c186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18a:	4853      	ldr	r0, [pc, #332]	@ (800c2d8 <_vfiprintf_r+0x21c>)
 800c18c:	f7f4 f8a8 	bl	80002e0 <memchr>
 800c190:	9a04      	ldr	r2, [sp, #16]
 800c192:	b9d8      	cbnz	r0, 800c1cc <_vfiprintf_r+0x110>
 800c194:	06d1      	lsls	r1, r2, #27
 800c196:	bf44      	itt	mi
 800c198:	2320      	movmi	r3, #32
 800c19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c19e:	0713      	lsls	r3, r2, #28
 800c1a0:	bf44      	itt	mi
 800c1a2:	232b      	movmi	r3, #43	@ 0x2b
 800c1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1ae:	d015      	beq.n	800c1dc <_vfiprintf_r+0x120>
 800c1b0:	9a07      	ldr	r2, [sp, #28]
 800c1b2:	4654      	mov	r4, sl
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	f04f 0c0a 	mov.w	ip, #10
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1c0:	3b30      	subs	r3, #48	@ 0x30
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	d94b      	bls.n	800c25e <_vfiprintf_r+0x1a2>
 800c1c6:	b1b0      	cbz	r0, 800c1f6 <_vfiprintf_r+0x13a>
 800c1c8:	9207      	str	r2, [sp, #28]
 800c1ca:	e014      	b.n	800c1f6 <_vfiprintf_r+0x13a>
 800c1cc:	eba0 0308 	sub.w	r3, r0, r8
 800c1d0:	fa09 f303 	lsl.w	r3, r9, r3
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	46a2      	mov	sl, r4
 800c1da:	e7d2      	b.n	800c182 <_vfiprintf_r+0xc6>
 800c1dc:	9b03      	ldr	r3, [sp, #12]
 800c1de:	1d19      	adds	r1, r3, #4
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	9103      	str	r1, [sp, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	bfbb      	ittet	lt
 800c1e8:	425b      	neglt	r3, r3
 800c1ea:	f042 0202 	orrlt.w	r2, r2, #2
 800c1ee:	9307      	strge	r3, [sp, #28]
 800c1f0:	9307      	strlt	r3, [sp, #28]
 800c1f2:	bfb8      	it	lt
 800c1f4:	9204      	strlt	r2, [sp, #16]
 800c1f6:	7823      	ldrb	r3, [r4, #0]
 800c1f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1fa:	d10a      	bne.n	800c212 <_vfiprintf_r+0x156>
 800c1fc:	7863      	ldrb	r3, [r4, #1]
 800c1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800c200:	d132      	bne.n	800c268 <_vfiprintf_r+0x1ac>
 800c202:	9b03      	ldr	r3, [sp, #12]
 800c204:	1d1a      	adds	r2, r3, #4
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	9203      	str	r2, [sp, #12]
 800c20a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c20e:	3402      	adds	r4, #2
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c2e8 <_vfiprintf_r+0x22c>
 800c216:	7821      	ldrb	r1, [r4, #0]
 800c218:	2203      	movs	r2, #3
 800c21a:	4650      	mov	r0, sl
 800c21c:	f7f4 f860 	bl	80002e0 <memchr>
 800c220:	b138      	cbz	r0, 800c232 <_vfiprintf_r+0x176>
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	eba0 000a 	sub.w	r0, r0, sl
 800c228:	2240      	movs	r2, #64	@ 0x40
 800c22a:	4082      	lsls	r2, r0
 800c22c:	4313      	orrs	r3, r2
 800c22e:	3401      	adds	r4, #1
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c236:	4829      	ldr	r0, [pc, #164]	@ (800c2dc <_vfiprintf_r+0x220>)
 800c238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c23c:	2206      	movs	r2, #6
 800c23e:	f7f4 f84f 	bl	80002e0 <memchr>
 800c242:	2800      	cmp	r0, #0
 800c244:	d03f      	beq.n	800c2c6 <_vfiprintf_r+0x20a>
 800c246:	4b26      	ldr	r3, [pc, #152]	@ (800c2e0 <_vfiprintf_r+0x224>)
 800c248:	bb1b      	cbnz	r3, 800c292 <_vfiprintf_r+0x1d6>
 800c24a:	9b03      	ldr	r3, [sp, #12]
 800c24c:	3307      	adds	r3, #7
 800c24e:	f023 0307 	bic.w	r3, r3, #7
 800c252:	3308      	adds	r3, #8
 800c254:	9303      	str	r3, [sp, #12]
 800c256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c258:	443b      	add	r3, r7
 800c25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c25c:	e76a      	b.n	800c134 <_vfiprintf_r+0x78>
 800c25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c262:	460c      	mov	r4, r1
 800c264:	2001      	movs	r0, #1
 800c266:	e7a8      	b.n	800c1ba <_vfiprintf_r+0xfe>
 800c268:	2300      	movs	r3, #0
 800c26a:	3401      	adds	r4, #1
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	4619      	mov	r1, r3
 800c270:	f04f 0c0a 	mov.w	ip, #10
 800c274:	4620      	mov	r0, r4
 800c276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c27a:	3a30      	subs	r2, #48	@ 0x30
 800c27c:	2a09      	cmp	r2, #9
 800c27e:	d903      	bls.n	800c288 <_vfiprintf_r+0x1cc>
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0c6      	beq.n	800c212 <_vfiprintf_r+0x156>
 800c284:	9105      	str	r1, [sp, #20]
 800c286:	e7c4      	b.n	800c212 <_vfiprintf_r+0x156>
 800c288:	fb0c 2101 	mla	r1, ip, r1, r2
 800c28c:	4604      	mov	r4, r0
 800c28e:	2301      	movs	r3, #1
 800c290:	e7f0      	b.n	800c274 <_vfiprintf_r+0x1b8>
 800c292:	ab03      	add	r3, sp, #12
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	462a      	mov	r2, r5
 800c298:	4b12      	ldr	r3, [pc, #72]	@ (800c2e4 <_vfiprintf_r+0x228>)
 800c29a:	a904      	add	r1, sp, #16
 800c29c:	4630      	mov	r0, r6
 800c29e:	f7fd fe53 	bl	8009f48 <_printf_float>
 800c2a2:	4607      	mov	r7, r0
 800c2a4:	1c78      	adds	r0, r7, #1
 800c2a6:	d1d6      	bne.n	800c256 <_vfiprintf_r+0x19a>
 800c2a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2aa:	07d9      	lsls	r1, r3, #31
 800c2ac:	d405      	bmi.n	800c2ba <_vfiprintf_r+0x1fe>
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	059a      	lsls	r2, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_vfiprintf_r+0x1fe>
 800c2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2b6:	f7fe fc75 	bl	800aba4 <__retarget_lock_release_recursive>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	065b      	lsls	r3, r3, #25
 800c2be:	f53f af1f 	bmi.w	800c100 <_vfiprintf_r+0x44>
 800c2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2c4:	e71e      	b.n	800c104 <_vfiprintf_r+0x48>
 800c2c6:	ab03      	add	r3, sp, #12
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	462a      	mov	r2, r5
 800c2cc:	4b05      	ldr	r3, [pc, #20]	@ (800c2e4 <_vfiprintf_r+0x228>)
 800c2ce:	a904      	add	r1, sp, #16
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f7fe f8c1 	bl	800a458 <_printf_i>
 800c2d6:	e7e4      	b.n	800c2a2 <_vfiprintf_r+0x1e6>
 800c2d8:	0800c976 	.word	0x0800c976
 800c2dc:	0800c980 	.word	0x0800c980
 800c2e0:	08009f49 	.word	0x08009f49
 800c2e4:	0800c097 	.word	0x0800c097
 800c2e8:	0800c97c 	.word	0x0800c97c

0800c2ec <__sflush_r>:
 800c2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f4:	0716      	lsls	r6, r2, #28
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	d454      	bmi.n	800c3a6 <__sflush_r+0xba>
 800c2fc:	684b      	ldr	r3, [r1, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dc02      	bgt.n	800c308 <__sflush_r+0x1c>
 800c302:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c304:	2b00      	cmp	r3, #0
 800c306:	dd48      	ble.n	800c39a <__sflush_r+0xae>
 800c308:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	d045      	beq.n	800c39a <__sflush_r+0xae>
 800c30e:	2300      	movs	r3, #0
 800c310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c314:	682f      	ldr	r7, [r5, #0]
 800c316:	6a21      	ldr	r1, [r4, #32]
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	d030      	beq.n	800c37e <__sflush_r+0x92>
 800c31c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	0759      	lsls	r1, r3, #29
 800c322:	d505      	bpl.n	800c330 <__sflush_r+0x44>
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	1ad2      	subs	r2, r2, r3
 800c328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c32a:	b10b      	cbz	r3, 800c330 <__sflush_r+0x44>
 800c32c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	2300      	movs	r3, #0
 800c332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c334:	6a21      	ldr	r1, [r4, #32]
 800c336:	4628      	mov	r0, r5
 800c338:	47b0      	blx	r6
 800c33a:	1c43      	adds	r3, r0, #1
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	d106      	bne.n	800c34e <__sflush_r+0x62>
 800c340:	6829      	ldr	r1, [r5, #0]
 800c342:	291d      	cmp	r1, #29
 800c344:	d82b      	bhi.n	800c39e <__sflush_r+0xb2>
 800c346:	4a2a      	ldr	r2, [pc, #168]	@ (800c3f0 <__sflush_r+0x104>)
 800c348:	40ca      	lsrs	r2, r1
 800c34a:	07d6      	lsls	r6, r2, #31
 800c34c:	d527      	bpl.n	800c39e <__sflush_r+0xb2>
 800c34e:	2200      	movs	r2, #0
 800c350:	6062      	str	r2, [r4, #4]
 800c352:	04d9      	lsls	r1, r3, #19
 800c354:	6922      	ldr	r2, [r4, #16]
 800c356:	6022      	str	r2, [r4, #0]
 800c358:	d504      	bpl.n	800c364 <__sflush_r+0x78>
 800c35a:	1c42      	adds	r2, r0, #1
 800c35c:	d101      	bne.n	800c362 <__sflush_r+0x76>
 800c35e:	682b      	ldr	r3, [r5, #0]
 800c360:	b903      	cbnz	r3, 800c364 <__sflush_r+0x78>
 800c362:	6560      	str	r0, [r4, #84]	@ 0x54
 800c364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c366:	602f      	str	r7, [r5, #0]
 800c368:	b1b9      	cbz	r1, 800c39a <__sflush_r+0xae>
 800c36a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c36e:	4299      	cmp	r1, r3
 800c370:	d002      	beq.n	800c378 <__sflush_r+0x8c>
 800c372:	4628      	mov	r0, r5
 800c374:	f7ff f9fe 	bl	800b774 <_free_r>
 800c378:	2300      	movs	r3, #0
 800c37a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c37c:	e00d      	b.n	800c39a <__sflush_r+0xae>
 800c37e:	2301      	movs	r3, #1
 800c380:	4628      	mov	r0, r5
 800c382:	47b0      	blx	r6
 800c384:	4602      	mov	r2, r0
 800c386:	1c50      	adds	r0, r2, #1
 800c388:	d1c9      	bne.n	800c31e <__sflush_r+0x32>
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d0c6      	beq.n	800c31e <__sflush_r+0x32>
 800c390:	2b1d      	cmp	r3, #29
 800c392:	d001      	beq.n	800c398 <__sflush_r+0xac>
 800c394:	2b16      	cmp	r3, #22
 800c396:	d11e      	bne.n	800c3d6 <__sflush_r+0xea>
 800c398:	602f      	str	r7, [r5, #0]
 800c39a:	2000      	movs	r0, #0
 800c39c:	e022      	b.n	800c3e4 <__sflush_r+0xf8>
 800c39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3a2:	b21b      	sxth	r3, r3
 800c3a4:	e01b      	b.n	800c3de <__sflush_r+0xf2>
 800c3a6:	690f      	ldr	r7, [r1, #16]
 800c3a8:	2f00      	cmp	r7, #0
 800c3aa:	d0f6      	beq.n	800c39a <__sflush_r+0xae>
 800c3ac:	0793      	lsls	r3, r2, #30
 800c3ae:	680e      	ldr	r6, [r1, #0]
 800c3b0:	bf08      	it	eq
 800c3b2:	694b      	ldreq	r3, [r1, #20]
 800c3b4:	600f      	str	r7, [r1, #0]
 800c3b6:	bf18      	it	ne
 800c3b8:	2300      	movne	r3, #0
 800c3ba:	eba6 0807 	sub.w	r8, r6, r7
 800c3be:	608b      	str	r3, [r1, #8]
 800c3c0:	f1b8 0f00 	cmp.w	r8, #0
 800c3c4:	dde9      	ble.n	800c39a <__sflush_r+0xae>
 800c3c6:	6a21      	ldr	r1, [r4, #32]
 800c3c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3ca:	4643      	mov	r3, r8
 800c3cc:	463a      	mov	r2, r7
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	47b0      	blx	r6
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	dc08      	bgt.n	800c3e8 <__sflush_r+0xfc>
 800c3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e8:	4407      	add	r7, r0
 800c3ea:	eba8 0800 	sub.w	r8, r8, r0
 800c3ee:	e7e7      	b.n	800c3c0 <__sflush_r+0xd4>
 800c3f0:	20400001 	.word	0x20400001

0800c3f4 <_fflush_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	690b      	ldr	r3, [r1, #16]
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	b913      	cbnz	r3, 800c404 <_fflush_r+0x10>
 800c3fe:	2500      	movs	r5, #0
 800c400:	4628      	mov	r0, r5
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	b118      	cbz	r0, 800c40e <_fflush_r+0x1a>
 800c406:	6a03      	ldr	r3, [r0, #32]
 800c408:	b90b      	cbnz	r3, 800c40e <_fflush_r+0x1a>
 800c40a:	f7fe f9cf 	bl	800a7ac <__sinit>
 800c40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0f3      	beq.n	800c3fe <_fflush_r+0xa>
 800c416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c418:	07d0      	lsls	r0, r2, #31
 800c41a:	d404      	bmi.n	800c426 <_fflush_r+0x32>
 800c41c:	0599      	lsls	r1, r3, #22
 800c41e:	d402      	bmi.n	800c426 <_fflush_r+0x32>
 800c420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c422:	f7fe fbbe 	bl	800aba2 <__retarget_lock_acquire_recursive>
 800c426:	4628      	mov	r0, r5
 800c428:	4621      	mov	r1, r4
 800c42a:	f7ff ff5f 	bl	800c2ec <__sflush_r>
 800c42e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c430:	07da      	lsls	r2, r3, #31
 800c432:	4605      	mov	r5, r0
 800c434:	d4e4      	bmi.n	800c400 <_fflush_r+0xc>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	059b      	lsls	r3, r3, #22
 800c43a:	d4e1      	bmi.n	800c400 <_fflush_r+0xc>
 800c43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c43e:	f7fe fbb1 	bl	800aba4 <__retarget_lock_release_recursive>
 800c442:	e7dd      	b.n	800c400 <_fflush_r+0xc>

0800c444 <__swhatbuf_r>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	460c      	mov	r4, r1
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	2900      	cmp	r1, #0
 800c44e:	b096      	sub	sp, #88	@ 0x58
 800c450:	4615      	mov	r5, r2
 800c452:	461e      	mov	r6, r3
 800c454:	da0d      	bge.n	800c472 <__swhatbuf_r+0x2e>
 800c456:	89a3      	ldrh	r3, [r4, #12]
 800c458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c45c:	f04f 0100 	mov.w	r1, #0
 800c460:	bf14      	ite	ne
 800c462:	2340      	movne	r3, #64	@ 0x40
 800c464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c468:	2000      	movs	r0, #0
 800c46a:	6031      	str	r1, [r6, #0]
 800c46c:	602b      	str	r3, [r5, #0]
 800c46e:	b016      	add	sp, #88	@ 0x58
 800c470:	bd70      	pop	{r4, r5, r6, pc}
 800c472:	466a      	mov	r2, sp
 800c474:	f000 f848 	bl	800c508 <_fstat_r>
 800c478:	2800      	cmp	r0, #0
 800c47a:	dbec      	blt.n	800c456 <__swhatbuf_r+0x12>
 800c47c:	9901      	ldr	r1, [sp, #4]
 800c47e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c486:	4259      	negs	r1, r3
 800c488:	4159      	adcs	r1, r3
 800c48a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c48e:	e7eb      	b.n	800c468 <__swhatbuf_r+0x24>

0800c490 <__smakebuf_r>:
 800c490:	898b      	ldrh	r3, [r1, #12]
 800c492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c494:	079d      	lsls	r5, r3, #30
 800c496:	4606      	mov	r6, r0
 800c498:	460c      	mov	r4, r1
 800c49a:	d507      	bpl.n	800c4ac <__smakebuf_r+0x1c>
 800c49c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	6163      	str	r3, [r4, #20]
 800c4a8:	b003      	add	sp, #12
 800c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ac:	ab01      	add	r3, sp, #4
 800c4ae:	466a      	mov	r2, sp
 800c4b0:	f7ff ffc8 	bl	800c444 <__swhatbuf_r>
 800c4b4:	9f00      	ldr	r7, [sp, #0]
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff f9ce 	bl	800b85c <_malloc_r>
 800c4c0:	b948      	cbnz	r0, 800c4d6 <__smakebuf_r+0x46>
 800c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c6:	059a      	lsls	r2, r3, #22
 800c4c8:	d4ee      	bmi.n	800c4a8 <__smakebuf_r+0x18>
 800c4ca:	f023 0303 	bic.w	r3, r3, #3
 800c4ce:	f043 0302 	orr.w	r3, r3, #2
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	e7e2      	b.n	800c49c <__smakebuf_r+0xc>
 800c4d6:	89a3      	ldrh	r3, [r4, #12]
 800c4d8:	6020      	str	r0, [r4, #0]
 800c4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4de:	81a3      	strh	r3, [r4, #12]
 800c4e0:	9b01      	ldr	r3, [sp, #4]
 800c4e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4e6:	b15b      	cbz	r3, 800c500 <__smakebuf_r+0x70>
 800c4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f000 f81d 	bl	800c52c <_isatty_r>
 800c4f2:	b128      	cbz	r0, 800c500 <__smakebuf_r+0x70>
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	f023 0303 	bic.w	r3, r3, #3
 800c4fa:	f043 0301 	orr.w	r3, r3, #1
 800c4fe:	81a3      	strh	r3, [r4, #12]
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	431d      	orrs	r5, r3
 800c504:	81a5      	strh	r5, [r4, #12]
 800c506:	e7cf      	b.n	800c4a8 <__smakebuf_r+0x18>

0800c508 <_fstat_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d07      	ldr	r5, [pc, #28]	@ (800c528 <_fstat_r+0x20>)
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	4611      	mov	r1, r2
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	f7f4 fde9 	bl	80010ec <_fstat>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d102      	bne.n	800c524 <_fstat_r+0x1c>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	b103      	cbz	r3, 800c524 <_fstat_r+0x1c>
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	bd38      	pop	{r3, r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	24000488 	.word	0x24000488

0800c52c <_isatty_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	@ (800c548 <_isatty_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f4 fde8 	bl	800110c <_isatty>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_isatty_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_isatty_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	24000488 	.word	0x24000488

0800c54c <_sbrk_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d06      	ldr	r5, [pc, #24]	@ (800c568 <_sbrk_r+0x1c>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	f7f4 fdf0 	bl	800113c <_sbrk>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_sbrk_r+0x1a>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_sbrk_r+0x1a>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	24000488 	.word	0x24000488

0800c56c <memcpy>:
 800c56c:	440a      	add	r2, r1
 800c56e:	4291      	cmp	r1, r2
 800c570:	f100 33ff 	add.w	r3, r0, #4294967295
 800c574:	d100      	bne.n	800c578 <memcpy+0xc>
 800c576:	4770      	bx	lr
 800c578:	b510      	push	{r4, lr}
 800c57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c582:	4291      	cmp	r1, r2
 800c584:	d1f9      	bne.n	800c57a <memcpy+0xe>
 800c586:	bd10      	pop	{r4, pc}

0800c588 <__assert_func>:
 800c588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c58a:	4614      	mov	r4, r2
 800c58c:	461a      	mov	r2, r3
 800c58e:	4b09      	ldr	r3, [pc, #36]	@ (800c5b4 <__assert_func+0x2c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4605      	mov	r5, r0
 800c594:	68d8      	ldr	r0, [r3, #12]
 800c596:	b14c      	cbz	r4, 800c5ac <__assert_func+0x24>
 800c598:	4b07      	ldr	r3, [pc, #28]	@ (800c5b8 <__assert_func+0x30>)
 800c59a:	9100      	str	r1, [sp, #0]
 800c59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a0:	4906      	ldr	r1, [pc, #24]	@ (800c5bc <__assert_func+0x34>)
 800c5a2:	462b      	mov	r3, r5
 800c5a4:	f000 f842 	bl	800c62c <fiprintf>
 800c5a8:	f000 f852 	bl	800c650 <abort>
 800c5ac:	4b04      	ldr	r3, [pc, #16]	@ (800c5c0 <__assert_func+0x38>)
 800c5ae:	461c      	mov	r4, r3
 800c5b0:	e7f3      	b.n	800c59a <__assert_func+0x12>
 800c5b2:	bf00      	nop
 800c5b4:	24000020 	.word	0x24000020
 800c5b8:	0800c991 	.word	0x0800c991
 800c5bc:	0800c99e 	.word	0x0800c99e
 800c5c0:	0800c9cc 	.word	0x0800c9cc

0800c5c4 <_calloc_r>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	fba1 5402 	umull	r5, r4, r1, r2
 800c5ca:	b934      	cbnz	r4, 800c5da <_calloc_r+0x16>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7ff f945 	bl	800b85c <_malloc_r>
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	b928      	cbnz	r0, 800c5e2 <_calloc_r+0x1e>
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
 800c5da:	220c      	movs	r2, #12
 800c5dc:	6002      	str	r2, [r0, #0]
 800c5de:	2600      	movs	r6, #0
 800c5e0:	e7f9      	b.n	800c5d6 <_calloc_r+0x12>
 800c5e2:	462a      	mov	r2, r5
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	f7fe fa5f 	bl	800aaa8 <memset>
 800c5ea:	e7f4      	b.n	800c5d6 <_calloc_r+0x12>

0800c5ec <__ascii_mbtowc>:
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	b901      	cbnz	r1, 800c5f2 <__ascii_mbtowc+0x6>
 800c5f0:	a901      	add	r1, sp, #4
 800c5f2:	b142      	cbz	r2, 800c606 <__ascii_mbtowc+0x1a>
 800c5f4:	b14b      	cbz	r3, 800c60a <__ascii_mbtowc+0x1e>
 800c5f6:	7813      	ldrb	r3, [r2, #0]
 800c5f8:	600b      	str	r3, [r1, #0]
 800c5fa:	7812      	ldrb	r2, [r2, #0]
 800c5fc:	1e10      	subs	r0, r2, #0
 800c5fe:	bf18      	it	ne
 800c600:	2001      	movne	r0, #1
 800c602:	b002      	add	sp, #8
 800c604:	4770      	bx	lr
 800c606:	4610      	mov	r0, r2
 800c608:	e7fb      	b.n	800c602 <__ascii_mbtowc+0x16>
 800c60a:	f06f 0001 	mvn.w	r0, #1
 800c60e:	e7f8      	b.n	800c602 <__ascii_mbtowc+0x16>

0800c610 <__ascii_wctomb>:
 800c610:	4603      	mov	r3, r0
 800c612:	4608      	mov	r0, r1
 800c614:	b141      	cbz	r1, 800c628 <__ascii_wctomb+0x18>
 800c616:	2aff      	cmp	r2, #255	@ 0xff
 800c618:	d904      	bls.n	800c624 <__ascii_wctomb+0x14>
 800c61a:	228a      	movs	r2, #138	@ 0x8a
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	f04f 30ff 	mov.w	r0, #4294967295
 800c622:	4770      	bx	lr
 800c624:	700a      	strb	r2, [r1, #0]
 800c626:	2001      	movs	r0, #1
 800c628:	4770      	bx	lr
	...

0800c62c <fiprintf>:
 800c62c:	b40e      	push	{r1, r2, r3}
 800c62e:	b503      	push	{r0, r1, lr}
 800c630:	4601      	mov	r1, r0
 800c632:	ab03      	add	r3, sp, #12
 800c634:	4805      	ldr	r0, [pc, #20]	@ (800c64c <fiprintf+0x20>)
 800c636:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63a:	6800      	ldr	r0, [r0, #0]
 800c63c:	9301      	str	r3, [sp, #4]
 800c63e:	f7ff fd3d 	bl	800c0bc <_vfiprintf_r>
 800c642:	b002      	add	sp, #8
 800c644:	f85d eb04 	ldr.w	lr, [sp], #4
 800c648:	b003      	add	sp, #12
 800c64a:	4770      	bx	lr
 800c64c:	24000020 	.word	0x24000020

0800c650 <abort>:
 800c650:	b508      	push	{r3, lr}
 800c652:	2006      	movs	r0, #6
 800c654:	f000 f82c 	bl	800c6b0 <raise>
 800c658:	2001      	movs	r0, #1
 800c65a:	f7f4 fcf7 	bl	800104c <_exit>

0800c65e <_raise_r>:
 800c65e:	291f      	cmp	r1, #31
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	460c      	mov	r4, r1
 800c666:	d904      	bls.n	800c672 <_raise_r+0x14>
 800c668:	2316      	movs	r3, #22
 800c66a:	6003      	str	r3, [r0, #0]
 800c66c:	f04f 30ff 	mov.w	r0, #4294967295
 800c670:	bd38      	pop	{r3, r4, r5, pc}
 800c672:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c674:	b112      	cbz	r2, 800c67c <_raise_r+0x1e>
 800c676:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c67a:	b94b      	cbnz	r3, 800c690 <_raise_r+0x32>
 800c67c:	4628      	mov	r0, r5
 800c67e:	f000 f831 	bl	800c6e4 <_getpid_r>
 800c682:	4622      	mov	r2, r4
 800c684:	4601      	mov	r1, r0
 800c686:	4628      	mov	r0, r5
 800c688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c68c:	f000 b818 	b.w	800c6c0 <_kill_r>
 800c690:	2b01      	cmp	r3, #1
 800c692:	d00a      	beq.n	800c6aa <_raise_r+0x4c>
 800c694:	1c59      	adds	r1, r3, #1
 800c696:	d103      	bne.n	800c6a0 <_raise_r+0x42>
 800c698:	2316      	movs	r3, #22
 800c69a:	6003      	str	r3, [r0, #0]
 800c69c:	2001      	movs	r0, #1
 800c69e:	e7e7      	b.n	800c670 <_raise_r+0x12>
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	4798      	blx	r3
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	e7e0      	b.n	800c670 <_raise_r+0x12>
	...

0800c6b0 <raise>:
 800c6b0:	4b02      	ldr	r3, [pc, #8]	@ (800c6bc <raise+0xc>)
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	f7ff bfd2 	b.w	800c65e <_raise_r>
 800c6ba:	bf00      	nop
 800c6bc:	24000020 	.word	0x24000020

0800c6c0 <_kill_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d07      	ldr	r5, [pc, #28]	@ (800c6e0 <_kill_r+0x20>)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	602b      	str	r3, [r5, #0]
 800c6ce:	f7f4 fcad 	bl	800102c <_kill>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	d102      	bne.n	800c6dc <_kill_r+0x1c>
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	b103      	cbz	r3, 800c6dc <_kill_r+0x1c>
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	bd38      	pop	{r3, r4, r5, pc}
 800c6de:	bf00      	nop
 800c6e0:	24000488 	.word	0x24000488

0800c6e4 <_getpid_r>:
 800c6e4:	f7f4 bc9a 	b.w	800101c <_getpid>

0800c6e8 <_init>:
 800c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ea:	bf00      	nop
 800c6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ee:	bc08      	pop	{r3}
 800c6f0:	469e      	mov	lr, r3
 800c6f2:	4770      	bx	lr

0800c6f4 <_fini>:
 800c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f6:	bf00      	nop
 800c6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fa:	bc08      	pop	{r3}
 800c6fc:	469e      	mov	lr, r3
 800c6fe:	4770      	bx	lr
