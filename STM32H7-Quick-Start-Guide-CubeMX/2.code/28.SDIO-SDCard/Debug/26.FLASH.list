
26.FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009898  08009898  0000a898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c9c  08009c9c  0000ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ca8  08009ca8  0000aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08009cac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000421c  240001d8  08009e84  0000b1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240043f4  08009e84  0000b3f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014908  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000344c  00000000  00000000  0001fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e20  00000000  00000000  00022f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000aa1  00000000  00000000  00023d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bd09  00000000  00000000  00024821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bfd6  00000000  00000000  0006052a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001741cf  00000000  00000000  0007c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f06cf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004520  00000000  00000000  001f0714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001f4c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009880 	.word	0x08009880

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08009880 	.word	0x08009880

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f001 fff6 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f001 fe39 	bl	8002384 <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <delay_us>:
 * @param     nus: 要延时的us数
 * @note      nus取值范围: 0 ~ (2^32 / fac_us) (fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_us(uint32_t nus)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <delay_us+0x74>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <delay_us+0x78>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	613b      	str	r3, [r7, #16]

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedlock();                    /* 锁定 OS 的任务调度器 */
#endif

    told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <delay_us+0x74>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <delay_us+0x74>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	429a      	cmp	r2, r3
 8000754:	d0f8      	beq.n	8000748 <delay_us+0x24>
        {
            if (tnow < told)
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	429a      	cmp	r2, r3
 800075c:	d206      	bcs.n	800076c <delay_us+0x48>
            {
                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	4413      	add	r3, r2
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	e007      	b.n	800077c <delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	4413      	add	r3, r2
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	4413      	add	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d200      	bcs.n	800078a <delay_us+0x66>
        tnow = SysTick->VAL;
 8000788:	e7de      	b.n	8000748 <delay_us+0x24>
            {
                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 800078a:	bf00      	nop

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedunlock();                  /* 恢复 OS 的任务调度器 */
#endif

}
 800078c:	bf00      	nop
 800078e:	3724      	adds	r7, #36	@ 0x24
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e010 	.word	0xe000e010
 800079c:	240001f4 	.word	0x240001f4

080007a0 <delay_ms>:
 * @brief     延时nms
 * @param     nms: 要延时的ms数 (0< nms <= (2^32 / fac_us / 1000))(fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_ms(uint16_t nms)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]

        nms %= g_fac_ms;                                /* OS已经无法提供这么小的延时了,采用普通方式延时 */
    }
#endif

    delay_us((uint32_t)(nms * 1000));                   /* 普通方式延时 */
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffb5 	bl	8000724 <delay_us>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
     delay_ms(Delay);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <delay_ms>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <stmflash_get_error_status>:
 * @retval      错误代码
 *   @arg       0   , 无错误
 *   @arg       其他, 错误编号
 */
static uint8_t stmflash_get_error_status(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
    uint32_t res = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
    res = FLASH->SR1;
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <stmflash_get_error_status+0x9c>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	607b      	str	r3, [r7, #4]

    if (res & (1 << 17)) return 1;  /* WRPERR=1,写保护错误 */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <stmflash_get_error_status+0x1e>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e038      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 18)) return 2;  /* PGSERR=1,编程序列错误 */
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <stmflash_get_error_status+0x2c>
 8000804:	2302      	movs	r3, #2
 8000806:	e031      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 19)) return 3;  /* STRBERR=1,复写错误 */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <stmflash_get_error_status+0x3a>
 8000812:	2303      	movs	r3, #3
 8000814:	e02a      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 21)) return 4;  /* INCERR=1,数据一致性错误 */
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <stmflash_get_error_status+0x48>
 8000820:	2304      	movs	r3, #4
 8000822:	e023      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 22)) return 5;  /* OPERR=1,写/擦除错误 */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <stmflash_get_error_status+0x56>
 800082e:	2305      	movs	r3, #5
 8000830:	e01c      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 23)) return 6;  /* RDPERR=1,读保护错误 */
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <stmflash_get_error_status+0x64>
 800083c:	2306      	movs	r3, #6
 800083e:	e015      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 24)) return 7;  /* RDSERR=1,非法访问加密区错误 */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <stmflash_get_error_status+0x72>
 800084a:	2307      	movs	r3, #7
 800084c:	e00e      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 25)) return 8;  /* SNECCERR=1,1bit ecc校正错误 */
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <stmflash_get_error_status+0x80>
 8000858:	2308      	movs	r3, #8
 800085a:	e007      	b.n	800086c <stmflash_get_error_status+0x90>
    if (res & (1 << 26)) return 9;  /* DBECCERR=1,2bit ecc错误 */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <stmflash_get_error_status+0x8e>
 8000866:	2309      	movs	r3, #9
 8000868:	e000      	b.n	800086c <stmflash_get_error_status+0x90>

    return 0;   /* 没有任何状态/操作完成. */
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	52002000 	.word	0x52002000

0800087c <stmflash_wait_done>:
 *   @arg       0   : 已完成
 *   @arg       1~9 : 错误代码
 *   @arg       0XFF: 超时
 */
static uint8_t stmflash_wait_done(uint32_t time)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    uint8_t res = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
    uint32_t tempreg = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

    while (1)
    {
        tempreg = FLASH->SR1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <stmflash_wait_done+0x50>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	60bb      	str	r3, [r7, #8]

        if ((tempreg & 0X07) == 0)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <stmflash_wait_done+0x30>
        {
            break;  /* BSY=0,WBNE=0,QW=0,则操作完成 */
        }

        time--;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	607b      	str	r3, [r7, #4]

        if (time == 0)return 0XFF;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f1      	bne.n	800088c <stmflash_wait_done+0x10>
 80008a8:	23ff      	movs	r3, #255	@ 0xff
 80008aa:	e00b      	b.n	80008c4 <stmflash_wait_done+0x48>
            break;  /* BSY=0,WBNE=0,QW=0,则操作完成 */
 80008ac:	bf00      	nop
    }

    res = stmflash_get_error_status();
 80008ae:	f7ff ff95 	bl	80007dc <stmflash_get_error_status>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]

    if (res)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <stmflash_wait_done+0x46>
    {
        FLASH->CCR1 = 0X07EE0000;   /* 清所有错误标志 */
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <stmflash_wait_done+0x50>)
 80008be:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <stmflash_wait_done+0x54>)
 80008c0:	615a      	str	r2, [r3, #20]
    }

    return res;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	52002000 	.word	0x52002000
 80008d0:	07ee0000 	.word	0x07ee0000

080008d4 <stmflash_erase_sector0>:
 *   @arg       0   : 已完成
 *   @arg       1~9 : 错误代码
 *   @arg       0XFF: 超时
 */
static uint8_t stmflash_erase_sector0(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	71fb      	strb	r3, [r7, #7]
    res = stmflash_wait_done(0XFFFFFFFF);   /* 等待上次操作结束 */
 80008de:	f04f 30ff 	mov.w	r0, #4294967295
 80008e2:	f7ff ffcb 	bl	800087c <stmflash_wait_done>
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]

    if (res == 0)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d12d      	bne.n	800094c <stmflash_erase_sector0+0x78>
    {
        FLASH->CR1 &= ~(7 << 8);    /* SNB1[2:0]=0,清除原来的设置 */
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <stmflash_erase_sector0+0x84>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <stmflash_erase_sector0+0x84>)
 80008f6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80008fa:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 &= ~(3 << 4);    /* PSIZE1[1:0]=0,清除原来的设置 */
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <stmflash_erase_sector0+0x84>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <stmflash_erase_sector0+0x84>)
 8000902:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000906:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 |= (uint32_t)0 << 8; /* 设置要擦除的扇区编号,0 */
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <stmflash_erase_sector0+0x84>)
 800090a:	4a13      	ldr	r2, [pc, #76]	@ (8000958 <stmflash_erase_sector0+0x84>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 |= 2 << 4;       /* 设置为32bit宽 */
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <stmflash_erase_sector0+0x84>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <stmflash_erase_sector0+0x84>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 |= 1 << 2;       /* SER1=1,扇区擦除 */
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <stmflash_erase_sector0+0x84>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <stmflash_erase_sector0+0x84>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 |= 1 << 7;       /* START1=1,开始擦除 */
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <stmflash_erase_sector0+0x84>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <stmflash_erase_sector0+0x84>)
 800092e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000932:	60d3      	str	r3, [r2, #12]
        res = stmflash_wait_done(0XFFFFFFFF);   /* 等待操作结束 */
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f7ff ffa0 	bl	800087c <stmflash_wait_done>
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
        FLASH->CR1 &= ~(1 << 2);    /* SER1=0,清除扇区擦除标志 */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <stmflash_erase_sector0+0x84>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <stmflash_erase_sector0+0x84>)
 8000946:	f023 0304 	bic.w	r3, r3, #4
 800094a:	60d3      	str	r3, [r2, #12]
    }

    return res;
 800094c:	79fb      	ldrb	r3, [r7, #7]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	52002000 	.word	0x52002000

0800095c <stmflash_write_8word>:
 * @retval      错误代码
 *   @arg       0   : 写入成功
 *   @arg       其他: 错误代码
 */
static uint8_t stmflash_write_8word(uint32_t faddr, uint32_t *pdata)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
    volatile uint8_t nword = 8; /* 每次写8个字,256bit */
 8000966:	2308      	movs	r3, #8
 8000968:	73bb      	strb	r3, [r7, #14]
    uint8_t res;
    res = stmflash_wait_done(0XFFFF);
 800096a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800096e:	f7ff ff85 	bl	800087c <stmflash_wait_done>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]

    if (res == 0)       /* OK */
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d137      	bne.n	80009ec <stmflash_write_8word+0x90>
    {
        FLASH->CR1 &= ~(3 << 4);/* PSIZE1[1:0]=0,清除原来的设置 */
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <stmflash_write_8word+0x9c>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4a1d      	ldr	r2, [pc, #116]	@ (80009f8 <stmflash_write_8word+0x9c>)
 8000982:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000986:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 |= 2 << 4;   /* 设置为32bit宽 */
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <stmflash_write_8word+0x9c>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <stmflash_write_8word+0x9c>)
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	60d3      	str	r3, [r2, #12]
        FLASH->CR1 |= 1 << 1;   /* PG1=1,编程使能 */
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <stmflash_write_8word+0x9c>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <stmflash_write_8word+0x9c>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	60d3      	str	r3, [r2, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
}
 80009a4:	bf00      	nop

        __DSB();

        while (nword)
 80009a6:	e00e      	b.n	80009c6 <stmflash_write_8word+0x6a>
        {
            *(volatile uint32_t *)faddr = *pdata;   /* 写入数据 */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	601a      	str	r2, [r3, #0]
            faddr += 4;         /* 写地址+4 */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3304      	adds	r3, #4
 80009b4:	607b      	str	r3, [r7, #4]
            pdata++;            /* 偏移到下一个数据首地址 */
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	3304      	adds	r3, #4
 80009ba:	603b      	str	r3, [r7, #0]
            nword--;
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	3b01      	subs	r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	73bb      	strb	r3, [r7, #14]
        while (nword)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1ec      	bne.n	80009a8 <stmflash_write_8word+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
        }

        __DSB();                /* 写操作完成后,屏蔽数据同步,使CPU重新执行指令序列 */
        res = stmflash_wait_done(0XFFFF);   /* 等待操作完成,一个字编程,最多100us. */
 80009d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80009d8:	f7ff ff50 	bl	800087c <stmflash_wait_done>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]
        FLASH->CR1 &= ~(1 << 1);/* PG1=0,清除扇区擦除标志 */
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <stmflash_write_8word+0x9c>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <stmflash_write_8word+0x9c>)
 80009e6:	f023 0302 	bic.w	r3, r3, #2
 80009ea:	60d3      	str	r3, [r2, #12]
    }

    return res;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	52002000 	.word	0x52002000

080009fc <stmflash_read_word>:
 * @brief       读取指定地址的一个字(32位数据)
 * @param       faddr : 要读取的地址
 * @retval      读取到的数据
 */
uint32_t stmflash_read_word(uint32_t faddr)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    return *(volatile uint32_t *)faddr;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <stmflash_write>:

/* FLASH 写入数据缓存 */
uint32_t g_flashbuf[BOOT_FLASH_SIZE / 4];

void stmflash_write(uint32_t waddr, uint32_t *pbuf, uint32_t length)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	@ 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
    uint8_t status = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint32_t addrx = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t endaddr = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
    uint16_t wbfcyc = BOOT_FLASH_SIZE/32;    /* 写bootflashbuf时,需要执行的循环数 */
 8000a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a32:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint32_t *wbfptr;
    uint32_t wbfaddr;

    if (waddr < (STM32_FLASH_BASE + BOOT_FLASH_SIZE))return;    /* 写入地址小于STM32_FLASH_BASE+BOOT_FLASH_SIZE,非法. */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4a57      	ldr	r2, [pc, #348]	@ (8000b94 <stmflash_write+0x180>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	f0c0 80a2 	bcc.w	8000b82 <stmflash_write+0x16e>

    if (waddr > (STM32_FLASH_BASE + STM32_FLASH_SIZE))return;   /* 写入地址大于STM32总FLASH地址范围,非法. */
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4a55      	ldr	r2, [pc, #340]	@ (8000b98 <stmflash_write+0x184>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	f200 809f 	bhi.w	8000b86 <stmflash_write+0x172>

    if (waddr % 32)return;          /* 写入地址不是32字节倍数,非法. */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 031f 	and.w	r3, r3, #31
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 809b 	bne.w	8000b8a <stmflash_write+0x176>

    HAL_FLASH_Unlock();             /* 解锁 */
 8000a54:	f001 fc5c 	bl	8002310 <HAL_FLASH_Unlock>
    addrx = waddr;                  /* 写入的起始地址 */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
    endaddr = waddr + length * 4;   /* 写入的结束地址 */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	623b      	str	r3, [r7, #32]

    while (addrx < endaddr)         /* 扫清一切障碍.(对非FFFFFFFF的地方,先擦除) */
 8000a66:	e06d      	b.n	8000b44 <stmflash_write+0x130>
    {
        if (stmflash_read_word(addrx) != 0XFFFFFFFF) /* 有非0XFFFFFFFF的地方,要擦除这个扇区 */
 8000a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a6a:	f7ff ffc7 	bl	80009fc <stmflash_read_word>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d063      	beq.n	8000b3e <stmflash_write+0x12a>
        {
            stmflash_read(STM32_FLASH_BASE, g_flashbuf, BOOT_FLASH_SIZE / 4);  /* 读出BOOT_FLASH_SIZE大小数据 */
 8000a76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a7a:	4948      	ldr	r1, [pc, #288]	@ (8000b9c <stmflash_write+0x188>)
 8000a7c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000a80:	f000 f890 	bl	8000ba4 <stmflash_read>
            sys_intx_disable(); /* 禁止所有中断 */
 8000a84:	f000 f942 	bl	8000d0c <sys_intx_disable>

            status = stmflash_erase_sector0();
 8000a88:	f7ff ff24 	bl	80008d4 <stmflash_erase_sector0>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            if (status) /* 发生错误了 */
 8000a92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <stmflash_write+0x8c>
            {
                sys_intx_enable();    /* 允许中断 */
 8000a9a:	f000 f93f 	bl	8000d1c <sys_intx_enable>
                break;                /* 发生错误了 */
 8000a9e:	e055      	b.n	8000b4c <stmflash_write+0x138>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba0 <stmflash_write+0x18c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa8:	f3bf 8f4f 	dsb	sy
}
 8000aac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000aae:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba0 <stmflash_write+0x18c>)
 8000ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ab4:	61fb      	str	r3, [r7, #28]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	0b5b      	lsrs	r3, r3, #13
 8000aba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000abe:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ac8:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	015a      	lsls	r2, r3, #5
 8000ace:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000ad2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ad8:	4931      	ldr	r1, [pc, #196]	@ (8000ba0 <stmflash_write+0x18c>)
 8000ada:	4313      	orrs	r3, r2
 8000adc:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	617a      	str	r2, [r7, #20]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1ef      	bne.n	8000aca <stmflash_write+0xb6>
    } while(sets-- != 0U);
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	1e5a      	subs	r2, r3, #1
 8000aee:	61ba      	str	r2, [r7, #24]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1e5      	bne.n	8000ac0 <stmflash_write+0xac>
  __ASM volatile ("dsb 0xF":::"memory");
 8000af4:	f3bf 8f4f 	dsb	sy
}
 8000af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000afa:	f3bf 8f6f 	isb	sy
}
 8000afe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b00:	bf00      	nop
            }

            SCB_CleanInvalidateDCache();    /* 清除无效的D-Cache */
            wbfptr = g_flashbuf;            /* 指向g_flashbuf首地址 */
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <stmflash_write+0x188>)
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
            wbfaddr = STM32_FLASH_BASE;     /* 指向STM32 FLASH首地址 */
 8000b06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24

            while (wbfcyc)                  /* 写数据 */
 8000b0c:	e00f      	b.n	8000b2e <stmflash_write+0x11a>
            {
                if (stmflash_write_8word(wbfaddr, wbfptr))  /* 写入数据 */
 8000b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b12:	f7ff ff23 	bl	800095c <stmflash_write_8word>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10c      	bne.n	8000b36 <stmflash_write+0x122>
                {
                    break;  /* 写入异常 */
                }
                wbfaddr += 32;
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	3320      	adds	r3, #32
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
                wbfptr += 8;
 8000b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b24:	3320      	adds	r3, #32
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
                wbfcyc--;
 8000b28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            while (wbfcyc)                  /* 写数据 */
 8000b2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1ec      	bne.n	8000b0e <stmflash_write+0xfa>
 8000b34:	e000      	b.n	8000b38 <stmflash_write+0x124>
                    break;  /* 写入异常 */
 8000b36:	bf00      	nop
            }
            sys_intx_enable();  /* 允许中断 */
 8000b38:	f000 f8f0 	bl	8000d1c <sys_intx_enable>
 8000b3c:	e002      	b.n	8000b44 <stmflash_write+0x130>
        }
        else
        {
            addrx += 4;         /* 偏移到下一个位置 */
 8000b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b40:	3304      	adds	r3, #4
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
    while (addrx < endaddr)         /* 扫清一切障碍.(对非FFFFFFFF的地方,先擦除) */
 8000b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d38d      	bcc.n	8000a68 <stmflash_write+0x54>
        }
    }

    if (status == HAL_OK)
 8000b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d113      	bne.n	8000b7c <stmflash_write+0x168>
    {
        while (waddr < endaddr) /* 写数据 */
 8000b54:	e00c      	b.n	8000b70 <stmflash_write+0x15c>
        {
            if (stmflash_write_8word(waddr, pbuf))  /* 写入数据 */
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff feff 	bl	800095c <stmflash_write_8word>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10a      	bne.n	8000b7a <stmflash_write+0x166>
            {
                break;  /* 写入异常 */
            }

            waddr += 32;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3320      	adds	r3, #32
 8000b68:	60fb      	str	r3, [r7, #12]
            pbuf += 8;
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3320      	adds	r3, #32
 8000b6e:	60bb      	str	r3, [r7, #8]
        while (waddr < endaddr) /* 写数据 */
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3ee      	bcc.n	8000b56 <stmflash_write+0x142>
 8000b78:	e000      	b.n	8000b7c <stmflash_write+0x168>
                break;  /* 写入异常 */
 8000b7a:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();           /* 上锁 */
 8000b7c:	f001 fbea 	bl	8002354 <HAL_FLASH_Lock>
 8000b80:	e004      	b.n	8000b8c <stmflash_write+0x178>
    if (waddr < (STM32_FLASH_BASE + BOOT_FLASH_SIZE))return;    /* 写入地址小于STM32_FLASH_BASE+BOOT_FLASH_SIZE,非法. */
 8000b82:	bf00      	nop
 8000b84:	e002      	b.n	8000b8c <stmflash_write+0x178>
    if (waddr > (STM32_FLASH_BASE + STM32_FLASH_SIZE))return;   /* 写入地址大于STM32总FLASH地址范围,非法. */
 8000b86:	bf00      	nop
 8000b88:	e000      	b.n	8000b8c <stmflash_write+0x178>
    if (waddr % 32)return;          /* 写入地址不是32字节倍数,非法. */
 8000b8a:	bf00      	nop
}
 8000b8c:	3738      	adds	r7, #56	@ 0x38
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08004000 	.word	0x08004000
 8000b98:	08020000 	.word	0x08020000
 8000b9c:	240001f8 	.word	0x240001f8
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <stmflash_read>:
 * @param       pbuf  : 数据指针
 * @param       length: 要读取的字(32)数,即4个字节的整数倍
 * @retval      无
 */
void stmflash_read(uint32_t raddr, uint32_t *pbuf, uint32_t length)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < length; i++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e00e      	b.n	8000bd4 <stmflash_read+0x30>
    {
        pbuf[i] = stmflash_read_word(raddr);    /* 读取4个字节. */
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	18d4      	adds	r4, r2, r3
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff ff1c 	bl	80009fc <stmflash_read_word>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	6023      	str	r3, [r4, #0]
        raddr += 4; /* 偏移4个字节. */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3304      	adds	r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3ec      	bcc.n	8000bb6 <stmflash_read+0x12>
    }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd90      	pop	{r4, r7, pc}
	...

08000be8 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_KEY_GPIO_Init+0x68>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <MX_KEY_GPIO_Init+0x68>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_KEY_GPIO_Init+0x68>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c22:	2302      	movs	r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <MX_KEY_GPIO_Init+0x6c>)
 8000c2c:	f001 fbaa 	bl	8002384 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8000c30:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000c34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_KEY_GPIO_Init+0x6c>)
 8000c44:	f001 fb9e 	bl	8002384 <HAL_GPIO_Init>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58024400 	.word	0x58024400
 8000c54:	58020000 	.word	0x58020000

08000c58 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <MX_LED_GPIO_Init+0xa8>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <MX_LED_GPIO_Init+0xa8>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <MX_LED_GPIO_Init+0xa8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <MX_LED_GPIO_Init+0xa8>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <MX_LED_GPIO_Init+0xa8>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <MX_LED_GPIO_Init+0xa8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2160      	movs	r1, #96	@ 0x60
 8000cae:	4815      	ldr	r0, [pc, #84]	@ (8000d04 <MX_LED_GPIO_Init+0xac>)
 8000cb0:	f001 fd18 	bl	80026e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <MX_LED_GPIO_Init+0xb0>)
 8000cba:	f001 fd13 	bl	80026e4 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000cbe:	2360      	movs	r3, #96	@ 0x60
 8000cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <MX_LED_GPIO_Init+0xac>)
 8000cd6:	f001 fb55 	bl	8002384 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_LED_GPIO_Init+0xb0>)
 8000cf2:	f001 fb47 	bl	8002384 <HAL_GPIO_Init>
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021000 	.word	0x58021000
 8000d08:	58020400 	.word	0x58020400

08000d0c <sys_intx_disable>:
 * @brief       关闭所有中断(但是不包括fault和NMI中断)
 * @param       无
 * @retval      无
 */
void sys_intx_disable(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
    __ASM volatile("cpsid i");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <sys_intx_enable>:
 * @brief       开启所有中断
 * @param       无
 * @retval      无
 */
void sys_intx_enable(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
    __ASM volatile("cpsie i");
 8000d20:	b662      	cpsie	i
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000d30:	f7ff ff92 	bl	8000c58 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000d34:	f7ff fcc2 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000d38:	f7ff ff56 	bl	8000be8 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000d3c:	f000 fada 	bl	80012f4 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <main>:
#define SIZE  text_size / 4 + ((text_size % 4) ? 1 : 0)
/* 设置FLASH 保存地址(必须大于用户代码区地址范围,且为4的倍数) */
#define FLASH_SAVE_ADDR     0X08004000

int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  uint8_t temp_data[SIZE];
  //MPU_Config();
  HAL_Init();
 8000d4a:	f000 fbcf 	bl	80014ec <HAL_Init>
  SystemClock_Config();
 8000d4e:	f000 f849 	bl	8000de4 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000d52:	f000 f8c7 	bl	8000ee4 <PeriphCommonClock_Config>
  bsp_init();
 8000d56:	f7ff ffe9 	bl	8000d2c <bsp_init>
  while (1)
  {
    printf("Write to Flash\r\n");
 8000d5a:	481b      	ldr	r0, [pc, #108]	@ (8000dc8 <main+0x84>)
 8000d5c:	f006 fe90 	bl	8007a80 <puts>
    HAL_Delay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d64:	f7ff fd2d 	bl	80007c2 <HAL_Delay>
    stmflash_write(FLASH_SAVE_ADDR, (uint32_t*)test_str, SIZE);
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4918      	ldr	r1, [pc, #96]	@ (8000dcc <main+0x88>)
 8000d6c:	4818      	ldr	r0, [pc, #96]	@ (8000dd0 <main+0x8c>)
 8000d6e:	f7ff fe51 	bl	8000a14 <stmflash_write>
    HAL_Delay(3000);
 8000d72:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d76:	f7ff fd24 	bl	80007c2 <HAL_Delay>
    printf("Write Done\r\n");
 8000d7a:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <main+0x90>)
 8000d7c:	f006 fe80 	bl	8007a80 <puts>
    HAL_Delay(1000);
 8000d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d84:	f7ff fd1d 	bl	80007c2 <HAL_Delay>

	printf("Read from Flash\r\n");
 8000d88:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <main+0x94>)
 8000d8a:	f006 fe79 	bl	8007a80 <puts>
	HAL_Delay(1000);
 8000d8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d92:	f7ff fd16 	bl	80007c2 <HAL_Delay>
	stmflash_read(FLASH_SAVE_ADDR, (uint32_t*)temp_data, SIZE);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <main+0x8c>)
 8000d9e:	f7ff ff01 	bl	8000ba4 <stmflash_read>
	HAL_Delay(3000);
 8000da2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000da6:	f7ff fd0c 	bl	80007c2 <HAL_Delay>
	printf("Read Done\r\n");
 8000daa:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <main+0x98>)
 8000dac:	f006 fe68 	bl	8007a80 <puts>
	printf("Data: %s\r\n", temp_data);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <main+0x9c>)
 8000db6:	f006 fdfb 	bl	80079b0 <iprintf>
    HAL_Delay(3000);
 8000dba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000dbe:	f7ff fd00 	bl	80007c2 <HAL_Delay>
    printf("Write to Flash\r\n");
 8000dc2:	bf00      	nop
 8000dc4:	e7c9      	b.n	8000d5a <main+0x16>
 8000dc6:	bf00      	nop
 8000dc8:	08009898 	.word	0x08009898
 8000dcc:	080098e0 	.word	0x080098e0
 8000dd0:	08004000 	.word	0x08004000
 8000dd4:	080098a8 	.word	0x080098a8
 8000dd8:	080098b4 	.word	0x080098b4
 8000ddc:	080098c8 	.word	0x080098c8
 8000de0:	080098d4 	.word	0x080098d4

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	@ 0x70
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	224c      	movs	r2, #76	@ 0x4c
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 ff24 	bl	8007c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 ff1e 	bl	8007c40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f001 fcab 	bl	8002760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <SystemClock_Config+0xf8>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a32      	ldr	r2, [pc, #200]	@ (8000edc <SystemClock_Config+0xf8>)
 8000e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <SystemClock_Config+0xf8>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <SystemClock_Config+0xfc>)
 8000e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e28:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee0 <SystemClock_Config+0xfc>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <SystemClock_Config+0xfc>)
 8000e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e3c:	bf00      	nop
 8000e3e:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <SystemClock_Config+0xf8>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e4a:	d1f8      	bne.n	8000e3e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	2302      	movs	r3, #2
 8000e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000e6e:	23f0      	movs	r3, #240	@ 0xf0
 8000e70:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fca0 	bl	80027d4 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e9a:	f000 f841 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	233f      	movs	r3, #63	@ 0x3f
 8000ea0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eae:	2340      	movs	r3, #64	@ 0x40
 8000eb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eb2:	2340      	movs	r3, #64	@ 0x40
 8000eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ebc:	2340      	movs	r3, #64	@ 0x40
 8000ebe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 f8df 	bl	8003088 <HAL_RCC_ClockConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000ed0:	f000 f826 	bl	8000f20 <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3770      	adds	r7, #112	@ 0x70
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024800 	.word	0x58024800
 8000ee0:	58000400 	.word	0x58000400

08000ee4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0b0      	sub	sp, #192	@ 0xc0
 8000ee8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	22c0      	movs	r2, #192	@ 0xc0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fea5 	bl	8007c40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000ef6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000f02:	2300      	movs	r3, #0
 8000f04:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fc49 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000f14:	f000 f804 	bl	8000f20 <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	37c0      	adds	r7, #192	@ 0xc0
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f38:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58024400 	.word	0x58024400

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 fb0b 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <WWDG_IRQHandler+0x10>)
 8000fc6:	f005 ffd1 	bl	8006f6c <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24004290 	.word	0x24004290

08000fd4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f001 fb9c 	bl	8002716 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <USART1_IRQHandler+0x10>)
 8000fea:	f004 fae3 	bl	80055b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	240041fc 	.word	0x240041fc

08000ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_kill>:

int _kill(int pid, int sig)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001012:	f006 fe67 	bl	8007ce4 <__errno>
 8001016:	4603      	mov	r3, r0
 8001018:	2216      	movs	r2, #22
 800101a:	601a      	str	r2, [r3, #0]
  return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_exit>:

void _exit (int status)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffe7 	bl	8001008 <_kill>
  while (1) {}    /* Make sure we hang here */
 800103a:	bf00      	nop
 800103c:	e7fd      	b.n	800103a <_exit+0x12>

0800103e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e00a      	b.n	8001066 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001050:	f3af 8000 	nop.w
 8001054:	4601      	mov	r1, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbf0      	blt.n	8001050 <_read+0x12>
  }

  return len;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e009      	b.n	800109e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	60ba      	str	r2, [r7, #8]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f9ec 	bl	8001470 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf1      	blt.n	800108a <_write+0x12>
  }
  return len;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_close>:

int _close(int file)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d8:	605a      	str	r2, [r3, #4]
  return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_isatty>:

int _isatty(int file)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010fe:	b480      	push	{r7}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f006 fdcc 	bl	8007ce4 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	24080000 	.word	0x24080000
 8001178:	00000400 	.word	0x00000400
 800117c:	240041f8 	.word	0x240041f8
 8001180:	240043f8 	.word	0x240043f8

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001188:	4b43      	ldr	r3, [pc, #268]	@ (8001298 <SystemInit+0x114>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a42      	ldr	r2, [pc, #264]	@ (8001298 <SystemInit+0x114>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001198:	4b40      	ldr	r3, [pc, #256]	@ (800129c <SystemInit+0x118>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2b06      	cmp	r3, #6
 80011a2:	d807      	bhi.n	80011b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a4:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <SystemInit+0x118>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	4a3b      	ldr	r2, [pc, #236]	@ (800129c <SystemInit+0x118>)
 80011ae:	f043 0307 	orr.w	r3, r3, #7
 80011b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b4:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <SystemInit+0x11c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a39      	ldr	r2, [pc, #228]	@ (80012a0 <SystemInit+0x11c>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c0:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <SystemInit+0x11c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c6:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <SystemInit+0x11c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4935      	ldr	r1, [pc, #212]	@ (80012a0 <SystemInit+0x11c>)
 80011cc:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <SystemInit+0x120>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d2:	4b32      	ldr	r3, [pc, #200]	@ (800129c <SystemInit+0x118>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <SystemInit+0x118>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 030f 	bic.w	r3, r3, #15
 80011e6:	4a2d      	ldr	r2, [pc, #180]	@ (800129c <SystemInit+0x118>)
 80011e8:	f043 0307 	orr.w	r3, r3, #7
 80011ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <SystemInit+0x11c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f4:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <SystemInit+0x11c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011fa:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <SystemInit+0x11c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <SystemInit+0x11c>)
 8001202:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <SystemInit+0x124>)
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <SystemInit+0x11c>)
 8001208:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <SystemInit+0x128>)
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <SystemInit+0x11c>)
 800120e:	4a28      	ldr	r2, [pc, #160]	@ (80012b0 <SystemInit+0x12c>)
 8001210:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <SystemInit+0x11c>)
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001218:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <SystemInit+0x11c>)
 800121a:	4a25      	ldr	r2, [pc, #148]	@ (80012b0 <SystemInit+0x12c>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <SystemInit+0x11c>)
 8001220:	2200      	movs	r2, #0
 8001222:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001224:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <SystemInit+0x11c>)
 8001226:	4a22      	ldr	r2, [pc, #136]	@ (80012b0 <SystemInit+0x12c>)
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122a:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <SystemInit+0x11c>)
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <SystemInit+0x11c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1a      	ldr	r2, [pc, #104]	@ (80012a0 <SystemInit+0x11c>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <SystemInit+0x11c>)
 800123e:	2200      	movs	r2, #0
 8001240:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <SystemInit+0x130>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <SystemInit+0x134>)
 8001248:	4013      	ands	r3, r2
 800124a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800124e:	d202      	bcs.n	8001256 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <SystemInit+0x138>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <SystemInit+0x11c>)
 8001258:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800125c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d113      	bne.n	800128c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <SystemInit+0x11c>)
 8001266:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800126a:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <SystemInit+0x11c>)
 800126c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001270:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <SystemInit+0x13c>)
 8001276:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800127a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <SystemInit+0x11c>)
 800127e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001282:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <SystemInit+0x11c>)
 8001284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001288:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	52002000 	.word	0x52002000
 80012a0:	58024400 	.word	0x58024400
 80012a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012a8:	02020200 	.word	0x02020200
 80012ac:	01ff0000 	.word	0x01ff0000
 80012b0:	01010280 	.word	0x01010280
 80012b4:	5c001000 	.word	0x5c001000
 80012b8:	ffff0000 	.word	0xffff0000
 80012bc:	51008108 	.word	0x51008108
 80012c0:	52004000 	.word	0x52004000

080012c4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <ExitRun0Mode+0x2c>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <ExitRun0Mode+0x2c>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80012d4:	bf00      	nop
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <ExitRun0Mode+0x2c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f9      	beq.n	80012d6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	58024800 	.word	0x58024800

080012f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <MX_USART1_UART_Init+0x94>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133c:	4811      	ldr	r0, [pc, #68]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800133e:	f004 f85b 	bl	80053f8 <HAL_UART_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001348:	f7ff fdea 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001350:	f005 fd42 	bl	8006dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800135a:	f7ff fde1 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001362:	f005 fd77 	bl	8006e54 <HAL_UARTEx_SetRxFifoThreshold>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800136c:	f7ff fdd8 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001372:	f005 fcf8 	bl	8006d66 <HAL_UARTEx_DisableFifoMode>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800137c:	f7ff fdd0 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	240041fc 	.word	0x240041fc
 8001388:	40011000 	.word	0x40011000

0800138c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	@ 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	@ 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 fc47 	bl	8007c40 <memset>
  if(uartHandle->Instance==USART1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001464 <HAL_UART_MspInit+0xd8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d14e      	bne.n	800145a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013bc:	f04f 0201 	mov.w	r2, #1
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f9e4 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013de:	f7ff fd9f 	bl	8000f20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <HAL_UART_MspInit+0xdc>)
 80013e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <HAL_UART_MspInit+0xdc>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_UART_MspInit+0xdc>)
 80013f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_UART_MspInit+0xdc>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_UART_MspInit+0xdc>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_UART_MspInit+0xdc>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800141e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142c:	2301      	movs	r3, #1
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_UART_MspInit+0xe0>)
 8001446:	f000 ff9d 	bl	8002384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2025      	movs	r0, #37	@ 0x25
 8001450:	f000 f9c5 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001454:	2025      	movs	r0, #37	@ 0x25
 8001456:	f000 f9dc 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	37e8      	adds	r7, #232	@ 0xe8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40011000 	.word	0x40011000
 8001468:	58024400 	.word	0x58024400
 800146c:	58020000 	.word	0x58020000

08001470 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001478:	1d39      	adds	r1, r7, #4
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	2201      	movs	r2, #1
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <__io_putchar+0x20>)
 8001482:	f004 f809 	bl	8005498 <HAL_UART_Transmit>
    return ch;
 8001486:	687b      	ldr	r3, [r7, #4]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	240041fc 	.word	0x240041fc

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80014d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001498:	f7ff ff14 	bl	80012c4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800149c:	f7ff fe72 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	@ (80014e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f006 fc13 	bl	8007cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff fc3b 	bl	8000d44 <main>
  bx  lr
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014d8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80014dc:	08009cac 	.word	0x08009cac
  ldr r2, =_sbss
 80014e0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80014e4:	240043f4 	.word	0x240043f4

080014e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC3_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 f968 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014f8:	f001 ff7c 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_Init+0x68>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	4913      	ldr	r1, [pc, #76]	@ (8001558 <HAL_Init+0x6c>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
 8001514:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_Init+0x68>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_Init+0x6c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <HAL_Init+0x70>)
 800152e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001530:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <HAL_Init+0x74>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f814 	bl	8001564 <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e002      	b.n	800154c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001546:	f7ff fcf1 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	58024400 	.word	0x58024400
 8001558:	080098f0 	.word	0x080098f0
 800155c:	24000004 	.word	0x24000004
 8001560:	24000000 	.word	0x24000000

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_InitTick+0x60>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e021      	b.n	80015bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_InitTick+0x64>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_InitTick+0x60>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f94d 	bl	800182e <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00e      	b.n	80015bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d80a      	bhi.n	80015ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f000 f917 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <HAL_InitTick+0x68>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2400000c 	.word	0x2400000c
 80015c8:	24000000 	.word	0x24000000
 80015cc:	24000008 	.word	0x24000008

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2400000c 	.word	0x2400000c
 80015f4:	240042a4 	.word	0x240042a4

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	240042a4 	.word	0x240042a4

08001610 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_GetREVID+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0c1b      	lsrs	r3, r3, #16
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	5c001000 	.word	0x5c001000

08001628 <__NVIC_SetPriorityGrouping>:
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <__NVIC_SetPriorityGrouping+0x40>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	4313      	orrs	r3, r2
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x40>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00
 800166c:	05fa0000 	.word	0x05fa0000

08001670 <__NVIC_GetPriorityGrouping>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	@ (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	@ (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff29 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff40 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa4 	bl	8001784 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fed2 	bl	80015f8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e2dc      	b.n	8001e1a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d008      	beq.n	800187e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2280      	movs	r2, #128	@ 0x80
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e2cd      	b.n	8001e1a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a76      	ldr	r2, [pc, #472]	@ (8001a5c <HAL_DMA_Abort+0x214>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04a      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a74      	ldr	r2, [pc, #464]	@ (8001a60 <HAL_DMA_Abort+0x218>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d045      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a73      	ldr	r2, [pc, #460]	@ (8001a64 <HAL_DMA_Abort+0x21c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d040      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a71      	ldr	r2, [pc, #452]	@ (8001a68 <HAL_DMA_Abort+0x220>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d03b      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a70      	ldr	r2, [pc, #448]	@ (8001a6c <HAL_DMA_Abort+0x224>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d036      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a70 <HAL_DMA_Abort+0x228>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d031      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6d      	ldr	r2, [pc, #436]	@ (8001a74 <HAL_DMA_Abort+0x22c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d02c      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001a78 <HAL_DMA_Abort+0x230>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d027      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a7c <HAL_DMA_Abort+0x234>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d022      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a68      	ldr	r2, [pc, #416]	@ (8001a80 <HAL_DMA_Abort+0x238>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01d      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a67      	ldr	r2, [pc, #412]	@ (8001a84 <HAL_DMA_Abort+0x23c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d018      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a65      	ldr	r2, [pc, #404]	@ (8001a88 <HAL_DMA_Abort+0x240>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a64      	ldr	r2, [pc, #400]	@ (8001a8c <HAL_DMA_Abort+0x244>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00e      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a62      	ldr	r2, [pc, #392]	@ (8001a90 <HAL_DMA_Abort+0x248>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d009      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a61      	ldr	r2, [pc, #388]	@ (8001a94 <HAL_DMA_Abort+0x24c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_DMA_Abort+0xd6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5f      	ldr	r2, [pc, #380]	@ (8001a98 <HAL_DMA_Abort+0x250>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Abort+0xda>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_DMA_Abort+0xdc>
 8001922:	2300      	movs	r3, #0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 021e 	bic.w	r2, r2, #30
 8001936:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001946:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e00a      	b.n	8001966 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 020e 	bic.w	r2, r2, #14
 800195e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a5c <HAL_DMA_Abort+0x214>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d072      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a3a      	ldr	r2, [pc, #232]	@ (8001a60 <HAL_DMA_Abort+0x218>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d06d      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a39      	ldr	r2, [pc, #228]	@ (8001a64 <HAL_DMA_Abort+0x21c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d068      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a37      	ldr	r2, [pc, #220]	@ (8001a68 <HAL_DMA_Abort+0x220>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d063      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a36      	ldr	r2, [pc, #216]	@ (8001a6c <HAL_DMA_Abort+0x224>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d05e      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a34      	ldr	r2, [pc, #208]	@ (8001a70 <HAL_DMA_Abort+0x228>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d059      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a33      	ldr	r2, [pc, #204]	@ (8001a74 <HAL_DMA_Abort+0x22c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d054      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a31      	ldr	r2, [pc, #196]	@ (8001a78 <HAL_DMA_Abort+0x230>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04f      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a30      	ldr	r2, [pc, #192]	@ (8001a7c <HAL_DMA_Abort+0x234>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d04a      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001a80 <HAL_DMA_Abort+0x238>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d045      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001a84 <HAL_DMA_Abort+0x23c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d040      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a88 <HAL_DMA_Abort+0x240>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d03b      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a8c <HAL_DMA_Abort+0x244>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d036      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a28      	ldr	r2, [pc, #160]	@ (8001a90 <HAL_DMA_Abort+0x248>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d031      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <HAL_DMA_Abort+0x24c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d02c      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <HAL_DMA_Abort+0x250>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d027      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <HAL_DMA_Abort+0x254>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d022      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <HAL_DMA_Abort+0x258>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01d      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a21      	ldr	r2, [pc, #132]	@ (8001aa4 <HAL_DMA_Abort+0x25c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d018      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa8 <HAL_DMA_Abort+0x260>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	@ (8001aac <HAL_DMA_Abort+0x264>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00e      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <HAL_DMA_Abort+0x268>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d009      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_DMA_Abort+0x26c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d004      	beq.n	8001a56 <HAL_DMA_Abort+0x20e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	@ (8001ab8 <HAL_DMA_Abort+0x270>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d132      	bne.n	8001abc <HAL_DMA_Abort+0x274>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e031      	b.n	8001abe <HAL_DMA_Abort+0x276>
 8001a5a:	bf00      	nop
 8001a5c:	40020010 	.word	0x40020010
 8001a60:	40020028 	.word	0x40020028
 8001a64:	40020040 	.word	0x40020040
 8001a68:	40020058 	.word	0x40020058
 8001a6c:	40020070 	.word	0x40020070
 8001a70:	40020088 	.word	0x40020088
 8001a74:	400200a0 	.word	0x400200a0
 8001a78:	400200b8 	.word	0x400200b8
 8001a7c:	40020410 	.word	0x40020410
 8001a80:	40020428 	.word	0x40020428
 8001a84:	40020440 	.word	0x40020440
 8001a88:	40020458 	.word	0x40020458
 8001a8c:	40020470 	.word	0x40020470
 8001a90:	40020488 	.word	0x40020488
 8001a94:	400204a0 	.word	0x400204a0
 8001a98:	400204b8 	.word	0x400204b8
 8001a9c:	58025408 	.word	0x58025408
 8001aa0:	5802541c 	.word	0x5802541c
 8001aa4:	58025430 	.word	0x58025430
 8001aa8:	58025444 	.word	0x58025444
 8001aac:	58025458 	.word	0x58025458
 8001ab0:	5802546c 	.word	0x5802546c
 8001ab4:	58025480 	.word	0x58025480
 8001ab8:	58025494 	.word	0x58025494
 8001abc:	2300      	movs	r3, #0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8001c8c <HAL_DMA_Abort+0x444>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04a      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8001c90 <HAL_DMA_Abort+0x448>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d045      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6a      	ldr	r2, [pc, #424]	@ (8001c94 <HAL_DMA_Abort+0x44c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d040      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a68      	ldr	r2, [pc, #416]	@ (8001c98 <HAL_DMA_Abort+0x450>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d03b      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a67      	ldr	r2, [pc, #412]	@ (8001c9c <HAL_DMA_Abort+0x454>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d036      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a65      	ldr	r2, [pc, #404]	@ (8001ca0 <HAL_DMA_Abort+0x458>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d031      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a64      	ldr	r2, [pc, #400]	@ (8001ca4 <HAL_DMA_Abort+0x45c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d02c      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a62      	ldr	r2, [pc, #392]	@ (8001ca8 <HAL_DMA_Abort+0x460>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d027      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a61      	ldr	r2, [pc, #388]	@ (8001cac <HAL_DMA_Abort+0x464>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5f      	ldr	r2, [pc, #380]	@ (8001cb0 <HAL_DMA_Abort+0x468>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01d      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cb4 <HAL_DMA_Abort+0x46c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d018      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb8 <HAL_DMA_Abort+0x470>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cbc <HAL_DMA_Abort+0x474>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a59      	ldr	r2, [pc, #356]	@ (8001cc0 <HAL_DMA_Abort+0x478>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a58      	ldr	r2, [pc, #352]	@ (8001cc4 <HAL_DMA_Abort+0x47c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_DMA_Abort+0x32a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a56      	ldr	r2, [pc, #344]	@ (8001cc8 <HAL_DMA_Abort+0x480>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d108      	bne.n	8001b84 <HAL_DMA_Abort+0x33c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e007      	b.n	8001b94 <HAL_DMA_Abort+0x34c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b94:	e013      	b.n	8001bbe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b96:	f7ff fd2f 	bl	80015f8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d90c      	bls.n	8001bbe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e12d      	b.n	8001e1a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1e5      	bne.n	8001b96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2f      	ldr	r2, [pc, #188]	@ (8001c8c <HAL_DMA_Abort+0x444>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04a      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c90 <HAL_DMA_Abort+0x448>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d045      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c94 <HAL_DMA_Abort+0x44c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d040      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2a      	ldr	r2, [pc, #168]	@ (8001c98 <HAL_DMA_Abort+0x450>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d03b      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a29      	ldr	r2, [pc, #164]	@ (8001c9c <HAL_DMA_Abort+0x454>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d036      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a27      	ldr	r2, [pc, #156]	@ (8001ca0 <HAL_DMA_Abort+0x458>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a26      	ldr	r2, [pc, #152]	@ (8001ca4 <HAL_DMA_Abort+0x45c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d02c      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a24      	ldr	r2, [pc, #144]	@ (8001ca8 <HAL_DMA_Abort+0x460>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d027      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_DMA_Abort+0x464>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_DMA_Abort+0x468>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01d      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_DMA_Abort+0x46c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d018      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <HAL_DMA_Abort+0x470>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <HAL_DMA_Abort+0x474>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00e      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <HAL_DMA_Abort+0x478>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc4 <HAL_DMA_Abort+0x47c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d004      	beq.n	8001c6a <HAL_DMA_Abort+0x422>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_DMA_Abort+0x480>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Abort+0x426>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_Abort+0x428>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02b      	beq.n	8001ccc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	223f      	movs	r2, #63	@ 0x3f
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	e02a      	b.n	8001ce2 <HAL_DMA_Abort+0x49a>
 8001c8c:	40020010 	.word	0x40020010
 8001c90:	40020028 	.word	0x40020028
 8001c94:	40020040 	.word	0x40020040
 8001c98:	40020058 	.word	0x40020058
 8001c9c:	40020070 	.word	0x40020070
 8001ca0:	40020088 	.word	0x40020088
 8001ca4:	400200a0 	.word	0x400200a0
 8001ca8:	400200b8 	.word	0x400200b8
 8001cac:	40020410 	.word	0x40020410
 8001cb0:	40020428 	.word	0x40020428
 8001cb4:	40020440 	.word	0x40020440
 8001cb8:	40020458 	.word	0x40020458
 8001cbc:	40020470 	.word	0x40020470
 8001cc0:	40020488 	.word	0x40020488
 8001cc4:	400204a0 	.word	0x400204a0
 8001cc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	2201      	movs	r2, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e24 <HAL_DMA_Abort+0x5dc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d072      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8001e28 <HAL_DMA_Abort+0x5e0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d06d      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8001e2c <HAL_DMA_Abort+0x5e4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d068      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a4a      	ldr	r2, [pc, #296]	@ (8001e30 <HAL_DMA_Abort+0x5e8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d063      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a49      	ldr	r2, [pc, #292]	@ (8001e34 <HAL_DMA_Abort+0x5ec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d05e      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a47      	ldr	r2, [pc, #284]	@ (8001e38 <HAL_DMA_Abort+0x5f0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d059      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a46      	ldr	r2, [pc, #280]	@ (8001e3c <HAL_DMA_Abort+0x5f4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d054      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a44      	ldr	r2, [pc, #272]	@ (8001e40 <HAL_DMA_Abort+0x5f8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04f      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a43      	ldr	r2, [pc, #268]	@ (8001e44 <HAL_DMA_Abort+0x5fc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04a      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a41      	ldr	r2, [pc, #260]	@ (8001e48 <HAL_DMA_Abort+0x600>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d045      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a40      	ldr	r2, [pc, #256]	@ (8001e4c <HAL_DMA_Abort+0x604>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d040      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a3e      	ldr	r2, [pc, #248]	@ (8001e50 <HAL_DMA_Abort+0x608>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d03b      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e54 <HAL_DMA_Abort+0x60c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d036      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <HAL_DMA_Abort+0x610>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d031      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3a      	ldr	r2, [pc, #232]	@ (8001e5c <HAL_DMA_Abort+0x614>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d02c      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a38      	ldr	r2, [pc, #224]	@ (8001e60 <HAL_DMA_Abort+0x618>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d027      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a37      	ldr	r2, [pc, #220]	@ (8001e64 <HAL_DMA_Abort+0x61c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d022      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a35      	ldr	r2, [pc, #212]	@ (8001e68 <HAL_DMA_Abort+0x620>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01d      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a34      	ldr	r2, [pc, #208]	@ (8001e6c <HAL_DMA_Abort+0x624>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d018      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a32      	ldr	r2, [pc, #200]	@ (8001e70 <HAL_DMA_Abort+0x628>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <HAL_DMA_Abort+0x62c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00e      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e78 <HAL_DMA_Abort+0x630>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d009      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e7c <HAL_DMA_Abort+0x634>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_DMA_Abort+0x58a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e80 <HAL_DMA_Abort+0x638>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Abort+0x58e>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_DMA_Abort+0x590>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d015      	beq.n	8001e08 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001de4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e06:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020010 	.word	0x40020010
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	40020040 	.word	0x40020040
 8001e30:	40020058 	.word	0x40020058
 8001e34:	40020070 	.word	0x40020070
 8001e38:	40020088 	.word	0x40020088
 8001e3c:	400200a0 	.word	0x400200a0
 8001e40:	400200b8 	.word	0x400200b8
 8001e44:	40020410 	.word	0x40020410
 8001e48:	40020428 	.word	0x40020428
 8001e4c:	40020440 	.word	0x40020440
 8001e50:	40020458 	.word	0x40020458
 8001e54:	40020470 	.word	0x40020470
 8001e58:	40020488 	.word	0x40020488
 8001e5c:	400204a0 	.word	0x400204a0
 8001e60:	400204b8 	.word	0x400204b8
 8001e64:	58025408 	.word	0x58025408
 8001e68:	5802541c 	.word	0x5802541c
 8001e6c:	58025430 	.word	0x58025430
 8001e70:	58025444 	.word	0x58025444
 8001e74:	58025458 	.word	0x58025458
 8001e78:	5802546c 	.word	0x5802546c
 8001e7c:	58025480 	.word	0x58025480
 8001e80:	58025494 	.word	0x58025494

08001e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e237      	b.n	8002306 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d004      	beq.n	8001eac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2280      	movs	r2, #128	@ 0x80
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e22c      	b.n	8002306 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8002024 <HAL_DMA_Abort_IT+0x1a0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d04a      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <HAL_DMA_Abort_IT+0x1a4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d045      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a59      	ldr	r2, [pc, #356]	@ (800202c <HAL_DMA_Abort_IT+0x1a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d040      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a58      	ldr	r2, [pc, #352]	@ (8002030 <HAL_DMA_Abort_IT+0x1ac>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d03b      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <HAL_DMA_Abort_IT+0x1b0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d036      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a55      	ldr	r2, [pc, #340]	@ (8002038 <HAL_DMA_Abort_IT+0x1b4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d031      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a53      	ldr	r2, [pc, #332]	@ (800203c <HAL_DMA_Abort_IT+0x1b8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02c      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a52      	ldr	r2, [pc, #328]	@ (8002040 <HAL_DMA_Abort_IT+0x1bc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d027      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a50      	ldr	r2, [pc, #320]	@ (8002044 <HAL_DMA_Abort_IT+0x1c0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d022      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002048 <HAL_DMA_Abort_IT+0x1c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d01d      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <HAL_DMA_Abort_IT+0x1c8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d018      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <HAL_DMA_Abort_IT+0x1cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a4a      	ldr	r2, [pc, #296]	@ (8002054 <HAL_DMA_Abort_IT+0x1d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00e      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a49      	ldr	r2, [pc, #292]	@ (8002058 <HAL_DMA_Abort_IT+0x1d4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a47      	ldr	r2, [pc, #284]	@ (800205c <HAL_DMA_Abort_IT+0x1d8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_DMA_Abort_IT+0xc8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a46      	ldr	r2, [pc, #280]	@ (8002060 <HAL_DMA_Abort_IT+0x1dc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Abort_IT+0xcc>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_DMA_Abort_IT+0xce>
 8001f50:	2300      	movs	r3, #0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8086 	beq.w	8002064 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <HAL_DMA_Abort_IT+0x1a0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04a      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002028 <HAL_DMA_Abort_IT+0x1a4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d045      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	@ (800202c <HAL_DMA_Abort_IT+0x1a8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2b      	ldr	r2, [pc, #172]	@ (8002030 <HAL_DMA_Abort_IT+0x1ac>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d03b      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a29      	ldr	r2, [pc, #164]	@ (8002034 <HAL_DMA_Abort_IT+0x1b0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a28      	ldr	r2, [pc, #160]	@ (8002038 <HAL_DMA_Abort_IT+0x1b4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d031      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	@ (800203c <HAL_DMA_Abort_IT+0x1b8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a25      	ldr	r2, [pc, #148]	@ (8002040 <HAL_DMA_Abort_IT+0x1bc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <HAL_DMA_Abort_IT+0x1c0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <HAL_DMA_Abort_IT+0x1c4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01d      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a20      	ldr	r2, [pc, #128]	@ (800204c <HAL_DMA_Abort_IT+0x1c8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <HAL_DMA_Abort_IT+0x1cc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_DMA_Abort_IT+0x1d0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_DMA_Abort_IT+0x1d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_DMA_Abort_IT+0x1d8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Abort_IT+0x17c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_DMA_Abort_IT+0x1dc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <HAL_DMA_Abort_IT+0x18e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e178      	b.n	8002304 <HAL_DMA_Abort_IT+0x480>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e16f      	b.n	8002304 <HAL_DMA_Abort_IT+0x480>
 8002024:	40020010 	.word	0x40020010
 8002028:	40020028 	.word	0x40020028
 800202c:	40020040 	.word	0x40020040
 8002030:	40020058 	.word	0x40020058
 8002034:	40020070 	.word	0x40020070
 8002038:	40020088 	.word	0x40020088
 800203c:	400200a0 	.word	0x400200a0
 8002040:	400200b8 	.word	0x400200b8
 8002044:	40020410 	.word	0x40020410
 8002048:	40020428 	.word	0x40020428
 800204c:	40020440 	.word	0x40020440
 8002050:	40020458 	.word	0x40020458
 8002054:	40020470 	.word	0x40020470
 8002058:	40020488 	.word	0x40020488
 800205c:	400204a0 	.word	0x400204a0
 8002060:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 020e 	bic.w	r2, r2, #14
 8002072:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6c      	ldr	r2, [pc, #432]	@ (800222c <HAL_DMA_Abort_IT+0x3a8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d04a      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6b      	ldr	r2, [pc, #428]	@ (8002230 <HAL_DMA_Abort_IT+0x3ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d045      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a69      	ldr	r2, [pc, #420]	@ (8002234 <HAL_DMA_Abort_IT+0x3b0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d040      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a68      	ldr	r2, [pc, #416]	@ (8002238 <HAL_DMA_Abort_IT+0x3b4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d03b      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a66      	ldr	r2, [pc, #408]	@ (800223c <HAL_DMA_Abort_IT+0x3b8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d036      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_DMA_Abort_IT+0x3bc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d031      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a63      	ldr	r2, [pc, #396]	@ (8002244 <HAL_DMA_Abort_IT+0x3c0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02c      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a62      	ldr	r2, [pc, #392]	@ (8002248 <HAL_DMA_Abort_IT+0x3c4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d027      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a60      	ldr	r2, [pc, #384]	@ (800224c <HAL_DMA_Abort_IT+0x3c8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d022      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002250 <HAL_DMA_Abort_IT+0x3cc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d01d      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002254 <HAL_DMA_Abort_IT+0x3d0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d018      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002258 <HAL_DMA_Abort_IT+0x3d4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a5a      	ldr	r2, [pc, #360]	@ (800225c <HAL_DMA_Abort_IT+0x3d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a59      	ldr	r2, [pc, #356]	@ (8002260 <HAL_DMA_Abort_IT+0x3dc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a57      	ldr	r2, [pc, #348]	@ (8002264 <HAL_DMA_Abort_IT+0x3e0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_DMA_Abort_IT+0x290>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a56      	ldr	r2, [pc, #344]	@ (8002268 <HAL_DMA_Abort_IT+0x3e4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d108      	bne.n	8002126 <HAL_DMA_Abort_IT+0x2a2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_DMA_Abort_IT+0x2b2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <HAL_DMA_Abort_IT+0x3a8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d072      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3a      	ldr	r2, [pc, #232]	@ (8002230 <HAL_DMA_Abort_IT+0x3ac>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d06d      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <HAL_DMA_Abort_IT+0x3b0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d068      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a37      	ldr	r2, [pc, #220]	@ (8002238 <HAL_DMA_Abort_IT+0x3b4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d063      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a36      	ldr	r2, [pc, #216]	@ (800223c <HAL_DMA_Abort_IT+0x3b8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d05e      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a34      	ldr	r2, [pc, #208]	@ (8002240 <HAL_DMA_Abort_IT+0x3bc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d059      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a33      	ldr	r2, [pc, #204]	@ (8002244 <HAL_DMA_Abort_IT+0x3c0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d054      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a31      	ldr	r2, [pc, #196]	@ (8002248 <HAL_DMA_Abort_IT+0x3c4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d04f      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a30      	ldr	r2, [pc, #192]	@ (800224c <HAL_DMA_Abort_IT+0x3c8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d04a      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2e      	ldr	r2, [pc, #184]	@ (8002250 <HAL_DMA_Abort_IT+0x3cc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d045      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2d      	ldr	r2, [pc, #180]	@ (8002254 <HAL_DMA_Abort_IT+0x3d0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d040      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002258 <HAL_DMA_Abort_IT+0x3d4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d03b      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a2a      	ldr	r2, [pc, #168]	@ (800225c <HAL_DMA_Abort_IT+0x3d8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d036      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a28      	ldr	r2, [pc, #160]	@ (8002260 <HAL_DMA_Abort_IT+0x3dc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d031      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_DMA_Abort_IT+0x3e0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d02c      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a25      	ldr	r2, [pc, #148]	@ (8002268 <HAL_DMA_Abort_IT+0x3e4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d027      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a24      	ldr	r2, [pc, #144]	@ (800226c <HAL_DMA_Abort_IT+0x3e8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d022      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a22      	ldr	r2, [pc, #136]	@ (8002270 <HAL_DMA_Abort_IT+0x3ec>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01d      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <HAL_DMA_Abort_IT+0x3f0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d018      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002278 <HAL_DMA_Abort_IT+0x3f4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <HAL_DMA_Abort_IT+0x3f8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00e      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1c      	ldr	r2, [pc, #112]	@ (8002280 <HAL_DMA_Abort_IT+0x3fc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <HAL_DMA_Abort_IT+0x400>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_DMA_Abort_IT+0x3a2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <HAL_DMA_Abort_IT+0x404>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d132      	bne.n	800228c <HAL_DMA_Abort_IT+0x408>
 8002226:	2301      	movs	r3, #1
 8002228:	e031      	b.n	800228e <HAL_DMA_Abort_IT+0x40a>
 800222a:	bf00      	nop
 800222c:	40020010 	.word	0x40020010
 8002230:	40020028 	.word	0x40020028
 8002234:	40020040 	.word	0x40020040
 8002238:	40020058 	.word	0x40020058
 800223c:	40020070 	.word	0x40020070
 8002240:	40020088 	.word	0x40020088
 8002244:	400200a0 	.word	0x400200a0
 8002248:	400200b8 	.word	0x400200b8
 800224c:	40020410 	.word	0x40020410
 8002250:	40020428 	.word	0x40020428
 8002254:	40020440 	.word	0x40020440
 8002258:	40020458 	.word	0x40020458
 800225c:	40020470 	.word	0x40020470
 8002260:	40020488 	.word	0x40020488
 8002264:	400204a0 	.word	0x400204a0
 8002268:	400204b8 	.word	0x400204b8
 800226c:	58025408 	.word	0x58025408
 8002270:	5802541c 	.word	0x5802541c
 8002274:	58025430 	.word	0x58025430
 8002278:	58025444 	.word	0x58025444
 800227c:	58025458 	.word	0x58025458
 8002280:	5802546c 	.word	0x5802546c
 8002284:	58025480 	.word	0x58025480
 8002288:	58025494 	.word	0x58025494
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d028      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2201      	movs	r2, #1
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_FLASH_Unlock+0x3c>)
 8002324:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 8002328:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_FLASH_Unlock+0x40>)
 800232a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_FLASH_Unlock+0x38>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	52002000 	.word	0x52002000
 800234c:	45670123 	.word	0x45670123
 8002350:	cdef89ab 	.word	0xcdef89ab

08002354 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_FLASH_Lock+0x2c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a08      	ldr	r2, [pc, #32]	@ (8002380 <HAL_FLASH_Lock+0x2c>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_FLASH_Lock+0x2c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	52002000 	.word	0x52002000

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	@ 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002392:	4b89      	ldr	r3, [pc, #548]	@ (80025b8 <HAL_GPIO_Init+0x234>)
 8002394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002396:	e194      	b.n	80026c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8186 	beq.w	80026bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d005      	beq.n	80023c8 <HAL_GPIO_Init+0x44>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d130      	bne.n	800242a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fe:	2201      	movs	r2, #1
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0201 	and.w	r2, r3, #1
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b03      	cmp	r3, #3
 8002434:	d017      	beq.n	8002466 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d123      	bne.n	80024ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80e0 	beq.w	80026bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fc:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_GPIO_Init+0x238>)
 80024fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002502:	4a2e      	ldr	r2, [pc, #184]	@ (80025bc <HAL_GPIO_Init+0x238>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800250c:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_GPIO_Init+0x238>)
 800250e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a29      	ldr	r2, [pc, #164]	@ (80025c0 <HAL_GPIO_Init+0x23c>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a20      	ldr	r2, [pc, #128]	@ (80025c4 <HAL_GPIO_Init+0x240>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d052      	beq.n	80025ec <HAL_GPIO_Init+0x268>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_GPIO_Init+0x244>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_GPIO_Init+0x22e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1e      	ldr	r2, [pc, #120]	@ (80025cc <HAL_GPIO_Init+0x248>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x22a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1d      	ldr	r2, [pc, #116]	@ (80025d0 <HAL_GPIO_Init+0x24c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x226>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_GPIO_Init+0x250>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x222>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <HAL_GPIO_Init+0x254>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x21e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <HAL_GPIO_Init+0x258>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x21a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a19      	ldr	r2, [pc, #100]	@ (80025e0 <HAL_GPIO_Init+0x25c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x216>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a18      	ldr	r2, [pc, #96]	@ (80025e4 <HAL_GPIO_Init+0x260>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x212>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <HAL_GPIO_Init+0x264>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x20e>
 800258e:	2309      	movs	r3, #9
 8002590:	e02d      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 8002592:	230a      	movs	r3, #10
 8002594:	e02b      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 8002596:	2308      	movs	r3, #8
 8002598:	e029      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 800259a:	2307      	movs	r3, #7
 800259c:	e027      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 800259e:	2306      	movs	r3, #6
 80025a0:	e025      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025a2:	2305      	movs	r3, #5
 80025a4:	e023      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e021      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e01f      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e01d      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e01b      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025b6:	bf00      	nop
 80025b8:	58000080 	.word	0x58000080
 80025bc:	58024400 	.word	0x58024400
 80025c0:	58000400 	.word	0x58000400
 80025c4:	58020000 	.word	0x58020000
 80025c8:	58020400 	.word	0x58020400
 80025cc:	58020800 	.word	0x58020800
 80025d0:	58020c00 	.word	0x58020c00
 80025d4:	58021000 	.word	0x58021000
 80025d8:	58021400 	.word	0x58021400
 80025dc:	58021800 	.word	0x58021800
 80025e0:	58021c00 	.word	0x58021c00
 80025e4:	58022000 	.word	0x58022000
 80025e8:	58022400 	.word	0x58022400
 80025ec:	2300      	movs	r3, #0
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	4093      	lsls	r3, r2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fe:	4938      	ldr	r1, [pc, #224]	@ (80026e0 <HAL_GPIO_Init+0x35c>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f ae63 	bne.w	8002398 <HAL_GPIO_Init+0x14>
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3724      	adds	r7, #36	@ 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	58000400 	.word	0x58000400

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002724:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f804 	bl	800274a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00a      	beq.n	800278a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e01f      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e01d      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	490f      	ldr	r1, [pc, #60]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800279a:	f7fe ff2d 	bl	80015f8 <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a2:	f7fe ff29 	bl	80015f8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b0:	d901      	bls.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e007      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_PWREx_ConfigSupply+0x70>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c2:	d1ee      	bne.n	80027a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	58024800 	.word	0x58024800

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 bc48 	b.w	8003078 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8088 	beq.w	8002906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b99      	ldr	r3, [pc, #612]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	4b96      	ldr	r3, [pc, #600]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	2b10      	cmp	r3, #16
 800280a:	d007      	beq.n	800281c <HAL_RCC_OscConfig+0x48>
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	2b18      	cmp	r3, #24
 8002810:	d111      	bne.n	8002836 <HAL_RCC_OscConfig+0x62>
 8002812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d06d      	beq.n	8002904 <HAL_RCC_OscConfig+0x130>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d169      	bne.n	8002904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f000 bc21 	b.w	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x7a>
 8002840:	4b86      	ldr	r3, [pc, #536]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a85      	ldr	r2, [pc, #532]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x9c>
 8002856:	4b81      	ldr	r3, [pc, #516]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a80      	ldr	r2, [pc, #512]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b7e      	ldr	r3, [pc, #504]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7d      	ldr	r2, [pc, #500]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0xc0>
 800287a:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a77      	ldr	r2, [pc, #476]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b75      	ldr	r3, [pc, #468]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a74      	ldr	r2, [pc, #464]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 8002894:	4b71      	ldr	r3, [pc, #452]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a70      	ldr	r2, [pc, #448]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fea0 	bl	80015f8 <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fe9c 	bl	80015f8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e3d4      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ce:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fe8c 	bl	80015f8 <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fe88 	bl	80015f8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e3c0      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f6:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x110>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80ca 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002914:	4b51      	ldr	r3, [pc, #324]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800291c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_RCC_OscConfig+0x166>
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b18      	cmp	r3, #24
 800292e:	d156      	bne.n	80029de <HAL_RCC_OscConfig+0x20a>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d151      	bne.n	80029de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293a:	4b48      	ldr	r3, [pc, #288]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x17e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e392      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002952:	4b42      	ldr	r3, [pc, #264]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0219 	bic.w	r2, r3, #25
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	493f      	ldr	r1, [pc, #252]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fe48 	bl	80015f8 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7fe fe44 	bl	80015f8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e37c      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	f7fe fe41 	bl	8001610 <HAL_GetREVID>
 800298e:	4603      	mov	r3, r0
 8002990:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002994:	4293      	cmp	r3, r2
 8002996:	d817      	bhi.n	80029c8 <HAL_RCC_OscConfig+0x1f4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d108      	bne.n	80029b2 <HAL_RCC_OscConfig+0x1de>
 80029a0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029a8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b0:	e07a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	031b      	lsls	r3, r3, #12
 80029c0:	4926      	ldr	r1, [pc, #152]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c6:	e06f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	4921      	ldr	r1, [pc, #132]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029dc:	e064      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d047      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0219 	bic.w	r2, r3, #25
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	491a      	ldr	r1, [pc, #104]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fdfe 	bl	80015f8 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fdfa 	bl	80015f8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e332      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	f7fe fdf7 	bl	8001610 <HAL_GetREVID>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d819      	bhi.n	8002a60 <HAL_RCC_OscConfig+0x28c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b40      	cmp	r3, #64	@ 0x40
 8002a32:	d108      	bne.n	8002a46 <HAL_RCC_OscConfig+0x272>
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a42:	6053      	str	r3, [r2, #4]
 8002a44:	e030      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	031b      	lsls	r3, r3, #12
 8002a54:	4901      	ldr	r1, [pc, #4]	@ (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
 8002a5a:	e025      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	4b9a      	ldr	r3, [pc, #616]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	4997      	ldr	r1, [pc, #604]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e018      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b95      	ldr	r3, [pc, #596]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a94      	ldr	r2, [pc, #592]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fdb9 	bl	80015f8 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fdb5 	bl	80015f8 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e2ed      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a9 	beq.w	8002c08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b85      	ldr	r3, [pc, #532]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002abe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac0:	4b82      	ldr	r3, [pc, #520]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d007      	beq.n	8002adc <HAL_RCC_OscConfig+0x308>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b18      	cmp	r3, #24
 8002ad0:	d13a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x374>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d135      	bne.n	8002b48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002adc:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_OscConfig+0x320>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	2b80      	cmp	r3, #128	@ 0x80
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e2c1      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af4:	f7fe fd8c 	bl	8001610 <HAL_GetREVID>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d817      	bhi.n	8002b32 <HAL_RCC_OscConfig+0x35e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d108      	bne.n	8002b1c <HAL_RCC_OscConfig+0x348>
 8002b0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1a:	e075      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	4968      	ldr	r1, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b30:	e06a      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b32:	4b66      	ldr	r3, [pc, #408]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4962      	ldr	r1, [pc, #392]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b46:	e05f      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d042      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fd4c 	bl	80015f8 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b64:	f7fe fd48 	bl	80015f8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e280      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b76:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b82:	f7fe fd45 	bl	8001610 <HAL_GetREVID>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d817      	bhi.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d108      	bne.n	8002baa <HAL_RCC_OscConfig+0x3d6>
 8002b98:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ba6:	6053      	str	r3, [r2, #4]
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	4944      	ldr	r1, [pc, #272]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e023      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
 8002bc0:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	493f      	ldr	r1, [pc, #252]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60cb      	str	r3, [r1, #12]
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fd09 	bl	80015f8 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bea:	f7fe fd05 	bl	80015f8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e23d      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d036      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe fce6 	bl	80015f8 <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe fce2 	bl	80015f8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e21a      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x45c>
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c54:	4a1d      	ldr	r2, [pc, #116]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fccc 	bl	80015f8 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe fcc8 	bl	80015f8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e200      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d039      	beq.n	8002d02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fca9 	bl	80015f8 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002caa:	f7fe fca5 	bl	80015f8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1dd      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x4d6>
 8002cc8:	e01b      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a9a      	ldr	r2, [pc, #616]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fc8c 	bl	80015f8 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce4:	f7fe fc88 	bl	80015f8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1c0      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf6:	4b92      	ldr	r3, [pc, #584]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8081 	beq.w	8002e12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d10:	4b8c      	ldr	r3, [pc, #560]	@ (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a8b      	ldr	r2, [pc, #556]	@ (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fc6c 	bl	80015f8 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fc68 	bl	80015f8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1a0      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	4b83      	ldr	r3, [pc, #524]	@ (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x584>
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d56:	e02d      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5a6>
 8002d60:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	4a76      	ldr	r2, [pc, #472]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6c:	4b74      	ldr	r3, [pc, #464]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	4a73      	ldr	r2, [pc, #460]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5c8>
 8002d82:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a6e      	ldr	r2, [pc, #440]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a6b      	ldr	r2, [pc, #428]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d9c:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da0:	4a67      	ldr	r2, [pc, #412]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da8:	4b65      	ldr	r3, [pc, #404]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	4a64      	ldr	r2, [pc, #400]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fc1c 	bl	80015f8 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fc18 	bl	80015f8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e14e      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dda:	4b59      	ldr	r3, [pc, #356]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ee      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5f0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fc06 	bl	80015f8 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fc02 	bl	80015f8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e138      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e06:	4b4e      	ldr	r3, [pc, #312]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ee      	bne.n	8002df0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 812d 	beq.w	8003076 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e1c:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e24:	2b18      	cmp	r3, #24
 8002e26:	f000 80bd 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	f040 809e 	bne.w	8002f70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b42      	ldr	r3, [pc, #264]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a41      	ldr	r2, [pc, #260]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fbda 	bl	80015f8 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fbd6 	bl	80015f8 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e10e      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5a:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e66:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e6a:	4b37      	ldr	r3, [pc, #220]	@ (8002f48 <HAL_RCC_OscConfig+0x774>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e76:	0112      	lsls	r2, r2, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	4931      	ldr	r1, [pc, #196]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	3b01      	subs	r3, #1
 8002e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002eb0:	4923      	ldr	r1, [pc, #140]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4a21      	ldr	r2, [pc, #132]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec6:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <HAL_RCC_OscConfig+0x778>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ece:	00d2      	lsls	r2, r2, #3
 8002ed0:	491b      	ldr	r1, [pc, #108]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	f023 020c 	bic.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4917      	ldr	r1, [pc, #92]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f023 0202 	bic.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	4912      	ldr	r1, [pc, #72]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2a:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe fb5f 	bl	80015f8 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3c:	e011      	b.n	8002f62 <HAL_RCC_OscConfig+0x78e>
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58024800 	.word	0x58024800
 8002f48:	fffffc0c 	.word	0xfffffc0c
 8002f4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fb52 	bl	80015f8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e08a      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f62:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x77c>
 8002f6e:	e082      	b.n	8003076 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b43      	ldr	r3, [pc, #268]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a42      	ldr	r2, [pc, #264]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fb3c 	bl	80015f8 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fb38 	bl	80015f8 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e070      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f96:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x7b0>
 8002fa2:	e068      	b.n	8003076 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d031      	beq.n	800301c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d12a      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d122      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0a5b      	lsrs	r3, r3, #9
 8002fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003016:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e02b      	b.n	8003078 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800302a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d01f      	beq.n	8003076 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003036:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	4a11      	ldr	r2, [pc, #68]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003042:	f7fe fad9 	bl	80015f8 <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003048:	bf00      	nop
 800304a:	f7fe fad5 	bl	80015f8 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	4293      	cmp	r3, r2
 8003054:	d0f9      	beq.n	800304a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_OscConfig+0x8b0>)
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003062:	00d2      	lsls	r2, r2, #3
 8003064:	4906      	ldr	r1, [pc, #24]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003066:	4313      	orrs	r3, r2
 8003068:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_RCC_OscConfig+0x8ac>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3730      	adds	r7, #48	@ 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	58024400 	.word	0x58024400
 8003084:	ffff0007 	.word	0xffff0007

08003088 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e19c      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b8a      	ldr	r3, [pc, #552]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b87      	ldr	r3, [pc, #540]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4985      	ldr	r1, [pc, #532]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b83      	ldr	r3, [pc, #524]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e184      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	4b7b      	ldr	r3, [pc, #492]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e8:	4b78      	ldr	r3, [pc, #480]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	4975      	ldr	r1, [pc, #468]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	4b70      	ldr	r3, [pc, #448]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003112:	429a      	cmp	r2, r3
 8003114:	d908      	bls.n	8003128 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003116:	4b6d      	ldr	r3, [pc, #436]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	496a      	ldr	r1, [pc, #424]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b64      	ldr	r3, [pc, #400]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003140:	429a      	cmp	r2, r3
 8003142:	d908      	bls.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	495e      	ldr	r1, [pc, #376]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003152:	4313      	orrs	r3, r2
 8003154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800316e:	429a      	cmp	r2, r3
 8003170:	d908      	bls.n	8003184 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003172:	4b56      	ldr	r3, [pc, #344]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4953      	ldr	r1, [pc, #332]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	429a      	cmp	r2, r3
 800319e:	d908      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b4a      	ldr	r3, [pc, #296]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f023 020f 	bic.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4947      	ldr	r1, [pc, #284]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d055      	beq.n	800326a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031be:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4940      	ldr	r1, [pc, #256]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d8:	4b3c      	ldr	r3, [pc, #240]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d121      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0f6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f0:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d115      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ea      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003208:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0de      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003218:	4b2c      	ldr	r3, [pc, #176]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0d6      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003228:	4b28      	ldr	r3, [pc, #160]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f023 0207 	bic.w	r2, r3, #7
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4925      	ldr	r1, [pc, #148]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323a:	f7fe f9dd 	bl	80015f8 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003240:	e00a      	b.n	8003258 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003242:	f7fe f9d9 	bl	80015f8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0be      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003258:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	429a      	cmp	r2, r3
 8003268:	d1eb      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	429a      	cmp	r2, r3
 8003284:	d208      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003286:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f023 020f 	bic.w	r2, r3, #15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	490e      	ldr	r1, [pc, #56]	@ (80032cc <HAL_RCC_ClockConfig+0x244>)
 8003294:	4313      	orrs	r3, r2
 8003296:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d214      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <HAL_RCC_ClockConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e086      	b.n	80033d6 <HAL_RCC_ClockConfig+0x34e>
 80032c8:	52002000 	.word	0x52002000
 80032cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d208      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032ec:	4b3c      	ldr	r3, [pc, #240]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4939      	ldr	r1, [pc, #228]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	4b34      	ldr	r3, [pc, #208]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003316:	429a      	cmp	r2, r3
 8003318:	d208      	bcs.n	800332c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800331a:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	492e      	ldr	r1, [pc, #184]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003344:	429a      	cmp	r2, r3
 8003346:	d208      	bcs.n	800335a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003348:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4922      	ldr	r1, [pc, #136]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003356:	4313      	orrs	r3, r2
 8003358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003376:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4917      	ldr	r1, [pc, #92]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003384:	4313      	orrs	r3, r2
 8003386:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003388:	f000 f834 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	4912      	ldr	r1, [pc, #72]	@ (80033e4 <HAL_RCC_ClockConfig+0x35c>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a6:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	4a0d      	ldr	r2, [pc, #52]	@ (80033e4 <HAL_RCC_ClockConfig+0x35c>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x360>)
 80033be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <HAL_RCC_ClockConfig+0x364>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <HAL_RCC_ClockConfig+0x368>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f8ca 	bl	8001564 <HAL_InitTick>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	58024400 	.word	0x58024400
 80033e4:	080098f0 	.word	0x080098f0
 80033e8:	24000004 	.word	0x24000004
 80033ec:	24000000 	.word	0x24000000
 80033f0:	24000008 	.word	0x24000008

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	@ 0x24
 80033f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fa:	4bb3      	ldr	r3, [pc, #716]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003402:	2b18      	cmp	r3, #24
 8003404:	f200 8155 	bhi.w	80036b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003475 	.word	0x08003475
 8003414:	080036b3 	.word	0x080036b3
 8003418:	080036b3 	.word	0x080036b3
 800341c:	080036b3 	.word	0x080036b3
 8003420:	080036b3 	.word	0x080036b3
 8003424:	080036b3 	.word	0x080036b3
 8003428:	080036b3 	.word	0x080036b3
 800342c:	080036b3 	.word	0x080036b3
 8003430:	0800349b 	.word	0x0800349b
 8003434:	080036b3 	.word	0x080036b3
 8003438:	080036b3 	.word	0x080036b3
 800343c:	080036b3 	.word	0x080036b3
 8003440:	080036b3 	.word	0x080036b3
 8003444:	080036b3 	.word	0x080036b3
 8003448:	080036b3 	.word	0x080036b3
 800344c:	080036b3 	.word	0x080036b3
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080036b3 	.word	0x080036b3
 8003458:	080036b3 	.word	0x080036b3
 800345c:	080036b3 	.word	0x080036b3
 8003460:	080036b3 	.word	0x080036b3
 8003464:	080036b3 	.word	0x080036b3
 8003468:	080036b3 	.word	0x080036b3
 800346c:	080036b3 	.word	0x080036b3
 8003470:	080034a7 	.word	0x080034a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003474:	4b94      	ldr	r3, [pc, #592]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003480:	4b91      	ldr	r3, [pc, #580]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	4a90      	ldr	r2, [pc, #576]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003492:	e111      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003494:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003496:	61bb      	str	r3, [r7, #24]
      break;
 8003498:	e10e      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800349a:	4b8d      	ldr	r3, [pc, #564]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800349c:	61bb      	str	r3, [r7, #24]
      break;
 800349e:	e10b      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034a0:	4b8c      	ldr	r3, [pc, #560]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034a2:	61bb      	str	r3, [r7, #24]
      break;
 80034a4:	e108      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034b0:	4b85      	ldr	r3, [pc, #532]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034bc:	4b82      	ldr	r3, [pc, #520]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034c6:	4b80      	ldr	r3, [pc, #512]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80e1 	beq.w	80036ac <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f000 8083 	beq.w	80035f8 <HAL_RCC_GetSysClockFreq+0x204>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f200 80a1 	bhi.w	800363c <HAL_RCC_GetSysClockFreq+0x248>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x114>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d056      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003506:	e099      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003508:	4b6f      	ldr	r3, [pc, #444]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02d      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003514:	4b6c      	ldr	r3, [pc, #432]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	4a6b      	ldr	r2, [pc, #428]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b62      	ldr	r3, [pc, #392]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003552:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800356e:	e087      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b51      	ldr	r3, [pc, #324]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003592:	ed97 6a02 	vldr	s12, [r7, #8]
 8003596:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035b2:	e065      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c6:	4b40      	ldr	r3, [pc, #256]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035f6:	e043      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360a:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	ed97 6a02 	vldr	s12, [r7, #8]
 800361e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800363a:	e021      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800364a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364e:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003662:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800367e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	0a5b      	lsrs	r3, r3, #9
 8003686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800368a:	3301      	adds	r3, #1
 800368c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003698:	edd7 6a07 	vldr	s13, [r7, #28]
 800369c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036b2:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036b4:	61bb      	str	r3, [r7, #24]
      break;
 80036b6:	bf00      	nop
  }

  return sysclockfreq;
 80036b8:	69bb      	ldr	r3, [r7, #24]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	58024400 	.word	0x58024400
 80036cc:	03d09000 	.word	0x03d09000
 80036d0:	003d0900 	.word	0x003d0900
 80036d4:	007a1200 	.word	0x007a1200
 80036d8:	46000000 	.word	0x46000000
 80036dc:	4c742400 	.word	0x4c742400
 80036e0:	4a742400 	.word	0x4a742400
 80036e4:	4af42400 	.word	0x4af42400

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ee:	f7ff fe81 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b10      	ldr	r3, [pc, #64]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x50>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490f      	ldr	r1, [pc, #60]	@ (800373c <HAL_RCC_GetHCLKFreq+0x54>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370c:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x50>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_RCC_GetHCLKFreq+0x54>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a07      	ldr	r2, [pc, #28]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x58>)
 8003724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003726:	4a07      	ldr	r2, [pc, #28]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	58024400 	.word	0x58024400
 800373c:	080098f0 	.word	0x080098f0
 8003740:	24000004 	.word	0x24000004
 8003744:	24000000 	.word	0x24000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800374c:	f7ff ffcc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4904      	ldr	r1, [pc, #16]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	58024400 	.word	0x58024400
 8003770:	080098f0 	.word	0x080098f0

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003778:	f7ff ffb6 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4904      	ldr	r1, [pc, #16]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x28>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58024400 	.word	0x58024400
 800379c:	080098f0 	.word	0x080098f0

080037a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b0ca      	sub	sp, #296	@ 0x128
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037c4:	2500      	movs	r5, #0
 80037c6:	ea54 0305 	orrs.w	r3, r4, r5
 80037ca:	d049      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037dc:	d828      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e2:	d01a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e8:	d822      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f2:	d007      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037f4:	e01c      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f6:	4bb8      	ldr	r3, [pc, #736]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	4ab7      	ldr	r2, [pc, #732]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003802:	e01a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	3308      	adds	r3, #8
 800380a:	2102      	movs	r1, #2
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fc8f 	bl	8005130 <RCCEx_PLL2_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003818:	e00f      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	3328      	adds	r3, #40	@ 0x28
 8003820:	2102      	movs	r1, #2
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fd36 	bl	8005294 <RCCEx_PLL3_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003842:	4ba5      	ldr	r3, [pc, #660]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003850:	4aa1      	ldr	r2, [pc, #644]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6513      	str	r3, [r2, #80]	@ 0x50
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800386c:	f04f 0900 	mov.w	r9, #0
 8003870:	ea58 0309 	orrs.w	r3, r8, r9
 8003874:	d047      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387c:	2b04      	cmp	r3, #4
 800387e:	d82a      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	0800389d 	.word	0x0800389d
 800388c:	080038ab 	.word	0x080038ab
 8003890:	080038c1 	.word	0x080038c1
 8003894:	080038df 	.word	0x080038df
 8003898:	080038df 	.word	0x080038df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	4a8d      	ldr	r2, [pc, #564]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a8:	e01a      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3308      	adds	r3, #8
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fc3c 	bl	8005130 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038be:	e00f      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	3328      	adds	r3, #40	@ 0x28
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fce3 	bl	8005294 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d4:	e004      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	f023 0107 	bic.w	r1, r3, #7
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	4a78      	ldr	r2, [pc, #480]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003912:	f04f 0b00 	mov.w	fp, #0
 8003916:	ea5a 030b 	orrs.w	r3, sl, fp
 800391a:	d04c      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003926:	d030      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392c:	d829      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800392e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003930:	d02d      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003932:	2bc0      	cmp	r3, #192	@ 0xc0
 8003934:	d825      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003936:	2b80      	cmp	r3, #128	@ 0x80
 8003938:	d018      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800393a:	2b80      	cmp	r3, #128	@ 0x80
 800393c:	d821      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d007      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003946:	e01c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003948:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	4a62      	ldr	r2, [pc, #392]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800394e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003954:	e01c      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	3308      	adds	r3, #8
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fbe6 	bl	8005130 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800396a:	e011      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	3328      	adds	r3, #40	@ 0x28
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fc8d 	bl	8005294 <RCCEx_PLL3_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003998:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039d0:	460b      	mov	r3, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d053      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039e2:	d035      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039e8:	d82e      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039ee:	d031      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039f4:	d828      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fa:	d01a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a00:	d822      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0e:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	4a31      	ldr	r2, [pc, #196]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	3308      	adds	r3, #8
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fb83 	bl	8005130 <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a30:	e011      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	3328      	adds	r3, #40	@ 0x28
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fc2a 	bl	8005294 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a46:	e006      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a94:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	d056      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003aa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aaa:	d038      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ab0:	d831      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ab2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ab6:	d034      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ab8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003abc:	d82b      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac2:	d01d      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac8:	d825      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ad4:	e01f      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4ba2      	ldr	r3, [pc, #648]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	4aa1      	ldr	r2, [pc, #644]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fb1c 	bl	8005130 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003afe:	e011      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	3328      	adds	r3, #40	@ 0x28
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fbc3 	bl	8005294 <RCCEx_PLL3_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b3c:	4a8a      	ldr	r2, [pc, #552]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d03a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b72:	2b30      	cmp	r3, #48	@ 0x30
 8003b74:	d01f      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b76:	2b30      	cmp	r3, #48	@ 0x30
 8003b78:	d819      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d815      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d019      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d111      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8a:	4b77      	ldr	r3, [pc, #476]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	4a76      	ldr	r2, [pc, #472]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fac5 	bl	8005130 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bc4:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	4a65      	ldr	r2, [pc, #404]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bf8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d051      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0c:	d035      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c12:	d82e      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c18:	d031      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c1e:	d828      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c24:	d01a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2a:	d822      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c34:	d007      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c36:	e01c      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4b4b      	ldr	r3, [pc, #300]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c44:	e01c      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fa6e 	bl	8005130 <RCCEx_PLL2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e011      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	3328      	adds	r3, #40	@ 0x28
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fb15 	bl	8005294 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c70:	e006      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c78:	e002      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c88:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	4a34      	ldr	r2, [pc, #208]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d056      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd0:	d033      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd6:	d82c      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cdc:	d02f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ce2:	d826      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ce4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce8:	d02b      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cee:	d820      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf4:	d012      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cfa:	d81a      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d022      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d04:	d115      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fa0e 	bl	8005130 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d1a:	e015      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	3328      	adds	r3, #40	@ 0x28
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fab5 	bl	8005294 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d30:	e00a      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e004      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d5e:	4a02      	ldr	r2, [pc, #8]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d055      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da0:	d033      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da6:	d82c      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d02f      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db2:	d826      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003db4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003db8:	d02b      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003dba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dbe:	d820      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc4:	d012      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dca:	d81a      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d022      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dd4:	d115      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3308      	adds	r3, #8
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f9a6 	bl	8005130 <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dea:	e015      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	3328      	adds	r3, #40	@ 0x28
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fa4d 	bl	8005294 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e00:	e00a      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e20:	4ba3      	ldr	r3, [pc, #652]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e30:	4a9f      	ldr	r2, [pc, #636]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	d037      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e6a:	d00e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e70:	d816      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e7a:	d111      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	4a8b      	ldr	r2, [pc, #556]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e88:	e00f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f94c 	bl	8005130 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4a7b      	ldr	r2, [pc, #492]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ee6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d039      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f3d 	.word	0x08003f3d
 8003f04:	08003f11 	.word	0x08003f11
 8003f08:	08003f1f 	.word	0x08003f1f
 8003f0c:	08003f3d 	.word	0x08003f3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4b67      	ldr	r3, [pc, #412]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	4a66      	ldr	r2, [pc, #408]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f1c:	e00f      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	3308      	adds	r3, #8
 8003f24:	2102      	movs	r1, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f902 	bl	8005130 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f32:	e004      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3a:	e000      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f46:	4b5a      	ldr	r3, [pc, #360]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	f023 0103 	bic.w	r1, r3, #3
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f54:	4a56      	ldr	r2, [pc, #344]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f56:	430b      	orrs	r3, r1
 8003f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5a:	e003      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f000 809f 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f86:	4b4b      	ldr	r3, [pc, #300]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f92:	f7fd fb31 	bl	80015f8 <HAL_GetTick>
 8003f96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9c:	f7fd fb2c 	bl	80015f8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	@ 0x64
 8003faa:	d903      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ed      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d179      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fc8:	4b39      	ldr	r3, [pc, #228]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fd4:	4053      	eors	r3, r2
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d015      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fde:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fea:	4b31      	ldr	r3, [pc, #196]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	4a30      	ldr	r2, [pc, #192]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004000:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004002:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004016:	d118      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd faee 	bl	80015f8 <HAL_GetTick>
 800401c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004020:	e00d      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fd fae9 	bl	80015f8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800402c:	1ad2      	subs	r2, r2, r3
 800402e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004032:	429a      	cmp	r2, r3
 8004034:	d903      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800403c:	e005      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800403e:	4b1c      	ldr	r3, [pc, #112]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0eb      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d129      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004062:	d10e      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004064:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004074:	091a      	lsrs	r2, r3, #4
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004078:	4013      	ands	r3, r2
 800407a:	4a0d      	ldr	r2, [pc, #52]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	430b      	orrs	r3, r1
 800407e:	6113      	str	r3, [r2, #16]
 8004080:	e005      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4a0a      	ldr	r2, [pc, #40]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004088:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800408c:	6113      	str	r3, [r2, #16]
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004090:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a4:	e00e      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040ae:	e009      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040b0:	58024400 	.word	0x58024400
 80040b4:	58024800 	.word	0x58024800
 80040b8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0301 	and.w	r3, r2, #1
 80040d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f000 8089 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ec:	2b28      	cmp	r3, #40	@ 0x28
 80040ee:	d86b      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80040f0:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	080041d1 	.word	0x080041d1
 80040fc:	080041c9 	.word	0x080041c9
 8004100:	080041c9 	.word	0x080041c9
 8004104:	080041c9 	.word	0x080041c9
 8004108:	080041c9 	.word	0x080041c9
 800410c:	080041c9 	.word	0x080041c9
 8004110:	080041c9 	.word	0x080041c9
 8004114:	080041c9 	.word	0x080041c9
 8004118:	0800419d 	.word	0x0800419d
 800411c:	080041c9 	.word	0x080041c9
 8004120:	080041c9 	.word	0x080041c9
 8004124:	080041c9 	.word	0x080041c9
 8004128:	080041c9 	.word	0x080041c9
 800412c:	080041c9 	.word	0x080041c9
 8004130:	080041c9 	.word	0x080041c9
 8004134:	080041c9 	.word	0x080041c9
 8004138:	080041b3 	.word	0x080041b3
 800413c:	080041c9 	.word	0x080041c9
 8004140:	080041c9 	.word	0x080041c9
 8004144:	080041c9 	.word	0x080041c9
 8004148:	080041c9 	.word	0x080041c9
 800414c:	080041c9 	.word	0x080041c9
 8004150:	080041c9 	.word	0x080041c9
 8004154:	080041c9 	.word	0x080041c9
 8004158:	080041d1 	.word	0x080041d1
 800415c:	080041c9 	.word	0x080041c9
 8004160:	080041c9 	.word	0x080041c9
 8004164:	080041c9 	.word	0x080041c9
 8004168:	080041c9 	.word	0x080041c9
 800416c:	080041c9 	.word	0x080041c9
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041c9 	.word	0x080041c9
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041c9 	.word	0x080041c9
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041c9 	.word	0x080041c9
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041c9 	.word	0x080041c9
 8004198:	080041d1 	.word	0x080041d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	3308      	adds	r3, #8
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 ffc3 	bl	8005130 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041b0:	e00f      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 f86a 	bl	8005294 <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041c6:	e004      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ce:	e000      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041da:	4bbf      	ldr	r3, [pc, #764]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041e8:	4abb      	ldr	r2, [pc, #748]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80041ee:	e003      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f002 0302 	and.w	r3, r2, #2
 8004204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800420e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	d041      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800421e:	2b05      	cmp	r3, #5
 8004220:	d824      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004222:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004275 	.word	0x08004275
 800422c:	08004241 	.word	0x08004241
 8004230:	08004257 	.word	0x08004257
 8004234:	08004275 	.word	0x08004275
 8004238:	08004275 	.word	0x08004275
 800423c:	08004275 	.word	0x08004275
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	3308      	adds	r3, #8
 8004246:	2101      	movs	r1, #1
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ff71 	bl	8005130 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f818 	bl	8005294 <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800427e:	4b96      	ldr	r3, [pc, #600]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f023 0107 	bic.w	r1, r3, #7
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800428c:	4a92      	ldr	r2, [pc, #584]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6553      	str	r3, [r2, #84]	@ 0x54
 8004292:	e003      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 0304 	and.w	r3, r2, #4
 80042a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d044      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d825      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	080042e9 	.word	0x080042e9
 80042d8:	080042ff 	.word	0x080042ff
 80042dc:	0800431d 	.word	0x0800431d
 80042e0:	0800431d 	.word	0x0800431d
 80042e4:	0800431d 	.word	0x0800431d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	3308      	adds	r3, #8
 80042ee:	2101      	movs	r1, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 ff1d 	bl	8005130 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042fc:	e00f      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f000 ffc4 	bl	8005294 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004312:	e004      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800431c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004326:	4b6c      	ldr	r3, [pc, #432]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	f023 0107 	bic.w	r1, r3, #7
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004336:	4a68      	ldr	r2, [pc, #416]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6593      	str	r3, [r2, #88]	@ 0x58
 800433c:	e003      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f002 0320 	and.w	r3, r2, #32
 8004352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800435c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004360:	460b      	mov	r3, r1
 8004362:	4313      	orrs	r3, r2
 8004364:	d055      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004372:	d033      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004378:	d82c      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437e:	d02f      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004384:	d826      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800438a:	d02b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800438c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004390:	d820      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004396:	d012      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800439c:	d81a      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d022      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80043a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a6:	d115      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 febd 	bl	8005130 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043bc:	e015      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 ff64 	bl	8005294 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043d2:	e00a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e006      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043dc:	bf00      	nop
 80043de:	e004      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80043e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f2:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004402:	4a35      	ldr	r2, [pc, #212]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004404:	430b      	orrs	r3, r1
 8004406:	6553      	str	r3, [r2, #84]	@ 0x54
 8004408:	e003      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004422:	2300      	movs	r3, #0
 8004424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004428:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800442c:	460b      	mov	r3, r1
 800442e:	4313      	orrs	r3, r2
 8004430:	d058      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800443a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800443e:	d033      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004440:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004444:	d82c      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444a:	d02f      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d826      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004456:	d02b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800445c:	d820      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800445e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004462:	d012      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004468:	d81a      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004472:	d115      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	3308      	adds	r3, #8
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fe57 	bl	8005130 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004488:	e015      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3328      	adds	r3, #40	@ 0x28
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fefe 	bl	8005294 <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800449e:	e00a      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044a6:	e006      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044a8:	bf00      	nop
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044ac:	bf00      	nop
 80044ae:	e002      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044be:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ce:	4a02      	ldr	r2, [pc, #8]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d4:	e006      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044d6:	bf00      	nop
 80044d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80044f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d055      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800450c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004510:	d033      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004512:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004516:	d82c      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451c:	d02f      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800451e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004522:	d826      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004524:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004528:	d02b      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800452a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800452e:	d820      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004534:	d012      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800453a:	d81a      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004544:	d115      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	3308      	adds	r3, #8
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fdee 	bl	8005130 <RCCEx_PLL2_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800455a:	e015      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	3328      	adds	r3, #40	@ 0x28
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fe95 	bl	8005294 <RCCEx_PLL3_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004578:	e006      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457a:	bf00      	nop
 800457c:	e004      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004590:	4ba1      	ldr	r3, [pc, #644]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045a0:	4a9d      	ldr	r2, [pc, #628]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 0308 	and.w	r3, r2, #8
 80045bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d01e      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	3328      	adds	r3, #40	@ 0x28
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fe54 	bl	8005294 <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045f8:	4b87      	ldr	r3, [pc, #540]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004608:	4a83      	ldr	r2, [pc, #524]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f002 0310 	and.w	r3, r2, #16
 800461a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004624:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d01e      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463a:	d10c      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	3328      	adds	r3, #40	@ 0x28
 8004642:	2102      	movs	r1, #2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fe25 	bl	8005294 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004656:	4b70      	ldr	r3, [pc, #448]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004666:	4a6c      	ldr	r2, [pc, #432]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004682:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	d03e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004698:	d022      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800469a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800469e:	d81b      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a8:	d00b      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046aa:	e015      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	3308      	adds	r3, #8
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fd3b 	bl	8005130 <RCCEx_PLL2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046c0:	e00f      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	3328      	adds	r3, #40	@ 0x28
 80046c8:	2102      	movs	r1, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fde2 	bl	8005294 <RCCEx_PLL3_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80046e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046fa:	4a47      	ldr	r2, [pc, #284]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004716:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004718:	2300      	movs	r3, #0
 800471a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800471c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d03b      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004732:	d01f      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004738:	d818      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473e:	d003      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004744:	d007      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004746:	e011      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b33      	ldr	r3, [pc, #204]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	4a32      	ldr	r2, [pc, #200]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004754:	e00f      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3328      	adds	r3, #40	@ 0x28
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd98 	bl	8005294 <RCCEx_PLL3_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800477e:	4b26      	ldr	r3, [pc, #152]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6553      	str	r3, [r2, #84]	@ 0x54
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ac:	2300      	movs	r3, #0
 80047ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80047b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d034      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c8:	d007      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047ca:	e011      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	4a11      	ldr	r2, [pc, #68]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047d8:	e00e      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	3308      	adds	r3, #8
 80047e0:	2102      	movs	r1, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fca4 	bl	8005130 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10d      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004804:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	4a02      	ldr	r2, [pc, #8]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004810:	430b      	orrs	r3, r1
 8004812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004816:	bf00      	nop
 8004818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004832:	2300      	movs	r3, #0
 8004834:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004836:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d00c      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	3328      	adds	r3, #40	@ 0x28
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fd23 	bl	8005294 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004866:	663b      	str	r3, [r7, #96]	@ 0x60
 8004868:	2300      	movs	r3, #0
 800486a:	667b      	str	r3, [r7, #100]	@ 0x64
 800486c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d038      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800487e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004882:	d018      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004888:	d811      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800488a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488e:	d014      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004894:	d80b      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800489a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489e:	d106      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4bc3      	ldr	r3, [pc, #780]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	4ac2      	ldr	r2, [pc, #776]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b4:	e004      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c8:	4bb9      	ldr	r3, [pc, #740]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d8:	4ab5      	ldr	r2, [pc, #724]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80048de:	e003      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048f6:	2300      	movs	r3, #0
 80048f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004904:	4baa      	ldr	r3, [pc, #680]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004912:	4aa7      	ldr	r2, [pc, #668]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004914:	430b      	orrs	r3, r1
 8004916:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004924:	653b      	str	r3, [r7, #80]	@ 0x50
 8004926:	2300      	movs	r3, #0
 8004928:	657b      	str	r3, [r7, #84]	@ 0x54
 800492a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800492e:	460b      	mov	r3, r1
 8004930:	4313      	orrs	r3, r2
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004934:	4b9e      	ldr	r3, [pc, #632]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004944:	4a9a      	ldr	r2, [pc, #616]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004946:	430b      	orrs	r3, r1
 8004948:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004958:	2300      	movs	r3, #0
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004966:	4b92      	ldr	r3, [pc, #584]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004974:	4a8e      	ldr	r2, [pc, #568]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004976:	430b      	orrs	r3, r1
 8004978:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004986:	643b      	str	r3, [r7, #64]	@ 0x40
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	@ 0x44
 800498c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004996:	4b86      	ldr	r3, [pc, #536]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4a85      	ldr	r2, [pc, #532]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049a0:	6113      	str	r3, [r2, #16]
 80049a2:	4b83      	ldr	r3, [pc, #524]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049a4:	6919      	ldr	r1, [r3, #16]
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049ae:	4a80      	ldr	r2, [pc, #512]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c2:	2300      	movs	r3, #0
 80049c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049d0:	4b77      	ldr	r3, [pc, #476]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	4a74      	ldr	r2, [pc, #464]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049f2:	2300      	movs	r3, #0
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a00:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a10:	4a67      	ldr	r2, [pc, #412]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d011      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	3308      	adds	r3, #8
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fb78 	bl	8005130 <RCCEx_PLL2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6239      	str	r1, [r7, #32]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d011      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	3308      	adds	r3, #8
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fb58 	bl	8005130 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	61b9      	str	r1, [r7, #24]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d011      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fb38 	bl	8005130 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6139      	str	r1, [r7, #16]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3328      	adds	r3, #40	@ 0x28
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fbca 	bl	8005294 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d011      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	3328      	adds	r3, #40	@ 0x28
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fbaa 	bl	8005294 <RCCEx_PLL3_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	3328      	adds	r3, #40	@ 0x28
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fb8a 	bl	8005294 <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b96:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb0:	58024400 	.word	0x58024400

08004bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bb8:	f7fe fd96 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4904      	ldr	r1, [pc, #16]	@ (8004bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	080098f0 	.word	0x080098f0

08004be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be8:	4ba1      	ldr	r3, [pc, #644]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bf2:	4b9f      	ldr	r3, [pc, #636]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	0b1b      	lsrs	r3, r3, #12
 8004bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c0a:	4b99      	ldr	r3, [pc, #612]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8111 	beq.w	8004e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f000 8083 	beq.w	8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f200 80a1 	bhi.w	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d056      	beq.n	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c4a:	e099      	b.n	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02d      	beq.n	8004cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c58:	4b85      	ldr	r3, [pc, #532]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	4a84      	ldr	r2, [pc, #528]	@ (8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b7b      	ldr	r3, [pc, #492]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cb2:	e087      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf6:	e065      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b59      	ldr	r3, [pc, #356]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3a:	e043      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b48      	ldr	r3, [pc, #288]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e021      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dea:	ee17 2a90 	vmov	r2, s15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e18:	ee17 2a90 	vmov	r2, s15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e46:	ee17 2a90 	vmov	r2, s15
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	@ 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	46000000 	.word	0x46000000
 8004e7c:	4c742400 	.word	0x4c742400
 8004e80:	4a742400 	.word	0x4a742400
 8004e84:	4af42400 	.word	0x4af42400

08004e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	@ 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e90:	4ba1      	ldr	r3, [pc, #644]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eb2:	4b99      	ldr	r3, [pc, #612]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8111 	beq.w	80050f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f000 8083 	beq.w	8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	f200 80a1 	bhi.w	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d056      	beq.n	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ef2:	e099      	b.n	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef4:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f00:	4b85      	ldr	r3, [pc, #532]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	4a84      	ldr	r2, [pc, #528]	@ (800511c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f5a:	e087      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f9e:	e065      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b59      	ldr	r3, [pc, #356]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fe2:	e043      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800512c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b48      	ldr	r3, [pc, #288]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005026:	e021      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800506a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800506c:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	0a5b      	lsrs	r3, r3, #9
 8005072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005086:	edd7 6a07 	vldr	s13, [r7, #28]
 800508a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005092:	ee17 2a90 	vmov	r2, s15
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800509a:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c0:	ee17 2a90 	vmov	r2, s15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050c8:	4b13      	ldr	r3, [pc, #76]	@ (8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ee:	ee17 2a90 	vmov	r2, s15
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050f6:	e008      	b.n	800510a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
}
 800510a:	bf00      	nop
 800510c:	3724      	adds	r7, #36	@ 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	03d09000 	.word	0x03d09000
 8005120:	46000000 	.word	0x46000000
 8005124:	4c742400 	.word	0x4c742400
 8005128:	4a742400 	.word	0x4a742400
 800512c:	4af42400 	.word	0x4af42400

08005130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800513e:	4b53      	ldr	r3, [pc, #332]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d101      	bne.n	800514e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e099      	b.n	8005282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800514e:	4b4f      	ldr	r3, [pc, #316]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4e      	ldr	r2, [pc, #312]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005154:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515a:	f7fc fa4d 	bl	80015f8 <HAL_GetTick>
 800515e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005160:	e008      	b.n	8005174 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005162:	f7fc fa49 	bl	80015f8 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e086      	b.n	8005282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005174:	4b45      	ldr	r3, [pc, #276]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005180:	4b42      	ldr	r3, [pc, #264]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	493f      	ldr	r1, [pc, #252]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	628b      	str	r3, [r1, #40]	@ 0x28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	3b01      	subs	r3, #1
 800519a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	025b      	lsls	r3, r3, #9
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	041b      	lsls	r3, r3, #16
 80051b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	3b01      	subs	r3, #1
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051c4:	4931      	ldr	r1, [pc, #196]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051ca:	4b30      	ldr	r3, [pc, #192]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	492d      	ldr	r1, [pc, #180]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051dc:	4b2b      	ldr	r3, [pc, #172]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	f023 0220 	bic.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	4928      	ldr	r1, [pc, #160]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051ee:	4b27      	ldr	r3, [pc, #156]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	4a26      	ldr	r2, [pc, #152]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051fa:	4b24      	ldr	r3, [pc, #144]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 80051fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051fe:	4b24      	ldr	r3, [pc, #144]	@ (8005290 <RCCEx_PLL2_Config+0x160>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	69d2      	ldr	r2, [r2, #28]
 8005206:	00d2      	lsls	r2, r2, #3
 8005208:	4920      	ldr	r1, [pc, #128]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800520e:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005214:	f043 0310 	orr.w	r3, r3, #16
 8005218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005220:	4b1a      	ldr	r3, [pc, #104]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005226:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800522a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800522c:	e00f      	b.n	800524e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d106      	bne.n	8005242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005234:	4b15      	ldr	r3, [pc, #84]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	4a14      	ldr	r2, [pc, #80]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 800523a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800523e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005240:	e005      	b.n	800524e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	4a11      	ldr	r2, [pc, #68]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800524c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800524e:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a0e      	ldr	r2, [pc, #56]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005254:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fc f9cd 	bl	80015f8 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005260:	e008      	b.n	8005274 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005262:	f7fc f9c9 	bl	80015f8 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005274:	4b05      	ldr	r3, [pc, #20]	@ (800528c <RCCEx_PLL2_Config+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	58024400 	.word	0x58024400
 8005290:	ffff0007 	.word	0xffff0007

08005294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a2:	4b53      	ldr	r3, [pc, #332]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d101      	bne.n	80052b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e099      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052b2:	4b4f      	ldr	r3, [pc, #316]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4e      	ldr	r2, [pc, #312]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052be:	f7fc f99b 	bl	80015f8 <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052c6:	f7fc f997 	bl	80015f8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e086      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d8:	4b45      	ldr	r3, [pc, #276]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052e4:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	051b      	lsls	r3, r3, #20
 80052f2:	493f      	ldr	r1, [pc, #252]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	025b      	lsls	r3, r3, #9
 800530a:	b29b      	uxth	r3, r3
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	3b01      	subs	r3, #1
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005328:	4931      	ldr	r1, [pc, #196]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800532e:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	492d      	ldr	r1, [pc, #180]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005340:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4928      	ldr	r1, [pc, #160]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005352:	4b27      	ldr	r3, [pc, #156]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800535e:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <RCCEx_PLL3_Config+0x160>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	69d2      	ldr	r2, [r2, #28]
 800536a:	00d2      	lsls	r2, r2, #3
 800536c:	4920      	ldr	r1, [pc, #128]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005372:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800538a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800538e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005390:	e00f      	b.n	80053b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 800539e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053a4:	e005      	b.n	80053b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053a6:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a11      	ldr	r2, [pc, #68]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0e      	ldr	r2, [pc, #56]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053be:	f7fc f91b 	bl	80015f8 <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053c6:	f7fc f917 	bl	80015f8 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <RCCEx_PLL3_Config+0x15c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	ffff0007 	.word	0xffff0007

080053f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e042      	b.n	8005490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fb ffb5 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2224      	movs	r2, #36	@ 0x24
 8005426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 fa14 	bl	8006870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fca9 	bl	8005da0 <UART_SetConfig>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e01b      	b.n	8005490 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 fa93 	bl	80069b4 <UART_CheckIdleState>
 800548e:	4603      	mov	r3, r0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	@ 0x28
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d17b      	bne.n	80055aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_UART_Transmit+0x26>
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e074      	b.n	80055ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2221      	movs	r2, #33	@ 0x21
 80054ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d2:	f7fc f891 	bl	80015f8 <HAL_GetTick>
 80054d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f0:	d108      	bne.n	8005504 <HAL_UART_Transmit+0x6c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800550c:	e030      	b.n	8005570 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	@ 0x80
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f001 faf5 	bl	8006b08 <UART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e03d      	b.n	80055ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3302      	adds	r3, #2
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e007      	b.n	800555e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1c8      	bne.n	800550e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	2140      	movs	r1, #64	@ 0x40
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f001 fabe 	bl	8006b08 <UART_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e006      	b.n	80055ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b0ba      	sub	sp, #232	@ 0xe8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055e2:	4013      	ands	r3, r2
 80055e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d11b      	bne.n	8005628 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800560c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8393 	beq.w	8005d44 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
      }
      return;
 8005626:	e38d      	b.n	8005d44 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8123 	beq.w	8005878 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005632:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005636:	4b8d      	ldr	r3, [pc, #564]	@ (800586c <HAL_UART_IRQHandler+0x2b8>)
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800563e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005642:	4b8b      	ldr	r3, [pc, #556]	@ (8005870 <HAL_UART_IRQHandler+0x2bc>)
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8116 	beq.w	8005878 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d011      	beq.n	800567c <HAL_UART_IRQHandler+0xc8>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005672:	f043 0201 	orr.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <HAL_UART_IRQHandler+0xf8>
 8005688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2202      	movs	r2, #2
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_UART_IRQHandler+0x128>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2204      	movs	r2, #4
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d2:	f043 0202 	orr.w	r2, r3, #2
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d017      	beq.n	8005718 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d105      	bne.n	8005700 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80056f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80056f8:	4b5c      	ldr	r3, [pc, #368]	@ (800586c <HAL_UART_IRQHandler+0x2b8>)
 80056fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2208      	movs	r2, #8
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	f043 0208 	orr.w	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005720:	2b00      	cmp	r3, #0
 8005722:	d012      	beq.n	800574a <HAL_UART_IRQHandler+0x196>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005728:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 82f9 	beq.w	8005d48 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d013      	beq.n	800578a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005790:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579e:	2b40      	cmp	r3, #64	@ 0x40
 80057a0:	d005      	beq.n	80057ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d054      	beq.n	8005858 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fa18 	bl	8006be4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	d146      	bne.n	8005850 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3308      	adds	r3, #8
 80057c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1d9      	bne.n	80057c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d017      	beq.n	8005848 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581e:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <HAL_UART_IRQHandler+0x2c0>)
 8005820:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005828:	4618      	mov	r0, r3
 800582a:	f7fc fb2b 	bl	8001e84 <HAL_DMA_Abort_IT>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d019      	beq.n	8005868 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005842:	4610      	mov	r0, r2
 8005844:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	e00f      	b.n	8005868 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa93 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	e00b      	b.n	8005868 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fa8f 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005856:	e007      	b.n	8005868 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fa8b 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005866:	e26f      	b.n	8005d48 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	bf00      	nop
    return;
 800586a:	e26d      	b.n	8005d48 <HAL_UART_IRQHandler+0x794>
 800586c:	10000001 	.word	0x10000001
 8005870:	04000120 	.word	0x04000120
 8005874:	08006cb1 	.word	0x08006cb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800587c:	2b01      	cmp	r3, #1
 800587e:	f040 8203 	bne.w	8005c88 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 81fc 	beq.w	8005c88 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 81f5 	beq.w	8005c88 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2210      	movs	r2, #16
 80058a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	f040 816d 	bne.w	8005b90 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4aa4      	ldr	r2, [pc, #656]	@ (8005b50 <HAL_UART_IRQHandler+0x59c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d068      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4aa1      	ldr	r2, [pc, #644]	@ (8005b54 <HAL_UART_IRQHandler+0x5a0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d061      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a9f      	ldr	r2, [pc, #636]	@ (8005b58 <HAL_UART_IRQHandler+0x5a4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d05a      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a9c      	ldr	r2, [pc, #624]	@ (8005b5c <HAL_UART_IRQHandler+0x5a8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d053      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a9a      	ldr	r2, [pc, #616]	@ (8005b60 <HAL_UART_IRQHandler+0x5ac>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d04c      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a97      	ldr	r2, [pc, #604]	@ (8005b64 <HAL_UART_IRQHandler+0x5b0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d045      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a95      	ldr	r2, [pc, #596]	@ (8005b68 <HAL_UART_IRQHandler+0x5b4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d03e      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a92      	ldr	r2, [pc, #584]	@ (8005b6c <HAL_UART_IRQHandler+0x5b8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d037      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a90      	ldr	r2, [pc, #576]	@ (8005b70 <HAL_UART_IRQHandler+0x5bc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d030      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a8d      	ldr	r2, [pc, #564]	@ (8005b74 <HAL_UART_IRQHandler+0x5c0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d029      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b78 <HAL_UART_IRQHandler+0x5c4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a88      	ldr	r2, [pc, #544]	@ (8005b7c <HAL_UART_IRQHandler+0x5c8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01b      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a86      	ldr	r2, [pc, #536]	@ (8005b80 <HAL_UART_IRQHandler+0x5cc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d014      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a83      	ldr	r2, [pc, #524]	@ (8005b84 <HAL_UART_IRQHandler+0x5d0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00d      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a81      	ldr	r2, [pc, #516]	@ (8005b88 <HAL_UART_IRQHandler+0x5d4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d006      	beq.n	8005996 <HAL_UART_IRQHandler+0x3e2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a7e      	ldr	r2, [pc, #504]	@ (8005b8c <HAL_UART_IRQHandler+0x5d8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d106      	bne.n	80059a4 <HAL_UART_IRQHandler+0x3f0>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	e005      	b.n	80059b0 <HAL_UART_IRQHandler+0x3fc>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80ad 	beq.w	8005b18 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f080 80a5 	bcs.w	8005b18 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e4:	f000 8087 	beq.w	8005af6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1da      	bne.n	80059e8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e1      	bne.n	8005a32 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e3      	bne.n	8005a6e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e4      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fb fea9 	bl	8001848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f939 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b16:	e119      	b.n	8005d4c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b22:	429a      	cmp	r2, r3
 8005b24:	f040 8112 	bne.w	8005d4c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b34:	f040 810a 	bne.w	8005d4c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f91e 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
      return;
 8005b4c:	e0fe      	b.n	8005d4c <HAL_UART_IRQHandler+0x798>
 8005b4e:	bf00      	nop
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80cf 	beq.w	8005d50 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005bb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80ca 	beq.w	8005d50 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005be4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e4      	bne.n	8005bbc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	623b      	str	r3, [r7, #32]
   return(result);
 8005c02:	6a3a      	ldr	r2, [r7, #32]
 8005c04:	4b55      	ldr	r3, [pc, #340]	@ (8005d5c <HAL_UART_IRQHandler+0x7a8>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c16:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e3      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e4      	bne.n	8005c3e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f881 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c86:	e063      	b.n	8005d50 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00e      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x6fe>
 8005c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ca8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 f83d 	bl	8006d2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cb0:	e051      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d03a      	beq.n	8005d54 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
    }
    return;
 8005ce6:	e035      	b.n	8005d54 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <HAL_UART_IRQHandler+0x754>
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 ffe7 	bl	8006cd4 <UART_EndTransmit_IT>
    return;
 8005d06:	e026      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d009      	beq.n	8005d28 <HAL_UART_IRQHandler+0x774>
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 f816 	bl	8006d52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d26:	e016      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d010      	beq.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da0c      	bge.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fffe 	bl	8006d3e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d42:	e008      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005d44:	bf00      	nop
 8005d46:	e006      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005d48:	bf00      	nop
 8005d4a:	e004      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005d4c:	bf00      	nop
 8005d4e:	e002      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005d54:	bf00      	nop
  }
}
 8005d56:	37e8      	adds	r7, #232	@ 0xe8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	effffffe 	.word	0xeffffffe

08005d60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da4:	b092      	sub	sp, #72	@ 0x48
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4bbe      	ldr	r3, [pc, #760]	@ (80060c8 <UART_SetConfig+0x328>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4ab3      	ldr	r2, [pc, #716]	@ (80060cc <UART_SetConfig+0x32c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	4baf      	ldr	r3, [pc, #700]	@ (80060d0 <UART_SetConfig+0x330>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	f023 010f 	bic.w	r1, r3, #15
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4aa6      	ldr	r2, [pc, #664]	@ (80060d4 <UART_SetConfig+0x334>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d177      	bne.n	8005f30 <UART_SetConfig+0x190>
 8005e40:	4ba5      	ldr	r3, [pc, #660]	@ (80060d8 <UART_SetConfig+0x338>)
 8005e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e48:	2b28      	cmp	r3, #40	@ 0x28
 8005e4a:	d86d      	bhi.n	8005f28 <UART_SetConfig+0x188>
 8005e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e54 <UART_SetConfig+0xb4>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005ef9 	.word	0x08005ef9
 8005e58:	08005f29 	.word	0x08005f29
 8005e5c:	08005f29 	.word	0x08005f29
 8005e60:	08005f29 	.word	0x08005f29
 8005e64:	08005f29 	.word	0x08005f29
 8005e68:	08005f29 	.word	0x08005f29
 8005e6c:	08005f29 	.word	0x08005f29
 8005e70:	08005f29 	.word	0x08005f29
 8005e74:	08005f01 	.word	0x08005f01
 8005e78:	08005f29 	.word	0x08005f29
 8005e7c:	08005f29 	.word	0x08005f29
 8005e80:	08005f29 	.word	0x08005f29
 8005e84:	08005f29 	.word	0x08005f29
 8005e88:	08005f29 	.word	0x08005f29
 8005e8c:	08005f29 	.word	0x08005f29
 8005e90:	08005f29 	.word	0x08005f29
 8005e94:	08005f09 	.word	0x08005f09
 8005e98:	08005f29 	.word	0x08005f29
 8005e9c:	08005f29 	.word	0x08005f29
 8005ea0:	08005f29 	.word	0x08005f29
 8005ea4:	08005f29 	.word	0x08005f29
 8005ea8:	08005f29 	.word	0x08005f29
 8005eac:	08005f29 	.word	0x08005f29
 8005eb0:	08005f29 	.word	0x08005f29
 8005eb4:	08005f11 	.word	0x08005f11
 8005eb8:	08005f29 	.word	0x08005f29
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	08005f29 	.word	0x08005f29
 8005ec4:	08005f29 	.word	0x08005f29
 8005ec8:	08005f29 	.word	0x08005f29
 8005ecc:	08005f29 	.word	0x08005f29
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f19 	.word	0x08005f19
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005f29 	.word	0x08005f29
 8005ee0:	08005f29 	.word	0x08005f29
 8005ee4:	08005f29 	.word	0x08005f29
 8005ee8:	08005f29 	.word	0x08005f29
 8005eec:	08005f29 	.word	0x08005f29
 8005ef0:	08005f29 	.word	0x08005f29
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e222      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e21e      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e21a      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e216      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f18:	2320      	movs	r3, #32
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e212      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e20e      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e20a      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a69      	ldr	r2, [pc, #420]	@ (80060dc <UART_SetConfig+0x33c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d130      	bne.n	8005f9c <UART_SetConfig+0x1fc>
 8005f3a:	4b67      	ldr	r3, [pc, #412]	@ (80060d8 <UART_SetConfig+0x338>)
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d826      	bhi.n	8005f94 <UART_SetConfig+0x1f4>
 8005f46:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0x1ac>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f65 	.word	0x08005f65
 8005f50:	08005f6d 	.word	0x08005f6d
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e1ec      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e1e8      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f74:	2308      	movs	r3, #8
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e1e4      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e1e0      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f84:	2320      	movs	r3, #32
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e1dc      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f8c:	2340      	movs	r3, #64	@ 0x40
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e1d8      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e1d4      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80060e0 <UART_SetConfig+0x340>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d130      	bne.n	8006008 <UART_SetConfig+0x268>
 8005fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80060d8 <UART_SetConfig+0x338>)
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d826      	bhi.n	8006000 <UART_SetConfig+0x260>
 8005fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb8 <UART_SetConfig+0x218>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fd1 	.word	0x08005fd1
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	08005fe1 	.word	0x08005fe1
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e1b6      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e1b2      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e1ae      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e1aa      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e1a6      	b.n	8006346 <UART_SetConfig+0x5a6>
 8005ff8:	2340      	movs	r3, #64	@ 0x40
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e1a2      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006000:	2380      	movs	r3, #128	@ 0x80
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e19e      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a35      	ldr	r2, [pc, #212]	@ (80060e4 <UART_SetConfig+0x344>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d130      	bne.n	8006074 <UART_SetConfig+0x2d4>
 8006012:	4b31      	ldr	r3, [pc, #196]	@ (80060d8 <UART_SetConfig+0x338>)
 8006014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b05      	cmp	r3, #5
 800601c:	d826      	bhi.n	800606c <UART_SetConfig+0x2cc>
 800601e:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <UART_SetConfig+0x284>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	0800603d 	.word	0x0800603d
 8006028:	08006045 	.word	0x08006045
 800602c:	0800604d 	.word	0x0800604d
 8006030:	08006055 	.word	0x08006055
 8006034:	0800605d 	.word	0x0800605d
 8006038:	08006065 	.word	0x08006065
 800603c:	2300      	movs	r3, #0
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e180      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e17c      	b.n	8006346 <UART_SetConfig+0x5a6>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e178      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e174      	b.n	8006346 <UART_SetConfig+0x5a6>
 800605c:	2320      	movs	r3, #32
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e170      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006064:	2340      	movs	r3, #64	@ 0x40
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e16c      	b.n	8006346 <UART_SetConfig+0x5a6>
 800606c:	2380      	movs	r3, #128	@ 0x80
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e168      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1b      	ldr	r2, [pc, #108]	@ (80060e8 <UART_SetConfig+0x348>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d142      	bne.n	8006104 <UART_SetConfig+0x364>
 800607e:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <UART_SetConfig+0x338>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	2b05      	cmp	r3, #5
 8006088:	d838      	bhi.n	80060fc <UART_SetConfig+0x35c>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x2f0>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060ed 	.word	0x080060ed
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e14a      	b.n	8006346 <UART_SetConfig+0x5a6>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e146      	b.n	8006346 <UART_SetConfig+0x5a6>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e142      	b.n	8006346 <UART_SetConfig+0x5a6>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e13e      	b.n	8006346 <UART_SetConfig+0x5a6>
 80060c8:	cfff69f3 	.word	0xcfff69f3
 80060cc:	58000c00 	.word	0x58000c00
 80060d0:	11fff4ff 	.word	0x11fff4ff
 80060d4:	40011000 	.word	0x40011000
 80060d8:	58024400 	.word	0x58024400
 80060dc:	40004400 	.word	0x40004400
 80060e0:	40004800 	.word	0x40004800
 80060e4:	40004c00 	.word	0x40004c00
 80060e8:	40005000 	.word	0x40005000
 80060ec:	2320      	movs	r3, #32
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e128      	b.n	8006346 <UART_SetConfig+0x5a6>
 80060f4:	2340      	movs	r3, #64	@ 0x40
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e124      	b.n	8006346 <UART_SetConfig+0x5a6>
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e120      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4acb      	ldr	r2, [pc, #812]	@ (8006438 <UART_SetConfig+0x698>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d176      	bne.n	80061fc <UART_SetConfig+0x45c>
 800610e:	4bcb      	ldr	r3, [pc, #812]	@ (800643c <UART_SetConfig+0x69c>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006116:	2b28      	cmp	r3, #40	@ 0x28
 8006118:	d86c      	bhi.n	80061f4 <UART_SetConfig+0x454>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x380>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	080061c5 	.word	0x080061c5
 8006124:	080061f5 	.word	0x080061f5
 8006128:	080061f5 	.word	0x080061f5
 800612c:	080061f5 	.word	0x080061f5
 8006130:	080061f5 	.word	0x080061f5
 8006134:	080061f5 	.word	0x080061f5
 8006138:	080061f5 	.word	0x080061f5
 800613c:	080061f5 	.word	0x080061f5
 8006140:	080061cd 	.word	0x080061cd
 8006144:	080061f5 	.word	0x080061f5
 8006148:	080061f5 	.word	0x080061f5
 800614c:	080061f5 	.word	0x080061f5
 8006150:	080061f5 	.word	0x080061f5
 8006154:	080061f5 	.word	0x080061f5
 8006158:	080061f5 	.word	0x080061f5
 800615c:	080061f5 	.word	0x080061f5
 8006160:	080061d5 	.word	0x080061d5
 8006164:	080061f5 	.word	0x080061f5
 8006168:	080061f5 	.word	0x080061f5
 800616c:	080061f5 	.word	0x080061f5
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061f5 	.word	0x080061f5
 8006178:	080061f5 	.word	0x080061f5
 800617c:	080061f5 	.word	0x080061f5
 8006180:	080061dd 	.word	0x080061dd
 8006184:	080061f5 	.word	0x080061f5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080061f5 	.word	0x080061f5
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061f5 	.word	0x080061f5
 8006198:	080061f5 	.word	0x080061f5
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	080061f5 	.word	0x080061f5
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061f5 	.word	0x080061f5
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e0bc      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e0b8      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e0b4      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e0b0      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e0ac      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061ec:	2340      	movs	r3, #64	@ 0x40
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e0a8      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061f4:	2380      	movs	r3, #128	@ 0x80
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e0a4      	b.n	8006346 <UART_SetConfig+0x5a6>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a8f      	ldr	r2, [pc, #572]	@ (8006440 <UART_SetConfig+0x6a0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d130      	bne.n	8006268 <UART_SetConfig+0x4c8>
 8006206:	4b8d      	ldr	r3, [pc, #564]	@ (800643c <UART_SetConfig+0x69c>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b05      	cmp	r3, #5
 8006210:	d826      	bhi.n	8006260 <UART_SetConfig+0x4c0>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0x478>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006231 	.word	0x08006231
 800621c:	08006239 	.word	0x08006239
 8006220:	08006241 	.word	0x08006241
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	2300      	movs	r3, #0
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e086      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e082      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e07e      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e07a      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e076      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006258:	2340      	movs	r3, #64	@ 0x40
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e072      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e06e      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a75      	ldr	r2, [pc, #468]	@ (8006444 <UART_SetConfig+0x6a4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d130      	bne.n	80062d4 <UART_SetConfig+0x534>
 8006272:	4b72      	ldr	r3, [pc, #456]	@ (800643c <UART_SetConfig+0x69c>)
 8006274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b05      	cmp	r3, #5
 800627c:	d826      	bhi.n	80062cc <UART_SetConfig+0x52c>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x4e4>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	0800629d 	.word	0x0800629d
 8006288:	080062a5 	.word	0x080062a5
 800628c:	080062ad 	.word	0x080062ad
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062c5 	.word	0x080062c5
 800629c:	2300      	movs	r3, #0
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e050      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062a4:	2304      	movs	r3, #4
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e04c      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062ac:	2308      	movs	r3, #8
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e048      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062b4:	2310      	movs	r3, #16
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e044      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062bc:	2320      	movs	r3, #32
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e040      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062c4:	2340      	movs	r3, #64	@ 0x40
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e03c      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062cc:	2380      	movs	r3, #128	@ 0x80
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d2:	e038      	b.n	8006346 <UART_SetConfig+0x5a6>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006448 <UART_SetConfig+0x6a8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d130      	bne.n	8006340 <UART_SetConfig+0x5a0>
 80062de:	4b57      	ldr	r3, [pc, #348]	@ (800643c <UART_SetConfig+0x69c>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d826      	bhi.n	8006338 <UART_SetConfig+0x598>
 80062ea:	a201      	add	r2, pc, #4	@ (adr r2, 80062f0 <UART_SetConfig+0x550>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006309 	.word	0x08006309
 80062f4:	08006311 	.word	0x08006311
 80062f8:	08006319 	.word	0x08006319
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006329 	.word	0x08006329
 8006304:	08006331 	.word	0x08006331
 8006308:	2302      	movs	r3, #2
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e01a      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006310:	2304      	movs	r3, #4
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006316:	e016      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006318:	2308      	movs	r3, #8
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e012      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006320:	2310      	movs	r3, #16
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e00e      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006328:	2320      	movs	r3, #32
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e00a      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006330:	2340      	movs	r3, #64	@ 0x40
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e006      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633e:	e002      	b.n	8006346 <UART_SetConfig+0x5a6>
 8006340:	2380      	movs	r3, #128	@ 0x80
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3f      	ldr	r2, [pc, #252]	@ (8006448 <UART_SetConfig+0x6a8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	f040 80f8 	bne.w	8006542 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006352:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006356:	2b20      	cmp	r3, #32
 8006358:	dc46      	bgt.n	80063e8 <UART_SetConfig+0x648>
 800635a:	2b02      	cmp	r3, #2
 800635c:	f2c0 8082 	blt.w	8006464 <UART_SetConfig+0x6c4>
 8006360:	3b02      	subs	r3, #2
 8006362:	2b1e      	cmp	r3, #30
 8006364:	d87e      	bhi.n	8006464 <UART_SetConfig+0x6c4>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <UART_SetConfig+0x5cc>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063ef 	.word	0x080063ef
 8006370:	08006465 	.word	0x08006465
 8006374:	080063f7 	.word	0x080063f7
 8006378:	08006465 	.word	0x08006465
 800637c:	08006465 	.word	0x08006465
 8006380:	08006465 	.word	0x08006465
 8006384:	08006407 	.word	0x08006407
 8006388:	08006465 	.word	0x08006465
 800638c:	08006465 	.word	0x08006465
 8006390:	08006465 	.word	0x08006465
 8006394:	08006465 	.word	0x08006465
 8006398:	08006465 	.word	0x08006465
 800639c:	08006465 	.word	0x08006465
 80063a0:	08006465 	.word	0x08006465
 80063a4:	08006417 	.word	0x08006417
 80063a8:	08006465 	.word	0x08006465
 80063ac:	08006465 	.word	0x08006465
 80063b0:	08006465 	.word	0x08006465
 80063b4:	08006465 	.word	0x08006465
 80063b8:	08006465 	.word	0x08006465
 80063bc:	08006465 	.word	0x08006465
 80063c0:	08006465 	.word	0x08006465
 80063c4:	08006465 	.word	0x08006465
 80063c8:	08006465 	.word	0x08006465
 80063cc:	08006465 	.word	0x08006465
 80063d0:	08006465 	.word	0x08006465
 80063d4:	08006465 	.word	0x08006465
 80063d8:	08006465 	.word	0x08006465
 80063dc:	08006465 	.word	0x08006465
 80063e0:	08006465 	.word	0x08006465
 80063e4:	08006457 	.word	0x08006457
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	d037      	beq.n	800645c <UART_SetConfig+0x6bc>
 80063ec:	e03a      	b.n	8006464 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063ee:	f7fe fbe1 	bl	8004bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 80063f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063f4:	e03c      	b.n	8006470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fbf0 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006404:	e034      	b.n	8006470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006406:	f107 0318 	add.w	r3, r7, #24
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fd3c 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006414:	e02c      	b.n	8006470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <UART_SetConfig+0x69c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006422:	4b06      	ldr	r3, [pc, #24]	@ (800643c <UART_SetConfig+0x69c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	08db      	lsrs	r3, r3, #3
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	4a07      	ldr	r2, [pc, #28]	@ (800644c <UART_SetConfig+0x6ac>)
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006434:	e01c      	b.n	8006470 <UART_SetConfig+0x6d0>
 8006436:	bf00      	nop
 8006438:	40011400 	.word	0x40011400
 800643c:	58024400 	.word	0x58024400
 8006440:	40007800 	.word	0x40007800
 8006444:	40007c00 	.word	0x40007c00
 8006448:	58000c00 	.word	0x58000c00
 800644c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006450:	4b9d      	ldr	r3, [pc, #628]	@ (80066c8 <UART_SetConfig+0x928>)
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006454:	e00c      	b.n	8006470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006456:	4b9d      	ldr	r3, [pc, #628]	@ (80066cc <UART_SetConfig+0x92c>)
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645a:	e009      	b.n	8006470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006462:	e005      	b.n	8006470 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800646e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 81de 	beq.w	8006834 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	4a94      	ldr	r2, [pc, #592]	@ (80066d0 <UART_SetConfig+0x930>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	461a      	mov	r2, r3
 8006484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006486:	fbb3 f3f2 	udiv	r3, r3, r2
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	429a      	cmp	r2, r3
 800649a:	d305      	bcc.n	80064a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d903      	bls.n	80064b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064ae:	e1c1      	b.n	8006834 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b2:	2200      	movs	r2, #0
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	60fa      	str	r2, [r7, #12]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	4a84      	ldr	r2, [pc, #528]	@ (80066d0 <UART_SetConfig+0x930>)
 80064be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064d2:	f7f9 ff5d 	bl	8000390 <__aeabi_uldivmod>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4610      	mov	r0, r2
 80064dc:	4619      	mov	r1, r3
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	020b      	lsls	r3, r1, #8
 80064e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ec:	0202      	lsls	r2, r0, #8
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	6849      	ldr	r1, [r1, #4]
 80064f2:	0849      	lsrs	r1, r1, #1
 80064f4:	2000      	movs	r0, #0
 80064f6:	460c      	mov	r4, r1
 80064f8:	4605      	mov	r5, r0
 80064fa:	eb12 0804 	adds.w	r8, r2, r4
 80064fe:	eb43 0905 	adc.w	r9, r3, r5
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	469a      	mov	sl, r3
 800650a:	4693      	mov	fp, r2
 800650c:	4652      	mov	r2, sl
 800650e:	465b      	mov	r3, fp
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7f9 ff3c 	bl	8000390 <__aeabi_uldivmod>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4613      	mov	r3, r2
 800651e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006526:	d308      	bcc.n	800653a <UART_SetConfig+0x79a>
 8006528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800652e:	d204      	bcs.n	800653a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006536:	60da      	str	r2, [r3, #12]
 8006538:	e17c      	b.n	8006834 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006540:	e178      	b.n	8006834 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800654a:	f040 80c5 	bne.w	80066d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800654e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006552:	2b20      	cmp	r3, #32
 8006554:	dc48      	bgt.n	80065e8 <UART_SetConfig+0x848>
 8006556:	2b00      	cmp	r3, #0
 8006558:	db7b      	blt.n	8006652 <UART_SetConfig+0x8b2>
 800655a:	2b20      	cmp	r3, #32
 800655c:	d879      	bhi.n	8006652 <UART_SetConfig+0x8b2>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <UART_SetConfig+0x7c4>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065ef 	.word	0x080065ef
 8006568:	080065f7 	.word	0x080065f7
 800656c:	08006653 	.word	0x08006653
 8006570:	08006653 	.word	0x08006653
 8006574:	080065ff 	.word	0x080065ff
 8006578:	08006653 	.word	0x08006653
 800657c:	08006653 	.word	0x08006653
 8006580:	08006653 	.word	0x08006653
 8006584:	0800660f 	.word	0x0800660f
 8006588:	08006653 	.word	0x08006653
 800658c:	08006653 	.word	0x08006653
 8006590:	08006653 	.word	0x08006653
 8006594:	08006653 	.word	0x08006653
 8006598:	08006653 	.word	0x08006653
 800659c:	08006653 	.word	0x08006653
 80065a0:	08006653 	.word	0x08006653
 80065a4:	0800661f 	.word	0x0800661f
 80065a8:	08006653 	.word	0x08006653
 80065ac:	08006653 	.word	0x08006653
 80065b0:	08006653 	.word	0x08006653
 80065b4:	08006653 	.word	0x08006653
 80065b8:	08006653 	.word	0x08006653
 80065bc:	08006653 	.word	0x08006653
 80065c0:	08006653 	.word	0x08006653
 80065c4:	08006653 	.word	0x08006653
 80065c8:	08006653 	.word	0x08006653
 80065cc:	08006653 	.word	0x08006653
 80065d0:	08006653 	.word	0x08006653
 80065d4:	08006653 	.word	0x08006653
 80065d8:	08006653 	.word	0x08006653
 80065dc:	08006653 	.word	0x08006653
 80065e0:	08006653 	.word	0x08006653
 80065e4:	08006645 	.word	0x08006645
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d02e      	beq.n	800664a <UART_SetConfig+0x8aa>
 80065ec:	e031      	b.n	8006652 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ee:	f7fd f8ab 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 80065f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065f4:	e033      	b.n	800665e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f6:	f7fd f8bd 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 80065fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065fc:	e02f      	b.n	800665e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe faec 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660c:	e027      	b.n	800665e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660e:	f107 0318 	add.w	r3, r7, #24
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fc38 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e01f      	b.n	800665e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800661e:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <UART_SetConfig+0x934>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800662a:	4b2a      	ldr	r3, [pc, #168]	@ (80066d4 <UART_SetConfig+0x934>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	08db      	lsrs	r3, r3, #3
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	4a24      	ldr	r2, [pc, #144]	@ (80066c8 <UART_SetConfig+0x928>)
 8006636:	fa22 f303 	lsr.w	r3, r2, r3
 800663a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800663c:	e00f      	b.n	800665e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800663e:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <UART_SetConfig+0x928>)
 8006640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006642:	e00c      	b.n	800665e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006644:	4b21      	ldr	r3, [pc, #132]	@ (80066cc <UART_SetConfig+0x92c>)
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006648:	e009      	b.n	800665e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800664e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006650:	e005      	b.n	800665e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800665c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80e7 	beq.w	8006834 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	4a19      	ldr	r2, [pc, #100]	@ (80066d0 <UART_SetConfig+0x930>)
 800666c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006670:	461a      	mov	r2, r3
 8006672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006674:	fbb3 f3f2 	udiv	r3, r3, r2
 8006678:	005a      	lsls	r2, r3, #1
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	085b      	lsrs	r3, r3, #1
 8006680:	441a      	add	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	2b0f      	cmp	r3, #15
 8006690:	d916      	bls.n	80066c0 <UART_SetConfig+0x920>
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006698:	d212      	bcs.n	80066c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	b29b      	uxth	r3, r3
 800669e:	f023 030f 	bic.w	r3, r3, #15
 80066a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066b2:	4313      	orrs	r3, r2
 80066b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	e0b9      	b.n	8006834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066c6:	e0b5      	b.n	8006834 <UART_SetConfig+0xa94>
 80066c8:	03d09000 	.word	0x03d09000
 80066cc:	003d0900 	.word	0x003d0900
 80066d0:	08009900 	.word	0x08009900
 80066d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066dc:	2b20      	cmp	r3, #32
 80066de:	dc49      	bgt.n	8006774 <UART_SetConfig+0x9d4>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db7c      	blt.n	80067de <UART_SetConfig+0xa3e>
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d87a      	bhi.n	80067de <UART_SetConfig+0xa3e>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <UART_SetConfig+0x950>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	0800677b 	.word	0x0800677b
 80066f4:	08006783 	.word	0x08006783
 80066f8:	080067df 	.word	0x080067df
 80066fc:	080067df 	.word	0x080067df
 8006700:	0800678b 	.word	0x0800678b
 8006704:	080067df 	.word	0x080067df
 8006708:	080067df 	.word	0x080067df
 800670c:	080067df 	.word	0x080067df
 8006710:	0800679b 	.word	0x0800679b
 8006714:	080067df 	.word	0x080067df
 8006718:	080067df 	.word	0x080067df
 800671c:	080067df 	.word	0x080067df
 8006720:	080067df 	.word	0x080067df
 8006724:	080067df 	.word	0x080067df
 8006728:	080067df 	.word	0x080067df
 800672c:	080067df 	.word	0x080067df
 8006730:	080067ab 	.word	0x080067ab
 8006734:	080067df 	.word	0x080067df
 8006738:	080067df 	.word	0x080067df
 800673c:	080067df 	.word	0x080067df
 8006740:	080067df 	.word	0x080067df
 8006744:	080067df 	.word	0x080067df
 8006748:	080067df 	.word	0x080067df
 800674c:	080067df 	.word	0x080067df
 8006750:	080067df 	.word	0x080067df
 8006754:	080067df 	.word	0x080067df
 8006758:	080067df 	.word	0x080067df
 800675c:	080067df 	.word	0x080067df
 8006760:	080067df 	.word	0x080067df
 8006764:	080067df 	.word	0x080067df
 8006768:	080067df 	.word	0x080067df
 800676c:	080067df 	.word	0x080067df
 8006770:	080067d1 	.word	0x080067d1
 8006774:	2b40      	cmp	r3, #64	@ 0x40
 8006776:	d02e      	beq.n	80067d6 <UART_SetConfig+0xa36>
 8006778:	e031      	b.n	80067de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677a:	f7fc ffe5 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 800677e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006780:	e033      	b.n	80067ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006782:	f7fc fff7 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8006786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006788:	e02f      	b.n	80067ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800678a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fa26 	bl	8004be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006798:	e027      	b.n	80067ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800679a:	f107 0318 	add.w	r3, r7, #24
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fb72 	bl	8004e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a8:	e01f      	b.n	80067ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <UART_SetConfig+0xac0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006860 <UART_SetConfig+0xac0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	08db      	lsrs	r3, r3, #3
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	4a28      	ldr	r2, [pc, #160]	@ (8006864 <UART_SetConfig+0xac4>)
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067c8:	e00f      	b.n	80067ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067ca:	4b26      	ldr	r3, [pc, #152]	@ (8006864 <UART_SetConfig+0xac4>)
 80067cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ce:	e00c      	b.n	80067ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067d0:	4b25      	ldr	r3, [pc, #148]	@ (8006868 <UART_SetConfig+0xac8>)
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d4:	e009      	b.n	80067ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067dc:	e005      	b.n	80067ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067e8:	bf00      	nop
    }

    if (pclk != 0U)
 80067ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d021      	beq.n	8006834 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	4a1d      	ldr	r2, [pc, #116]	@ (800686c <UART_SetConfig+0xacc>)
 80067f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	441a      	add	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006812:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	2b0f      	cmp	r3, #15
 8006818:	d909      	bls.n	800682e <UART_SetConfig+0xa8e>
 800681a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006820:	d205      	bcs.n	800682e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	b29a      	uxth	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	e002      	b.n	8006834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2201      	movs	r2, #1
 8006838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2201      	movs	r2, #1
 8006840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2200      	movs	r2, #0
 8006848:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2200      	movs	r2, #0
 800684e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006850:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006854:	4618      	mov	r0, r3
 8006856:	3748      	adds	r7, #72	@ 0x48
 8006858:	46bd      	mov	sp, r7
 800685a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
 8006864:	03d09000 	.word	0x03d09000
 8006868:	003d0900 	.word	0x003d0900
 800686c:	08009900 	.word	0x08009900

08006870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01a      	beq.n	8006986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800696e:	d10a      	bne.n	8006986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b098      	sub	sp, #96	@ 0x60
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069c4:	f7fa fe18 	bl	80015f8 <HAL_GetTick>
 80069c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d12f      	bne.n	8006a38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e0:	2200      	movs	r2, #0
 80069e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f88e 	bl	8006b08 <UART_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d022      	beq.n	8006a38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e6      	bne.n	80069f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e063      	b.n	8006b00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d149      	bne.n	8006ada <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f857 	bl	8006b08 <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d03c      	beq.n	8006ada <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e6      	bne.n	8006a60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab2:	61fa      	str	r2, [r7, #28]
 8006ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	69b9      	ldr	r1, [r7, #24]
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e5      	bne.n	8006a92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e012      	b.n	8006b00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3758      	adds	r7, #88	@ 0x58
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	4613      	mov	r3, r2
 8006b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b18:	e04f      	b.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d04b      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b22:	f7fa fd69 	bl	80015f8 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d302      	bcc.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e04e      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d037      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b80      	cmp	r3, #128	@ 0x80
 8006b4e:	d034      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b40      	cmp	r3, #64	@ 0x40
 8006b54:	d031      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d110      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f839 	bl	8006be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2208      	movs	r2, #8
 8006b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e029      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b94:	d111      	bne.n	8006bba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f81f 	bl	8006be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e00f      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d0a0      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b095      	sub	sp, #84	@ 0x54
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <UART_EndRxTransfer+0xc8>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d118      	bne.n	8006c8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f023 0310 	bic.w	r3, r3, #16
 8006c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6979      	ldr	r1, [r7, #20]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	613b      	str	r3, [r7, #16]
   return(result);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e6      	bne.n	8006c5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ca0:	bf00      	nop
 8006ca2:	3754      	adds	r7, #84	@ 0x54
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	effffffe 	.word	0xeffffffe

08006cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff f854 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	613b      	str	r3, [r7, #16]
   return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e6      	bne.n	8006cdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff f81f 	bl	8005d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d22:	bf00      	nop
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e027      	b.n	8006dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	@ 0x24
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e02d      	b.n	8006e4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2224      	movs	r2, #36	@ 0x24
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f84f 	bl	8006ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e02d      	b.n	8006ec8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	@ 0x24
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f811 	bl	8006ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d108      	bne.n	8006ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ef0:	e031      	b.n	8006f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	0e5b      	lsrs	r3, r3, #25
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	0f5b      	lsrs	r3, r3, #29
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	7b3a      	ldrb	r2, [r7, #12]
 8006f1e:	4911      	ldr	r1, [pc, #68]	@ (8006f64 <UARTEx_SetNbDataToProcess+0x94>)
 8006f20:	5c8a      	ldrb	r2, [r1, r2]
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f26:	7b3a      	ldrb	r2, [r7, #12]
 8006f28:	490f      	ldr	r1, [pc, #60]	@ (8006f68 <UARTEx_SetNbDataToProcess+0x98>)
 8006f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	7b7a      	ldrb	r2, [r7, #13]
 8006f3c:	4909      	ldr	r1, [pc, #36]	@ (8006f64 <UARTEx_SetNbDataToProcess+0x94>)
 8006f3e:	5c8a      	ldrb	r2, [r1, r2]
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f44:	7b7a      	ldrb	r2, [r7, #13]
 8006f46:	4908      	ldr	r1, [pc, #32]	@ (8006f68 <UARTEx_SetNbDataToProcess+0x98>)
 8006f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	08009918 	.word	0x08009918
 8006f68:	08009920 	.word	0x08009920

08006f6c <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f82:	d10e      	bne.n	8006fa2 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d107      	bne.n	8006fa2 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f06f 0201 	mvn.w	r2, #1
 8006f9a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f804 	bl	8006faa <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <__cvt>:
 8006fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc0:	ed2d 8b02 	vpush	{d8}
 8006fc4:	eeb0 8b40 	vmov.f64	d8, d0
 8006fc8:	b085      	sub	sp, #20
 8006fca:	4617      	mov	r7, r2
 8006fcc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fd0:	ee18 2a90 	vmov	r2, s17
 8006fd4:	f025 0520 	bic.w	r5, r5, #32
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	bfb6      	itet	lt
 8006fdc:	222d      	movlt	r2, #45	@ 0x2d
 8006fde:	2200      	movge	r2, #0
 8006fe0:	eeb1 8b40 	vneglt.f64	d8, d0
 8006fe4:	2d46      	cmp	r5, #70	@ 0x46
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	d004      	beq.n	8006ff6 <__cvt+0x38>
 8006fec:	2d45      	cmp	r5, #69	@ 0x45
 8006fee:	d100      	bne.n	8006ff2 <__cvt+0x34>
 8006ff0:	3401      	adds	r4, #1
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	e000      	b.n	8006ff8 <__cvt+0x3a>
 8006ff6:	2103      	movs	r1, #3
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	ab02      	add	r3, sp, #8
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4622      	mov	r2, r4
 8007002:	4633      	mov	r3, r6
 8007004:	eeb0 0b48 	vmov.f64	d0, d8
 8007008:	f000 ff22 	bl	8007e50 <_dtoa_r>
 800700c:	2d47      	cmp	r5, #71	@ 0x47
 800700e:	d114      	bne.n	800703a <__cvt+0x7c>
 8007010:	07fb      	lsls	r3, r7, #31
 8007012:	d50a      	bpl.n	800702a <__cvt+0x6c>
 8007014:	1902      	adds	r2, r0, r4
 8007016:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800701a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701e:	bf08      	it	eq
 8007020:	9203      	streq	r2, [sp, #12]
 8007022:	2130      	movs	r1, #48	@ 0x30
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	4293      	cmp	r3, r2
 8007028:	d319      	bcc.n	800705e <__cvt+0xa0>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800702e:	1a1b      	subs	r3, r3, r0
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	b005      	add	sp, #20
 8007034:	ecbd 8b02 	vpop	{d8}
 8007038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703a:	2d46      	cmp	r5, #70	@ 0x46
 800703c:	eb00 0204 	add.w	r2, r0, r4
 8007040:	d1e9      	bne.n	8007016 <__cvt+0x58>
 8007042:	7803      	ldrb	r3, [r0, #0]
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d107      	bne.n	8007058 <__cvt+0x9a>
 8007048:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800704c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007050:	bf1c      	itt	ne
 8007052:	f1c4 0401 	rsbne	r4, r4, #1
 8007056:	6034      	strne	r4, [r6, #0]
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	441a      	add	r2, r3
 800705c:	e7db      	b.n	8007016 <__cvt+0x58>
 800705e:	1c5c      	adds	r4, r3, #1
 8007060:	9403      	str	r4, [sp, #12]
 8007062:	7019      	strb	r1, [r3, #0]
 8007064:	e7de      	b.n	8007024 <__cvt+0x66>

08007066 <__exponent>:
 8007066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007068:	2900      	cmp	r1, #0
 800706a:	bfba      	itte	lt
 800706c:	4249      	neglt	r1, r1
 800706e:	232d      	movlt	r3, #45	@ 0x2d
 8007070:	232b      	movge	r3, #43	@ 0x2b
 8007072:	2909      	cmp	r1, #9
 8007074:	7002      	strb	r2, [r0, #0]
 8007076:	7043      	strb	r3, [r0, #1]
 8007078:	dd29      	ble.n	80070ce <__exponent+0x68>
 800707a:	f10d 0307 	add.w	r3, sp, #7
 800707e:	461d      	mov	r5, r3
 8007080:	270a      	movs	r7, #10
 8007082:	461a      	mov	r2, r3
 8007084:	fbb1 f6f7 	udiv	r6, r1, r7
 8007088:	fb07 1416 	mls	r4, r7, r6, r1
 800708c:	3430      	adds	r4, #48	@ 0x30
 800708e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007092:	460c      	mov	r4, r1
 8007094:	2c63      	cmp	r4, #99	@ 0x63
 8007096:	f103 33ff 	add.w	r3, r3, #4294967295
 800709a:	4631      	mov	r1, r6
 800709c:	dcf1      	bgt.n	8007082 <__exponent+0x1c>
 800709e:	3130      	adds	r1, #48	@ 0x30
 80070a0:	1e94      	subs	r4, r2, #2
 80070a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070a6:	1c41      	adds	r1, r0, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	42ab      	cmp	r3, r5
 80070ac:	d30a      	bcc.n	80070c4 <__exponent+0x5e>
 80070ae:	f10d 0309 	add.w	r3, sp, #9
 80070b2:	1a9b      	subs	r3, r3, r2
 80070b4:	42ac      	cmp	r4, r5
 80070b6:	bf88      	it	hi
 80070b8:	2300      	movhi	r3, #0
 80070ba:	3302      	adds	r3, #2
 80070bc:	4403      	add	r3, r0
 80070be:	1a18      	subs	r0, r3, r0
 80070c0:	b003      	add	sp, #12
 80070c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80070c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80070cc:	e7ed      	b.n	80070aa <__exponent+0x44>
 80070ce:	2330      	movs	r3, #48	@ 0x30
 80070d0:	3130      	adds	r1, #48	@ 0x30
 80070d2:	7083      	strb	r3, [r0, #2]
 80070d4:	70c1      	strb	r1, [r0, #3]
 80070d6:	1d03      	adds	r3, r0, #4
 80070d8:	e7f1      	b.n	80070be <__exponent+0x58>
 80070da:	0000      	movs	r0, r0
 80070dc:	0000      	movs	r0, r0
	...

080070e0 <_printf_float>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b08d      	sub	sp, #52	@ 0x34
 80070e6:	460c      	mov	r4, r1
 80070e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070ec:	4616      	mov	r6, r2
 80070ee:	461f      	mov	r7, r3
 80070f0:	4605      	mov	r5, r0
 80070f2:	f000 fdad 	bl	8007c50 <_localeconv_r>
 80070f6:	f8d0 b000 	ldr.w	fp, [r0]
 80070fa:	4658      	mov	r0, fp
 80070fc:	f7f9 f940 	bl	8000380 <strlen>
 8007100:	2300      	movs	r3, #0
 8007102:	930a      	str	r3, [sp, #40]	@ 0x28
 8007104:	f8d8 3000 	ldr.w	r3, [r8]
 8007108:	f894 9018 	ldrb.w	r9, [r4, #24]
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	9005      	str	r0, [sp, #20]
 8007110:	3307      	adds	r3, #7
 8007112:	f023 0307 	bic.w	r3, r3, #7
 8007116:	f103 0108 	add.w	r1, r3, #8
 800711a:	f8c8 1000 	str.w	r1, [r8]
 800711e:	ed93 0b00 	vldr	d0, [r3]
 8007122:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007380 <_printf_float+0x2a0>
 8007126:	eeb0 7bc0 	vabs.f64	d7, d0
 800712a:	eeb4 7b46 	vcmp.f64	d7, d6
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007136:	dd24      	ble.n	8007182 <_printf_float+0xa2>
 8007138:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007140:	d502      	bpl.n	8007148 <_printf_float+0x68>
 8007142:	232d      	movs	r3, #45	@ 0x2d
 8007144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007148:	498f      	ldr	r1, [pc, #572]	@ (8007388 <_printf_float+0x2a8>)
 800714a:	4b90      	ldr	r3, [pc, #576]	@ (800738c <_printf_float+0x2ac>)
 800714c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007150:	bf8c      	ite	hi
 8007152:	4688      	movhi	r8, r1
 8007154:	4698      	movls	r8, r3
 8007156:	f022 0204 	bic.w	r2, r2, #4
 800715a:	2303      	movs	r3, #3
 800715c:	6123      	str	r3, [r4, #16]
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	9700      	str	r7, [sp, #0]
 8007166:	4633      	mov	r3, r6
 8007168:	aa0b      	add	r2, sp, #44	@ 0x2c
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f9d1 	bl	8007514 <_printf_common>
 8007172:	3001      	adds	r0, #1
 8007174:	f040 8089 	bne.w	800728a <_printf_float+0x1aa>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	b00d      	add	sp, #52	@ 0x34
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	eeb4 0b40 	vcmp.f64	d0, d0
 8007186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718a:	d709      	bvc.n	80071a0 <_printf_float+0xc0>
 800718c:	ee10 3a90 	vmov	r3, s1
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfbc      	itt	lt
 8007194:	232d      	movlt	r3, #45	@ 0x2d
 8007196:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800719a:	497d      	ldr	r1, [pc, #500]	@ (8007390 <_printf_float+0x2b0>)
 800719c:	4b7d      	ldr	r3, [pc, #500]	@ (8007394 <_printf_float+0x2b4>)
 800719e:	e7d5      	b.n	800714c <_printf_float+0x6c>
 80071a0:	6863      	ldr	r3, [r4, #4]
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80071a8:	d139      	bne.n	800721e <_printf_float+0x13e>
 80071aa:	2306      	movs	r3, #6
 80071ac:	6063      	str	r3, [r4, #4]
 80071ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071b2:	2300      	movs	r3, #0
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80071ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80071be:	ab09      	add	r3, sp, #36	@ 0x24
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	6861      	ldr	r1, [r4, #4]
 80071c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071c8:	4628      	mov	r0, r5
 80071ca:	f7ff fef8 	bl	8006fbe <__cvt>
 80071ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071d4:	4680      	mov	r8, r0
 80071d6:	d129      	bne.n	800722c <_printf_float+0x14c>
 80071d8:	1cc8      	adds	r0, r1, #3
 80071da:	db02      	blt.n	80071e2 <_printf_float+0x102>
 80071dc:	6863      	ldr	r3, [r4, #4]
 80071de:	4299      	cmp	r1, r3
 80071e0:	dd41      	ble.n	8007266 <_printf_float+0x186>
 80071e2:	f1a9 0902 	sub.w	r9, r9, #2
 80071e6:	fa5f f989 	uxtb.w	r9, r9
 80071ea:	3901      	subs	r1, #1
 80071ec:	464a      	mov	r2, r9
 80071ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80071f4:	f7ff ff37 	bl	8007066 <__exponent>
 80071f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071fa:	1813      	adds	r3, r2, r0
 80071fc:	2a01      	cmp	r2, #1
 80071fe:	4682      	mov	sl, r0
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	dc02      	bgt.n	800720a <_printf_float+0x12a>
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	07d2      	lsls	r2, r2, #31
 8007208:	d501      	bpl.n	800720e <_printf_float+0x12e>
 800720a:	3301      	adds	r3, #1
 800720c:	6123      	str	r3, [r4, #16]
 800720e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0a6      	beq.n	8007164 <_printf_float+0x84>
 8007216:	232d      	movs	r3, #45	@ 0x2d
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721c:	e7a2      	b.n	8007164 <_printf_float+0x84>
 800721e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007222:	d1c4      	bne.n	80071ae <_printf_float+0xce>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1c2      	bne.n	80071ae <_printf_float+0xce>
 8007228:	2301      	movs	r3, #1
 800722a:	e7bf      	b.n	80071ac <_printf_float+0xcc>
 800722c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007230:	d9db      	bls.n	80071ea <_printf_float+0x10a>
 8007232:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007236:	d118      	bne.n	800726a <_printf_float+0x18a>
 8007238:	2900      	cmp	r1, #0
 800723a:	6863      	ldr	r3, [r4, #4]
 800723c:	dd0b      	ble.n	8007256 <_printf_float+0x176>
 800723e:	6121      	str	r1, [r4, #16]
 8007240:	b913      	cbnz	r3, 8007248 <_printf_float+0x168>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	07d0      	lsls	r0, r2, #31
 8007246:	d502      	bpl.n	800724e <_printf_float+0x16e>
 8007248:	3301      	adds	r3, #1
 800724a:	440b      	add	r3, r1
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	e7db      	b.n	800720e <_printf_float+0x12e>
 8007256:	b913      	cbnz	r3, 800725e <_printf_float+0x17e>
 8007258:	6822      	ldr	r2, [r4, #0]
 800725a:	07d2      	lsls	r2, r2, #31
 800725c:	d501      	bpl.n	8007262 <_printf_float+0x182>
 800725e:	3302      	adds	r3, #2
 8007260:	e7f4      	b.n	800724c <_printf_float+0x16c>
 8007262:	2301      	movs	r3, #1
 8007264:	e7f2      	b.n	800724c <_printf_float+0x16c>
 8007266:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800726a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726c:	4299      	cmp	r1, r3
 800726e:	db05      	blt.n	800727c <_printf_float+0x19c>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	6121      	str	r1, [r4, #16]
 8007274:	07d8      	lsls	r0, r3, #31
 8007276:	d5ea      	bpl.n	800724e <_printf_float+0x16e>
 8007278:	1c4b      	adds	r3, r1, #1
 800727a:	e7e7      	b.n	800724c <_printf_float+0x16c>
 800727c:	2900      	cmp	r1, #0
 800727e:	bfd4      	ite	le
 8007280:	f1c1 0202 	rsble	r2, r1, #2
 8007284:	2201      	movgt	r2, #1
 8007286:	4413      	add	r3, r2
 8007288:	e7e0      	b.n	800724c <_printf_float+0x16c>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	055a      	lsls	r2, r3, #21
 800728e:	d407      	bmi.n	80072a0 <_printf_float+0x1c0>
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	4642      	mov	r2, r8
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	d12a      	bne.n	80072f4 <_printf_float+0x214>
 800729e:	e76b      	b.n	8007178 <_printf_float+0x98>
 80072a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80072a4:	f240 80e0 	bls.w	8007468 <_printf_float+0x388>
 80072a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80072ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	d133      	bne.n	800731e <_printf_float+0x23e>
 80072b6:	4a38      	ldr	r2, [pc, #224]	@ (8007398 <_printf_float+0x2b8>)
 80072b8:	2301      	movs	r3, #1
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f af59 	beq.w	8007178 <_printf_float+0x98>
 80072c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072ca:	4543      	cmp	r3, r8
 80072cc:	db02      	blt.n	80072d4 <_printf_float+0x1f4>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	07d8      	lsls	r0, r3, #31
 80072d2:	d50f      	bpl.n	80072f4 <_printf_float+0x214>
 80072d4:	9b05      	ldr	r3, [sp, #20]
 80072d6:	465a      	mov	r2, fp
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f af4a 	beq.w	8007178 <_printf_float+0x98>
 80072e4:	f04f 0900 	mov.w	r9, #0
 80072e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80072ec:	f104 0a1a 	add.w	sl, r4, #26
 80072f0:	45c8      	cmp	r8, r9
 80072f2:	dc09      	bgt.n	8007308 <_printf_float+0x228>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	079b      	lsls	r3, r3, #30
 80072f8:	f100 8107 	bmi.w	800750a <_printf_float+0x42a>
 80072fc:	68e0      	ldr	r0, [r4, #12]
 80072fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007300:	4298      	cmp	r0, r3
 8007302:	bfb8      	it	lt
 8007304:	4618      	movlt	r0, r3
 8007306:	e739      	b.n	800717c <_printf_float+0x9c>
 8007308:	2301      	movs	r3, #1
 800730a:	4652      	mov	r2, sl
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f af30 	beq.w	8007178 <_printf_float+0x98>
 8007318:	f109 0901 	add.w	r9, r9, #1
 800731c:	e7e8      	b.n	80072f0 <_printf_float+0x210>
 800731e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	dc3b      	bgt.n	800739c <_printf_float+0x2bc>
 8007324:	4a1c      	ldr	r2, [pc, #112]	@ (8007398 <_printf_float+0x2b8>)
 8007326:	2301      	movs	r3, #1
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f af22 	beq.w	8007178 <_printf_float+0x98>
 8007334:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007338:	ea59 0303 	orrs.w	r3, r9, r3
 800733c:	d102      	bne.n	8007344 <_printf_float+0x264>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	07d9      	lsls	r1, r3, #31
 8007342:	d5d7      	bpl.n	80072f4 <_printf_float+0x214>
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	465a      	mov	r2, fp
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f af12 	beq.w	8007178 <_printf_float+0x98>
 8007354:	f04f 0a00 	mov.w	sl, #0
 8007358:	f104 0b1a 	add.w	fp, r4, #26
 800735c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800735e:	425b      	negs	r3, r3
 8007360:	4553      	cmp	r3, sl
 8007362:	dc01      	bgt.n	8007368 <_printf_float+0x288>
 8007364:	464b      	mov	r3, r9
 8007366:	e794      	b.n	8007292 <_printf_float+0x1b2>
 8007368:	2301      	movs	r3, #1
 800736a:	465a      	mov	r2, fp
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f af00 	beq.w	8007178 <_printf_float+0x98>
 8007378:	f10a 0a01 	add.w	sl, sl, #1
 800737c:	e7ee      	b.n	800735c <_printf_float+0x27c>
 800737e:	bf00      	nop
 8007380:	ffffffff 	.word	0xffffffff
 8007384:	7fefffff 	.word	0x7fefffff
 8007388:	0800992c 	.word	0x0800992c
 800738c:	08009928 	.word	0x08009928
 8007390:	08009934 	.word	0x08009934
 8007394:	08009930 	.word	0x08009930
 8007398:	08009938 	.word	0x08009938
 800739c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800739e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073a2:	4553      	cmp	r3, sl
 80073a4:	bfa8      	it	ge
 80073a6:	4653      	movge	r3, sl
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	4699      	mov	r9, r3
 80073ac:	dc37      	bgt.n	800741e <_printf_float+0x33e>
 80073ae:	2300      	movs	r3, #0
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073b6:	f104 021a 	add.w	r2, r4, #26
 80073ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073bc:	9907      	ldr	r1, [sp, #28]
 80073be:	9306      	str	r3, [sp, #24]
 80073c0:	eba3 0309 	sub.w	r3, r3, r9
 80073c4:	428b      	cmp	r3, r1
 80073c6:	dc31      	bgt.n	800742c <_printf_float+0x34c>
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	459a      	cmp	sl, r3
 80073cc:	dc3b      	bgt.n	8007446 <_printf_float+0x366>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	07da      	lsls	r2, r3, #31
 80073d2:	d438      	bmi.n	8007446 <_printf_float+0x366>
 80073d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d6:	ebaa 0903 	sub.w	r9, sl, r3
 80073da:	9b06      	ldr	r3, [sp, #24]
 80073dc:	ebaa 0303 	sub.w	r3, sl, r3
 80073e0:	4599      	cmp	r9, r3
 80073e2:	bfa8      	it	ge
 80073e4:	4699      	movge	r9, r3
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	dc34      	bgt.n	8007456 <_printf_float+0x376>
 80073ec:	f04f 0800 	mov.w	r8, #0
 80073f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073f4:	f104 0b1a 	add.w	fp, r4, #26
 80073f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fa:	ebaa 0303 	sub.w	r3, sl, r3
 80073fe:	eba3 0309 	sub.w	r3, r3, r9
 8007402:	4543      	cmp	r3, r8
 8007404:	f77f af76 	ble.w	80072f4 <_printf_float+0x214>
 8007408:	2301      	movs	r3, #1
 800740a:	465a      	mov	r2, fp
 800740c:	4631      	mov	r1, r6
 800740e:	4628      	mov	r0, r5
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	f43f aeb0 	beq.w	8007178 <_printf_float+0x98>
 8007418:	f108 0801 	add.w	r8, r8, #1
 800741c:	e7ec      	b.n	80073f8 <_printf_float+0x318>
 800741e:	4642      	mov	r2, r8
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	d1c1      	bne.n	80073ae <_printf_float+0x2ce>
 800742a:	e6a5      	b.n	8007178 <_printf_float+0x98>
 800742c:	2301      	movs	r3, #1
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	9206      	str	r2, [sp, #24]
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	f43f ae9e 	beq.w	8007178 <_printf_float+0x98>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	9a06      	ldr	r2, [sp, #24]
 8007440:	3301      	adds	r3, #1
 8007442:	9307      	str	r3, [sp, #28]
 8007444:	e7b9      	b.n	80073ba <_printf_float+0x2da>
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	465a      	mov	r2, fp
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	47b8      	blx	r7
 8007450:	3001      	adds	r0, #1
 8007452:	d1bf      	bne.n	80073d4 <_printf_float+0x2f4>
 8007454:	e690      	b.n	8007178 <_printf_float+0x98>
 8007456:	9a06      	ldr	r2, [sp, #24]
 8007458:	464b      	mov	r3, r9
 800745a:	4442      	add	r2, r8
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	d1c2      	bne.n	80073ec <_printf_float+0x30c>
 8007466:	e687      	b.n	8007178 <_printf_float+0x98>
 8007468:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800746c:	f1b9 0f01 	cmp.w	r9, #1
 8007470:	dc01      	bgt.n	8007476 <_printf_float+0x396>
 8007472:	07db      	lsls	r3, r3, #31
 8007474:	d536      	bpl.n	80074e4 <_printf_float+0x404>
 8007476:	2301      	movs	r3, #1
 8007478:	4642      	mov	r2, r8
 800747a:	4631      	mov	r1, r6
 800747c:	4628      	mov	r0, r5
 800747e:	47b8      	blx	r7
 8007480:	3001      	adds	r0, #1
 8007482:	f43f ae79 	beq.w	8007178 <_printf_float+0x98>
 8007486:	9b05      	ldr	r3, [sp, #20]
 8007488:	465a      	mov	r2, fp
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f ae71 	beq.w	8007178 <_printf_float+0x98>
 8007496:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800749a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800749e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80074a6:	d018      	beq.n	80074da <_printf_float+0x3fa>
 80074a8:	464b      	mov	r3, r9
 80074aa:	f108 0201 	add.w	r2, r8, #1
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d10c      	bne.n	80074d2 <_printf_float+0x3f2>
 80074b8:	e65e      	b.n	8007178 <_printf_float+0x98>
 80074ba:	2301      	movs	r3, #1
 80074bc:	465a      	mov	r2, fp
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f ae57 	beq.w	8007178 <_printf_float+0x98>
 80074ca:	f108 0801 	add.w	r8, r8, #1
 80074ce:	45c8      	cmp	r8, r9
 80074d0:	dbf3      	blt.n	80074ba <_printf_float+0x3da>
 80074d2:	4653      	mov	r3, sl
 80074d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074d8:	e6dc      	b.n	8007294 <_printf_float+0x1b4>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	f104 0b1a 	add.w	fp, r4, #26
 80074e2:	e7f4      	b.n	80074ce <_printf_float+0x3ee>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4642      	mov	r2, r8
 80074e8:	e7e1      	b.n	80074ae <_printf_float+0x3ce>
 80074ea:	2301      	movs	r3, #1
 80074ec:	464a      	mov	r2, r9
 80074ee:	4631      	mov	r1, r6
 80074f0:	4628      	mov	r0, r5
 80074f2:	47b8      	blx	r7
 80074f4:	3001      	adds	r0, #1
 80074f6:	f43f ae3f 	beq.w	8007178 <_printf_float+0x98>
 80074fa:	f108 0801 	add.w	r8, r8, #1
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007502:	1a5b      	subs	r3, r3, r1
 8007504:	4543      	cmp	r3, r8
 8007506:	dcf0      	bgt.n	80074ea <_printf_float+0x40a>
 8007508:	e6f8      	b.n	80072fc <_printf_float+0x21c>
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	f104 0919 	add.w	r9, r4, #25
 8007512:	e7f4      	b.n	80074fe <_printf_float+0x41e>

08007514 <_printf_common>:
 8007514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007518:	4616      	mov	r6, r2
 800751a:	4698      	mov	r8, r3
 800751c:	688a      	ldr	r2, [r1, #8]
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007524:	4293      	cmp	r3, r2
 8007526:	bfb8      	it	lt
 8007528:	4613      	movlt	r3, r2
 800752a:	6033      	str	r3, [r6, #0]
 800752c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007530:	4607      	mov	r7, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b10a      	cbz	r2, 800753a <_printf_common+0x26>
 8007536:	3301      	adds	r3, #1
 8007538:	6033      	str	r3, [r6, #0]
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	0699      	lsls	r1, r3, #26
 800753e:	bf42      	ittt	mi
 8007540:	6833      	ldrmi	r3, [r6, #0]
 8007542:	3302      	addmi	r3, #2
 8007544:	6033      	strmi	r3, [r6, #0]
 8007546:	6825      	ldr	r5, [r4, #0]
 8007548:	f015 0506 	ands.w	r5, r5, #6
 800754c:	d106      	bne.n	800755c <_printf_common+0x48>
 800754e:	f104 0a19 	add.w	sl, r4, #25
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	6832      	ldr	r2, [r6, #0]
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	42ab      	cmp	r3, r5
 800755a:	dc26      	bgt.n	80075aa <_printf_common+0x96>
 800755c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	3b00      	subs	r3, #0
 8007564:	bf18      	it	ne
 8007566:	2301      	movne	r3, #1
 8007568:	0692      	lsls	r2, r2, #26
 800756a:	d42b      	bmi.n	80075c4 <_printf_common+0xb0>
 800756c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007570:	4641      	mov	r1, r8
 8007572:	4638      	mov	r0, r7
 8007574:	47c8      	blx	r9
 8007576:	3001      	adds	r0, #1
 8007578:	d01e      	beq.n	80075b8 <_printf_common+0xa4>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	6922      	ldr	r2, [r4, #16]
 800757e:	f003 0306 	and.w	r3, r3, #6
 8007582:	2b04      	cmp	r3, #4
 8007584:	bf02      	ittt	eq
 8007586:	68e5      	ldreq	r5, [r4, #12]
 8007588:	6833      	ldreq	r3, [r6, #0]
 800758a:	1aed      	subeq	r5, r5, r3
 800758c:	68a3      	ldr	r3, [r4, #8]
 800758e:	bf0c      	ite	eq
 8007590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007594:	2500      	movne	r5, #0
 8007596:	4293      	cmp	r3, r2
 8007598:	bfc4      	itt	gt
 800759a:	1a9b      	subgt	r3, r3, r2
 800759c:	18ed      	addgt	r5, r5, r3
 800759e:	2600      	movs	r6, #0
 80075a0:	341a      	adds	r4, #26
 80075a2:	42b5      	cmp	r5, r6
 80075a4:	d11a      	bne.n	80075dc <_printf_common+0xc8>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e008      	b.n	80075bc <_printf_common+0xa8>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4652      	mov	r2, sl
 80075ae:	4641      	mov	r1, r8
 80075b0:	4638      	mov	r0, r7
 80075b2:	47c8      	blx	r9
 80075b4:	3001      	adds	r0, #1
 80075b6:	d103      	bne.n	80075c0 <_printf_common+0xac>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7c6      	b.n	8007552 <_printf_common+0x3e>
 80075c4:	18e1      	adds	r1, r4, r3
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	2030      	movs	r0, #48	@ 0x30
 80075ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ce:	4422      	add	r2, r4
 80075d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075d8:	3302      	adds	r3, #2
 80075da:	e7c7      	b.n	800756c <_printf_common+0x58>
 80075dc:	2301      	movs	r3, #1
 80075de:	4622      	mov	r2, r4
 80075e0:	4641      	mov	r1, r8
 80075e2:	4638      	mov	r0, r7
 80075e4:	47c8      	blx	r9
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0e6      	beq.n	80075b8 <_printf_common+0xa4>
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7d9      	b.n	80075a2 <_printf_common+0x8e>
	...

080075f0 <_printf_i>:
 80075f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	7e0f      	ldrb	r7, [r1, #24]
 80075f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075f8:	2f78      	cmp	r7, #120	@ 0x78
 80075fa:	4691      	mov	r9, r2
 80075fc:	4680      	mov	r8, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	469a      	mov	sl, r3
 8007602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007606:	d807      	bhi.n	8007618 <_printf_i+0x28>
 8007608:	2f62      	cmp	r7, #98	@ 0x62
 800760a:	d80a      	bhi.n	8007622 <_printf_i+0x32>
 800760c:	2f00      	cmp	r7, #0
 800760e:	f000 80d1 	beq.w	80077b4 <_printf_i+0x1c4>
 8007612:	2f58      	cmp	r7, #88	@ 0x58
 8007614:	f000 80b8 	beq.w	8007788 <_printf_i+0x198>
 8007618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800761c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007620:	e03a      	b.n	8007698 <_printf_i+0xa8>
 8007622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007626:	2b15      	cmp	r3, #21
 8007628:	d8f6      	bhi.n	8007618 <_printf_i+0x28>
 800762a:	a101      	add	r1, pc, #4	@ (adr r1, 8007630 <_printf_i+0x40>)
 800762c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007630:	08007689 	.word	0x08007689
 8007634:	0800769d 	.word	0x0800769d
 8007638:	08007619 	.word	0x08007619
 800763c:	08007619 	.word	0x08007619
 8007640:	08007619 	.word	0x08007619
 8007644:	08007619 	.word	0x08007619
 8007648:	0800769d 	.word	0x0800769d
 800764c:	08007619 	.word	0x08007619
 8007650:	08007619 	.word	0x08007619
 8007654:	08007619 	.word	0x08007619
 8007658:	08007619 	.word	0x08007619
 800765c:	0800779b 	.word	0x0800779b
 8007660:	080076c7 	.word	0x080076c7
 8007664:	08007755 	.word	0x08007755
 8007668:	08007619 	.word	0x08007619
 800766c:	08007619 	.word	0x08007619
 8007670:	080077bd 	.word	0x080077bd
 8007674:	08007619 	.word	0x08007619
 8007678:	080076c7 	.word	0x080076c7
 800767c:	08007619 	.word	0x08007619
 8007680:	08007619 	.word	0x08007619
 8007684:	0800775d 	.word	0x0800775d
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	1d1a      	adds	r2, r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6032      	str	r2, [r6, #0]
 8007690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007698:	2301      	movs	r3, #1
 800769a:	e09c      	b.n	80077d6 <_printf_i+0x1e6>
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	6031      	str	r1, [r6, #0]
 80076a4:	0606      	lsls	r6, r0, #24
 80076a6:	d501      	bpl.n	80076ac <_printf_i+0xbc>
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	e003      	b.n	80076b4 <_printf_i+0xc4>
 80076ac:	0645      	lsls	r5, r0, #25
 80076ae:	d5fb      	bpl.n	80076a8 <_printf_i+0xb8>
 80076b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	da03      	bge.n	80076c0 <_printf_i+0xd0>
 80076b8:	232d      	movs	r3, #45	@ 0x2d
 80076ba:	426d      	negs	r5, r5
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076c0:	4858      	ldr	r0, [pc, #352]	@ (8007824 <_printf_i+0x234>)
 80076c2:	230a      	movs	r3, #10
 80076c4:	e011      	b.n	80076ea <_printf_i+0xfa>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	0608      	lsls	r0, r1, #24
 80076cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80076d0:	d402      	bmi.n	80076d8 <_printf_i+0xe8>
 80076d2:	0649      	lsls	r1, r1, #25
 80076d4:	bf48      	it	mi
 80076d6:	b2ad      	uxthmi	r5, r5
 80076d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076da:	4852      	ldr	r0, [pc, #328]	@ (8007824 <_printf_i+0x234>)
 80076dc:	6033      	str	r3, [r6, #0]
 80076de:	bf14      	ite	ne
 80076e0:	230a      	movne	r3, #10
 80076e2:	2308      	moveq	r3, #8
 80076e4:	2100      	movs	r1, #0
 80076e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ea:	6866      	ldr	r6, [r4, #4]
 80076ec:	60a6      	str	r6, [r4, #8]
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	db05      	blt.n	80076fe <_printf_i+0x10e>
 80076f2:	6821      	ldr	r1, [r4, #0]
 80076f4:	432e      	orrs	r6, r5
 80076f6:	f021 0104 	bic.w	r1, r1, #4
 80076fa:	6021      	str	r1, [r4, #0]
 80076fc:	d04b      	beq.n	8007796 <_printf_i+0x1a6>
 80076fe:	4616      	mov	r6, r2
 8007700:	fbb5 f1f3 	udiv	r1, r5, r3
 8007704:	fb03 5711 	mls	r7, r3, r1, r5
 8007708:	5dc7      	ldrb	r7, [r0, r7]
 800770a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770e:	462f      	mov	r7, r5
 8007710:	42bb      	cmp	r3, r7
 8007712:	460d      	mov	r5, r1
 8007714:	d9f4      	bls.n	8007700 <_printf_i+0x110>
 8007716:	2b08      	cmp	r3, #8
 8007718:	d10b      	bne.n	8007732 <_printf_i+0x142>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	07df      	lsls	r7, r3, #31
 800771e:	d508      	bpl.n	8007732 <_printf_i+0x142>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	6861      	ldr	r1, [r4, #4]
 8007724:	4299      	cmp	r1, r3
 8007726:	bfde      	ittt	le
 8007728:	2330      	movle	r3, #48	@ 0x30
 800772a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007732:	1b92      	subs	r2, r2, r6
 8007734:	6122      	str	r2, [r4, #16]
 8007736:	f8cd a000 	str.w	sl, [sp]
 800773a:	464b      	mov	r3, r9
 800773c:	aa03      	add	r2, sp, #12
 800773e:	4621      	mov	r1, r4
 8007740:	4640      	mov	r0, r8
 8007742:	f7ff fee7 	bl	8007514 <_printf_common>
 8007746:	3001      	adds	r0, #1
 8007748:	d14a      	bne.n	80077e0 <_printf_i+0x1f0>
 800774a:	f04f 30ff 	mov.w	r0, #4294967295
 800774e:	b004      	add	sp, #16
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	f043 0320 	orr.w	r3, r3, #32
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	4832      	ldr	r0, [pc, #200]	@ (8007828 <_printf_i+0x238>)
 800775e:	2778      	movs	r7, #120	@ 0x78
 8007760:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	6831      	ldr	r1, [r6, #0]
 8007768:	061f      	lsls	r7, r3, #24
 800776a:	f851 5b04 	ldr.w	r5, [r1], #4
 800776e:	d402      	bmi.n	8007776 <_printf_i+0x186>
 8007770:	065f      	lsls	r7, r3, #25
 8007772:	bf48      	it	mi
 8007774:	b2ad      	uxthmi	r5, r5
 8007776:	6031      	str	r1, [r6, #0]
 8007778:	07d9      	lsls	r1, r3, #31
 800777a:	bf44      	itt	mi
 800777c:	f043 0320 	orrmi.w	r3, r3, #32
 8007780:	6023      	strmi	r3, [r4, #0]
 8007782:	b11d      	cbz	r5, 800778c <_printf_i+0x19c>
 8007784:	2310      	movs	r3, #16
 8007786:	e7ad      	b.n	80076e4 <_printf_i+0xf4>
 8007788:	4826      	ldr	r0, [pc, #152]	@ (8007824 <_printf_i+0x234>)
 800778a:	e7e9      	b.n	8007760 <_printf_i+0x170>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	f023 0320 	bic.w	r3, r3, #32
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	e7f6      	b.n	8007784 <_printf_i+0x194>
 8007796:	4616      	mov	r6, r2
 8007798:	e7bd      	b.n	8007716 <_printf_i+0x126>
 800779a:	6833      	ldr	r3, [r6, #0]
 800779c:	6825      	ldr	r5, [r4, #0]
 800779e:	6961      	ldr	r1, [r4, #20]
 80077a0:	1d18      	adds	r0, r3, #4
 80077a2:	6030      	str	r0, [r6, #0]
 80077a4:	062e      	lsls	r6, r5, #24
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	d501      	bpl.n	80077ae <_printf_i+0x1be>
 80077aa:	6019      	str	r1, [r3, #0]
 80077ac:	e002      	b.n	80077b4 <_printf_i+0x1c4>
 80077ae:	0668      	lsls	r0, r5, #25
 80077b0:	d5fb      	bpl.n	80077aa <_printf_i+0x1ba>
 80077b2:	8019      	strh	r1, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	4616      	mov	r6, r2
 80077ba:	e7bc      	b.n	8007736 <_printf_i+0x146>
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	1d1a      	adds	r2, r3, #4
 80077c0:	6032      	str	r2, [r6, #0]
 80077c2:	681e      	ldr	r6, [r3, #0]
 80077c4:	6862      	ldr	r2, [r4, #4]
 80077c6:	2100      	movs	r1, #0
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7f8 fd89 	bl	80002e0 <memchr>
 80077ce:	b108      	cbz	r0, 80077d4 <_printf_i+0x1e4>
 80077d0:	1b80      	subs	r0, r0, r6
 80077d2:	6060      	str	r0, [r4, #4]
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	2300      	movs	r3, #0
 80077da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077de:	e7aa      	b.n	8007736 <_printf_i+0x146>
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	4632      	mov	r2, r6
 80077e4:	4649      	mov	r1, r9
 80077e6:	4640      	mov	r0, r8
 80077e8:	47d0      	blx	sl
 80077ea:	3001      	adds	r0, #1
 80077ec:	d0ad      	beq.n	800774a <_printf_i+0x15a>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	079b      	lsls	r3, r3, #30
 80077f2:	d413      	bmi.n	800781c <_printf_i+0x22c>
 80077f4:	68e0      	ldr	r0, [r4, #12]
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	4298      	cmp	r0, r3
 80077fa:	bfb8      	it	lt
 80077fc:	4618      	movlt	r0, r3
 80077fe:	e7a6      	b.n	800774e <_printf_i+0x15e>
 8007800:	2301      	movs	r3, #1
 8007802:	4632      	mov	r2, r6
 8007804:	4649      	mov	r1, r9
 8007806:	4640      	mov	r0, r8
 8007808:	47d0      	blx	sl
 800780a:	3001      	adds	r0, #1
 800780c:	d09d      	beq.n	800774a <_printf_i+0x15a>
 800780e:	3501      	adds	r5, #1
 8007810:	68e3      	ldr	r3, [r4, #12]
 8007812:	9903      	ldr	r1, [sp, #12]
 8007814:	1a5b      	subs	r3, r3, r1
 8007816:	42ab      	cmp	r3, r5
 8007818:	dcf2      	bgt.n	8007800 <_printf_i+0x210>
 800781a:	e7eb      	b.n	80077f4 <_printf_i+0x204>
 800781c:	2500      	movs	r5, #0
 800781e:	f104 0619 	add.w	r6, r4, #25
 8007822:	e7f5      	b.n	8007810 <_printf_i+0x220>
 8007824:	0800993a 	.word	0x0800993a
 8007828:	0800994b 	.word	0x0800994b

0800782c <std>:
 800782c:	2300      	movs	r3, #0
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	e9c0 3300 	strd	r3, r3, [r0]
 8007836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800783a:	6083      	str	r3, [r0, #8]
 800783c:	8181      	strh	r1, [r0, #12]
 800783e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007840:	81c2      	strh	r2, [r0, #14]
 8007842:	6183      	str	r3, [r0, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	2208      	movs	r2, #8
 8007848:	305c      	adds	r0, #92	@ 0x5c
 800784a:	f000 f9f9 	bl	8007c40 <memset>
 800784e:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <std+0x58>)
 8007850:	6263      	str	r3, [r4, #36]	@ 0x24
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <std+0x5c>)
 8007854:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007856:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <std+0x60>)
 8007858:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800785a:	4b0d      	ldr	r3, [pc, #52]	@ (8007890 <std+0x64>)
 800785c:	6323      	str	r3, [r4, #48]	@ 0x30
 800785e:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <std+0x68>)
 8007860:	6224      	str	r4, [r4, #32]
 8007862:	429c      	cmp	r4, r3
 8007864:	d006      	beq.n	8007874 <std+0x48>
 8007866:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800786a:	4294      	cmp	r4, r2
 800786c:	d002      	beq.n	8007874 <std+0x48>
 800786e:	33d0      	adds	r3, #208	@ 0xd0
 8007870:	429c      	cmp	r4, r3
 8007872:	d105      	bne.n	8007880 <std+0x54>
 8007874:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787c:	f000 ba5c 	b.w	8007d38 <__retarget_lock_init_recursive>
 8007880:	bd10      	pop	{r4, pc}
 8007882:	bf00      	nop
 8007884:	08007a91 	.word	0x08007a91
 8007888:	08007ab3 	.word	0x08007ab3
 800788c:	08007aeb 	.word	0x08007aeb
 8007890:	08007b0f 	.word	0x08007b0f
 8007894:	240042a8 	.word	0x240042a8

08007898 <stdio_exit_handler>:
 8007898:	4a02      	ldr	r2, [pc, #8]	@ (80078a4 <stdio_exit_handler+0xc>)
 800789a:	4903      	ldr	r1, [pc, #12]	@ (80078a8 <stdio_exit_handler+0x10>)
 800789c:	4803      	ldr	r0, [pc, #12]	@ (80078ac <stdio_exit_handler+0x14>)
 800789e:	f000 b869 	b.w	8007974 <_fwalk_sglue>
 80078a2:	bf00      	nop
 80078a4:	24000010 	.word	0x24000010
 80078a8:	0800958d 	.word	0x0800958d
 80078ac:	24000020 	.word	0x24000020

080078b0 <cleanup_stdio>:
 80078b0:	6841      	ldr	r1, [r0, #4]
 80078b2:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <cleanup_stdio+0x34>)
 80078b4:	4299      	cmp	r1, r3
 80078b6:	b510      	push	{r4, lr}
 80078b8:	4604      	mov	r4, r0
 80078ba:	d001      	beq.n	80078c0 <cleanup_stdio+0x10>
 80078bc:	f001 fe66 	bl	800958c <_fflush_r>
 80078c0:	68a1      	ldr	r1, [r4, #8]
 80078c2:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <cleanup_stdio+0x38>)
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <cleanup_stdio+0x1e>
 80078c8:	4620      	mov	r0, r4
 80078ca:	f001 fe5f 	bl	800958c <_fflush_r>
 80078ce:	68e1      	ldr	r1, [r4, #12]
 80078d0:	4b06      	ldr	r3, [pc, #24]	@ (80078ec <cleanup_stdio+0x3c>)
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d004      	beq.n	80078e0 <cleanup_stdio+0x30>
 80078d6:	4620      	mov	r0, r4
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f001 be56 	b.w	800958c <_fflush_r>
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	bf00      	nop
 80078e4:	240042a8 	.word	0x240042a8
 80078e8:	24004310 	.word	0x24004310
 80078ec:	24004378 	.word	0x24004378

080078f0 <global_stdio_init.part.0>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <global_stdio_init.part.0+0x30>)
 80078f4:	4c0b      	ldr	r4, [pc, #44]	@ (8007924 <global_stdio_init.part.0+0x34>)
 80078f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007928 <global_stdio_init.part.0+0x38>)
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	4620      	mov	r0, r4
 80078fc:	2200      	movs	r2, #0
 80078fe:	2104      	movs	r1, #4
 8007900:	f7ff ff94 	bl	800782c <std>
 8007904:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007908:	2201      	movs	r2, #1
 800790a:	2109      	movs	r1, #9
 800790c:	f7ff ff8e 	bl	800782c <std>
 8007910:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007914:	2202      	movs	r2, #2
 8007916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791a:	2112      	movs	r1, #18
 800791c:	f7ff bf86 	b.w	800782c <std>
 8007920:	240043e0 	.word	0x240043e0
 8007924:	240042a8 	.word	0x240042a8
 8007928:	08007899 	.word	0x08007899

0800792c <__sfp_lock_acquire>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__sfp_lock_acquire+0x8>)
 800792e:	f000 ba04 	b.w	8007d3a <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	240043e9 	.word	0x240043e9

08007938 <__sfp_lock_release>:
 8007938:	4801      	ldr	r0, [pc, #4]	@ (8007940 <__sfp_lock_release+0x8>)
 800793a:	f000 b9ff 	b.w	8007d3c <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	240043e9 	.word	0x240043e9

08007944 <__sinit>:
 8007944:	b510      	push	{r4, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	f7ff fff0 	bl	800792c <__sfp_lock_acquire>
 800794c:	6a23      	ldr	r3, [r4, #32]
 800794e:	b11b      	cbz	r3, 8007958 <__sinit+0x14>
 8007950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007954:	f7ff bff0 	b.w	8007938 <__sfp_lock_release>
 8007958:	4b04      	ldr	r3, [pc, #16]	@ (800796c <__sinit+0x28>)
 800795a:	6223      	str	r3, [r4, #32]
 800795c:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <__sinit+0x2c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f5      	bne.n	8007950 <__sinit+0xc>
 8007964:	f7ff ffc4 	bl	80078f0 <global_stdio_init.part.0>
 8007968:	e7f2      	b.n	8007950 <__sinit+0xc>
 800796a:	bf00      	nop
 800796c:	080078b1 	.word	0x080078b1
 8007970:	240043e0 	.word	0x240043e0

08007974 <_fwalk_sglue>:
 8007974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007978:	4607      	mov	r7, r0
 800797a:	4688      	mov	r8, r1
 800797c:	4614      	mov	r4, r2
 800797e:	2600      	movs	r6, #0
 8007980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007984:	f1b9 0901 	subs.w	r9, r9, #1
 8007988:	d505      	bpl.n	8007996 <_fwalk_sglue+0x22>
 800798a:	6824      	ldr	r4, [r4, #0]
 800798c:	2c00      	cmp	r4, #0
 800798e:	d1f7      	bne.n	8007980 <_fwalk_sglue+0xc>
 8007990:	4630      	mov	r0, r6
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d907      	bls.n	80079ac <_fwalk_sglue+0x38>
 800799c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079a0:	3301      	adds	r3, #1
 80079a2:	d003      	beq.n	80079ac <_fwalk_sglue+0x38>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4638      	mov	r0, r7
 80079a8:	47c0      	blx	r8
 80079aa:	4306      	orrs	r6, r0
 80079ac:	3568      	adds	r5, #104	@ 0x68
 80079ae:	e7e9      	b.n	8007984 <_fwalk_sglue+0x10>

080079b0 <iprintf>:
 80079b0:	b40f      	push	{r0, r1, r2, r3}
 80079b2:	b507      	push	{r0, r1, r2, lr}
 80079b4:	4906      	ldr	r1, [pc, #24]	@ (80079d0 <iprintf+0x20>)
 80079b6:	ab04      	add	r3, sp, #16
 80079b8:	6808      	ldr	r0, [r1, #0]
 80079ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80079be:	6881      	ldr	r1, [r0, #8]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	f001 fc47 	bl	8009254 <_vfiprintf_r>
 80079c6:	b003      	add	sp, #12
 80079c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079cc:	b004      	add	sp, #16
 80079ce:	4770      	bx	lr
 80079d0:	2400001c 	.word	0x2400001c

080079d4 <_puts_r>:
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	6884      	ldr	r4, [r0, #8]
 80079da:	4605      	mov	r5, r0
 80079dc:	460e      	mov	r6, r1
 80079de:	b90b      	cbnz	r3, 80079e4 <_puts_r+0x10>
 80079e0:	f7ff ffb0 	bl	8007944 <__sinit>
 80079e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079e6:	07db      	lsls	r3, r3, #31
 80079e8:	d405      	bmi.n	80079f6 <_puts_r+0x22>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	0598      	lsls	r0, r3, #22
 80079ee:	d402      	bmi.n	80079f6 <_puts_r+0x22>
 80079f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079f2:	f000 f9a2 	bl	8007d3a <__retarget_lock_acquire_recursive>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	0719      	lsls	r1, r3, #28
 80079fa:	d502      	bpl.n	8007a02 <_puts_r+0x2e>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d135      	bne.n	8007a6e <_puts_r+0x9a>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f8c5 	bl	8007b94 <__swsetup_r>
 8007a0a:	b380      	cbz	r0, 8007a6e <_puts_r+0x9a>
 8007a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a12:	07da      	lsls	r2, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_puts_r+0x4e>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	059b      	lsls	r3, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_puts_r+0x4e>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1e:	f000 f98d 	bl	8007d3c <__retarget_lock_release_recursive>
 8007a22:	4628      	mov	r0, r5
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da04      	bge.n	8007a34 <_puts_r+0x60>
 8007a2a:	69a2      	ldr	r2, [r4, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	dc17      	bgt.n	8007a60 <_puts_r+0x8c>
 8007a30:	290a      	cmp	r1, #10
 8007a32:	d015      	beq.n	8007a60 <_puts_r+0x8c>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	6022      	str	r2, [r4, #0]
 8007a3a:	7019      	strb	r1, [r3, #0]
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d1ed      	bne.n	8007a26 <_puts_r+0x52>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da11      	bge.n	8007a72 <_puts_r+0x9e>
 8007a4e:	4622      	mov	r2, r4
 8007a50:	210a      	movs	r1, #10
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f85f 	bl	8007b16 <__swbuf_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d0d7      	beq.n	8007a0c <_puts_r+0x38>
 8007a5c:	250a      	movs	r5, #10
 8007a5e:	e7d7      	b.n	8007a10 <_puts_r+0x3c>
 8007a60:	4622      	mov	r2, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f857 	bl	8007b16 <__swbuf_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1e7      	bne.n	8007a3c <_puts_r+0x68>
 8007a6c:	e7ce      	b.n	8007a0c <_puts_r+0x38>
 8007a6e:	3e01      	subs	r6, #1
 8007a70:	e7e4      	b.n	8007a3c <_puts_r+0x68>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	220a      	movs	r2, #10
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e7ee      	b.n	8007a5c <_puts_r+0x88>
	...

08007a80 <puts>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <puts+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f7ff bfa5 	b.w	80079d4 <_puts_r>
 8007a8a:	bf00      	nop
 8007a8c:	2400001c 	.word	0x2400001c

08007a90 <__sread>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	460c      	mov	r4, r1
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	f000 f900 	bl	8007c9c <_read_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	bfab      	itete	ge
 8007aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa4:	181b      	addge	r3, r3, r0
 8007aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aaa:	bfac      	ite	ge
 8007aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aae:	81a3      	strhlt	r3, [r4, #12]
 8007ab0:	bd10      	pop	{r4, pc}

08007ab2 <__swrite>:
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	05db      	lsls	r3, r3, #23
 8007abc:	4605      	mov	r5, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	d505      	bpl.n	8007ad0 <__swrite+0x1e>
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	2302      	movs	r3, #2
 8007aca:	2200      	movs	r2, #0
 8007acc:	f000 f8d4 	bl	8007c78 <_lseek_r>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	4632      	mov	r2, r6
 8007ade:	463b      	mov	r3, r7
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	f000 b8eb 	b.w	8007cc0 <_write_r>

08007aea <__sseek>:
 8007aea:	b510      	push	{r4, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	f000 f8c1 	bl	8007c78 <_lseek_r>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	bf15      	itete	ne
 8007afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b06:	81a3      	strheq	r3, [r4, #12]
 8007b08:	bf18      	it	ne
 8007b0a:	81a3      	strhne	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__sclose>:
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 b8a1 	b.w	8007c58 <_close_r>

08007b16 <__swbuf_r>:
 8007b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b18:	460e      	mov	r6, r1
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	b118      	cbz	r0, 8007b28 <__swbuf_r+0x12>
 8007b20:	6a03      	ldr	r3, [r0, #32]
 8007b22:	b90b      	cbnz	r3, 8007b28 <__swbuf_r+0x12>
 8007b24:	f7ff ff0e 	bl	8007944 <__sinit>
 8007b28:	69a3      	ldr	r3, [r4, #24]
 8007b2a:	60a3      	str	r3, [r4, #8]
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	071a      	lsls	r2, r3, #28
 8007b30:	d501      	bpl.n	8007b36 <__swbuf_r+0x20>
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	b943      	cbnz	r3, 8007b48 <__swbuf_r+0x32>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f82b 	bl	8007b94 <__swsetup_r>
 8007b3e:	b118      	cbz	r0, 8007b48 <__swbuf_r+0x32>
 8007b40:	f04f 37ff 	mov.w	r7, #4294967295
 8007b44:	4638      	mov	r0, r7
 8007b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	6922      	ldr	r2, [r4, #16]
 8007b4c:	1a98      	subs	r0, r3, r2
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	b2f6      	uxtb	r6, r6
 8007b52:	4283      	cmp	r3, r0
 8007b54:	4637      	mov	r7, r6
 8007b56:	dc05      	bgt.n	8007b64 <__swbuf_r+0x4e>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f001 fd16 	bl	800958c <_fflush_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d1ed      	bne.n	8007b40 <__swbuf_r+0x2a>
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	701e      	strb	r6, [r3, #0]
 8007b72:	6962      	ldr	r2, [r4, #20]
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d004      	beq.n	8007b84 <__swbuf_r+0x6e>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	07db      	lsls	r3, r3, #31
 8007b7e:	d5e1      	bpl.n	8007b44 <__swbuf_r+0x2e>
 8007b80:	2e0a      	cmp	r6, #10
 8007b82:	d1df      	bne.n	8007b44 <__swbuf_r+0x2e>
 8007b84:	4621      	mov	r1, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f001 fd00 	bl	800958c <_fflush_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0d9      	beq.n	8007b44 <__swbuf_r+0x2e>
 8007b90:	e7d6      	b.n	8007b40 <__swbuf_r+0x2a>
	...

08007b94 <__swsetup_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4b29      	ldr	r3, [pc, #164]	@ (8007c3c <__swsetup_r+0xa8>)
 8007b98:	4605      	mov	r5, r0
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	b118      	cbz	r0, 8007ba8 <__swsetup_r+0x14>
 8007ba0:	6a03      	ldr	r3, [r0, #32]
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <__swsetup_r+0x14>
 8007ba4:	f7ff fece 	bl	8007944 <__sinit>
 8007ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bac:	0719      	lsls	r1, r3, #28
 8007bae:	d422      	bmi.n	8007bf6 <__swsetup_r+0x62>
 8007bb0:	06da      	lsls	r2, r3, #27
 8007bb2:	d407      	bmi.n	8007bc4 <__swsetup_r+0x30>
 8007bb4:	2209      	movs	r2, #9
 8007bb6:	602a      	str	r2, [r5, #0]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	e033      	b.n	8007c2c <__swsetup_r+0x98>
 8007bc4:	0758      	lsls	r0, r3, #29
 8007bc6:	d512      	bpl.n	8007bee <__swsetup_r+0x5a>
 8007bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bca:	b141      	cbz	r1, 8007bde <__swsetup_r+0x4a>
 8007bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <__swsetup_r+0x46>
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 fe99 	bl	800890c <_free_r>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	2300      	movs	r3, #0
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f043 0308 	orr.w	r3, r3, #8
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	b94b      	cbnz	r3, 8007c0e <__swsetup_r+0x7a>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c04:	d003      	beq.n	8007c0e <__swsetup_r+0x7a>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f001 fd0d 	bl	8009628 <__smakebuf_r>
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	f013 0201 	ands.w	r2, r3, #1
 8007c16:	d00a      	beq.n	8007c2e <__swsetup_r+0x9a>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	60a2      	str	r2, [r4, #8]
 8007c1c:	6962      	ldr	r2, [r4, #20]
 8007c1e:	4252      	negs	r2, r2
 8007c20:	61a2      	str	r2, [r4, #24]
 8007c22:	6922      	ldr	r2, [r4, #16]
 8007c24:	b942      	cbnz	r2, 8007c38 <__swsetup_r+0xa4>
 8007c26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c2a:	d1c5      	bne.n	8007bb8 <__swsetup_r+0x24>
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	0799      	lsls	r1, r3, #30
 8007c30:	bf58      	it	pl
 8007c32:	6962      	ldrpl	r2, [r4, #20]
 8007c34:	60a2      	str	r2, [r4, #8]
 8007c36:	e7f4      	b.n	8007c22 <__swsetup_r+0x8e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e7f7      	b.n	8007c2c <__swsetup_r+0x98>
 8007c3c:	2400001c 	.word	0x2400001c

08007c40 <memset>:
 8007c40:	4402      	add	r2, r0
 8007c42:	4603      	mov	r3, r0
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d100      	bne.n	8007c4a <memset+0xa>
 8007c48:	4770      	bx	lr
 8007c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4e:	e7f9      	b.n	8007c44 <memset+0x4>

08007c50 <_localeconv_r>:
 8007c50:	4800      	ldr	r0, [pc, #0]	@ (8007c54 <_localeconv_r+0x4>)
 8007c52:	4770      	bx	lr
 8007c54:	2400015c 	.word	0x2400015c

08007c58 <_close_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d06      	ldr	r5, [pc, #24]	@ (8007c74 <_close_r+0x1c>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	f7f9 fa24 	bl	80010b0 <_close>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_close_r+0x1a>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_close_r+0x1a>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	240043e4 	.word	0x240043e4

08007c78 <_lseek_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d07      	ldr	r5, [pc, #28]	@ (8007c98 <_lseek_r+0x20>)
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4611      	mov	r1, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7f9 fa39 	bl	80010fe <_lseek>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_lseek_r+0x1e>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_lseek_r+0x1e>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	240043e4 	.word	0x240043e4

08007c9c <_read_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	@ (8007cbc <_read_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7f9 f9c7 	bl	800103e <_read>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_read_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_read_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	240043e4 	.word	0x240043e4

08007cc0 <_write_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	@ (8007ce0 <_write_r+0x20>)
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	4611      	mov	r1, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7f9 f9d2 	bl	8001078 <_write>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_write_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_write_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	240043e4 	.word	0x240043e4

08007ce4 <__errno>:
 8007ce4:	4b01      	ldr	r3, [pc, #4]	@ (8007cec <__errno+0x8>)
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	2400001c 	.word	0x2400001c

08007cf0 <__libc_init_array>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8007d28 <__libc_init_array+0x38>)
 8007cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8007d2c <__libc_init_array+0x3c>)
 8007cf6:	1b64      	subs	r4, r4, r5
 8007cf8:	10a4      	asrs	r4, r4, #2
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	42a6      	cmp	r6, r4
 8007cfe:	d109      	bne.n	8007d14 <__libc_init_array+0x24>
 8007d00:	4d0b      	ldr	r5, [pc, #44]	@ (8007d30 <__libc_init_array+0x40>)
 8007d02:	4c0c      	ldr	r4, [pc, #48]	@ (8007d34 <__libc_init_array+0x44>)
 8007d04:	f001 fdbc 	bl	8009880 <_init>
 8007d08:	1b64      	subs	r4, r4, r5
 8007d0a:	10a4      	asrs	r4, r4, #2
 8007d0c:	2600      	movs	r6, #0
 8007d0e:	42a6      	cmp	r6, r4
 8007d10:	d105      	bne.n	8007d1e <__libc_init_array+0x2e>
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d18:	4798      	blx	r3
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	e7ee      	b.n	8007cfc <__libc_init_array+0xc>
 8007d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d22:	4798      	blx	r3
 8007d24:	3601      	adds	r6, #1
 8007d26:	e7f2      	b.n	8007d0e <__libc_init_array+0x1e>
 8007d28:	08009ca4 	.word	0x08009ca4
 8007d2c:	08009ca4 	.word	0x08009ca4
 8007d30:	08009ca4 	.word	0x08009ca4
 8007d34:	08009ca8 	.word	0x08009ca8

08007d38 <__retarget_lock_init_recursive>:
 8007d38:	4770      	bx	lr

08007d3a <__retarget_lock_acquire_recursive>:
 8007d3a:	4770      	bx	lr

08007d3c <__retarget_lock_release_recursive>:
 8007d3c:	4770      	bx	lr

08007d3e <quorem>:
 8007d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d42:	6903      	ldr	r3, [r0, #16]
 8007d44:	690c      	ldr	r4, [r1, #16]
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	4607      	mov	r7, r0
 8007d4a:	db7e      	blt.n	8007e4a <quorem+0x10c>
 8007d4c:	3c01      	subs	r4, #1
 8007d4e:	f101 0814 	add.w	r8, r1, #20
 8007d52:	00a3      	lsls	r3, r4, #2
 8007d54:	f100 0514 	add.w	r5, r0, #20
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d70:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d74:	d32e      	bcc.n	8007dd4 <quorem+0x96>
 8007d76:	f04f 0a00 	mov.w	sl, #0
 8007d7a:	46c4      	mov	ip, r8
 8007d7c:	46ae      	mov	lr, r5
 8007d7e:	46d3      	mov	fp, sl
 8007d80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d84:	b298      	uxth	r0, r3
 8007d86:	fb06 a000 	mla	r0, r6, r0, sl
 8007d8a:	0c02      	lsrs	r2, r0, #16
 8007d8c:	0c1b      	lsrs	r3, r3, #16
 8007d8e:	fb06 2303 	mla	r3, r6, r3, r2
 8007d92:	f8de 2000 	ldr.w	r2, [lr]
 8007d96:	b280      	uxth	r0, r0
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	1a12      	subs	r2, r2, r0
 8007d9c:	445a      	add	r2, fp
 8007d9e:	f8de 0000 	ldr.w	r0, [lr]
 8007da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007dac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007db0:	b292      	uxth	r2, r2
 8007db2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007db6:	45e1      	cmp	r9, ip
 8007db8:	f84e 2b04 	str.w	r2, [lr], #4
 8007dbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007dc0:	d2de      	bcs.n	8007d80 <quorem+0x42>
 8007dc2:	9b00      	ldr	r3, [sp, #0]
 8007dc4:	58eb      	ldr	r3, [r5, r3]
 8007dc6:	b92b      	cbnz	r3, 8007dd4 <quorem+0x96>
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	429d      	cmp	r5, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	d32f      	bcc.n	8007e32 <quorem+0xf4>
 8007dd2:	613c      	str	r4, [r7, #16]
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	f001 f90b 	bl	8008ff0 <__mcmp>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	db25      	blt.n	8007e2a <quorem+0xec>
 8007dde:	4629      	mov	r1, r5
 8007de0:	2000      	movs	r0, #0
 8007de2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007de6:	f8d1 c000 	ldr.w	ip, [r1]
 8007dea:	fa1f fe82 	uxth.w	lr, r2
 8007dee:	fa1f f38c 	uxth.w	r3, ip
 8007df2:	eba3 030e 	sub.w	r3, r3, lr
 8007df6:	4403      	add	r3, r0
 8007df8:	0c12      	lsrs	r2, r2, #16
 8007dfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007dfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e08:	45c1      	cmp	r9, r8
 8007e0a:	f841 3b04 	str.w	r3, [r1], #4
 8007e0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e12:	d2e6      	bcs.n	8007de2 <quorem+0xa4>
 8007e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1c:	b922      	cbnz	r2, 8007e28 <quorem+0xea>
 8007e1e:	3b04      	subs	r3, #4
 8007e20:	429d      	cmp	r5, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	d30b      	bcc.n	8007e3e <quorem+0x100>
 8007e26:	613c      	str	r4, [r7, #16]
 8007e28:	3601      	adds	r6, #1
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	b003      	add	sp, #12
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	6812      	ldr	r2, [r2, #0]
 8007e34:	3b04      	subs	r3, #4
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	d1cb      	bne.n	8007dd2 <quorem+0x94>
 8007e3a:	3c01      	subs	r4, #1
 8007e3c:	e7c6      	b.n	8007dcc <quorem+0x8e>
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	3b04      	subs	r3, #4
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	d1ef      	bne.n	8007e26 <quorem+0xe8>
 8007e46:	3c01      	subs	r4, #1
 8007e48:	e7ea      	b.n	8007e20 <quorem+0xe2>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e7ee      	b.n	8007e2c <quorem+0xee>
	...

08007e50 <_dtoa_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	ed2d 8b02 	vpush	{d8}
 8007e58:	69c7      	ldr	r7, [r0, #28]
 8007e5a:	b091      	sub	sp, #68	@ 0x44
 8007e5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e60:	ec55 4b10 	vmov	r4, r5, d0
 8007e64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007e66:	9107      	str	r1, [sp, #28]
 8007e68:	4681      	mov	r9, r0
 8007e6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e6e:	b97f      	cbnz	r7, 8007e90 <_dtoa_r+0x40>
 8007e70:	2010      	movs	r0, #16
 8007e72:	f000 fd95 	bl	80089a0 <malloc>
 8007e76:	4602      	mov	r2, r0
 8007e78:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e7c:	b920      	cbnz	r0, 8007e88 <_dtoa_r+0x38>
 8007e7e:	4ba0      	ldr	r3, [pc, #640]	@ (8008100 <_dtoa_r+0x2b0>)
 8007e80:	21ef      	movs	r1, #239	@ 0xef
 8007e82:	48a0      	ldr	r0, [pc, #640]	@ (8008104 <_dtoa_r+0x2b4>)
 8007e84:	f001 fc4c 	bl	8009720 <__assert_func>
 8007e88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e8c:	6007      	str	r7, [r0, #0]
 8007e8e:	60c7      	str	r7, [r0, #12]
 8007e90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e94:	6819      	ldr	r1, [r3, #0]
 8007e96:	b159      	cbz	r1, 8007eb0 <_dtoa_r+0x60>
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	604a      	str	r2, [r1, #4]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4093      	lsls	r3, r2
 8007ea0:	608b      	str	r3, [r1, #8]
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	f000 fe72 	bl	8008b8c <_Bfree>
 8007ea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	1e2b      	subs	r3, r5, #0
 8007eb2:	bfbb      	ittet	lt
 8007eb4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eb8:	9303      	strlt	r3, [sp, #12]
 8007eba:	2300      	movge	r3, #0
 8007ebc:	2201      	movlt	r2, #1
 8007ebe:	bfac      	ite	ge
 8007ec0:	6033      	strge	r3, [r6, #0]
 8007ec2:	6032      	strlt	r2, [r6, #0]
 8007ec4:	4b90      	ldr	r3, [pc, #576]	@ (8008108 <_dtoa_r+0x2b8>)
 8007ec6:	9e03      	ldr	r6, [sp, #12]
 8007ec8:	43b3      	bics	r3, r6
 8007eca:	d110      	bne.n	8007eee <_dtoa_r+0x9e>
 8007ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ece:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007ed8:	4323      	orrs	r3, r4
 8007eda:	f000 84e6 	beq.w	80088aa <_dtoa_r+0xa5a>
 8007ede:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ee0:	4f8a      	ldr	r7, [pc, #552]	@ (800810c <_dtoa_r+0x2bc>)
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 84e8 	beq.w	80088b8 <_dtoa_r+0xa68>
 8007ee8:	1cfb      	adds	r3, r7, #3
 8007eea:	f000 bce3 	b.w	80088b4 <_dtoa_r+0xa64>
 8007eee:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007ef2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efa:	d10a      	bne.n	8007f12 <_dtoa_r+0xc2>
 8007efc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007efe:	2301      	movs	r3, #1
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f04:	b113      	cbz	r3, 8007f0c <_dtoa_r+0xbc>
 8007f06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007f08:	4b81      	ldr	r3, [pc, #516]	@ (8008110 <_dtoa_r+0x2c0>)
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	4f81      	ldr	r7, [pc, #516]	@ (8008114 <_dtoa_r+0x2c4>)
 8007f0e:	f000 bcd3 	b.w	80088b8 <_dtoa_r+0xa68>
 8007f12:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f14:	a90f      	add	r1, sp, #60	@ 0x3c
 8007f16:	4648      	mov	r0, r9
 8007f18:	eeb0 0b48 	vmov.f64	d0, d8
 8007f1c:	f001 f918 	bl	8009150 <__d2b>
 8007f20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f26:	9001      	str	r0, [sp, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d045      	beq.n	8007fb8 <_dtoa_r+0x168>
 8007f2c:	eeb0 7b48 	vmov.f64	d7, d8
 8007f30:	ee18 1a90 	vmov	r1, s17
 8007f34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007f38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007f3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007f40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007f44:	2500      	movs	r5, #0
 8007f46:	ee07 1a90 	vmov	s15, r1
 8007f4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007f4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80080e8 <_dtoa_r+0x298>
 8007f52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007f56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80080f0 <_dtoa_r+0x2a0>
 8007f5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007f5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80080f8 <_dtoa_r+0x2a8>
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007f6a:	eeb0 7b46 	vmov.f64	d7, d6
 8007f6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007f72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007f76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7e:	ee16 8a90 	vmov	r8, s13
 8007f82:	d508      	bpl.n	8007f96 <_dtoa_r+0x146>
 8007f84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007f88:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f90:	bf18      	it	ne
 8007f92:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007f96:	f1b8 0f16 	cmp.w	r8, #22
 8007f9a:	d82b      	bhi.n	8007ff4 <_dtoa_r+0x1a4>
 8007f9c:	495e      	ldr	r1, [pc, #376]	@ (8008118 <_dtoa_r+0x2c8>)
 8007f9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007fa2:	ed91 7b00 	vldr	d7, [r1]
 8007fa6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	d501      	bpl.n	8007fb4 <_dtoa_r+0x164>
 8007fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	e01e      	b.n	8007ff6 <_dtoa_r+0x1a6>
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007fc0:	2920      	cmp	r1, #32
 8007fc2:	bfc1      	itttt	gt
 8007fc4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007fc8:	408e      	lslgt	r6, r1
 8007fca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007fce:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007fd2:	bfd6      	itet	le
 8007fd4:	f1c1 0120 	rsble	r1, r1, #32
 8007fd8:	4331      	orrgt	r1, r6
 8007fda:	fa04 f101 	lslle.w	r1, r4, r1
 8007fde:	ee07 1a90 	vmov	s15, r1
 8007fe2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	ee17 1a90 	vmov	r1, s15
 8007fec:	2501      	movs	r5, #1
 8007fee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007ff2:	e7a8      	b.n	8007f46 <_dtoa_r+0xf6>
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	1e53      	subs	r3, r2, #1
 8007ffa:	9306      	str	r3, [sp, #24]
 8007ffc:	bf45      	ittet	mi
 8007ffe:	f1c2 0301 	rsbmi	r3, r2, #1
 8008002:	9304      	strmi	r3, [sp, #16]
 8008004:	2300      	movpl	r3, #0
 8008006:	2300      	movmi	r3, #0
 8008008:	bf4c      	ite	mi
 800800a:	9306      	strmi	r3, [sp, #24]
 800800c:	9304      	strpl	r3, [sp, #16]
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	910c      	str	r1, [sp, #48]	@ 0x30
 8008014:	db18      	blt.n	8008048 <_dtoa_r+0x1f8>
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800801c:	4443      	add	r3, r8
 800801e:	9306      	str	r3, [sp, #24]
 8008020:	2300      	movs	r3, #0
 8008022:	9a07      	ldr	r2, [sp, #28]
 8008024:	2a09      	cmp	r2, #9
 8008026:	d845      	bhi.n	80080b4 <_dtoa_r+0x264>
 8008028:	2a05      	cmp	r2, #5
 800802a:	bfc4      	itt	gt
 800802c:	3a04      	subgt	r2, #4
 800802e:	9207      	strgt	r2, [sp, #28]
 8008030:	9a07      	ldr	r2, [sp, #28]
 8008032:	f1a2 0202 	sub.w	r2, r2, #2
 8008036:	bfcc      	ite	gt
 8008038:	2400      	movgt	r4, #0
 800803a:	2401      	movle	r4, #1
 800803c:	2a03      	cmp	r2, #3
 800803e:	d844      	bhi.n	80080ca <_dtoa_r+0x27a>
 8008040:	e8df f002 	tbb	[pc, r2]
 8008044:	0b173634 	.word	0x0b173634
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	2200      	movs	r2, #0
 800804c:	eba3 0308 	sub.w	r3, r3, r8
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	920a      	str	r2, [sp, #40]	@ 0x28
 8008054:	f1c8 0300 	rsb	r3, r8, #0
 8008058:	e7e3      	b.n	8008022 <_dtoa_r+0x1d2>
 800805a:	2201      	movs	r2, #1
 800805c:	9208      	str	r2, [sp, #32]
 800805e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008060:	eb08 0b02 	add.w	fp, r8, r2
 8008064:	f10b 0a01 	add.w	sl, fp, #1
 8008068:	4652      	mov	r2, sl
 800806a:	2a01      	cmp	r2, #1
 800806c:	bfb8      	it	lt
 800806e:	2201      	movlt	r2, #1
 8008070:	e006      	b.n	8008080 <_dtoa_r+0x230>
 8008072:	2201      	movs	r2, #1
 8008074:	9208      	str	r2, [sp, #32]
 8008076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008078:	2a00      	cmp	r2, #0
 800807a:	dd29      	ble.n	80080d0 <_dtoa_r+0x280>
 800807c:	4693      	mov	fp, r2
 800807e:	4692      	mov	sl, r2
 8008080:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008084:	2100      	movs	r1, #0
 8008086:	2004      	movs	r0, #4
 8008088:	f100 0614 	add.w	r6, r0, #20
 800808c:	4296      	cmp	r6, r2
 800808e:	d926      	bls.n	80080de <_dtoa_r+0x28e>
 8008090:	6079      	str	r1, [r7, #4]
 8008092:	4648      	mov	r0, r9
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	f000 fd39 	bl	8008b0c <_Balloc>
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	4607      	mov	r7, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	d13e      	bne.n	8008120 <_dtoa_r+0x2d0>
 80080a2:	4b1e      	ldr	r3, [pc, #120]	@ (800811c <_dtoa_r+0x2cc>)
 80080a4:	4602      	mov	r2, r0
 80080a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80080aa:	e6ea      	b.n	8007e82 <_dtoa_r+0x32>
 80080ac:	2200      	movs	r2, #0
 80080ae:	e7e1      	b.n	8008074 <_dtoa_r+0x224>
 80080b0:	2200      	movs	r2, #0
 80080b2:	e7d3      	b.n	800805c <_dtoa_r+0x20c>
 80080b4:	2401      	movs	r4, #1
 80080b6:	2200      	movs	r2, #0
 80080b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80080bc:	f04f 3bff 	mov.w	fp, #4294967295
 80080c0:	2100      	movs	r1, #0
 80080c2:	46da      	mov	sl, fp
 80080c4:	2212      	movs	r2, #18
 80080c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80080c8:	e7da      	b.n	8008080 <_dtoa_r+0x230>
 80080ca:	2201      	movs	r2, #1
 80080cc:	9208      	str	r2, [sp, #32]
 80080ce:	e7f5      	b.n	80080bc <_dtoa_r+0x26c>
 80080d0:	f04f 0b01 	mov.w	fp, #1
 80080d4:	46da      	mov	sl, fp
 80080d6:	465a      	mov	r2, fp
 80080d8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80080dc:	e7d0      	b.n	8008080 <_dtoa_r+0x230>
 80080de:	3101      	adds	r1, #1
 80080e0:	0040      	lsls	r0, r0, #1
 80080e2:	e7d1      	b.n	8008088 <_dtoa_r+0x238>
 80080e4:	f3af 8000 	nop.w
 80080e8:	636f4361 	.word	0x636f4361
 80080ec:	3fd287a7 	.word	0x3fd287a7
 80080f0:	8b60c8b3 	.word	0x8b60c8b3
 80080f4:	3fc68a28 	.word	0x3fc68a28
 80080f8:	509f79fb 	.word	0x509f79fb
 80080fc:	3fd34413 	.word	0x3fd34413
 8008100:	08009969 	.word	0x08009969
 8008104:	08009980 	.word	0x08009980
 8008108:	7ff00000 	.word	0x7ff00000
 800810c:	08009965 	.word	0x08009965
 8008110:	08009939 	.word	0x08009939
 8008114:	08009938 	.word	0x08009938
 8008118:	08009ad0 	.word	0x08009ad0
 800811c:	080099d8 	.word	0x080099d8
 8008120:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008124:	f1ba 0f0e 	cmp.w	sl, #14
 8008128:	6010      	str	r0, [r2, #0]
 800812a:	d86e      	bhi.n	800820a <_dtoa_r+0x3ba>
 800812c:	2c00      	cmp	r4, #0
 800812e:	d06c      	beq.n	800820a <_dtoa_r+0x3ba>
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	f340 80b4 	ble.w	80082a0 <_dtoa_r+0x450>
 8008138:	4ac8      	ldr	r2, [pc, #800]	@ (800845c <_dtoa_r+0x60c>)
 800813a:	f008 010f 	and.w	r1, r8, #15
 800813e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008142:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008146:	ed92 7b00 	vldr	d7, [r2]
 800814a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800814e:	f000 809b 	beq.w	8008288 <_dtoa_r+0x438>
 8008152:	4ac3      	ldr	r2, [pc, #780]	@ (8008460 <_dtoa_r+0x610>)
 8008154:	ed92 6b08 	vldr	d6, [r2, #32]
 8008158:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800815c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008160:	f001 010f 	and.w	r1, r1, #15
 8008164:	2203      	movs	r2, #3
 8008166:	48be      	ldr	r0, [pc, #760]	@ (8008460 <_dtoa_r+0x610>)
 8008168:	2900      	cmp	r1, #0
 800816a:	f040 808f 	bne.w	800828c <_dtoa_r+0x43c>
 800816e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008172:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008176:	ed8d 7b02 	vstr	d7, [sp, #8]
 800817a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800817c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008180:	2900      	cmp	r1, #0
 8008182:	f000 80b3 	beq.w	80082ec <_dtoa_r+0x49c>
 8008186:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800818a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800818e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008192:	f140 80ab 	bpl.w	80082ec <_dtoa_r+0x49c>
 8008196:	f1ba 0f00 	cmp.w	sl, #0
 800819a:	f000 80a7 	beq.w	80082ec <_dtoa_r+0x49c>
 800819e:	f1bb 0f00 	cmp.w	fp, #0
 80081a2:	dd30      	ble.n	8008206 <_dtoa_r+0x3b6>
 80081a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80081a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081b0:	f108 31ff 	add.w	r1, r8, #4294967295
 80081b4:	9105      	str	r1, [sp, #20]
 80081b6:	3201      	adds	r2, #1
 80081b8:	465c      	mov	r4, fp
 80081ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 80081be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80081c2:	ee07 2a90 	vmov	s15, r2
 80081c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80081ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 80081ce:	ee15 2a90 	vmov	r2, s11
 80081d2:	ec51 0b15 	vmov	r0, r1, d5
 80081d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80081da:	2c00      	cmp	r4, #0
 80081dc:	f040 808a 	bne.w	80082f4 <_dtoa_r+0x4a4>
 80081e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80081e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80081e8:	ec41 0b17 	vmov	d7, r0, r1
 80081ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f4:	f300 826a 	bgt.w	80086cc <_dtoa_r+0x87c>
 80081f8:	eeb1 7b47 	vneg.f64	d7, d7
 80081fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008204:	d423      	bmi.n	800824e <_dtoa_r+0x3fe>
 8008206:	ed8d 8b02 	vstr	d8, [sp, #8]
 800820a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800820c:	2a00      	cmp	r2, #0
 800820e:	f2c0 8129 	blt.w	8008464 <_dtoa_r+0x614>
 8008212:	f1b8 0f0e 	cmp.w	r8, #14
 8008216:	f300 8125 	bgt.w	8008464 <_dtoa_r+0x614>
 800821a:	4b90      	ldr	r3, [pc, #576]	@ (800845c <_dtoa_r+0x60c>)
 800821c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008220:	ed93 6b00 	vldr	d6, [r3]
 8008224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	f280 80c8 	bge.w	80083bc <_dtoa_r+0x56c>
 800822c:	f1ba 0f00 	cmp.w	sl, #0
 8008230:	f300 80c4 	bgt.w	80083bc <_dtoa_r+0x56c>
 8008234:	d10b      	bne.n	800824e <_dtoa_r+0x3fe>
 8008236:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800823a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800823e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008242:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824a:	f2c0 823c 	blt.w	80086c6 <_dtoa_r+0x876>
 800824e:	2400      	movs	r4, #0
 8008250:	4625      	mov	r5, r4
 8008252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008254:	43db      	mvns	r3, r3
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	463e      	mov	r6, r7
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	4621      	mov	r1, r4
 8008260:	4648      	mov	r0, r9
 8008262:	f000 fc93 	bl	8008b8c <_Bfree>
 8008266:	2d00      	cmp	r5, #0
 8008268:	f000 80a2 	beq.w	80083b0 <_dtoa_r+0x560>
 800826c:	f1b8 0f00 	cmp.w	r8, #0
 8008270:	d005      	beq.n	800827e <_dtoa_r+0x42e>
 8008272:	45a8      	cmp	r8, r5
 8008274:	d003      	beq.n	800827e <_dtoa_r+0x42e>
 8008276:	4641      	mov	r1, r8
 8008278:	4648      	mov	r0, r9
 800827a:	f000 fc87 	bl	8008b8c <_Bfree>
 800827e:	4629      	mov	r1, r5
 8008280:	4648      	mov	r0, r9
 8008282:	f000 fc83 	bl	8008b8c <_Bfree>
 8008286:	e093      	b.n	80083b0 <_dtoa_r+0x560>
 8008288:	2202      	movs	r2, #2
 800828a:	e76c      	b.n	8008166 <_dtoa_r+0x316>
 800828c:	07cc      	lsls	r4, r1, #31
 800828e:	d504      	bpl.n	800829a <_dtoa_r+0x44a>
 8008290:	ed90 6b00 	vldr	d6, [r0]
 8008294:	3201      	adds	r2, #1
 8008296:	ee27 7b06 	vmul.f64	d7, d7, d6
 800829a:	1049      	asrs	r1, r1, #1
 800829c:	3008      	adds	r0, #8
 800829e:	e763      	b.n	8008168 <_dtoa_r+0x318>
 80082a0:	d022      	beq.n	80082e8 <_dtoa_r+0x498>
 80082a2:	f1c8 0100 	rsb	r1, r8, #0
 80082a6:	4a6d      	ldr	r2, [pc, #436]	@ (800845c <_dtoa_r+0x60c>)
 80082a8:	f001 000f 	and.w	r0, r1, #15
 80082ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082b0:	ed92 7b00 	vldr	d7, [r2]
 80082b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80082b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082bc:	4868      	ldr	r0, [pc, #416]	@ (8008460 <_dtoa_r+0x610>)
 80082be:	1109      	asrs	r1, r1, #4
 80082c0:	2400      	movs	r4, #0
 80082c2:	2202      	movs	r2, #2
 80082c4:	b929      	cbnz	r1, 80082d2 <_dtoa_r+0x482>
 80082c6:	2c00      	cmp	r4, #0
 80082c8:	f43f af57 	beq.w	800817a <_dtoa_r+0x32a>
 80082cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082d0:	e753      	b.n	800817a <_dtoa_r+0x32a>
 80082d2:	07ce      	lsls	r6, r1, #31
 80082d4:	d505      	bpl.n	80082e2 <_dtoa_r+0x492>
 80082d6:	ed90 6b00 	vldr	d6, [r0]
 80082da:	3201      	adds	r2, #1
 80082dc:	2401      	movs	r4, #1
 80082de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082e2:	1049      	asrs	r1, r1, #1
 80082e4:	3008      	adds	r0, #8
 80082e6:	e7ed      	b.n	80082c4 <_dtoa_r+0x474>
 80082e8:	2202      	movs	r2, #2
 80082ea:	e746      	b.n	800817a <_dtoa_r+0x32a>
 80082ec:	f8cd 8014 	str.w	r8, [sp, #20]
 80082f0:	4654      	mov	r4, sl
 80082f2:	e762      	b.n	80081ba <_dtoa_r+0x36a>
 80082f4:	4a59      	ldr	r2, [pc, #356]	@ (800845c <_dtoa_r+0x60c>)
 80082f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80082fa:	ed12 4b02 	vldr	d4, [r2, #-8]
 80082fe:	9a08      	ldr	r2, [sp, #32]
 8008300:	ec41 0b17 	vmov	d7, r0, r1
 8008304:	443c      	add	r4, r7
 8008306:	b34a      	cbz	r2, 800835c <_dtoa_r+0x50c>
 8008308:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800830c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008310:	463e      	mov	r6, r7
 8008312:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008316:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800831a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800831e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008322:	ee14 2a90 	vmov	r2, s9
 8008326:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800832a:	3230      	adds	r2, #48	@ 0x30
 800832c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008338:	f806 2b01 	strb.w	r2, [r6], #1
 800833c:	d438      	bmi.n	80083b0 <_dtoa_r+0x560>
 800833e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008342:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834a:	d46e      	bmi.n	800842a <_dtoa_r+0x5da>
 800834c:	42a6      	cmp	r6, r4
 800834e:	f43f af5a 	beq.w	8008206 <_dtoa_r+0x3b6>
 8008352:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008356:	ee26 6b03 	vmul.f64	d6, d6, d3
 800835a:	e7e0      	b.n	800831e <_dtoa_r+0x4ce>
 800835c:	4621      	mov	r1, r4
 800835e:	463e      	mov	r6, r7
 8008360:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008364:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008368:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800836c:	ee14 2a90 	vmov	r2, s9
 8008370:	3230      	adds	r2, #48	@ 0x30
 8008372:	f806 2b01 	strb.w	r2, [r6], #1
 8008376:	42a6      	cmp	r6, r4
 8008378:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800837c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008380:	d119      	bne.n	80083b6 <_dtoa_r+0x566>
 8008382:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008386:	ee37 4b05 	vadd.f64	d4, d7, d5
 800838a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800838e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008392:	dc4a      	bgt.n	800842a <_dtoa_r+0x5da>
 8008394:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008398:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	f57f af31 	bpl.w	8008206 <_dtoa_r+0x3b6>
 80083a4:	460e      	mov	r6, r1
 80083a6:	3901      	subs	r1, #1
 80083a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083ac:	2b30      	cmp	r3, #48	@ 0x30
 80083ae:	d0f9      	beq.n	80083a4 <_dtoa_r+0x554>
 80083b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80083b4:	e027      	b.n	8008406 <_dtoa_r+0x5b6>
 80083b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80083ba:	e7d5      	b.n	8008368 <_dtoa_r+0x518>
 80083bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083c0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80083c4:	463e      	mov	r6, r7
 80083c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80083ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80083ce:	ee15 3a10 	vmov	r3, s10
 80083d2:	3330      	adds	r3, #48	@ 0x30
 80083d4:	f806 3b01 	strb.w	r3, [r6], #1
 80083d8:	1bf3      	subs	r3, r6, r7
 80083da:	459a      	cmp	sl, r3
 80083dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80083e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80083e4:	d132      	bne.n	800844c <_dtoa_r+0x5fc>
 80083e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80083ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f2:	dc18      	bgt.n	8008426 <_dtoa_r+0x5d6>
 80083f4:	eeb4 7b46 	vcmp.f64	d7, d6
 80083f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fc:	d103      	bne.n	8008406 <_dtoa_r+0x5b6>
 80083fe:	ee15 3a10 	vmov	r3, s10
 8008402:	07db      	lsls	r3, r3, #31
 8008404:	d40f      	bmi.n	8008426 <_dtoa_r+0x5d6>
 8008406:	9901      	ldr	r1, [sp, #4]
 8008408:	4648      	mov	r0, r9
 800840a:	f000 fbbf 	bl	8008b8c <_Bfree>
 800840e:	2300      	movs	r3, #0
 8008410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008412:	7033      	strb	r3, [r6, #0]
 8008414:	f108 0301 	add.w	r3, r8, #1
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 824b 	beq.w	80088b8 <_dtoa_r+0xa68>
 8008422:	601e      	str	r6, [r3, #0]
 8008424:	e248      	b.n	80088b8 <_dtoa_r+0xa68>
 8008426:	f8cd 8014 	str.w	r8, [sp, #20]
 800842a:	4633      	mov	r3, r6
 800842c:	461e      	mov	r6, r3
 800842e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008432:	2a39      	cmp	r2, #57	@ 0x39
 8008434:	d106      	bne.n	8008444 <_dtoa_r+0x5f4>
 8008436:	429f      	cmp	r7, r3
 8008438:	d1f8      	bne.n	800842c <_dtoa_r+0x5dc>
 800843a:	9a05      	ldr	r2, [sp, #20]
 800843c:	3201      	adds	r2, #1
 800843e:	9205      	str	r2, [sp, #20]
 8008440:	2230      	movs	r2, #48	@ 0x30
 8008442:	703a      	strb	r2, [r7, #0]
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	3201      	adds	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	e7b1      	b.n	80083b0 <_dtoa_r+0x560>
 800844c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008450:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	d1b5      	bne.n	80083c6 <_dtoa_r+0x576>
 800845a:	e7d4      	b.n	8008406 <_dtoa_r+0x5b6>
 800845c:	08009ad0 	.word	0x08009ad0
 8008460:	08009aa8 	.word	0x08009aa8
 8008464:	9908      	ldr	r1, [sp, #32]
 8008466:	2900      	cmp	r1, #0
 8008468:	f000 80e9 	beq.w	800863e <_dtoa_r+0x7ee>
 800846c:	9907      	ldr	r1, [sp, #28]
 800846e:	2901      	cmp	r1, #1
 8008470:	f300 80cb 	bgt.w	800860a <_dtoa_r+0x7ba>
 8008474:	2d00      	cmp	r5, #0
 8008476:	f000 80c4 	beq.w	8008602 <_dtoa_r+0x7b2>
 800847a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800847e:	9e04      	ldr	r6, [sp, #16]
 8008480:	461c      	mov	r4, r3
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	4413      	add	r3, r2
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	9b06      	ldr	r3, [sp, #24]
 800848c:	2101      	movs	r1, #1
 800848e:	4413      	add	r3, r2
 8008490:	4648      	mov	r0, r9
 8008492:	9306      	str	r3, [sp, #24]
 8008494:	f000 fc2e 	bl	8008cf4 <__i2b>
 8008498:	9b05      	ldr	r3, [sp, #20]
 800849a:	4605      	mov	r5, r0
 800849c:	b166      	cbz	r6, 80084b8 <_dtoa_r+0x668>
 800849e:	9a06      	ldr	r2, [sp, #24]
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	dd09      	ble.n	80084b8 <_dtoa_r+0x668>
 80084a4:	42b2      	cmp	r2, r6
 80084a6:	9904      	ldr	r1, [sp, #16]
 80084a8:	bfa8      	it	ge
 80084aa:	4632      	movge	r2, r6
 80084ac:	1a89      	subs	r1, r1, r2
 80084ae:	9104      	str	r1, [sp, #16]
 80084b0:	9906      	ldr	r1, [sp, #24]
 80084b2:	1ab6      	subs	r6, r6, r2
 80084b4:	1a8a      	subs	r2, r1, r2
 80084b6:	9206      	str	r2, [sp, #24]
 80084b8:	b30b      	cbz	r3, 80084fe <_dtoa_r+0x6ae>
 80084ba:	9a08      	ldr	r2, [sp, #32]
 80084bc:	2a00      	cmp	r2, #0
 80084be:	f000 80c5 	beq.w	800864c <_dtoa_r+0x7fc>
 80084c2:	2c00      	cmp	r4, #0
 80084c4:	f000 80bf 	beq.w	8008646 <_dtoa_r+0x7f6>
 80084c8:	4629      	mov	r1, r5
 80084ca:	4622      	mov	r2, r4
 80084cc:	4648      	mov	r0, r9
 80084ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084d0:	f000 fcc8 	bl	8008e64 <__pow5mult>
 80084d4:	9a01      	ldr	r2, [sp, #4]
 80084d6:	4601      	mov	r1, r0
 80084d8:	4605      	mov	r5, r0
 80084da:	4648      	mov	r0, r9
 80084dc:	f000 fc20 	bl	8008d20 <__multiply>
 80084e0:	9901      	ldr	r1, [sp, #4]
 80084e2:	9005      	str	r0, [sp, #20]
 80084e4:	4648      	mov	r0, r9
 80084e6:	f000 fb51 	bl	8008b8c <_Bfree>
 80084ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ec:	1b1b      	subs	r3, r3, r4
 80084ee:	f000 80b0 	beq.w	8008652 <_dtoa_r+0x802>
 80084f2:	9905      	ldr	r1, [sp, #20]
 80084f4:	461a      	mov	r2, r3
 80084f6:	4648      	mov	r0, r9
 80084f8:	f000 fcb4 	bl	8008e64 <__pow5mult>
 80084fc:	9001      	str	r0, [sp, #4]
 80084fe:	2101      	movs	r1, #1
 8008500:	4648      	mov	r0, r9
 8008502:	f000 fbf7 	bl	8008cf4 <__i2b>
 8008506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008508:	4604      	mov	r4, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 81da 	beq.w	80088c4 <_dtoa_r+0xa74>
 8008510:	461a      	mov	r2, r3
 8008512:	4601      	mov	r1, r0
 8008514:	4648      	mov	r0, r9
 8008516:	f000 fca5 	bl	8008e64 <__pow5mult>
 800851a:	9b07      	ldr	r3, [sp, #28]
 800851c:	2b01      	cmp	r3, #1
 800851e:	4604      	mov	r4, r0
 8008520:	f300 80a0 	bgt.w	8008664 <_dtoa_r+0x814>
 8008524:	9b02      	ldr	r3, [sp, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f040 8096 	bne.w	8008658 <_dtoa_r+0x808>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008532:	2a00      	cmp	r2, #0
 8008534:	f040 8092 	bne.w	800865c <_dtoa_r+0x80c>
 8008538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800853c:	0d12      	lsrs	r2, r2, #20
 800853e:	0512      	lsls	r2, r2, #20
 8008540:	2a00      	cmp	r2, #0
 8008542:	f000 808d 	beq.w	8008660 <_dtoa_r+0x810>
 8008546:	9b04      	ldr	r3, [sp, #16]
 8008548:	3301      	adds	r3, #1
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	9b06      	ldr	r3, [sp, #24]
 800854e:	3301      	adds	r3, #1
 8008550:	9306      	str	r3, [sp, #24]
 8008552:	2301      	movs	r3, #1
 8008554:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 81b9 	beq.w	80088d0 <_dtoa_r+0xa80>
 800855e:	6922      	ldr	r2, [r4, #16]
 8008560:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008564:	6910      	ldr	r0, [r2, #16]
 8008566:	f000 fb79 	bl	8008c5c <__hi0bits>
 800856a:	f1c0 0020 	rsb	r0, r0, #32
 800856e:	9b06      	ldr	r3, [sp, #24]
 8008570:	4418      	add	r0, r3
 8008572:	f010 001f 	ands.w	r0, r0, #31
 8008576:	f000 8081 	beq.w	800867c <_dtoa_r+0x82c>
 800857a:	f1c0 0220 	rsb	r2, r0, #32
 800857e:	2a04      	cmp	r2, #4
 8008580:	dd73      	ble.n	800866a <_dtoa_r+0x81a>
 8008582:	9b04      	ldr	r3, [sp, #16]
 8008584:	f1c0 001c 	rsb	r0, r0, #28
 8008588:	4403      	add	r3, r0
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	4406      	add	r6, r0
 8008590:	4403      	add	r3, r0
 8008592:	9306      	str	r3, [sp, #24]
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dd05      	ble.n	80085a6 <_dtoa_r+0x756>
 800859a:	9901      	ldr	r1, [sp, #4]
 800859c:	461a      	mov	r2, r3
 800859e:	4648      	mov	r0, r9
 80085a0:	f000 fcba 	bl	8008f18 <__lshift>
 80085a4:	9001      	str	r0, [sp, #4]
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dd05      	ble.n	80085b8 <_dtoa_r+0x768>
 80085ac:	4621      	mov	r1, r4
 80085ae:	461a      	mov	r2, r3
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 fcb1 	bl	8008f18 <__lshift>
 80085b6:	4604      	mov	r4, r0
 80085b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d060      	beq.n	8008680 <_dtoa_r+0x830>
 80085be:	9801      	ldr	r0, [sp, #4]
 80085c0:	4621      	mov	r1, r4
 80085c2:	f000 fd15 	bl	8008ff0 <__mcmp>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	da5a      	bge.n	8008680 <_dtoa_r+0x830>
 80085ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	9901      	ldr	r1, [sp, #4]
 80085d2:	2300      	movs	r3, #0
 80085d4:	220a      	movs	r2, #10
 80085d6:	4648      	mov	r0, r9
 80085d8:	f000 fafa 	bl	8008bd0 <__multadd>
 80085dc:	9b08      	ldr	r3, [sp, #32]
 80085de:	9001      	str	r0, [sp, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8177 	beq.w	80088d4 <_dtoa_r+0xa84>
 80085e6:	4629      	mov	r1, r5
 80085e8:	2300      	movs	r3, #0
 80085ea:	220a      	movs	r2, #10
 80085ec:	4648      	mov	r0, r9
 80085ee:	f000 faef 	bl	8008bd0 <__multadd>
 80085f2:	f1bb 0f00 	cmp.w	fp, #0
 80085f6:	4605      	mov	r5, r0
 80085f8:	dc6e      	bgt.n	80086d8 <_dtoa_r+0x888>
 80085fa:	9b07      	ldr	r3, [sp, #28]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	dc48      	bgt.n	8008692 <_dtoa_r+0x842>
 8008600:	e06a      	b.n	80086d8 <_dtoa_r+0x888>
 8008602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008604:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008608:	e739      	b.n	800847e <_dtoa_r+0x62e>
 800860a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800860e:	42a3      	cmp	r3, r4
 8008610:	db07      	blt.n	8008622 <_dtoa_r+0x7d2>
 8008612:	f1ba 0f00 	cmp.w	sl, #0
 8008616:	eba3 0404 	sub.w	r4, r3, r4
 800861a:	db0b      	blt.n	8008634 <_dtoa_r+0x7e4>
 800861c:	9e04      	ldr	r6, [sp, #16]
 800861e:	4652      	mov	r2, sl
 8008620:	e72f      	b.n	8008482 <_dtoa_r+0x632>
 8008622:	1ae2      	subs	r2, r4, r3
 8008624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008626:	9e04      	ldr	r6, [sp, #16]
 8008628:	4413      	add	r3, r2
 800862a:	930a      	str	r3, [sp, #40]	@ 0x28
 800862c:	4652      	mov	r2, sl
 800862e:	4623      	mov	r3, r4
 8008630:	2400      	movs	r4, #0
 8008632:	e726      	b.n	8008482 <_dtoa_r+0x632>
 8008634:	9a04      	ldr	r2, [sp, #16]
 8008636:	eba2 060a 	sub.w	r6, r2, sl
 800863a:	2200      	movs	r2, #0
 800863c:	e721      	b.n	8008482 <_dtoa_r+0x632>
 800863e:	9e04      	ldr	r6, [sp, #16]
 8008640:	9d08      	ldr	r5, [sp, #32]
 8008642:	461c      	mov	r4, r3
 8008644:	e72a      	b.n	800849c <_dtoa_r+0x64c>
 8008646:	9a01      	ldr	r2, [sp, #4]
 8008648:	9205      	str	r2, [sp, #20]
 800864a:	e752      	b.n	80084f2 <_dtoa_r+0x6a2>
 800864c:	9901      	ldr	r1, [sp, #4]
 800864e:	461a      	mov	r2, r3
 8008650:	e751      	b.n	80084f6 <_dtoa_r+0x6a6>
 8008652:	9b05      	ldr	r3, [sp, #20]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	e752      	b.n	80084fe <_dtoa_r+0x6ae>
 8008658:	2300      	movs	r3, #0
 800865a:	e77b      	b.n	8008554 <_dtoa_r+0x704>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	e779      	b.n	8008554 <_dtoa_r+0x704>
 8008660:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008662:	e778      	b.n	8008556 <_dtoa_r+0x706>
 8008664:	2300      	movs	r3, #0
 8008666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008668:	e779      	b.n	800855e <_dtoa_r+0x70e>
 800866a:	d093      	beq.n	8008594 <_dtoa_r+0x744>
 800866c:	9b04      	ldr	r3, [sp, #16]
 800866e:	321c      	adds	r2, #28
 8008670:	4413      	add	r3, r2
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	4416      	add	r6, r2
 8008678:	4413      	add	r3, r2
 800867a:	e78a      	b.n	8008592 <_dtoa_r+0x742>
 800867c:	4602      	mov	r2, r0
 800867e:	e7f5      	b.n	800866c <_dtoa_r+0x81c>
 8008680:	f1ba 0f00 	cmp.w	sl, #0
 8008684:	f8cd 8014 	str.w	r8, [sp, #20]
 8008688:	46d3      	mov	fp, sl
 800868a:	dc21      	bgt.n	80086d0 <_dtoa_r+0x880>
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	2b02      	cmp	r3, #2
 8008690:	dd1e      	ble.n	80086d0 <_dtoa_r+0x880>
 8008692:	f1bb 0f00 	cmp.w	fp, #0
 8008696:	f47f addc 	bne.w	8008252 <_dtoa_r+0x402>
 800869a:	4621      	mov	r1, r4
 800869c:	465b      	mov	r3, fp
 800869e:	2205      	movs	r2, #5
 80086a0:	4648      	mov	r0, r9
 80086a2:	f000 fa95 	bl	8008bd0 <__multadd>
 80086a6:	4601      	mov	r1, r0
 80086a8:	4604      	mov	r4, r0
 80086aa:	9801      	ldr	r0, [sp, #4]
 80086ac:	f000 fca0 	bl	8008ff0 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f77f adce 	ble.w	8008252 <_dtoa_r+0x402>
 80086b6:	463e      	mov	r6, r7
 80086b8:	2331      	movs	r3, #49	@ 0x31
 80086ba:	f806 3b01 	strb.w	r3, [r6], #1
 80086be:	9b05      	ldr	r3, [sp, #20]
 80086c0:	3301      	adds	r3, #1
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	e5c9      	b.n	800825a <_dtoa_r+0x40a>
 80086c6:	f8cd 8014 	str.w	r8, [sp, #20]
 80086ca:	4654      	mov	r4, sl
 80086cc:	4625      	mov	r5, r4
 80086ce:	e7f2      	b.n	80086b6 <_dtoa_r+0x866>
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8102 	beq.w	80088dc <_dtoa_r+0xa8c>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	dd05      	ble.n	80086e8 <_dtoa_r+0x898>
 80086dc:	4629      	mov	r1, r5
 80086de:	4632      	mov	r2, r6
 80086e0:	4648      	mov	r0, r9
 80086e2:	f000 fc19 	bl	8008f18 <__lshift>
 80086e6:	4605      	mov	r5, r0
 80086e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d058      	beq.n	80087a0 <_dtoa_r+0x950>
 80086ee:	6869      	ldr	r1, [r5, #4]
 80086f0:	4648      	mov	r0, r9
 80086f2:	f000 fa0b 	bl	8008b0c <_Balloc>
 80086f6:	4606      	mov	r6, r0
 80086f8:	b928      	cbnz	r0, 8008706 <_dtoa_r+0x8b6>
 80086fa:	4b82      	ldr	r3, [pc, #520]	@ (8008904 <_dtoa_r+0xab4>)
 80086fc:	4602      	mov	r2, r0
 80086fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008702:	f7ff bbbe 	b.w	8007e82 <_dtoa_r+0x32>
 8008706:	692a      	ldr	r2, [r5, #16]
 8008708:	3202      	adds	r2, #2
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	f105 010c 	add.w	r1, r5, #12
 8008710:	300c      	adds	r0, #12
 8008712:	f000 fff7 	bl	8009704 <memcpy>
 8008716:	2201      	movs	r2, #1
 8008718:	4631      	mov	r1, r6
 800871a:	4648      	mov	r0, r9
 800871c:	f000 fbfc 	bl	8008f18 <__lshift>
 8008720:	1c7b      	adds	r3, r7, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	eb07 030b 	add.w	r3, r7, fp
 8008728:	9309      	str	r3, [sp, #36]	@ 0x24
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	46a8      	mov	r8, r5
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	4605      	mov	r5, r0
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	9801      	ldr	r0, [sp, #4]
 800873a:	4621      	mov	r1, r4
 800873c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008740:	f7ff fafd 	bl	8007d3e <quorem>
 8008744:	4641      	mov	r1, r8
 8008746:	9002      	str	r0, [sp, #8]
 8008748:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800874c:	9801      	ldr	r0, [sp, #4]
 800874e:	f000 fc4f 	bl	8008ff0 <__mcmp>
 8008752:	462a      	mov	r2, r5
 8008754:	9006      	str	r0, [sp, #24]
 8008756:	4621      	mov	r1, r4
 8008758:	4648      	mov	r0, r9
 800875a:	f000 fc65 	bl	8009028 <__mdiff>
 800875e:	68c2      	ldr	r2, [r0, #12]
 8008760:	4606      	mov	r6, r0
 8008762:	b9fa      	cbnz	r2, 80087a4 <_dtoa_r+0x954>
 8008764:	4601      	mov	r1, r0
 8008766:	9801      	ldr	r0, [sp, #4]
 8008768:	f000 fc42 	bl	8008ff0 <__mcmp>
 800876c:	4602      	mov	r2, r0
 800876e:	4631      	mov	r1, r6
 8008770:	4648      	mov	r0, r9
 8008772:	920a      	str	r2, [sp, #40]	@ 0x28
 8008774:	f000 fa0a 	bl	8008b8c <_Bfree>
 8008778:	9b07      	ldr	r3, [sp, #28]
 800877a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800877c:	9e04      	ldr	r6, [sp, #16]
 800877e:	ea42 0103 	orr.w	r1, r2, r3
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	4319      	orrs	r1, r3
 8008786:	d10f      	bne.n	80087a8 <_dtoa_r+0x958>
 8008788:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800878c:	d028      	beq.n	80087e0 <_dtoa_r+0x990>
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dd02      	ble.n	800879a <_dtoa_r+0x94a>
 8008794:	9b02      	ldr	r3, [sp, #8]
 8008796:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800879a:	f88b a000 	strb.w	sl, [fp]
 800879e:	e55e      	b.n	800825e <_dtoa_r+0x40e>
 80087a0:	4628      	mov	r0, r5
 80087a2:	e7bd      	b.n	8008720 <_dtoa_r+0x8d0>
 80087a4:	2201      	movs	r2, #1
 80087a6:	e7e2      	b.n	800876e <_dtoa_r+0x91e>
 80087a8:	9b06      	ldr	r3, [sp, #24]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	db04      	blt.n	80087b8 <_dtoa_r+0x968>
 80087ae:	9907      	ldr	r1, [sp, #28]
 80087b0:	430b      	orrs	r3, r1
 80087b2:	9908      	ldr	r1, [sp, #32]
 80087b4:	430b      	orrs	r3, r1
 80087b6:	d120      	bne.n	80087fa <_dtoa_r+0x9aa>
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	ddee      	ble.n	800879a <_dtoa_r+0x94a>
 80087bc:	9901      	ldr	r1, [sp, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	4648      	mov	r0, r9
 80087c2:	f000 fba9 	bl	8008f18 <__lshift>
 80087c6:	4621      	mov	r1, r4
 80087c8:	9001      	str	r0, [sp, #4]
 80087ca:	f000 fc11 	bl	8008ff0 <__mcmp>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	dc03      	bgt.n	80087da <_dtoa_r+0x98a>
 80087d2:	d1e2      	bne.n	800879a <_dtoa_r+0x94a>
 80087d4:	f01a 0f01 	tst.w	sl, #1
 80087d8:	d0df      	beq.n	800879a <_dtoa_r+0x94a>
 80087da:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80087de:	d1d9      	bne.n	8008794 <_dtoa_r+0x944>
 80087e0:	2339      	movs	r3, #57	@ 0x39
 80087e2:	f88b 3000 	strb.w	r3, [fp]
 80087e6:	4633      	mov	r3, r6
 80087e8:	461e      	mov	r6, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087f0:	2a39      	cmp	r2, #57	@ 0x39
 80087f2:	d052      	beq.n	800889a <_dtoa_r+0xa4a>
 80087f4:	3201      	adds	r2, #1
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	e531      	b.n	800825e <_dtoa_r+0x40e>
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	dd07      	ble.n	800880e <_dtoa_r+0x9be>
 80087fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008802:	d0ed      	beq.n	80087e0 <_dtoa_r+0x990>
 8008804:	f10a 0301 	add.w	r3, sl, #1
 8008808:	f88b 3000 	strb.w	r3, [fp]
 800880c:	e527      	b.n	800825e <_dtoa_r+0x40e>
 800880e:	9b04      	ldr	r3, [sp, #16]
 8008810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008812:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008816:	4293      	cmp	r3, r2
 8008818:	d029      	beq.n	800886e <_dtoa_r+0xa1e>
 800881a:	9901      	ldr	r1, [sp, #4]
 800881c:	2300      	movs	r3, #0
 800881e:	220a      	movs	r2, #10
 8008820:	4648      	mov	r0, r9
 8008822:	f000 f9d5 	bl	8008bd0 <__multadd>
 8008826:	45a8      	cmp	r8, r5
 8008828:	9001      	str	r0, [sp, #4]
 800882a:	f04f 0300 	mov.w	r3, #0
 800882e:	f04f 020a 	mov.w	r2, #10
 8008832:	4641      	mov	r1, r8
 8008834:	4648      	mov	r0, r9
 8008836:	d107      	bne.n	8008848 <_dtoa_r+0x9f8>
 8008838:	f000 f9ca 	bl	8008bd0 <__multadd>
 800883c:	4680      	mov	r8, r0
 800883e:	4605      	mov	r5, r0
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	3301      	adds	r3, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	e776      	b.n	8008736 <_dtoa_r+0x8e6>
 8008848:	f000 f9c2 	bl	8008bd0 <__multadd>
 800884c:	4629      	mov	r1, r5
 800884e:	4680      	mov	r8, r0
 8008850:	2300      	movs	r3, #0
 8008852:	220a      	movs	r2, #10
 8008854:	4648      	mov	r0, r9
 8008856:	f000 f9bb 	bl	8008bd0 <__multadd>
 800885a:	4605      	mov	r5, r0
 800885c:	e7f0      	b.n	8008840 <_dtoa_r+0x9f0>
 800885e:	f1bb 0f00 	cmp.w	fp, #0
 8008862:	bfcc      	ite	gt
 8008864:	465e      	movgt	r6, fp
 8008866:	2601      	movle	r6, #1
 8008868:	443e      	add	r6, r7
 800886a:	f04f 0800 	mov.w	r8, #0
 800886e:	9901      	ldr	r1, [sp, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	4648      	mov	r0, r9
 8008874:	f000 fb50 	bl	8008f18 <__lshift>
 8008878:	4621      	mov	r1, r4
 800887a:	9001      	str	r0, [sp, #4]
 800887c:	f000 fbb8 	bl	8008ff0 <__mcmp>
 8008880:	2800      	cmp	r0, #0
 8008882:	dcb0      	bgt.n	80087e6 <_dtoa_r+0x996>
 8008884:	d102      	bne.n	800888c <_dtoa_r+0xa3c>
 8008886:	f01a 0f01 	tst.w	sl, #1
 800888a:	d1ac      	bne.n	80087e6 <_dtoa_r+0x996>
 800888c:	4633      	mov	r3, r6
 800888e:	461e      	mov	r6, r3
 8008890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008894:	2a30      	cmp	r2, #48	@ 0x30
 8008896:	d0fa      	beq.n	800888e <_dtoa_r+0xa3e>
 8008898:	e4e1      	b.n	800825e <_dtoa_r+0x40e>
 800889a:	429f      	cmp	r7, r3
 800889c:	d1a4      	bne.n	80087e8 <_dtoa_r+0x998>
 800889e:	9b05      	ldr	r3, [sp, #20]
 80088a0:	3301      	adds	r3, #1
 80088a2:	9305      	str	r3, [sp, #20]
 80088a4:	2331      	movs	r3, #49	@ 0x31
 80088a6:	703b      	strb	r3, [r7, #0]
 80088a8:	e4d9      	b.n	800825e <_dtoa_r+0x40e>
 80088aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088ac:	4f16      	ldr	r7, [pc, #88]	@ (8008908 <_dtoa_r+0xab8>)
 80088ae:	b11b      	cbz	r3, 80088b8 <_dtoa_r+0xa68>
 80088b0:	f107 0308 	add.w	r3, r7, #8
 80088b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	4638      	mov	r0, r7
 80088ba:	b011      	add	sp, #68	@ 0x44
 80088bc:	ecbd 8b02 	vpop	{d8}
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	f77f ae2c 	ble.w	8008524 <_dtoa_r+0x6d4>
 80088cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088d0:	2001      	movs	r0, #1
 80088d2:	e64c      	b.n	800856e <_dtoa_r+0x71e>
 80088d4:	f1bb 0f00 	cmp.w	fp, #0
 80088d8:	f77f aed8 	ble.w	800868c <_dtoa_r+0x83c>
 80088dc:	463e      	mov	r6, r7
 80088de:	9801      	ldr	r0, [sp, #4]
 80088e0:	4621      	mov	r1, r4
 80088e2:	f7ff fa2c 	bl	8007d3e <quorem>
 80088e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80088ea:	f806 ab01 	strb.w	sl, [r6], #1
 80088ee:	1bf2      	subs	r2, r6, r7
 80088f0:	4593      	cmp	fp, r2
 80088f2:	ddb4      	ble.n	800885e <_dtoa_r+0xa0e>
 80088f4:	9901      	ldr	r1, [sp, #4]
 80088f6:	2300      	movs	r3, #0
 80088f8:	220a      	movs	r2, #10
 80088fa:	4648      	mov	r0, r9
 80088fc:	f000 f968 	bl	8008bd0 <__multadd>
 8008900:	9001      	str	r0, [sp, #4]
 8008902:	e7ec      	b.n	80088de <_dtoa_r+0xa8e>
 8008904:	080099d8 	.word	0x080099d8
 8008908:	0800995c 	.word	0x0800995c

0800890c <_free_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4605      	mov	r5, r0
 8008910:	2900      	cmp	r1, #0
 8008912:	d041      	beq.n	8008998 <_free_r+0x8c>
 8008914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008918:	1f0c      	subs	r4, r1, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfb8      	it	lt
 800891e:	18e4      	addlt	r4, r4, r3
 8008920:	f000 f8e8 	bl	8008af4 <__malloc_lock>
 8008924:	4a1d      	ldr	r2, [pc, #116]	@ (800899c <_free_r+0x90>)
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	b933      	cbnz	r3, 8008938 <_free_r+0x2c>
 800892a:	6063      	str	r3, [r4, #4]
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	4628      	mov	r0, r5
 8008930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008934:	f000 b8e4 	b.w	8008b00 <__malloc_unlock>
 8008938:	42a3      	cmp	r3, r4
 800893a:	d908      	bls.n	800894e <_free_r+0x42>
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	1821      	adds	r1, r4, r0
 8008940:	428b      	cmp	r3, r1
 8008942:	bf01      	itttt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	1809      	addeq	r1, r1, r0
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	e7ed      	b.n	800892a <_free_r+0x1e>
 800894e:	461a      	mov	r2, r3
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b10b      	cbz	r3, 8008958 <_free_r+0x4c>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d9fa      	bls.n	800894e <_free_r+0x42>
 8008958:	6811      	ldr	r1, [r2, #0]
 800895a:	1850      	adds	r0, r2, r1
 800895c:	42a0      	cmp	r0, r4
 800895e:	d10b      	bne.n	8008978 <_free_r+0x6c>
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	4401      	add	r1, r0
 8008964:	1850      	adds	r0, r2, r1
 8008966:	4283      	cmp	r3, r0
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	d1e0      	bne.n	800892e <_free_r+0x22>
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	6053      	str	r3, [r2, #4]
 8008972:	4408      	add	r0, r1
 8008974:	6010      	str	r0, [r2, #0]
 8008976:	e7da      	b.n	800892e <_free_r+0x22>
 8008978:	d902      	bls.n	8008980 <_free_r+0x74>
 800897a:	230c      	movs	r3, #12
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	e7d6      	b.n	800892e <_free_r+0x22>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	1821      	adds	r1, r4, r0
 8008984:	428b      	cmp	r3, r1
 8008986:	bf04      	itt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	bf04      	itt	eq
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6054      	str	r4, [r2, #4]
 8008996:	e7ca      	b.n	800892e <_free_r+0x22>
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	240043f0 	.word	0x240043f0

080089a0 <malloc>:
 80089a0:	4b02      	ldr	r3, [pc, #8]	@ (80089ac <malloc+0xc>)
 80089a2:	4601      	mov	r1, r0
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	f000 b825 	b.w	80089f4 <_malloc_r>
 80089aa:	bf00      	nop
 80089ac:	2400001c 	.word	0x2400001c

080089b0 <sbrk_aligned>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	4e0f      	ldr	r6, [pc, #60]	@ (80089f0 <sbrk_aligned+0x40>)
 80089b4:	460c      	mov	r4, r1
 80089b6:	6831      	ldr	r1, [r6, #0]
 80089b8:	4605      	mov	r5, r0
 80089ba:	b911      	cbnz	r1, 80089c2 <sbrk_aligned+0x12>
 80089bc:	f000 fe92 	bl	80096e4 <_sbrk_r>
 80089c0:	6030      	str	r0, [r6, #0]
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 fe8d 	bl	80096e4 <_sbrk_r>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	d103      	bne.n	80089d6 <sbrk_aligned+0x26>
 80089ce:	f04f 34ff 	mov.w	r4, #4294967295
 80089d2:	4620      	mov	r0, r4
 80089d4:	bd70      	pop	{r4, r5, r6, pc}
 80089d6:	1cc4      	adds	r4, r0, #3
 80089d8:	f024 0403 	bic.w	r4, r4, #3
 80089dc:	42a0      	cmp	r0, r4
 80089de:	d0f8      	beq.n	80089d2 <sbrk_aligned+0x22>
 80089e0:	1a21      	subs	r1, r4, r0
 80089e2:	4628      	mov	r0, r5
 80089e4:	f000 fe7e 	bl	80096e4 <_sbrk_r>
 80089e8:	3001      	adds	r0, #1
 80089ea:	d1f2      	bne.n	80089d2 <sbrk_aligned+0x22>
 80089ec:	e7ef      	b.n	80089ce <sbrk_aligned+0x1e>
 80089ee:	bf00      	nop
 80089f0:	240043ec 	.word	0x240043ec

080089f4 <_malloc_r>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	1ccd      	adds	r5, r1, #3
 80089fa:	f025 0503 	bic.w	r5, r5, #3
 80089fe:	3508      	adds	r5, #8
 8008a00:	2d0c      	cmp	r5, #12
 8008a02:	bf38      	it	cc
 8008a04:	250c      	movcc	r5, #12
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	4606      	mov	r6, r0
 8008a0a:	db01      	blt.n	8008a10 <_malloc_r+0x1c>
 8008a0c:	42a9      	cmp	r1, r5
 8008a0e:	d904      	bls.n	8008a1a <_malloc_r+0x26>
 8008a10:	230c      	movs	r3, #12
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	2000      	movs	r0, #0
 8008a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008af0 <_malloc_r+0xfc>
 8008a1e:	f000 f869 	bl	8008af4 <__malloc_lock>
 8008a22:	f8d8 3000 	ldr.w	r3, [r8]
 8008a26:	461c      	mov	r4, r3
 8008a28:	bb44      	cbnz	r4, 8008a7c <_malloc_r+0x88>
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff ffbf 	bl	80089b0 <sbrk_aligned>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	4604      	mov	r4, r0
 8008a36:	d158      	bne.n	8008aea <_malloc_r+0xf6>
 8008a38:	f8d8 4000 	ldr.w	r4, [r8]
 8008a3c:	4627      	mov	r7, r4
 8008a3e:	2f00      	cmp	r7, #0
 8008a40:	d143      	bne.n	8008aca <_malloc_r+0xd6>
 8008a42:	2c00      	cmp	r4, #0
 8008a44:	d04b      	beq.n	8008ade <_malloc_r+0xea>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	eb04 0903 	add.w	r9, r4, r3
 8008a50:	f000 fe48 	bl	80096e4 <_sbrk_r>
 8008a54:	4581      	cmp	r9, r0
 8008a56:	d142      	bne.n	8008ade <_malloc_r+0xea>
 8008a58:	6821      	ldr	r1, [r4, #0]
 8008a5a:	1a6d      	subs	r5, r5, r1
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7ff ffa6 	bl	80089b0 <sbrk_aligned>
 8008a64:	3001      	adds	r0, #1
 8008a66:	d03a      	beq.n	8008ade <_malloc_r+0xea>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	442b      	add	r3, r5
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	bb62      	cbnz	r2, 8008ad0 <_malloc_r+0xdc>
 8008a76:	f8c8 7000 	str.w	r7, [r8]
 8008a7a:	e00f      	b.n	8008a9c <_malloc_r+0xa8>
 8008a7c:	6822      	ldr	r2, [r4, #0]
 8008a7e:	1b52      	subs	r2, r2, r5
 8008a80:	d420      	bmi.n	8008ac4 <_malloc_r+0xd0>
 8008a82:	2a0b      	cmp	r2, #11
 8008a84:	d917      	bls.n	8008ab6 <_malloc_r+0xc2>
 8008a86:	1961      	adds	r1, r4, r5
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	6025      	str	r5, [r4, #0]
 8008a8c:	bf18      	it	ne
 8008a8e:	6059      	strne	r1, [r3, #4]
 8008a90:	6863      	ldr	r3, [r4, #4]
 8008a92:	bf08      	it	eq
 8008a94:	f8c8 1000 	streq.w	r1, [r8]
 8008a98:	5162      	str	r2, [r4, r5]
 8008a9a:	604b      	str	r3, [r1, #4]
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 f82f 	bl	8008b00 <__malloc_unlock>
 8008aa2:	f104 000b 	add.w	r0, r4, #11
 8008aa6:	1d23      	adds	r3, r4, #4
 8008aa8:	f020 0007 	bic.w	r0, r0, #7
 8008aac:	1ac2      	subs	r2, r0, r3
 8008aae:	bf1c      	itt	ne
 8008ab0:	1a1b      	subne	r3, r3, r0
 8008ab2:	50a3      	strne	r3, [r4, r2]
 8008ab4:	e7af      	b.n	8008a16 <_malloc_r+0x22>
 8008ab6:	6862      	ldr	r2, [r4, #4]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	bf0c      	ite	eq
 8008abc:	f8c8 2000 	streq.w	r2, [r8]
 8008ac0:	605a      	strne	r2, [r3, #4]
 8008ac2:	e7eb      	b.n	8008a9c <_malloc_r+0xa8>
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	6864      	ldr	r4, [r4, #4]
 8008ac8:	e7ae      	b.n	8008a28 <_malloc_r+0x34>
 8008aca:	463c      	mov	r4, r7
 8008acc:	687f      	ldr	r7, [r7, #4]
 8008ace:	e7b6      	b.n	8008a3e <_malloc_r+0x4a>
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d1fb      	bne.n	8008ad0 <_malloc_r+0xdc>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	6053      	str	r3, [r2, #4]
 8008adc:	e7de      	b.n	8008a9c <_malloc_r+0xa8>
 8008ade:	230c      	movs	r3, #12
 8008ae0:	6033      	str	r3, [r6, #0]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f000 f80c 	bl	8008b00 <__malloc_unlock>
 8008ae8:	e794      	b.n	8008a14 <_malloc_r+0x20>
 8008aea:	6005      	str	r5, [r0, #0]
 8008aec:	e7d6      	b.n	8008a9c <_malloc_r+0xa8>
 8008aee:	bf00      	nop
 8008af0:	240043f0 	.word	0x240043f0

08008af4 <__malloc_lock>:
 8008af4:	4801      	ldr	r0, [pc, #4]	@ (8008afc <__malloc_lock+0x8>)
 8008af6:	f7ff b920 	b.w	8007d3a <__retarget_lock_acquire_recursive>
 8008afa:	bf00      	nop
 8008afc:	240043e8 	.word	0x240043e8

08008b00 <__malloc_unlock>:
 8008b00:	4801      	ldr	r0, [pc, #4]	@ (8008b08 <__malloc_unlock+0x8>)
 8008b02:	f7ff b91b 	b.w	8007d3c <__retarget_lock_release_recursive>
 8008b06:	bf00      	nop
 8008b08:	240043e8 	.word	0x240043e8

08008b0c <_Balloc>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	69c6      	ldr	r6, [r0, #28]
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	b976      	cbnz	r6, 8008b34 <_Balloc+0x28>
 8008b16:	2010      	movs	r0, #16
 8008b18:	f7ff ff42 	bl	80089a0 <malloc>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	61e0      	str	r0, [r4, #28]
 8008b20:	b920      	cbnz	r0, 8008b2c <_Balloc+0x20>
 8008b22:	4b18      	ldr	r3, [pc, #96]	@ (8008b84 <_Balloc+0x78>)
 8008b24:	4818      	ldr	r0, [pc, #96]	@ (8008b88 <_Balloc+0x7c>)
 8008b26:	216b      	movs	r1, #107	@ 0x6b
 8008b28:	f000 fdfa 	bl	8009720 <__assert_func>
 8008b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b30:	6006      	str	r6, [r0, #0]
 8008b32:	60c6      	str	r6, [r0, #12]
 8008b34:	69e6      	ldr	r6, [r4, #28]
 8008b36:	68f3      	ldr	r3, [r6, #12]
 8008b38:	b183      	cbz	r3, 8008b5c <_Balloc+0x50>
 8008b3a:	69e3      	ldr	r3, [r4, #28]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b42:	b9b8      	cbnz	r0, 8008b74 <_Balloc+0x68>
 8008b44:	2101      	movs	r1, #1
 8008b46:	fa01 f605 	lsl.w	r6, r1, r5
 8008b4a:	1d72      	adds	r2, r6, #5
 8008b4c:	0092      	lsls	r2, r2, #2
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fe04 	bl	800975c <_calloc_r>
 8008b54:	b160      	cbz	r0, 8008b70 <_Balloc+0x64>
 8008b56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b5a:	e00e      	b.n	8008b7a <_Balloc+0x6e>
 8008b5c:	2221      	movs	r2, #33	@ 0x21
 8008b5e:	2104      	movs	r1, #4
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fdfb 	bl	800975c <_calloc_r>
 8008b66:	69e3      	ldr	r3, [r4, #28]
 8008b68:	60f0      	str	r0, [r6, #12]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e4      	bne.n	8008b3a <_Balloc+0x2e>
 8008b70:	2000      	movs	r0, #0
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	6802      	ldr	r2, [r0, #0]
 8008b76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b80:	e7f7      	b.n	8008b72 <_Balloc+0x66>
 8008b82:	bf00      	nop
 8008b84:	08009969 	.word	0x08009969
 8008b88:	080099e9 	.word	0x080099e9

08008b8c <_Bfree>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	69c6      	ldr	r6, [r0, #28]
 8008b90:	4605      	mov	r5, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	b976      	cbnz	r6, 8008bb4 <_Bfree+0x28>
 8008b96:	2010      	movs	r0, #16
 8008b98:	f7ff ff02 	bl	80089a0 <malloc>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	61e8      	str	r0, [r5, #28]
 8008ba0:	b920      	cbnz	r0, 8008bac <_Bfree+0x20>
 8008ba2:	4b09      	ldr	r3, [pc, #36]	@ (8008bc8 <_Bfree+0x3c>)
 8008ba4:	4809      	ldr	r0, [pc, #36]	@ (8008bcc <_Bfree+0x40>)
 8008ba6:	218f      	movs	r1, #143	@ 0x8f
 8008ba8:	f000 fdba 	bl	8009720 <__assert_func>
 8008bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bb0:	6006      	str	r6, [r0, #0]
 8008bb2:	60c6      	str	r6, [r0, #12]
 8008bb4:	b13c      	cbz	r4, 8008bc6 <_Bfree+0x3a>
 8008bb6:	69eb      	ldr	r3, [r5, #28]
 8008bb8:	6862      	ldr	r2, [r4, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bc0:	6021      	str	r1, [r4, #0]
 8008bc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	08009969 	.word	0x08009969
 8008bcc:	080099e9 	.word	0x080099e9

08008bd0 <__multadd>:
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	690d      	ldr	r5, [r1, #16]
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	461e      	mov	r6, r3
 8008bdc:	f101 0c14 	add.w	ip, r1, #20
 8008be0:	2000      	movs	r0, #0
 8008be2:	f8dc 3000 	ldr.w	r3, [ip]
 8008be6:	b299      	uxth	r1, r3
 8008be8:	fb02 6101 	mla	r1, r2, r1, r6
 8008bec:	0c1e      	lsrs	r6, r3, #16
 8008bee:	0c0b      	lsrs	r3, r1, #16
 8008bf0:	fb02 3306 	mla	r3, r2, r6, r3
 8008bf4:	b289      	uxth	r1, r1
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bfc:	4285      	cmp	r5, r0
 8008bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8008c02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c06:	dcec      	bgt.n	8008be2 <__multadd+0x12>
 8008c08:	b30e      	cbz	r6, 8008c4e <__multadd+0x7e>
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	42ab      	cmp	r3, r5
 8008c0e:	dc19      	bgt.n	8008c44 <__multadd+0x74>
 8008c10:	6861      	ldr	r1, [r4, #4]
 8008c12:	4638      	mov	r0, r7
 8008c14:	3101      	adds	r1, #1
 8008c16:	f7ff ff79 	bl	8008b0c <_Balloc>
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	b928      	cbnz	r0, 8008c2a <__multadd+0x5a>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	4b0c      	ldr	r3, [pc, #48]	@ (8008c54 <__multadd+0x84>)
 8008c22:	480d      	ldr	r0, [pc, #52]	@ (8008c58 <__multadd+0x88>)
 8008c24:	21ba      	movs	r1, #186	@ 0xba
 8008c26:	f000 fd7b 	bl	8009720 <__assert_func>
 8008c2a:	6922      	ldr	r2, [r4, #16]
 8008c2c:	3202      	adds	r2, #2
 8008c2e:	f104 010c 	add.w	r1, r4, #12
 8008c32:	0092      	lsls	r2, r2, #2
 8008c34:	300c      	adds	r0, #12
 8008c36:	f000 fd65 	bl	8009704 <memcpy>
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	f7ff ffa5 	bl	8008b8c <_Bfree>
 8008c42:	4644      	mov	r4, r8
 8008c44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c48:	3501      	adds	r5, #1
 8008c4a:	615e      	str	r6, [r3, #20]
 8008c4c:	6125      	str	r5, [r4, #16]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c54:	080099d8 	.word	0x080099d8
 8008c58:	080099e9 	.word	0x080099e9

08008c5c <__hi0bits>:
 8008c5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c60:	4603      	mov	r3, r0
 8008c62:	bf36      	itet	cc
 8008c64:	0403      	lslcc	r3, r0, #16
 8008c66:	2000      	movcs	r0, #0
 8008c68:	2010      	movcc	r0, #16
 8008c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c6e:	bf3c      	itt	cc
 8008c70:	021b      	lslcc	r3, r3, #8
 8008c72:	3008      	addcc	r0, #8
 8008c74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c78:	bf3c      	itt	cc
 8008c7a:	011b      	lslcc	r3, r3, #4
 8008c7c:	3004      	addcc	r0, #4
 8008c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c82:	bf3c      	itt	cc
 8008c84:	009b      	lslcc	r3, r3, #2
 8008c86:	3002      	addcc	r0, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db05      	blt.n	8008c98 <__hi0bits+0x3c>
 8008c8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c90:	f100 0001 	add.w	r0, r0, #1
 8008c94:	bf08      	it	eq
 8008c96:	2020      	moveq	r0, #32
 8008c98:	4770      	bx	lr

08008c9a <__lo0bits>:
 8008c9a:	6803      	ldr	r3, [r0, #0]
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	f013 0007 	ands.w	r0, r3, #7
 8008ca2:	d00b      	beq.n	8008cbc <__lo0bits+0x22>
 8008ca4:	07d9      	lsls	r1, r3, #31
 8008ca6:	d421      	bmi.n	8008cec <__lo0bits+0x52>
 8008ca8:	0798      	lsls	r0, r3, #30
 8008caa:	bf49      	itett	mi
 8008cac:	085b      	lsrmi	r3, r3, #1
 8008cae:	089b      	lsrpl	r3, r3, #2
 8008cb0:	2001      	movmi	r0, #1
 8008cb2:	6013      	strmi	r3, [r2, #0]
 8008cb4:	bf5c      	itt	pl
 8008cb6:	6013      	strpl	r3, [r2, #0]
 8008cb8:	2002      	movpl	r0, #2
 8008cba:	4770      	bx	lr
 8008cbc:	b299      	uxth	r1, r3
 8008cbe:	b909      	cbnz	r1, 8008cc4 <__lo0bits+0x2a>
 8008cc0:	0c1b      	lsrs	r3, r3, #16
 8008cc2:	2010      	movs	r0, #16
 8008cc4:	b2d9      	uxtb	r1, r3
 8008cc6:	b909      	cbnz	r1, 8008ccc <__lo0bits+0x32>
 8008cc8:	3008      	adds	r0, #8
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	0719      	lsls	r1, r3, #28
 8008cce:	bf04      	itt	eq
 8008cd0:	091b      	lsreq	r3, r3, #4
 8008cd2:	3004      	addeq	r0, #4
 8008cd4:	0799      	lsls	r1, r3, #30
 8008cd6:	bf04      	itt	eq
 8008cd8:	089b      	lsreq	r3, r3, #2
 8008cda:	3002      	addeq	r0, #2
 8008cdc:	07d9      	lsls	r1, r3, #31
 8008cde:	d403      	bmi.n	8008ce8 <__lo0bits+0x4e>
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	f100 0001 	add.w	r0, r0, #1
 8008ce6:	d003      	beq.n	8008cf0 <__lo0bits+0x56>
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4770      	bx	lr
 8008cec:	2000      	movs	r0, #0
 8008cee:	4770      	bx	lr
 8008cf0:	2020      	movs	r0, #32
 8008cf2:	4770      	bx	lr

08008cf4 <__i2b>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	f7ff ff07 	bl	8008b0c <_Balloc>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	b928      	cbnz	r0, 8008d0e <__i2b+0x1a>
 8008d02:	4b05      	ldr	r3, [pc, #20]	@ (8008d18 <__i2b+0x24>)
 8008d04:	4805      	ldr	r0, [pc, #20]	@ (8008d1c <__i2b+0x28>)
 8008d06:	f240 1145 	movw	r1, #325	@ 0x145
 8008d0a:	f000 fd09 	bl	8009720 <__assert_func>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	6144      	str	r4, [r0, #20]
 8008d12:	6103      	str	r3, [r0, #16]
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	bf00      	nop
 8008d18:	080099d8 	.word	0x080099d8
 8008d1c:	080099e9 	.word	0x080099e9

08008d20 <__multiply>:
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	4617      	mov	r7, r2
 8008d26:	690a      	ldr	r2, [r1, #16]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	bfa8      	it	ge
 8008d2e:	463b      	movge	r3, r7
 8008d30:	4689      	mov	r9, r1
 8008d32:	bfa4      	itt	ge
 8008d34:	460f      	movge	r7, r1
 8008d36:	4699      	movge	r9, r3
 8008d38:	693d      	ldr	r5, [r7, #16]
 8008d3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	eb05 060a 	add.w	r6, r5, sl
 8008d46:	42b3      	cmp	r3, r6
 8008d48:	b085      	sub	sp, #20
 8008d4a:	bfb8      	it	lt
 8008d4c:	3101      	addlt	r1, #1
 8008d4e:	f7ff fedd 	bl	8008b0c <_Balloc>
 8008d52:	b930      	cbnz	r0, 8008d62 <__multiply+0x42>
 8008d54:	4602      	mov	r2, r0
 8008d56:	4b41      	ldr	r3, [pc, #260]	@ (8008e5c <__multiply+0x13c>)
 8008d58:	4841      	ldr	r0, [pc, #260]	@ (8008e60 <__multiply+0x140>)
 8008d5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d5e:	f000 fcdf 	bl	8009720 <__assert_func>
 8008d62:	f100 0414 	add.w	r4, r0, #20
 8008d66:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4573      	cmp	r3, lr
 8008d70:	d320      	bcc.n	8008db4 <__multiply+0x94>
 8008d72:	f107 0814 	add.w	r8, r7, #20
 8008d76:	f109 0114 	add.w	r1, r9, #20
 8008d7a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008d7e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008d82:	9302      	str	r3, [sp, #8]
 8008d84:	1beb      	subs	r3, r5, r7
 8008d86:	3b15      	subs	r3, #21
 8008d88:	f023 0303 	bic.w	r3, r3, #3
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	3715      	adds	r7, #21
 8008d90:	42bd      	cmp	r5, r7
 8008d92:	bf38      	it	cc
 8008d94:	2304      	movcc	r3, #4
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	9103      	str	r1, [sp, #12]
 8008d9c:	428b      	cmp	r3, r1
 8008d9e:	d80c      	bhi.n	8008dba <__multiply+0x9a>
 8008da0:	2e00      	cmp	r6, #0
 8008da2:	dd03      	ble.n	8008dac <__multiply+0x8c>
 8008da4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d055      	beq.n	8008e58 <__multiply+0x138>
 8008dac:	6106      	str	r6, [r0, #16]
 8008dae:	b005      	add	sp, #20
 8008db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db4:	f843 2b04 	str.w	r2, [r3], #4
 8008db8:	e7d9      	b.n	8008d6e <__multiply+0x4e>
 8008dba:	f8b1 a000 	ldrh.w	sl, [r1]
 8008dbe:	f1ba 0f00 	cmp.w	sl, #0
 8008dc2:	d01f      	beq.n	8008e04 <__multiply+0xe4>
 8008dc4:	46c4      	mov	ip, r8
 8008dc6:	46a1      	mov	r9, r4
 8008dc8:	2700      	movs	r7, #0
 8008dca:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008dce:	f8d9 3000 	ldr.w	r3, [r9]
 8008dd2:	fa1f fb82 	uxth.w	fp, r2
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ddc:	443b      	add	r3, r7
 8008dde:	f8d9 7000 	ldr.w	r7, [r9]
 8008de2:	0c12      	lsrs	r2, r2, #16
 8008de4:	0c3f      	lsrs	r7, r7, #16
 8008de6:	fb0a 7202 	mla	r2, sl, r2, r7
 8008dea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df4:	4565      	cmp	r5, ip
 8008df6:	f849 3b04 	str.w	r3, [r9], #4
 8008dfa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008dfe:	d8e4      	bhi.n	8008dca <__multiply+0xaa>
 8008e00:	9b01      	ldr	r3, [sp, #4]
 8008e02:	50e7      	str	r7, [r4, r3]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e0a:	3104      	adds	r1, #4
 8008e0c:	f1b9 0f00 	cmp.w	r9, #0
 8008e10:	d020      	beq.n	8008e54 <__multiply+0x134>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	4647      	mov	r7, r8
 8008e16:	46a4      	mov	ip, r4
 8008e18:	f04f 0a00 	mov.w	sl, #0
 8008e1c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008e20:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008e24:	fb09 220b 	mla	r2, r9, fp, r2
 8008e28:	4452      	add	r2, sl
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e30:	f84c 3b04 	str.w	r3, [ip], #4
 8008e34:	f857 3b04 	ldr.w	r3, [r7], #4
 8008e38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e3c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008e40:	fb09 330a 	mla	r3, r9, sl, r3
 8008e44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008e48:	42bd      	cmp	r5, r7
 8008e4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e4e:	d8e5      	bhi.n	8008e1c <__multiply+0xfc>
 8008e50:	9a01      	ldr	r2, [sp, #4]
 8008e52:	50a3      	str	r3, [r4, r2]
 8008e54:	3404      	adds	r4, #4
 8008e56:	e79f      	b.n	8008d98 <__multiply+0x78>
 8008e58:	3e01      	subs	r6, #1
 8008e5a:	e7a1      	b.n	8008da0 <__multiply+0x80>
 8008e5c:	080099d8 	.word	0x080099d8
 8008e60:	080099e9 	.word	0x080099e9

08008e64 <__pow5mult>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4615      	mov	r5, r2
 8008e6a:	f012 0203 	ands.w	r2, r2, #3
 8008e6e:	4607      	mov	r7, r0
 8008e70:	460e      	mov	r6, r1
 8008e72:	d007      	beq.n	8008e84 <__pow5mult+0x20>
 8008e74:	4c25      	ldr	r4, [pc, #148]	@ (8008f0c <__pow5mult+0xa8>)
 8008e76:	3a01      	subs	r2, #1
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e7e:	f7ff fea7 	bl	8008bd0 <__multadd>
 8008e82:	4606      	mov	r6, r0
 8008e84:	10ad      	asrs	r5, r5, #2
 8008e86:	d03d      	beq.n	8008f04 <__pow5mult+0xa0>
 8008e88:	69fc      	ldr	r4, [r7, #28]
 8008e8a:	b97c      	cbnz	r4, 8008eac <__pow5mult+0x48>
 8008e8c:	2010      	movs	r0, #16
 8008e8e:	f7ff fd87 	bl	80089a0 <malloc>
 8008e92:	4602      	mov	r2, r0
 8008e94:	61f8      	str	r0, [r7, #28]
 8008e96:	b928      	cbnz	r0, 8008ea4 <__pow5mult+0x40>
 8008e98:	4b1d      	ldr	r3, [pc, #116]	@ (8008f10 <__pow5mult+0xac>)
 8008e9a:	481e      	ldr	r0, [pc, #120]	@ (8008f14 <__pow5mult+0xb0>)
 8008e9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ea0:	f000 fc3e 	bl	8009720 <__assert_func>
 8008ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ea8:	6004      	str	r4, [r0, #0]
 8008eaa:	60c4      	str	r4, [r0, #12]
 8008eac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008eb4:	b94c      	cbnz	r4, 8008eca <__pow5mult+0x66>
 8008eb6:	f240 2171 	movw	r1, #625	@ 0x271
 8008eba:	4638      	mov	r0, r7
 8008ebc:	f7ff ff1a 	bl	8008cf4 <__i2b>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	f04f 0900 	mov.w	r9, #0
 8008ece:	07eb      	lsls	r3, r5, #31
 8008ed0:	d50a      	bpl.n	8008ee8 <__pow5mult+0x84>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7ff ff22 	bl	8008d20 <__multiply>
 8008edc:	4631      	mov	r1, r6
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff fe53 	bl	8008b8c <_Bfree>
 8008ee6:	4646      	mov	r6, r8
 8008ee8:	106d      	asrs	r5, r5, #1
 8008eea:	d00b      	beq.n	8008f04 <__pow5mult+0xa0>
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	b938      	cbnz	r0, 8008f00 <__pow5mult+0x9c>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7ff ff13 	bl	8008d20 <__multiply>
 8008efa:	6020      	str	r0, [r4, #0]
 8008efc:	f8c0 9000 	str.w	r9, [r0]
 8008f00:	4604      	mov	r4, r0
 8008f02:	e7e4      	b.n	8008ece <__pow5mult+0x6a>
 8008f04:	4630      	mov	r0, r6
 8008f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	bf00      	nop
 8008f0c:	08009a9c 	.word	0x08009a9c
 8008f10:	08009969 	.word	0x08009969
 8008f14:	080099e9 	.word	0x080099e9

08008f18 <__lshift>:
 8008f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	6849      	ldr	r1, [r1, #4]
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4691      	mov	r9, r2
 8008f2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f30:	f108 0601 	add.w	r6, r8, #1
 8008f34:	42b3      	cmp	r3, r6
 8008f36:	db0b      	blt.n	8008f50 <__lshift+0x38>
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff fde7 	bl	8008b0c <_Balloc>
 8008f3e:	4605      	mov	r5, r0
 8008f40:	b948      	cbnz	r0, 8008f56 <__lshift+0x3e>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b28      	ldr	r3, [pc, #160]	@ (8008fe8 <__lshift+0xd0>)
 8008f46:	4829      	ldr	r0, [pc, #164]	@ (8008fec <__lshift+0xd4>)
 8008f48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f4c:	f000 fbe8 	bl	8009720 <__assert_func>
 8008f50:	3101      	adds	r1, #1
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	e7ee      	b.n	8008f34 <__lshift+0x1c>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f100 0114 	add.w	r1, r0, #20
 8008f5c:	f100 0210 	add.w	r2, r0, #16
 8008f60:	4618      	mov	r0, r3
 8008f62:	4553      	cmp	r3, sl
 8008f64:	db33      	blt.n	8008fce <__lshift+0xb6>
 8008f66:	6920      	ldr	r0, [r4, #16]
 8008f68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f6c:	f104 0314 	add.w	r3, r4, #20
 8008f70:	f019 091f 	ands.w	r9, r9, #31
 8008f74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f7c:	d02b      	beq.n	8008fd6 <__lshift+0xbe>
 8008f7e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f82:	468a      	mov	sl, r1
 8008f84:	2200      	movs	r2, #0
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	fa00 f009 	lsl.w	r0, r0, r9
 8008f8c:	4310      	orrs	r0, r2
 8008f8e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	459c      	cmp	ip, r3
 8008f98:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f9c:	d8f3      	bhi.n	8008f86 <__lshift+0x6e>
 8008f9e:	ebac 0304 	sub.w	r3, ip, r4
 8008fa2:	3b15      	subs	r3, #21
 8008fa4:	f023 0303 	bic.w	r3, r3, #3
 8008fa8:	3304      	adds	r3, #4
 8008faa:	f104 0015 	add.w	r0, r4, #21
 8008fae:	4560      	cmp	r0, ip
 8008fb0:	bf88      	it	hi
 8008fb2:	2304      	movhi	r3, #4
 8008fb4:	50ca      	str	r2, [r1, r3]
 8008fb6:	b10a      	cbz	r2, 8008fbc <__lshift+0xa4>
 8008fb8:	f108 0602 	add.w	r6, r8, #2
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	612e      	str	r6, [r5, #16]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f7ff fde2 	bl	8008b8c <_Bfree>
 8008fc8:	4628      	mov	r0, r5
 8008fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fce:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	e7c5      	b.n	8008f62 <__lshift+0x4a>
 8008fd6:	3904      	subs	r1, #4
 8008fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fe0:	459c      	cmp	ip, r3
 8008fe2:	d8f9      	bhi.n	8008fd8 <__lshift+0xc0>
 8008fe4:	e7ea      	b.n	8008fbc <__lshift+0xa4>
 8008fe6:	bf00      	nop
 8008fe8:	080099d8 	.word	0x080099d8
 8008fec:	080099e9 	.word	0x080099e9

08008ff0 <__mcmp>:
 8008ff0:	690a      	ldr	r2, [r1, #16]
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6900      	ldr	r0, [r0, #16]
 8008ff6:	1a80      	subs	r0, r0, r2
 8008ff8:	b530      	push	{r4, r5, lr}
 8008ffa:	d10e      	bne.n	800901a <__mcmp+0x2a>
 8008ffc:	3314      	adds	r3, #20
 8008ffe:	3114      	adds	r1, #20
 8009000:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009004:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009008:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800900c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009010:	4295      	cmp	r5, r2
 8009012:	d003      	beq.n	800901c <__mcmp+0x2c>
 8009014:	d205      	bcs.n	8009022 <__mcmp+0x32>
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	bd30      	pop	{r4, r5, pc}
 800901c:	42a3      	cmp	r3, r4
 800901e:	d3f3      	bcc.n	8009008 <__mcmp+0x18>
 8009020:	e7fb      	b.n	800901a <__mcmp+0x2a>
 8009022:	2001      	movs	r0, #1
 8009024:	e7f9      	b.n	800901a <__mcmp+0x2a>
	...

08009028 <__mdiff>:
 8009028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	4689      	mov	r9, r1
 800902e:	4606      	mov	r6, r0
 8009030:	4611      	mov	r1, r2
 8009032:	4648      	mov	r0, r9
 8009034:	4614      	mov	r4, r2
 8009036:	f7ff ffdb 	bl	8008ff0 <__mcmp>
 800903a:	1e05      	subs	r5, r0, #0
 800903c:	d112      	bne.n	8009064 <__mdiff+0x3c>
 800903e:	4629      	mov	r1, r5
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff fd63 	bl	8008b0c <_Balloc>
 8009046:	4602      	mov	r2, r0
 8009048:	b928      	cbnz	r0, 8009056 <__mdiff+0x2e>
 800904a:	4b3f      	ldr	r3, [pc, #252]	@ (8009148 <__mdiff+0x120>)
 800904c:	f240 2137 	movw	r1, #567	@ 0x237
 8009050:	483e      	ldr	r0, [pc, #248]	@ (800914c <__mdiff+0x124>)
 8009052:	f000 fb65 	bl	8009720 <__assert_func>
 8009056:	2301      	movs	r3, #1
 8009058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800905c:	4610      	mov	r0, r2
 800905e:	b003      	add	sp, #12
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	bfbc      	itt	lt
 8009066:	464b      	movlt	r3, r9
 8009068:	46a1      	movlt	r9, r4
 800906a:	4630      	mov	r0, r6
 800906c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009070:	bfba      	itte	lt
 8009072:	461c      	movlt	r4, r3
 8009074:	2501      	movlt	r5, #1
 8009076:	2500      	movge	r5, #0
 8009078:	f7ff fd48 	bl	8008b0c <_Balloc>
 800907c:	4602      	mov	r2, r0
 800907e:	b918      	cbnz	r0, 8009088 <__mdiff+0x60>
 8009080:	4b31      	ldr	r3, [pc, #196]	@ (8009148 <__mdiff+0x120>)
 8009082:	f240 2145 	movw	r1, #581	@ 0x245
 8009086:	e7e3      	b.n	8009050 <__mdiff+0x28>
 8009088:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800908c:	6926      	ldr	r6, [r4, #16]
 800908e:	60c5      	str	r5, [r0, #12]
 8009090:	f109 0310 	add.w	r3, r9, #16
 8009094:	f109 0514 	add.w	r5, r9, #20
 8009098:	f104 0e14 	add.w	lr, r4, #20
 800909c:	f100 0b14 	add.w	fp, r0, #20
 80090a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80090a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	46d9      	mov	r9, fp
 80090ac:	f04f 0c00 	mov.w	ip, #0
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80090b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	fa1f f38a 	uxth.w	r3, sl
 80090c0:	4619      	mov	r1, r3
 80090c2:	b283      	uxth	r3, r0
 80090c4:	1acb      	subs	r3, r1, r3
 80090c6:	0c00      	lsrs	r0, r0, #16
 80090c8:	4463      	add	r3, ip
 80090ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80090ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090d8:	4576      	cmp	r6, lr
 80090da:	f849 3b04 	str.w	r3, [r9], #4
 80090de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090e2:	d8e5      	bhi.n	80090b0 <__mdiff+0x88>
 80090e4:	1b33      	subs	r3, r6, r4
 80090e6:	3b15      	subs	r3, #21
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	3415      	adds	r4, #21
 80090ee:	3304      	adds	r3, #4
 80090f0:	42a6      	cmp	r6, r4
 80090f2:	bf38      	it	cc
 80090f4:	2304      	movcc	r3, #4
 80090f6:	441d      	add	r5, r3
 80090f8:	445b      	add	r3, fp
 80090fa:	461e      	mov	r6, r3
 80090fc:	462c      	mov	r4, r5
 80090fe:	4544      	cmp	r4, r8
 8009100:	d30e      	bcc.n	8009120 <__mdiff+0xf8>
 8009102:	f108 0103 	add.w	r1, r8, #3
 8009106:	1b49      	subs	r1, r1, r5
 8009108:	f021 0103 	bic.w	r1, r1, #3
 800910c:	3d03      	subs	r5, #3
 800910e:	45a8      	cmp	r8, r5
 8009110:	bf38      	it	cc
 8009112:	2100      	movcc	r1, #0
 8009114:	440b      	add	r3, r1
 8009116:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800911a:	b191      	cbz	r1, 8009142 <__mdiff+0x11a>
 800911c:	6117      	str	r7, [r2, #16]
 800911e:	e79d      	b.n	800905c <__mdiff+0x34>
 8009120:	f854 1b04 	ldr.w	r1, [r4], #4
 8009124:	46e6      	mov	lr, ip
 8009126:	0c08      	lsrs	r0, r1, #16
 8009128:	fa1c fc81 	uxtah	ip, ip, r1
 800912c:	4471      	add	r1, lr
 800912e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009132:	b289      	uxth	r1, r1
 8009134:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009138:	f846 1b04 	str.w	r1, [r6], #4
 800913c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009140:	e7dd      	b.n	80090fe <__mdiff+0xd6>
 8009142:	3f01      	subs	r7, #1
 8009144:	e7e7      	b.n	8009116 <__mdiff+0xee>
 8009146:	bf00      	nop
 8009148:	080099d8 	.word	0x080099d8
 800914c:	080099e9 	.word	0x080099e9

08009150 <__d2b>:
 8009150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009154:	460f      	mov	r7, r1
 8009156:	2101      	movs	r1, #1
 8009158:	ec59 8b10 	vmov	r8, r9, d0
 800915c:	4616      	mov	r6, r2
 800915e:	f7ff fcd5 	bl	8008b0c <_Balloc>
 8009162:	4604      	mov	r4, r0
 8009164:	b930      	cbnz	r0, 8009174 <__d2b+0x24>
 8009166:	4602      	mov	r2, r0
 8009168:	4b23      	ldr	r3, [pc, #140]	@ (80091f8 <__d2b+0xa8>)
 800916a:	4824      	ldr	r0, [pc, #144]	@ (80091fc <__d2b+0xac>)
 800916c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009170:	f000 fad6 	bl	8009720 <__assert_func>
 8009174:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800917c:	b10d      	cbz	r5, 8009182 <__d2b+0x32>
 800917e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	f1b8 0300 	subs.w	r3, r8, #0
 8009188:	d023      	beq.n	80091d2 <__d2b+0x82>
 800918a:	4668      	mov	r0, sp
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	f7ff fd84 	bl	8008c9a <__lo0bits>
 8009192:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009196:	b1d0      	cbz	r0, 80091ce <__d2b+0x7e>
 8009198:	f1c0 0320 	rsb	r3, r0, #32
 800919c:	fa02 f303 	lsl.w	r3, r2, r3
 80091a0:	430b      	orrs	r3, r1
 80091a2:	40c2      	lsrs	r2, r0
 80091a4:	6163      	str	r3, [r4, #20]
 80091a6:	9201      	str	r2, [sp, #4]
 80091a8:	9b01      	ldr	r3, [sp, #4]
 80091aa:	61a3      	str	r3, [r4, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bf0c      	ite	eq
 80091b0:	2201      	moveq	r2, #1
 80091b2:	2202      	movne	r2, #2
 80091b4:	6122      	str	r2, [r4, #16]
 80091b6:	b1a5      	cbz	r5, 80091e2 <__d2b+0x92>
 80091b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80091bc:	4405      	add	r5, r0
 80091be:	603d      	str	r5, [r7, #0]
 80091c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80091c4:	6030      	str	r0, [r6, #0]
 80091c6:	4620      	mov	r0, r4
 80091c8:	b003      	add	sp, #12
 80091ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091ce:	6161      	str	r1, [r4, #20]
 80091d0:	e7ea      	b.n	80091a8 <__d2b+0x58>
 80091d2:	a801      	add	r0, sp, #4
 80091d4:	f7ff fd61 	bl	8008c9a <__lo0bits>
 80091d8:	9b01      	ldr	r3, [sp, #4]
 80091da:	6163      	str	r3, [r4, #20]
 80091dc:	3020      	adds	r0, #32
 80091de:	2201      	movs	r2, #1
 80091e0:	e7e8      	b.n	80091b4 <__d2b+0x64>
 80091e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091ea:	6038      	str	r0, [r7, #0]
 80091ec:	6918      	ldr	r0, [r3, #16]
 80091ee:	f7ff fd35 	bl	8008c5c <__hi0bits>
 80091f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091f6:	e7e5      	b.n	80091c4 <__d2b+0x74>
 80091f8:	080099d8 	.word	0x080099d8
 80091fc:	080099e9 	.word	0x080099e9

08009200 <__sfputc_r>:
 8009200:	6893      	ldr	r3, [r2, #8]
 8009202:	3b01      	subs	r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	b410      	push	{r4}
 8009208:	6093      	str	r3, [r2, #8]
 800920a:	da08      	bge.n	800921e <__sfputc_r+0x1e>
 800920c:	6994      	ldr	r4, [r2, #24]
 800920e:	42a3      	cmp	r3, r4
 8009210:	db01      	blt.n	8009216 <__sfputc_r+0x16>
 8009212:	290a      	cmp	r1, #10
 8009214:	d103      	bne.n	800921e <__sfputc_r+0x1e>
 8009216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800921a:	f7fe bc7c 	b.w	8007b16 <__swbuf_r>
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	1c58      	adds	r0, r3, #1
 8009222:	6010      	str	r0, [r2, #0]
 8009224:	7019      	strb	r1, [r3, #0]
 8009226:	4608      	mov	r0, r1
 8009228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800922c:	4770      	bx	lr

0800922e <__sfputs_r>:
 800922e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009230:	4606      	mov	r6, r0
 8009232:	460f      	mov	r7, r1
 8009234:	4614      	mov	r4, r2
 8009236:	18d5      	adds	r5, r2, r3
 8009238:	42ac      	cmp	r4, r5
 800923a:	d101      	bne.n	8009240 <__sfputs_r+0x12>
 800923c:	2000      	movs	r0, #0
 800923e:	e007      	b.n	8009250 <__sfputs_r+0x22>
 8009240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009244:	463a      	mov	r2, r7
 8009246:	4630      	mov	r0, r6
 8009248:	f7ff ffda 	bl	8009200 <__sfputc_r>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d1f3      	bne.n	8009238 <__sfputs_r+0xa>
 8009250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009254 <_vfiprintf_r>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	460d      	mov	r5, r1
 800925a:	b09d      	sub	sp, #116	@ 0x74
 800925c:	4614      	mov	r4, r2
 800925e:	4698      	mov	r8, r3
 8009260:	4606      	mov	r6, r0
 8009262:	b118      	cbz	r0, 800926c <_vfiprintf_r+0x18>
 8009264:	6a03      	ldr	r3, [r0, #32]
 8009266:	b90b      	cbnz	r3, 800926c <_vfiprintf_r+0x18>
 8009268:	f7fe fb6c 	bl	8007944 <__sinit>
 800926c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d405      	bmi.n	800927e <_vfiprintf_r+0x2a>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d402      	bmi.n	800927e <_vfiprintf_r+0x2a>
 8009278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927a:	f7fe fd5e 	bl	8007d3a <__retarget_lock_acquire_recursive>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	071b      	lsls	r3, r3, #28
 8009282:	d501      	bpl.n	8009288 <_vfiprintf_r+0x34>
 8009284:	692b      	ldr	r3, [r5, #16]
 8009286:	b99b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x5c>
 8009288:	4629      	mov	r1, r5
 800928a:	4630      	mov	r0, r6
 800928c:	f7fe fc82 	bl	8007b94 <__swsetup_r>
 8009290:	b170      	cbz	r0, 80092b0 <_vfiprintf_r+0x5c>
 8009292:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009294:	07dc      	lsls	r4, r3, #31
 8009296:	d504      	bpl.n	80092a2 <_vfiprintf_r+0x4e>
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	b01d      	add	sp, #116	@ 0x74
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	0598      	lsls	r0, r3, #22
 80092a6:	d4f7      	bmi.n	8009298 <_vfiprintf_r+0x44>
 80092a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092aa:	f7fe fd47 	bl	8007d3c <__retarget_lock_release_recursive>
 80092ae:	e7f3      	b.n	8009298 <_vfiprintf_r+0x44>
 80092b0:	2300      	movs	r3, #0
 80092b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b4:	2320      	movs	r3, #32
 80092b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80092be:	2330      	movs	r3, #48	@ 0x30
 80092c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009470 <_vfiprintf_r+0x21c>
 80092c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092c8:	f04f 0901 	mov.w	r9, #1
 80092cc:	4623      	mov	r3, r4
 80092ce:	469a      	mov	sl, r3
 80092d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d4:	b10a      	cbz	r2, 80092da <_vfiprintf_r+0x86>
 80092d6:	2a25      	cmp	r2, #37	@ 0x25
 80092d8:	d1f9      	bne.n	80092ce <_vfiprintf_r+0x7a>
 80092da:	ebba 0b04 	subs.w	fp, sl, r4
 80092de:	d00b      	beq.n	80092f8 <_vfiprintf_r+0xa4>
 80092e0:	465b      	mov	r3, fp
 80092e2:	4622      	mov	r2, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff ffa1 	bl	800922e <__sfputs_r>
 80092ec:	3001      	adds	r0, #1
 80092ee:	f000 80a7 	beq.w	8009440 <_vfiprintf_r+0x1ec>
 80092f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f4:	445a      	add	r2, fp
 80092f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f8:	f89a 3000 	ldrb.w	r3, [sl]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 809f 	beq.w	8009440 <_vfiprintf_r+0x1ec>
 8009302:	2300      	movs	r3, #0
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930c:	f10a 0a01 	add.w	sl, sl, #1
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	9307      	str	r3, [sp, #28]
 8009314:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009318:	931a      	str	r3, [sp, #104]	@ 0x68
 800931a:	4654      	mov	r4, sl
 800931c:	2205      	movs	r2, #5
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	4853      	ldr	r0, [pc, #332]	@ (8009470 <_vfiprintf_r+0x21c>)
 8009324:	f7f6 ffdc 	bl	80002e0 <memchr>
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	b9d8      	cbnz	r0, 8009364 <_vfiprintf_r+0x110>
 800932c:	06d1      	lsls	r1, r2, #27
 800932e:	bf44      	itt	mi
 8009330:	2320      	movmi	r3, #32
 8009332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009336:	0713      	lsls	r3, r2, #28
 8009338:	bf44      	itt	mi
 800933a:	232b      	movmi	r3, #43	@ 0x2b
 800933c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009340:	f89a 3000 	ldrb.w	r3, [sl]
 8009344:	2b2a      	cmp	r3, #42	@ 0x2a
 8009346:	d015      	beq.n	8009374 <_vfiprintf_r+0x120>
 8009348:	9a07      	ldr	r2, [sp, #28]
 800934a:	4654      	mov	r4, sl
 800934c:	2000      	movs	r0, #0
 800934e:	f04f 0c0a 	mov.w	ip, #10
 8009352:	4621      	mov	r1, r4
 8009354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009358:	3b30      	subs	r3, #48	@ 0x30
 800935a:	2b09      	cmp	r3, #9
 800935c:	d94b      	bls.n	80093f6 <_vfiprintf_r+0x1a2>
 800935e:	b1b0      	cbz	r0, 800938e <_vfiprintf_r+0x13a>
 8009360:	9207      	str	r2, [sp, #28]
 8009362:	e014      	b.n	800938e <_vfiprintf_r+0x13a>
 8009364:	eba0 0308 	sub.w	r3, r0, r8
 8009368:	fa09 f303 	lsl.w	r3, r9, r3
 800936c:	4313      	orrs	r3, r2
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	46a2      	mov	sl, r4
 8009372:	e7d2      	b.n	800931a <_vfiprintf_r+0xc6>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	1d19      	adds	r1, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	9103      	str	r1, [sp, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfbb      	ittet	lt
 8009380:	425b      	neglt	r3, r3
 8009382:	f042 0202 	orrlt.w	r2, r2, #2
 8009386:	9307      	strge	r3, [sp, #28]
 8009388:	9307      	strlt	r3, [sp, #28]
 800938a:	bfb8      	it	lt
 800938c:	9204      	strlt	r2, [sp, #16]
 800938e:	7823      	ldrb	r3, [r4, #0]
 8009390:	2b2e      	cmp	r3, #46	@ 0x2e
 8009392:	d10a      	bne.n	80093aa <_vfiprintf_r+0x156>
 8009394:	7863      	ldrb	r3, [r4, #1]
 8009396:	2b2a      	cmp	r3, #42	@ 0x2a
 8009398:	d132      	bne.n	8009400 <_vfiprintf_r+0x1ac>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	1d1a      	adds	r2, r3, #4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	9203      	str	r2, [sp, #12]
 80093a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093a6:	3402      	adds	r4, #2
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009480 <_vfiprintf_r+0x22c>
 80093ae:	7821      	ldrb	r1, [r4, #0]
 80093b0:	2203      	movs	r2, #3
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7f6 ff94 	bl	80002e0 <memchr>
 80093b8:	b138      	cbz	r0, 80093ca <_vfiprintf_r+0x176>
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	eba0 000a 	sub.w	r0, r0, sl
 80093c0:	2240      	movs	r2, #64	@ 0x40
 80093c2:	4082      	lsls	r2, r0
 80093c4:	4313      	orrs	r3, r2
 80093c6:	3401      	adds	r4, #1
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ce:	4829      	ldr	r0, [pc, #164]	@ (8009474 <_vfiprintf_r+0x220>)
 80093d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093d4:	2206      	movs	r2, #6
 80093d6:	f7f6 ff83 	bl	80002e0 <memchr>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d03f      	beq.n	800945e <_vfiprintf_r+0x20a>
 80093de:	4b26      	ldr	r3, [pc, #152]	@ (8009478 <_vfiprintf_r+0x224>)
 80093e0:	bb1b      	cbnz	r3, 800942a <_vfiprintf_r+0x1d6>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	3307      	adds	r3, #7
 80093e6:	f023 0307 	bic.w	r3, r3, #7
 80093ea:	3308      	adds	r3, #8
 80093ec:	9303      	str	r3, [sp, #12]
 80093ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f0:	443b      	add	r3, r7
 80093f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f4:	e76a      	b.n	80092cc <_vfiprintf_r+0x78>
 80093f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fa:	460c      	mov	r4, r1
 80093fc:	2001      	movs	r0, #1
 80093fe:	e7a8      	b.n	8009352 <_vfiprintf_r+0xfe>
 8009400:	2300      	movs	r3, #0
 8009402:	3401      	adds	r4, #1
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	4619      	mov	r1, r3
 8009408:	f04f 0c0a 	mov.w	ip, #10
 800940c:	4620      	mov	r0, r4
 800940e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009412:	3a30      	subs	r2, #48	@ 0x30
 8009414:	2a09      	cmp	r2, #9
 8009416:	d903      	bls.n	8009420 <_vfiprintf_r+0x1cc>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0c6      	beq.n	80093aa <_vfiprintf_r+0x156>
 800941c:	9105      	str	r1, [sp, #20]
 800941e:	e7c4      	b.n	80093aa <_vfiprintf_r+0x156>
 8009420:	fb0c 2101 	mla	r1, ip, r1, r2
 8009424:	4604      	mov	r4, r0
 8009426:	2301      	movs	r3, #1
 8009428:	e7f0      	b.n	800940c <_vfiprintf_r+0x1b8>
 800942a:	ab03      	add	r3, sp, #12
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	462a      	mov	r2, r5
 8009430:	4b12      	ldr	r3, [pc, #72]	@ (800947c <_vfiprintf_r+0x228>)
 8009432:	a904      	add	r1, sp, #16
 8009434:	4630      	mov	r0, r6
 8009436:	f7fd fe53 	bl	80070e0 <_printf_float>
 800943a:	4607      	mov	r7, r0
 800943c:	1c78      	adds	r0, r7, #1
 800943e:	d1d6      	bne.n	80093ee <_vfiprintf_r+0x19a>
 8009440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d405      	bmi.n	8009452 <_vfiprintf_r+0x1fe>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	059a      	lsls	r2, r3, #22
 800944a:	d402      	bmi.n	8009452 <_vfiprintf_r+0x1fe>
 800944c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800944e:	f7fe fc75 	bl	8007d3c <__retarget_lock_release_recursive>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	065b      	lsls	r3, r3, #25
 8009456:	f53f af1f 	bmi.w	8009298 <_vfiprintf_r+0x44>
 800945a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800945c:	e71e      	b.n	800929c <_vfiprintf_r+0x48>
 800945e:	ab03      	add	r3, sp, #12
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	462a      	mov	r2, r5
 8009464:	4b05      	ldr	r3, [pc, #20]	@ (800947c <_vfiprintf_r+0x228>)
 8009466:	a904      	add	r1, sp, #16
 8009468:	4630      	mov	r0, r6
 800946a:	f7fe f8c1 	bl	80075f0 <_printf_i>
 800946e:	e7e4      	b.n	800943a <_vfiprintf_r+0x1e6>
 8009470:	08009a42 	.word	0x08009a42
 8009474:	08009a4c 	.word	0x08009a4c
 8009478:	080070e1 	.word	0x080070e1
 800947c:	0800922f 	.word	0x0800922f
 8009480:	08009a48 	.word	0x08009a48

08009484 <__sflush_r>:
 8009484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	0716      	lsls	r6, r2, #28
 800948e:	4605      	mov	r5, r0
 8009490:	460c      	mov	r4, r1
 8009492:	d454      	bmi.n	800953e <__sflush_r+0xba>
 8009494:	684b      	ldr	r3, [r1, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	dc02      	bgt.n	80094a0 <__sflush_r+0x1c>
 800949a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd48      	ble.n	8009532 <__sflush_r+0xae>
 80094a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	d045      	beq.n	8009532 <__sflush_r+0xae>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094ac:	682f      	ldr	r7, [r5, #0]
 80094ae:	6a21      	ldr	r1, [r4, #32]
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	d030      	beq.n	8009516 <__sflush_r+0x92>
 80094b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	0759      	lsls	r1, r3, #29
 80094ba:	d505      	bpl.n	80094c8 <__sflush_r+0x44>
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094c2:	b10b      	cbz	r3, 80094c8 <__sflush_r+0x44>
 80094c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094c6:	1ad2      	subs	r2, r2, r3
 80094c8:	2300      	movs	r3, #0
 80094ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094cc:	6a21      	ldr	r1, [r4, #32]
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b0      	blx	r6
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	d106      	bne.n	80094e6 <__sflush_r+0x62>
 80094d8:	6829      	ldr	r1, [r5, #0]
 80094da:	291d      	cmp	r1, #29
 80094dc:	d82b      	bhi.n	8009536 <__sflush_r+0xb2>
 80094de:	4a2a      	ldr	r2, [pc, #168]	@ (8009588 <__sflush_r+0x104>)
 80094e0:	40ca      	lsrs	r2, r1
 80094e2:	07d6      	lsls	r6, r2, #31
 80094e4:	d527      	bpl.n	8009536 <__sflush_r+0xb2>
 80094e6:	2200      	movs	r2, #0
 80094e8:	6062      	str	r2, [r4, #4]
 80094ea:	04d9      	lsls	r1, r3, #19
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	d504      	bpl.n	80094fc <__sflush_r+0x78>
 80094f2:	1c42      	adds	r2, r0, #1
 80094f4:	d101      	bne.n	80094fa <__sflush_r+0x76>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b903      	cbnz	r3, 80094fc <__sflush_r+0x78>
 80094fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80094fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094fe:	602f      	str	r7, [r5, #0]
 8009500:	b1b9      	cbz	r1, 8009532 <__sflush_r+0xae>
 8009502:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009506:	4299      	cmp	r1, r3
 8009508:	d002      	beq.n	8009510 <__sflush_r+0x8c>
 800950a:	4628      	mov	r0, r5
 800950c:	f7ff f9fe 	bl	800890c <_free_r>
 8009510:	2300      	movs	r3, #0
 8009512:	6363      	str	r3, [r4, #52]	@ 0x34
 8009514:	e00d      	b.n	8009532 <__sflush_r+0xae>
 8009516:	2301      	movs	r3, #1
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	4602      	mov	r2, r0
 800951e:	1c50      	adds	r0, r2, #1
 8009520:	d1c9      	bne.n	80094b6 <__sflush_r+0x32>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0c6      	beq.n	80094b6 <__sflush_r+0x32>
 8009528:	2b1d      	cmp	r3, #29
 800952a:	d001      	beq.n	8009530 <__sflush_r+0xac>
 800952c:	2b16      	cmp	r3, #22
 800952e:	d11e      	bne.n	800956e <__sflush_r+0xea>
 8009530:	602f      	str	r7, [r5, #0]
 8009532:	2000      	movs	r0, #0
 8009534:	e022      	b.n	800957c <__sflush_r+0xf8>
 8009536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800953a:	b21b      	sxth	r3, r3
 800953c:	e01b      	b.n	8009576 <__sflush_r+0xf2>
 800953e:	690f      	ldr	r7, [r1, #16]
 8009540:	2f00      	cmp	r7, #0
 8009542:	d0f6      	beq.n	8009532 <__sflush_r+0xae>
 8009544:	0793      	lsls	r3, r2, #30
 8009546:	680e      	ldr	r6, [r1, #0]
 8009548:	bf08      	it	eq
 800954a:	694b      	ldreq	r3, [r1, #20]
 800954c:	600f      	str	r7, [r1, #0]
 800954e:	bf18      	it	ne
 8009550:	2300      	movne	r3, #0
 8009552:	eba6 0807 	sub.w	r8, r6, r7
 8009556:	608b      	str	r3, [r1, #8]
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	dde9      	ble.n	8009532 <__sflush_r+0xae>
 800955e:	6a21      	ldr	r1, [r4, #32]
 8009560:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009562:	4643      	mov	r3, r8
 8009564:	463a      	mov	r2, r7
 8009566:	4628      	mov	r0, r5
 8009568:	47b0      	blx	r6
 800956a:	2800      	cmp	r0, #0
 800956c:	dc08      	bgt.n	8009580 <__sflush_r+0xfc>
 800956e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	4407      	add	r7, r0
 8009582:	eba8 0800 	sub.w	r8, r8, r0
 8009586:	e7e7      	b.n	8009558 <__sflush_r+0xd4>
 8009588:	20400001 	.word	0x20400001

0800958c <_fflush_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	4605      	mov	r5, r0
 8009592:	460c      	mov	r4, r1
 8009594:	b913      	cbnz	r3, 800959c <_fflush_r+0x10>
 8009596:	2500      	movs	r5, #0
 8009598:	4628      	mov	r0, r5
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	b118      	cbz	r0, 80095a6 <_fflush_r+0x1a>
 800959e:	6a03      	ldr	r3, [r0, #32]
 80095a0:	b90b      	cbnz	r3, 80095a6 <_fflush_r+0x1a>
 80095a2:	f7fe f9cf 	bl	8007944 <__sinit>
 80095a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f3      	beq.n	8009596 <_fflush_r+0xa>
 80095ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095b0:	07d0      	lsls	r0, r2, #31
 80095b2:	d404      	bmi.n	80095be <_fflush_r+0x32>
 80095b4:	0599      	lsls	r1, r3, #22
 80095b6:	d402      	bmi.n	80095be <_fflush_r+0x32>
 80095b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ba:	f7fe fbbe 	bl	8007d3a <__retarget_lock_acquire_recursive>
 80095be:	4628      	mov	r0, r5
 80095c0:	4621      	mov	r1, r4
 80095c2:	f7ff ff5f 	bl	8009484 <__sflush_r>
 80095c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095c8:	07da      	lsls	r2, r3, #31
 80095ca:	4605      	mov	r5, r0
 80095cc:	d4e4      	bmi.n	8009598 <_fflush_r+0xc>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	059b      	lsls	r3, r3, #22
 80095d2:	d4e1      	bmi.n	8009598 <_fflush_r+0xc>
 80095d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095d6:	f7fe fbb1 	bl	8007d3c <__retarget_lock_release_recursive>
 80095da:	e7dd      	b.n	8009598 <_fflush_r+0xc>

080095dc <__swhatbuf_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	460c      	mov	r4, r1
 80095e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e4:	2900      	cmp	r1, #0
 80095e6:	b096      	sub	sp, #88	@ 0x58
 80095e8:	4615      	mov	r5, r2
 80095ea:	461e      	mov	r6, r3
 80095ec:	da0d      	bge.n	800960a <__swhatbuf_r+0x2e>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	bf14      	ite	ne
 80095fa:	2340      	movne	r3, #64	@ 0x40
 80095fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009600:	2000      	movs	r0, #0
 8009602:	6031      	str	r1, [r6, #0]
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	b016      	add	sp, #88	@ 0x58
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	466a      	mov	r2, sp
 800960c:	f000 f848 	bl	80096a0 <_fstat_r>
 8009610:	2800      	cmp	r0, #0
 8009612:	dbec      	blt.n	80095ee <__swhatbuf_r+0x12>
 8009614:	9901      	ldr	r1, [sp, #4]
 8009616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800961a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800961e:	4259      	negs	r1, r3
 8009620:	4159      	adcs	r1, r3
 8009622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009626:	e7eb      	b.n	8009600 <__swhatbuf_r+0x24>

08009628 <__smakebuf_r>:
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800962c:	079d      	lsls	r5, r3, #30
 800962e:	4606      	mov	r6, r0
 8009630:	460c      	mov	r4, r1
 8009632:	d507      	bpl.n	8009644 <__smakebuf_r+0x1c>
 8009634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2301      	movs	r3, #1
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	b003      	add	sp, #12
 8009642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009644:	ab01      	add	r3, sp, #4
 8009646:	466a      	mov	r2, sp
 8009648:	f7ff ffc8 	bl	80095dc <__swhatbuf_r>
 800964c:	9f00      	ldr	r7, [sp, #0]
 800964e:	4605      	mov	r5, r0
 8009650:	4639      	mov	r1, r7
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff f9ce 	bl	80089f4 <_malloc_r>
 8009658:	b948      	cbnz	r0, 800966e <__smakebuf_r+0x46>
 800965a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965e:	059a      	lsls	r2, r3, #22
 8009660:	d4ee      	bmi.n	8009640 <__smakebuf_r+0x18>
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	f043 0302 	orr.w	r3, r3, #2
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	e7e2      	b.n	8009634 <__smakebuf_r+0xc>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	6020      	str	r0, [r4, #0]
 8009672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800967e:	b15b      	cbz	r3, 8009698 <__smakebuf_r+0x70>
 8009680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f81d 	bl	80096c4 <_isatty_r>
 800968a:	b128      	cbz	r0, 8009698 <__smakebuf_r+0x70>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	431d      	orrs	r5, r3
 800969c:	81a5      	strh	r5, [r4, #12]
 800969e:	e7cf      	b.n	8009640 <__smakebuf_r+0x18>

080096a0 <_fstat_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d07      	ldr	r5, [pc, #28]	@ (80096c0 <_fstat_r+0x20>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	f7f7 fd0b 	bl	80010c8 <_fstat>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d102      	bne.n	80096bc <_fstat_r+0x1c>
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	b103      	cbz	r3, 80096bc <_fstat_r+0x1c>
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop
 80096c0:	240043e4 	.word	0x240043e4

080096c4 <_isatty_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	@ (80096e0 <_isatty_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f7 fd0a 	bl	80010e8 <_isatty>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_isatty_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_isatty_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	240043e4 	.word	0x240043e4

080096e4 <_sbrk_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d06      	ldr	r5, [pc, #24]	@ (8009700 <_sbrk_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f7 fd12 	bl	8001118 <_sbrk>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_sbrk_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_sbrk_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	240043e4 	.word	0x240043e4

08009704 <memcpy>:
 8009704:	440a      	add	r2, r1
 8009706:	4291      	cmp	r1, r2
 8009708:	f100 33ff 	add.w	r3, r0, #4294967295
 800970c:	d100      	bne.n	8009710 <memcpy+0xc>
 800970e:	4770      	bx	lr
 8009710:	b510      	push	{r4, lr}
 8009712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800971a:	4291      	cmp	r1, r2
 800971c:	d1f9      	bne.n	8009712 <memcpy+0xe>
 800971e:	bd10      	pop	{r4, pc}

08009720 <__assert_func>:
 8009720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009722:	4614      	mov	r4, r2
 8009724:	461a      	mov	r2, r3
 8009726:	4b09      	ldr	r3, [pc, #36]	@ (800974c <__assert_func+0x2c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4605      	mov	r5, r0
 800972c:	68d8      	ldr	r0, [r3, #12]
 800972e:	b14c      	cbz	r4, 8009744 <__assert_func+0x24>
 8009730:	4b07      	ldr	r3, [pc, #28]	@ (8009750 <__assert_func+0x30>)
 8009732:	9100      	str	r1, [sp, #0]
 8009734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009738:	4906      	ldr	r1, [pc, #24]	@ (8009754 <__assert_func+0x34>)
 800973a:	462b      	mov	r3, r5
 800973c:	f000 f842 	bl	80097c4 <fiprintf>
 8009740:	f000 f852 	bl	80097e8 <abort>
 8009744:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <__assert_func+0x38>)
 8009746:	461c      	mov	r4, r3
 8009748:	e7f3      	b.n	8009732 <__assert_func+0x12>
 800974a:	bf00      	nop
 800974c:	2400001c 	.word	0x2400001c
 8009750:	08009a5d 	.word	0x08009a5d
 8009754:	08009a6a 	.word	0x08009a6a
 8009758:	08009a98 	.word	0x08009a98

0800975c <_calloc_r>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	fba1 5402 	umull	r5, r4, r1, r2
 8009762:	b934      	cbnz	r4, 8009772 <_calloc_r+0x16>
 8009764:	4629      	mov	r1, r5
 8009766:	f7ff f945 	bl	80089f4 <_malloc_r>
 800976a:	4606      	mov	r6, r0
 800976c:	b928      	cbnz	r0, 800977a <_calloc_r+0x1e>
 800976e:	4630      	mov	r0, r6
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	220c      	movs	r2, #12
 8009774:	6002      	str	r2, [r0, #0]
 8009776:	2600      	movs	r6, #0
 8009778:	e7f9      	b.n	800976e <_calloc_r+0x12>
 800977a:	462a      	mov	r2, r5
 800977c:	4621      	mov	r1, r4
 800977e:	f7fe fa5f 	bl	8007c40 <memset>
 8009782:	e7f4      	b.n	800976e <_calloc_r+0x12>

08009784 <__ascii_mbtowc>:
 8009784:	b082      	sub	sp, #8
 8009786:	b901      	cbnz	r1, 800978a <__ascii_mbtowc+0x6>
 8009788:	a901      	add	r1, sp, #4
 800978a:	b142      	cbz	r2, 800979e <__ascii_mbtowc+0x1a>
 800978c:	b14b      	cbz	r3, 80097a2 <__ascii_mbtowc+0x1e>
 800978e:	7813      	ldrb	r3, [r2, #0]
 8009790:	600b      	str	r3, [r1, #0]
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	1e10      	subs	r0, r2, #0
 8009796:	bf18      	it	ne
 8009798:	2001      	movne	r0, #1
 800979a:	b002      	add	sp, #8
 800979c:	4770      	bx	lr
 800979e:	4610      	mov	r0, r2
 80097a0:	e7fb      	b.n	800979a <__ascii_mbtowc+0x16>
 80097a2:	f06f 0001 	mvn.w	r0, #1
 80097a6:	e7f8      	b.n	800979a <__ascii_mbtowc+0x16>

080097a8 <__ascii_wctomb>:
 80097a8:	4603      	mov	r3, r0
 80097aa:	4608      	mov	r0, r1
 80097ac:	b141      	cbz	r1, 80097c0 <__ascii_wctomb+0x18>
 80097ae:	2aff      	cmp	r2, #255	@ 0xff
 80097b0:	d904      	bls.n	80097bc <__ascii_wctomb+0x14>
 80097b2:	228a      	movs	r2, #138	@ 0x8a
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	4770      	bx	lr
 80097bc:	700a      	strb	r2, [r1, #0]
 80097be:	2001      	movs	r0, #1
 80097c0:	4770      	bx	lr
	...

080097c4 <fiprintf>:
 80097c4:	b40e      	push	{r1, r2, r3}
 80097c6:	b503      	push	{r0, r1, lr}
 80097c8:	4601      	mov	r1, r0
 80097ca:	ab03      	add	r3, sp, #12
 80097cc:	4805      	ldr	r0, [pc, #20]	@ (80097e4 <fiprintf+0x20>)
 80097ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d2:	6800      	ldr	r0, [r0, #0]
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	f7ff fd3d 	bl	8009254 <_vfiprintf_r>
 80097da:	b002      	add	sp, #8
 80097dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097e0:	b003      	add	sp, #12
 80097e2:	4770      	bx	lr
 80097e4:	2400001c 	.word	0x2400001c

080097e8 <abort>:
 80097e8:	b508      	push	{r3, lr}
 80097ea:	2006      	movs	r0, #6
 80097ec:	f000 f82c 	bl	8009848 <raise>
 80097f0:	2001      	movs	r0, #1
 80097f2:	f7f7 fc19 	bl	8001028 <_exit>

080097f6 <_raise_r>:
 80097f6:	291f      	cmp	r1, #31
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4605      	mov	r5, r0
 80097fc:	460c      	mov	r4, r1
 80097fe:	d904      	bls.n	800980a <_raise_r+0x14>
 8009800:	2316      	movs	r3, #22
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	bd38      	pop	{r3, r4, r5, pc}
 800980a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800980c:	b112      	cbz	r2, 8009814 <_raise_r+0x1e>
 800980e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009812:	b94b      	cbnz	r3, 8009828 <_raise_r+0x32>
 8009814:	4628      	mov	r0, r5
 8009816:	f000 f831 	bl	800987c <_getpid_r>
 800981a:	4622      	mov	r2, r4
 800981c:	4601      	mov	r1, r0
 800981e:	4628      	mov	r0, r5
 8009820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009824:	f000 b818 	b.w	8009858 <_kill_r>
 8009828:	2b01      	cmp	r3, #1
 800982a:	d00a      	beq.n	8009842 <_raise_r+0x4c>
 800982c:	1c59      	adds	r1, r3, #1
 800982e:	d103      	bne.n	8009838 <_raise_r+0x42>
 8009830:	2316      	movs	r3, #22
 8009832:	6003      	str	r3, [r0, #0]
 8009834:	2001      	movs	r0, #1
 8009836:	e7e7      	b.n	8009808 <_raise_r+0x12>
 8009838:	2100      	movs	r1, #0
 800983a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800983e:	4620      	mov	r0, r4
 8009840:	4798      	blx	r3
 8009842:	2000      	movs	r0, #0
 8009844:	e7e0      	b.n	8009808 <_raise_r+0x12>
	...

08009848 <raise>:
 8009848:	4b02      	ldr	r3, [pc, #8]	@ (8009854 <raise+0xc>)
 800984a:	4601      	mov	r1, r0
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	f7ff bfd2 	b.w	80097f6 <_raise_r>
 8009852:	bf00      	nop
 8009854:	2400001c 	.word	0x2400001c

08009858 <_kill_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4d07      	ldr	r5, [pc, #28]	@ (8009878 <_kill_r+0x20>)
 800985c:	2300      	movs	r3, #0
 800985e:	4604      	mov	r4, r0
 8009860:	4608      	mov	r0, r1
 8009862:	4611      	mov	r1, r2
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	f7f7 fbcf 	bl	8001008 <_kill>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d102      	bne.n	8009874 <_kill_r+0x1c>
 800986e:	682b      	ldr	r3, [r5, #0]
 8009870:	b103      	cbz	r3, 8009874 <_kill_r+0x1c>
 8009872:	6023      	str	r3, [r4, #0]
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	240043e4 	.word	0x240043e4

0800987c <_getpid_r>:
 800987c:	f7f7 bbbc 	b.w	8000ff8 <_getpid>

08009880 <_init>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	bf00      	nop
 8009884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009886:	bc08      	pop	{r3}
 8009888:	469e      	mov	lr, r3
 800988a:	4770      	bx	lr

0800988c <_fini>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	bf00      	nop
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr
