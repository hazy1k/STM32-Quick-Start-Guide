
24.I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009928  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009bc8  08009bc8  0000abc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a01c  0800a01c  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a024  0800a024  0000b024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a028  0800a028  0000b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800a02c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000021c  240001dc  0800a208  0000c1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003f8  0800a208  0000c3f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000140e0  00000000  00000000  0000c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030e8  00000000  00000000  000202ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d88  00000000  00000000  000233d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a2a  00000000  00000000  00024160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b572  00000000  00000000  00024b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a974  00000000  00000000  000600fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171f83  00000000  00000000  0007aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ec9f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042d8  00000000  00000000  001eca38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001f0d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009bb0 	.word	0x08009bb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	08009bb0 	.word	0x08009bb0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f002 f952 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f001 ff7d 	bl	800260c <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <delay_us>:
 * @param     nus: 要延时的us数
 * @note      nus取值范围: 0 ~ (2^32 / fac_us) (fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_us(uint32_t nus)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <delay_us+0x74>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <delay_us+0x78>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	613b      	str	r3, [r7, #16]

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedlock();                    /* 锁定 OS 的任务调度器 */
#endif

    told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <delay_us+0x74>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <delay_us+0x74>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	429a      	cmp	r2, r3
 8000754:	d0f8      	beq.n	8000748 <delay_us+0x24>
        {
            if (tnow < told)
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	429a      	cmp	r2, r3
 800075c:	d206      	bcs.n	800076c <delay_us+0x48>
            {
                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	4413      	add	r3, r2
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	e007      	b.n	800077c <delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1ad2      	subs	r2, r2, r3
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	4413      	add	r3, r2
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	4413      	add	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d200      	bcs.n	800078a <delay_us+0x66>
        tnow = SysTick->VAL;
 8000788:	e7de      	b.n	8000748 <delay_us+0x24>
            {
                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 800078a:	bf00      	nop

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedunlock();                  /* 恢复 OS 的任务调度器 */
#endif

}
 800078c:	bf00      	nop
 800078e:	3724      	adds	r7, #36	@ 0x24
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e010 	.word	0xe000e010
 800079c:	240001f8 	.word	0x240001f8

080007a0 <delay_ms>:
 * @brief     延时nms
 * @param     nms: 要延时的ms数 (0< nms <= (2^32 / fac_us / 1000))(fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_ms(uint16_t nms)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]

        nms %= g_fac_ms;                                /* OS已经无法提供这么小的延时了,采用普通方式延时 */
    }
#endif

    delay_us((uint32_t)(nms * 1000));                   /* 普通方式延时 */
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffb5 	bl	8000724 <delay_us>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
     delay_ms(Delay);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <delay_ms>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <at24cxx_init>:
 * @brief       初始化IIC接口
 * @param       无
 * @retval      无
 */
void at24cxx_init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    iic_init();
 80007e0:	f000 f8c2 	bl	8000968 <iic_init>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <at24cxx_read_one_byte>:
 * @brief       在AT24CXX指定地址读出一个数据
 * @param       readaddr: 开始读数的地址
 * @retval      读到的数据
 */
uint8_t at24cxx_read_one_byte(uint16_t addr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
    uint8_t temp = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
    iic_start();                /* 发送起始信号 */
 80007f6:	f000 f905 	bl	8000a04 <iic_start>
        iic_wait_ack();         /* 每次发送完一个字节,都要等待ACK */
        iic_send_byte(addr >> 8);/* 发送高字节地址 */
    }
    else
    {
        iic_send_byte(0XA0 + ((addr >> 8) << 1));   /* 发送器件 0XA0 + 高位a8/a9/a10地址,写数据 */
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3b60      	subs	r3, #96	@ 0x60
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f9ba 	bl	8000b84 <iic_send_byte>
    }

    iic_wait_ack();             /* 每次发送完一个字节,都要等待ACK */
 8000810:	f000 f93a 	bl	8000a88 <iic_wait_ack>
    iic_send_byte(addr % 256);  /* 发送低位地址 */
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f9b3 	bl	8000b84 <iic_send_byte>
    iic_wait_ack();             /* 等待ACK, 此时地址发送完成了 */
 800081e:	f000 f933 	bl	8000a88 <iic_wait_ack>

    iic_start();                /* 重新发送起始信号 */
 8000822:	f000 f8ef 	bl	8000a04 <iic_start>
    iic_send_byte(0XA1);        /* 进入接收模式, IIC规定最低位是0, 表示读取 */
 8000826:	20a1      	movs	r0, #161	@ 0xa1
 8000828:	f000 f9ac 	bl	8000b84 <iic_send_byte>
    iic_wait_ack();             /* 每次发送完一个字节,都要等待ACK */
 800082c:	f000 f92c 	bl	8000a88 <iic_wait_ack>
    temp = iic_read_byte(0);    /* 接收一个字节数据 */
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f9e5 	bl	8000c00 <iic_read_byte>
 8000836:	4603      	mov	r3, r0
 8000838:	73fb      	strb	r3, [r7, #15]
    iic_stop();                 /* 产生一个停止条件 */
 800083a:	f000 f907 	bl	8000a4c <iic_stop>
    return temp;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <at24cxx_write_one_byte>:
 * @param       addr: 写入数据的目的地址
 * @param       data: 要写入的数据
 * @retval      无
 */
void at24cxx_write_one_byte(uint16_t addr, uint8_t data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	80fb      	strh	r3, [r7, #6]
 8000854:	4613      	mov	r3, r2
 8000856:	717b      	strb	r3, [r7, #5]
    /* 原理说明见:at24cxx_read_one_byte函数, 本函数完全类似 */
    iic_start();                /* 发送起始信号 */
 8000858:	f000 f8d4 	bl	8000a04 <iic_start>
        iic_wait_ack();         /* 每次发送完一个字节,都要等待ACK */
        iic_send_byte(addr >> 8);/* 发送高字节地址 */
    }
    else
    {
        iic_send_byte(0XA0 + ((addr >> 8) << 1));   /* 发送器件 0XA0 + 高位a8/a9/a10地址,写数据 */
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	0a1b      	lsrs	r3, r3, #8
 8000860:	b29b      	uxth	r3, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3b60      	subs	r3, #96	@ 0x60
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f989 	bl	8000b84 <iic_send_byte>
    }

    iic_wait_ack();             /* 每次发送完一个字节,都要等待ACK */
 8000872:	f000 f909 	bl	8000a88 <iic_wait_ack>
    iic_send_byte(addr % 256);  /* 发送低位地址 */
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f982 	bl	8000b84 <iic_send_byte>
    iic_wait_ack();             /* 等待ACK, 此时地址发送完成了 */
 8000880:	f000 f902 	bl	8000a88 <iic_wait_ack>

    /* 因为写数据的时候,不需要进入接收模式了,所以这里不用重新发送起始信号了 */
    iic_send_byte(data);        /* 发送1字节 */
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f97c 	bl	8000b84 <iic_send_byte>
    iic_wait_ack();             /* 等待ACK */
 800088c:	f000 f8fc 	bl	8000a88 <iic_wait_ack>
    iic_stop();                 /* 产生一个停止条件 */
 8000890:	f000 f8dc 	bl	8000a4c <iic_stop>
    delay_ms(10);               /* 注意: EEPROM 写入比较慢,必须等到10ms后再写下一个字节 */
 8000894:	200a      	movs	r0, #10
 8000896:	f7ff ff83 	bl	80007a0 <delay_ms>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <at24cxx_check>:
 * @retval      检测结果
 *              0: 检测成功
 *              1: 检测失败
 */
uint8_t at24cxx_check(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
    uint8_t temp;
    uint16_t addr = EE_TYPE;
 80008a8:	23ff      	movs	r3, #255	@ 0xff
 80008aa:	80fb      	strh	r3, [r7, #6]
    temp = at24cxx_read_one_byte(addr); /* 避免每次开机都写AT24CXX */
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff9a 	bl	80007e8 <at24cxx_read_one_byte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	717b      	strb	r3, [r7, #5]

    if (temp == 0X55)   /* 读取数据正常 */
 80008b8:	797b      	ldrb	r3, [r7, #5]
 80008ba:	2b55      	cmp	r3, #85	@ 0x55
 80008bc:	d101      	bne.n	80008c2 <at24cxx_check+0x20>
    {
        return 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	e00f      	b.n	80008e2 <at24cxx_check+0x40>
    }
    else    /* 排除第一次初始化的情况 */
    {
        at24cxx_write_one_byte(addr, 0X55); /* 先写入数据 */
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2155      	movs	r1, #85	@ 0x55
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffbe 	bl	8000848 <at24cxx_write_one_byte>
        temp = at24cxx_read_one_byte(255);  /* 再读取数据 */
 80008cc:	20ff      	movs	r0, #255	@ 0xff
 80008ce:	f7ff ff8b 	bl	80007e8 <at24cxx_read_one_byte>
 80008d2:	4603      	mov	r3, r0
 80008d4:	717b      	strb	r3, [r7, #5]

        if (temp == 0X55)return 0;
 80008d6:	797b      	ldrb	r3, [r7, #5]
 80008d8:	2b55      	cmp	r3, #85	@ 0x55
 80008da:	d101      	bne.n	80008e0 <at24cxx_check+0x3e>
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <at24cxx_check+0x40>
    }

    return 1;
 80008e0:	2301      	movs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <at24cxx_read>:
 * @param       pbuf    : 数据数组首地址
 * @param       datalen : 要读出数据的个数
 * @retval      无
 */
void at24cxx_read(uint16_t addr, uint8_t *pbuf, uint16_t datalen)
{
 80008ea:	b590      	push	{r4, r7, lr}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	6039      	str	r1, [r7, #0]
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80bb      	strh	r3, [r7, #4]
    while (datalen--)
 80008fa:	e00a      	b.n	8000912 <at24cxx_read+0x28>
    {
        *pbuf++ = at24cxx_read_one_byte(addr++);
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	80fa      	strh	r2, [r7, #6]
 8000902:	683c      	ldr	r4, [r7, #0]
 8000904:	1c62      	adds	r2, r4, #1
 8000906:	603a      	str	r2, [r7, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff6d 	bl	80007e8 <at24cxx_read_one_byte>
 800090e:	4603      	mov	r3, r0
 8000910:	7023      	strb	r3, [r4, #0]
    while (datalen--)
 8000912:	88bb      	ldrh	r3, [r7, #4]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	80ba      	strh	r2, [r7, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1ef      	bne.n	80008fc <at24cxx_read+0x12>
    }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bd90      	pop	{r4, r7, pc}

08000926 <at24cxx_write>:
 * @param       pbuf    : 数据数组首地址
 * @param       datalen : 要写入数据的个数
 * @retval      无
 */
void at24cxx_write(uint16_t addr, uint8_t *pbuf, uint16_t datalen)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	6039      	str	r1, [r7, #0]
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4613      	mov	r3, r2
 8000934:	80bb      	strh	r3, [r7, #4]
    while (datalen--)
 8000936:	e00c      	b.n	8000952 <at24cxx_write+0x2c>
    {
        at24cxx_write_one_byte(addr, *pbuf);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff81 	bl	8000848 <at24cxx_write_one_byte>
        addr++;
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	3301      	adds	r3, #1
 800094a:	80fb      	strh	r3, [r7, #6]
        pbuf++;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	603b      	str	r3, [r7, #0]
    while (datalen--)
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	80ba      	strh	r2, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1ed      	bne.n	8000938 <at24cxx_write+0x12>
    }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <iic_init>:
 * @brief       初始化IIC
 * @param       无
 * @retval      无
 */
void iic_init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;

    IIC_SCL_GPIO_CLK_ENABLE();  /* SCL引脚时钟使能 */
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <iic_init+0x84>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <iic_init+0x84>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <iic_init+0x84>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    IIC_SDA_GPIO_CLK_ENABLE();  /* SDA引脚时钟使能 */
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <iic_init+0x84>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	4a16      	ldr	r2, [pc, #88]	@ (80009ec <iic_init+0x84>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <iic_init+0x84>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

    gpio_init_struct.Pin = IIC_SCL_GPIO_PIN;
 80009aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ae:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;        /* 推挽输出 */
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
    gpio_init_struct.Pull = GPIO_PULLUP;                /* 上拉 */
 80009b4:	2301      	movs	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH; /* 快速 */
 80009b8:	2303      	movs	r3, #3
 80009ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(IIC_SCL_GPIO_PORT, &gpio_init_struct);/* SCL */
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <iic_init+0x88>)
 80009c4:	f001 fe22 	bl	800260c <HAL_GPIO_Init>

    gpio_init_struct.Pin = IIC_SDA_GPIO_PIN;
 80009c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009cc:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_OD;        /* 推挽输出 */
 80009ce:	2311      	movs	r3, #17
 80009d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(IIC_SDA_GPIO_PORT, &gpio_init_struct);/* SDA */
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <iic_init+0x88>)
 80009da:	f001 fe17 	bl	800260c <HAL_GPIO_Init>
    /* SDA引脚模式设置,开漏输出,上拉, 这样就不用再设置IO方向了, 开漏输出的时候(=1), 也可以读取外部信号的高低电平 */

    iic_stop();     /* 停止总线上所有设备 */
 80009de:	f000 f835 	bl	8000a4c <iic_stop>
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58020400 	.word	0x58020400

080009f4 <iic_delay>:
 * @brief       IIC延时函数,用于控制IIC读写速度
 * @param       无
 * @retval      无
 */
static void iic_delay(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
   delay_us(2);    /* 2us的延时, 读写速度在250Khz以内 */
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fe93 	bl	8000724 <delay_us>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <iic_start>:
 * @brief       产生IIC起始信号
 * @param       无
 * @retval      无
 */
void iic_start(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    IIC_SDA(1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a0e:	480e      	ldr	r0, [pc, #56]	@ (8000a48 <iic_start+0x44>)
 8000a10:	f001 ffc4 	bl	800299c <HAL_GPIO_WritePin>
    IIC_SCL(1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1a:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <iic_start+0x44>)
 8000a1c:	f001 ffbe 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000a20:	f7ff ffe8 	bl	80009f4 <iic_delay>
    IIC_SDA(0);     /* START信号: 当SCL为高时, SDA从高变成低, 表示起始信号 */
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <iic_start+0x44>)
 8000a2c:	f001 ffb6 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000a30:	f7ff ffe0 	bl	80009f4 <iic_delay>
    IIC_SCL(0);     /* 钳住I2C总线，准备发送或接收数据 */
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3a:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <iic_start+0x44>)
 8000a3c:	f001 ffae 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000a40:	f7ff ffd8 	bl	80009f4 <iic_delay>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58020400 	.word	0x58020400

08000a4c <iic_stop>:
 * @brief       产生IIC停止信号
 * @param       无
 * @retval      无
 */
void iic_stop(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    IIC_SDA(0);     /* STOP信号: 当SCL为高时, SDA从低变成高, 表示停止信号 */
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a56:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <iic_stop+0x38>)
 8000a58:	f001 ffa0 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000a5c:	f7ff ffca 	bl	80009f4 <iic_delay>
    IIC_SCL(1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <iic_stop+0x38>)
 8000a68:	f001 ff98 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000a6c:	f7ff ffc2 	bl	80009f4 <iic_delay>
    IIC_SDA(1);     /* 发送I2C总线结束信号 */
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a76:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <iic_stop+0x38>)
 8000a78:	f001 ff90 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000a7c:	f7ff ffba 	bl	80009f4 <iic_delay>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	58020400 	.word	0x58020400

08000a88 <iic_wait_ack>:
 * @param       无
 * @retval      1，接收应答失败
 *              0，接收应答成功
 */
uint8_t iic_wait_ack(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
    uint8_t waittime = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
    uint8_t rack = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	71bb      	strb	r3, [r7, #6]

    IIC_SDA(1);     /* 主机释放SDA线(此时外部器件可以拉低SDA线) */
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a9c:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <iic_wait_ack+0x70>)
 8000a9e:	f001 ff7d 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000aa2:	f7ff ffa7 	bl	80009f4 <iic_delay>
    IIC_SCL(1);     /* SCL=1, 此时从机可以返回ACK */
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aac:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <iic_wait_ack+0x70>)
 8000aae:	f001 ff75 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000ab2:	f7ff ff9f 	bl	80009f4 <iic_delay>

    while (IIC_READ_SDA)    /* 等待应答 */
 8000ab6:	e00a      	b.n	8000ace <iic_wait_ack+0x46>
    {
        waittime++;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	3301      	adds	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]

        if (waittime > 250)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000ac2:	d904      	bls.n	8000ace <iic_wait_ack+0x46>
        {
            iic_stop();
 8000ac4:	f7ff ffc2 	bl	8000a4c <iic_stop>
            rack = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71bb      	strb	r3, [r7, #6]
            break;
 8000acc:	e007      	b.n	8000ade <iic_wait_ack+0x56>
    while (IIC_READ_SDA)    /* 等待应答 */
 8000ace:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad2:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <iic_wait_ack+0x70>)
 8000ad4:	f001 ff4a 	bl	800296c <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1ec      	bne.n	8000ab8 <iic_wait_ack+0x30>
        }
    }

    IIC_SCL(0);     /* SCL=0, 结束ACK检查 */
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <iic_wait_ack+0x70>)
 8000ae6:	f001 ff59 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000aea:	f7ff ff83 	bl	80009f4 <iic_delay>
    return rack;
 8000aee:	79bb      	ldrb	r3, [r7, #6]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58020400 	.word	0x58020400

08000afc <iic_ack>:
 * @brief       产生ACK应答
 * @param       无
 * @retval      无
 */
void iic_ack(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    IIC_SDA(0);     /* SCL 0 -> 1  时 SDA = 0,表示应答 */
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b06:	480f      	ldr	r0, [pc, #60]	@ (8000b44 <iic_ack+0x48>)
 8000b08:	f001 ff48 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b0c:	f7ff ff72 	bl	80009f4 <iic_delay>
    IIC_SCL(1);     /* 产生一个时钟 */
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b16:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <iic_ack+0x48>)
 8000b18:	f001 ff40 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b1c:	f7ff ff6a 	bl	80009f4 <iic_delay>
    IIC_SCL(0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b26:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <iic_ack+0x48>)
 8000b28:	f001 ff38 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b2c:	f7ff ff62 	bl	80009f4 <iic_delay>
    IIC_SDA(1);     /* 主机释放SDA线 */
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b36:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <iic_ack+0x48>)
 8000b38:	f001 ff30 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b3c:	f7ff ff5a 	bl	80009f4 <iic_delay>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58020400 	.word	0x58020400

08000b48 <iic_nack>:
 * @brief       不产生ACK应答
 * @param       无
 * @retval      无
 */
void iic_nack(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    IIC_SDA(1);     /* SCL 0 -> 1  时 SDA = 1,表示不应答 */
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b52:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <iic_nack+0x38>)
 8000b54:	f001 ff22 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b58:	f7ff ff4c 	bl	80009f4 <iic_delay>
    IIC_SCL(1);     /* 产生一个时钟 */
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <iic_nack+0x38>)
 8000b64:	f001 ff1a 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b68:	f7ff ff44 	bl	80009f4 <iic_delay>
    IIC_SCL(0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <iic_nack+0x38>)
 8000b74:	f001 ff12 	bl	800299c <HAL_GPIO_WritePin>
    iic_delay();
 8000b78:	f7ff ff3c 	bl	80009f4 <iic_delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58020400 	.word	0x58020400

08000b84 <iic_send_byte>:
 * @brief       IIC发送一个字节
 * @param       data: 要发送的数据
 * @retval      无
 */
void iic_send_byte(uint8_t data)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
    uint8_t t;

    for (t = 0; t < 8; t++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e026      	b.n	8000be2 <iic_send_byte+0x5e>
    {
        IIC_SDA((data & 0x80) >> 7);    /* 高位先发送 */
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da06      	bge.n	8000baa <iic_send_byte+0x26>
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ba2:	4816      	ldr	r0, [pc, #88]	@ (8000bfc <iic_send_byte+0x78>)
 8000ba4:	f001 fefa 	bl	800299c <HAL_GPIO_WritePin>
 8000ba8:	e005      	b.n	8000bb6 <iic_send_byte+0x32>
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bb0:	4812      	ldr	r0, [pc, #72]	@ (8000bfc <iic_send_byte+0x78>)
 8000bb2:	f001 fef3 	bl	800299c <HAL_GPIO_WritePin>
        iic_delay();
 8000bb6:	f7ff ff1d 	bl	80009f4 <iic_delay>
        IIC_SCL(1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc0:	480e      	ldr	r0, [pc, #56]	@ (8000bfc <iic_send_byte+0x78>)
 8000bc2:	f001 feeb 	bl	800299c <HAL_GPIO_WritePin>
        iic_delay();
 8000bc6:	f7ff ff15 	bl	80009f4 <iic_delay>
        IIC_SCL(0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd0:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <iic_send_byte+0x78>)
 8000bd2:	f001 fee3 	bl	800299c <HAL_GPIO_WritePin>
        data <<= 1;     /* 左移1位,用于下一次发送 */
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
    for (t = 0; t < 8; t++)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	3301      	adds	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d9d5      	bls.n	8000b94 <iic_send_byte+0x10>
    }
    IIC_SDA(1);         /* 发送完成, 主机释放SDA线 */
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <iic_send_byte+0x78>)
 8000bf0:	f001 fed4 	bl	800299c <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58020400 	.word	0x58020400

08000c00 <iic_read_byte>:
 * @brief       IIC读取一个字节
 * @param       ack:  ack=1时，发送ack; ack=0时，发送nack
 * @retval      接收到的数据
 */
uint8_t iic_read_byte(uint8_t ack)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    uint8_t i, receive = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < 8; i++ )    /* 接收1个字节数据 */
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e020      	b.n	8000c56 <iic_read_byte+0x56>
    {
        receive <<= 1;  /* 高位先输出,所以先收到的数据位要左移 */
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	73bb      	strb	r3, [r7, #14]
        IIC_SCL(1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c20:	4815      	ldr	r0, [pc, #84]	@ (8000c78 <iic_read_byte+0x78>)
 8000c22:	f001 febb 	bl	800299c <HAL_GPIO_WritePin>
        iic_delay();
 8000c26:	f7ff fee5 	bl	80009f4 <iic_delay>

        if (IIC_READ_SDA)
 8000c2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2e:	4812      	ldr	r0, [pc, #72]	@ (8000c78 <iic_read_byte+0x78>)
 8000c30:	f001 fe9c 	bl	800296c <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <iic_read_byte+0x40>
        {
            receive++;
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	73bb      	strb	r3, [r7, #14]
        }

        IIC_SCL(0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c46:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <iic_read_byte+0x78>)
 8000c48:	f001 fea8 	bl	800299c <HAL_GPIO_WritePin>
        iic_delay();
 8000c4c:	f7ff fed2 	bl	80009f4 <iic_delay>
    for (i = 0; i < 8; i++ )    /* 接收1个字节数据 */
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	d9db      	bls.n	8000c14 <iic_read_byte+0x14>
    }

    if (!ack)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <iic_read_byte+0x68>
    {
        iic_nack();     /* 发送nACK */
 8000c62:	f7ff ff71 	bl	8000b48 <iic_nack>
 8000c66:	e001      	b.n	8000c6c <iic_read_byte+0x6c>
    }
    else
    {
        iic_ack();      /* 发送ACK */
 8000c68:	f7ff ff48 	bl	8000afc <iic_ack>
    }

    return receive;
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	58020400 	.word	0x58020400

08000c7c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_KEY_GPIO_Init+0x68>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <MX_KEY_GPIO_Init+0x68>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_KEY_GPIO_Init+0x68>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <MX_KEY_GPIO_Init+0x6c>)
 8000cc0:	f001 fca4 	bl	800260c <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8000cc4:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_KEY_GPIO_Init+0x6c>)
 8000cd8:	f001 fc98 	bl	800260c <HAL_GPIO_Init>
}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	58020000 	.word	0x58020000

08000cec <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <key_scan+0x1a>
 8000d00:	4b30      	ldr	r3, [pc, #192]	@ (8000dc4 <key_scan+0xd8>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 8000d06:	2102      	movs	r1, #2
 8000d08:	482f      	ldr	r0, [pc, #188]	@ (8000dc8 <key_scan+0xdc>)
 8000d0a:	f001 fe2f 	bl	800296c <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8000d12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d16:	482c      	ldr	r0, [pc, #176]	@ (8000dc8 <key_scan+0xdc>)
 8000d18:	f001 fe28 	bl	800296c <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 8000d20:	2101      	movs	r1, #1
 8000d22:	4829      	ldr	r0, [pc, #164]	@ (8000dc8 <key_scan+0xdc>)
 8000d24:	f001 fe22 	bl	800296c <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 8000d2c:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <key_scan+0xd8>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d033      	beq.n	8000d9c <key_scan+0xb0>
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d005      	beq.n	8000d46 <key_scan+0x5a>
 8000d3a:	7b7b      	ldrb	r3, [r7, #13]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <key_scan+0x5a>
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12a      	bne.n	8000d9c <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 8000d46:	200a      	movs	r0, #10
 8000d48:	f7ff fd3b 	bl	80007c2 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <key_scan+0xdc>)
 8000d50:	f001 fe0c 	bl	800296c <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8000d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5c:	481a      	ldr	r0, [pc, #104]	@ (8000dc8 <key_scan+0xdc>)
 8000d5e:	f001 fe05 	bl	800296c <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 8000d66:	2101      	movs	r1, #1
 8000d68:	4817      	ldr	r0, [pc, #92]	@ (8000dc8 <key_scan+0xdc>)
 8000d6a:	f001 fdff 	bl	800296c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <key_scan+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000d82:	e018      	b.n	8000db6 <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 8000d84:	7b7b      	ldrb	r3, [r7, #13]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000d8e:	e012      	b.n	8000db6 <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000d9a:	e00c      	b.n	8000db6 <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10a      	bne.n	8000db8 <key_scan+0xcc>
 8000da2:	7b7b      	ldrb	r3, [r7, #13]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d107      	bne.n	8000db8 <key_scan+0xcc>
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d104      	bne.n	8000db8 <key_scan+0xcc>
    {
        key_up = 1;
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <key_scan+0xd8>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e000      	b.n	8000db8 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 8000db6:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000000 	.word	0x24000000
 8000dc8:	58020000 	.word	0x58020000

08000dcc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <MX_LED_GPIO_Init+0xa8>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <MX_LED_GPIO_Init+0xa8>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_LED_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_LED_GPIO_Init+0xa8>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	4a1b      	ldr	r2, [pc, #108]	@ (8000e74 <MX_LED_GPIO_Init+0xa8>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_LED_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2160      	movs	r1, #96	@ 0x60
 8000e22:	4815      	ldr	r0, [pc, #84]	@ (8000e78 <MX_LED_GPIO_Init+0xac>)
 8000e24:	f001 fdba 	bl	800299c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_LED_GPIO_Init+0xb0>)
 8000e2e:	f001 fdb5 	bl	800299c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000e32:	2360      	movs	r3, #96	@ 0x60
 8000e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <MX_LED_GPIO_Init+0xac>)
 8000e4a:	f001 fbdf 	bl	800260c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_LED_GPIO_Init+0xb0>)
 8000e66:	f001 fbd1 	bl	800260c <HAL_GPIO_Init>
}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58021000 	.word	0x58021000
 8000e7c:	58020400 	.word	0x58020400

08000e80 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000e84:	f7ff ffa2 	bl	8000dcc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000e88:	f7ff fc18 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000e8c:	f7ff fef6 	bl	8000c7c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000e90:	f000 fb36 	bl	8001500 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <main>:
// 要写入的字符串
const uint8_t text_buf[] = {"STM32 I2C"};
#define text_size sizeof(text_buf)

int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
  uint8_t key_value;
  uint8_t temp_data[text_size];
  MPU_Config();
 8000e9e:	f000 f919 	bl	80010d4 <MPU_Config>
  HAL_Init();
 8000ea2:	f000 fc29 	bl	80016f8 <HAL_Init>
  SystemClock_Config();
 8000ea6:	f000 f877 	bl	8000f98 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000eaa:	f000 f8f5 	bl	8001098 <PeriphCommonClock_Config>
  bsp_init();
 8000eae:	f7ff ffe7 	bl	8000e80 <bsp_init>
  at24cxx_init();
 8000eb2:	f7ff fc93 	bl	80007dc <at24cxx_init>
  while(at24cxx_check()) // 监测不到24c02
 8000eb6:	e003      	b.n	8000ec0 <main+0x28>
  {
    HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000eb8:	2140      	movs	r1, #64	@ 0x40
 8000eba:	482e      	ldr	r0, [pc, #184]	@ (8000f74 <main+0xdc>)
 8000ebc:	f001 fd87 	bl	80029ce <HAL_GPIO_TogglePin>
  while(at24cxx_check()) // 监测不到24c02
 8000ec0:	f7ff fcef 	bl	80008a2 <at24cxx_check>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f6      	bne.n	8000eb8 <main+0x20>
  }
  printf("24C02 Ready!!!\r\n");
 8000eca:	482b      	ldr	r0, [pc, #172]	@ (8000f78 <main+0xe0>)
 8000ecc:	f007 f80c 	bl	8007ee8 <puts>
  while (1)
  {
    key_value = key_scan(0);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff ff0b 	bl	8000cec <key_scan>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
    if(key_value == KEY0_PRES) // 写入数据
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d131      	bne.n	8000f44 <main+0xac>
    {
      printf("Start Write 24C02....\r\n");
 8000ee0:	4826      	ldr	r0, [pc, #152]	@ (8000f7c <main+0xe4>)
 8000ee2:	f007 f801 	bl	8007ee8 <puts>
      fflush(stdout);
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <main+0xe8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 febd 	bl	8007c6c <fflush>
      at24cxx_write(0, (uint8_t*)text_buf, text_size);
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	4923      	ldr	r1, [pc, #140]	@ (8000f84 <main+0xec>)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fd15 	bl	8000926 <at24cxx_write>
      HAL_Delay(5); // 确保写入完成
 8000efc:	2005      	movs	r0, #5
 8000efe:	f7ff fc60 	bl	80007c2 <HAL_Delay>

      // 验证写入的数据
      uint8_t verify_data[text_size];
      at24cxx_read(0, verify_data, text_size);
 8000f02:	463b      	mov	r3, r7
 8000f04:	220a      	movs	r2, #10
 8000f06:	4619      	mov	r1, r3
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fcee 	bl	80008ea <at24cxx_read>
      if(memcmp(text_buf, verify_data, text_size) == 0) {
 8000f0e:	463b      	mov	r3, r7
 8000f10:	220a      	movs	r2, #10
 8000f12:	4619      	mov	r1, r3
 8000f14:	481b      	ldr	r0, [pc, #108]	@ (8000f84 <main+0xec>)
 8000f16:	f007 f8c7 	bl	80080a8 <memcmp>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <main+0x90>
        printf("24C02 Write Verified OK!\r\n");
 8000f20:	4819      	ldr	r0, [pc, #100]	@ (8000f88 <main+0xf0>)
 8000f22:	f006 ffe1 	bl	8007ee8 <puts>
 8000f26:	e002      	b.n	8000f2e <main+0x96>
      } else {
        printf("24C02 Write Verification Failed!\r\n");
 8000f28:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <main+0xf4>)
 8000f2a:	f006 ffdd 	bl	8007ee8 <puts>
      }
      fflush(stdout);
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <main+0xe8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 fe99 	bl	8007c6c <fflush>
      HAL_GPIO_WritePin(LED_GREEN_Port, LED_GREEN_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <main+0xdc>)
 8000f40:	f001 fd2c 	bl	800299c <HAL_GPIO_WritePin>
    }
    if(key_value == KEY1_PRES) // 读取数据
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d10f      	bne.n	8000f6a <main+0xd2>
    {
      printf("Start Read 24C02....\r\n");
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <main+0xf8>)
 8000f4c:	f006 ffcc 	bl	8007ee8 <puts>
      at24cxx_read(0, temp_data, text_size);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	220a      	movs	r2, #10
 8000f56:	4619      	mov	r1, r3
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fcc6 	bl	80008ea <at24cxx_read>
      printf("The Data Readed Is:  %s", (char*)temp_data);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <main+0xfc>)
 8000f66:	f006 ff57 	bl	8007e18 <iprintf>
    }
    HAL_Delay(10);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f7ff fc29 	bl	80007c2 <HAL_Delay>
    key_value = key_scan(0);
 8000f70:	e7ae      	b.n	8000ed0 <main+0x38>
 8000f72:	bf00      	nop
 8000f74:	58021000 	.word	0x58021000
 8000f78:	08009bc8 	.word	0x08009bc8
 8000f7c:	08009bd8 	.word	0x08009bd8
 8000f80:	24000020 	.word	0x24000020
 8000f84:	08009c60 	.word	0x08009c60
 8000f88:	08009bf0 	.word	0x08009bf0
 8000f8c:	08009c0c 	.word	0x08009c0c
 8000f90:	08009c30 	.word	0x08009c30
 8000f94:	08009c48 	.word	0x08009c48

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09c      	sub	sp, #112	@ 0x70
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa2:	224c      	movs	r2, #76	@ 0x4c
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 f88e 	bl	80080c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2220      	movs	r2, #32
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f007 f888 	bl	80080c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f001 fd47 	bl	8002a4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <SystemClock_Config+0xf8>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a32      	ldr	r2, [pc, #200]	@ (8001090 <SystemClock_Config+0xf8>)
 8000fc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <SystemClock_Config+0xf8>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <SystemClock_Config+0xfc>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8001094 <SystemClock_Config+0xfc>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <SystemClock_Config+0xfc>)
 8000fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ff0:	bf00      	nop
 8000ff2:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <SystemClock_Config+0xf8>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ffe:	d1f8      	bne.n	8000ff2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001000:	230b      	movs	r3, #11
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800100a:	2301      	movs	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2340      	movs	r3, #64	@ 0x40
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	2302      	movs	r3, #2
 800101c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001022:	23f0      	movs	r3, #240	@ 0xf0
 8001024:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800102a:	2302      	movs	r3, #2
 800102c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001032:	2308      	movs	r3, #8
 8001034:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001036:	2300      	movs	r3, #0
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fd3c 	bl	8002ac0 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800104e:	f000 f86d 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	233f      	movs	r3, #63	@ 0x3f
 8001054:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2303      	movs	r3, #3
 8001058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800105e:	2308      	movs	r3, #8
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001062:	2340      	movs	r3, #64	@ 0x40
 8001064:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001070:	2340      	movs	r3, #64	@ 0x40
 8001072:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2104      	movs	r1, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f97b 	bl	8003374 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001084:	f000 f852 	bl	800112c <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3770      	adds	r7, #112	@ 0x70
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024800 	.word	0x58024800
 8001094:	58000400 	.word	0x58000400

08001098 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0b0      	sub	sp, #192	@ 0xc0
 800109c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	22c0      	movs	r2, #192	@ 0xc0
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f007 f80f 	bl	80080c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80010aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80010b6:	2300      	movs	r3, #0
 80010b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fce5 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80010c8:	f000 f830 	bl	800112c <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	37c0      	adds	r7, #192	@ 0xc0
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010e6:	f000 fcb5 	bl	8001a54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010f6:	231f      	movs	r3, #31
 80010f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010fa:	2387      	movs	r3, #135	@ 0x87
 80010fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010fe:	2300      	movs	r3, #0
 8001100:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001102:	2300      	movs	r3, #0
 8001104:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001106:	2301      	movs	r3, #1
 8001108:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800110a:	2301      	movs	r3, #1
 800110c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001116:	463b      	mov	r3, r7
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fcd3 	bl	8001ac4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800111e:	2004      	movs	r0, #4
 8001120:	f000 fcb0 	bl	8001a84 <HAL_MPU_Enable>

}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_MspInit+0x30>)
 8001140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001144:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_MspInit+0x30>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_MspInit+0x30>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	58024400 	.word	0x58024400

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <NMI_Handler+0x4>

08001174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <MemManage_Handler+0x4>

08001184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <UsageFault_Handler+0x4>

08001194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 fb0b 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <WWDG_IRQHandler+0x10>)
 80011d2:	f006 f841 	bl	8007258 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000294 	.word	0x24000294

080011e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 80011e4:	2002      	movs	r0, #2
 80011e6:	f001 fc0c 	bl	8002a02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <USART1_IRQHandler+0x10>)
 80011f6:	f004 fb53 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	24000200 	.word	0x24000200

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_kill>:

int _kill(int pid, int sig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800121e:	f006 ffa5 	bl	800816c <__errno>
 8001222:	4603      	mov	r3, r0
 8001224:	2216      	movs	r2, #22
 8001226:	601a      	str	r2, [r3, #0]
  return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_exit>:

void _exit (int status)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ffe7 	bl	8001214 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001246:	bf00      	nop
 8001248:	e7fd      	b.n	8001246 <_exit+0x12>

0800124a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e00a      	b.n	8001272 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125c:	f3af 8000 	nop.w
 8001260:	4601      	mov	r1, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	60ba      	str	r2, [r7, #8]
 8001268:	b2ca      	uxtb	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbf0      	blt.n	800125c <_read+0x12>
  }

  return len;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e009      	b.n	80012aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	60ba      	str	r2, [r7, #8]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f9ec 	bl	800167c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbf1      	blt.n	8001296 <_write+0x12>
  }
  return len;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_close>:

int _close(int file)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e4:	605a      	str	r2, [r3, #4]
  return 0;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_isatty>:

int _isatty(int file)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f006 ff0a 	bl	800816c <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	24080000 	.word	0x24080000
 8001384:	00000400 	.word	0x00000400
 8001388:	240001fc 	.word	0x240001fc
 800138c:	240003f8 	.word	0x240003f8

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	4b43      	ldr	r3, [pc, #268]	@ (80014a4 <SystemInit+0x114>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a42      	ldr	r2, [pc, #264]	@ (80014a4 <SystemInit+0x114>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a4:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <SystemInit+0x118>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d807      	bhi.n	80013c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b0:	4b3d      	ldr	r3, [pc, #244]	@ (80014a8 <SystemInit+0x118>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 030f 	bic.w	r3, r3, #15
 80013b8:	4a3b      	ldr	r2, [pc, #236]	@ (80014a8 <SystemInit+0x118>)
 80013ba:	f043 0307 	orr.w	r3, r3, #7
 80013be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013c0:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <SystemInit+0x11c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a39      	ldr	r2, [pc, #228]	@ (80014ac <SystemInit+0x11c>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013cc:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <SystemInit+0x11c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013d2:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <SystemInit+0x11c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4935      	ldr	r1, [pc, #212]	@ (80014ac <SystemInit+0x11c>)
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <SystemInit+0x120>)
 80013da:	4013      	ands	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013de:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <SystemInit+0x118>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ea:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <SystemInit+0x118>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 030f 	bic.w	r3, r3, #15
 80013f2:	4a2d      	ldr	r2, [pc, #180]	@ (80014a8 <SystemInit+0x118>)
 80013f4:	f043 0307 	orr.w	r3, r3, #7
 80013f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <SystemInit+0x11c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <SystemInit+0x11c>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001406:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <SystemInit+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <SystemInit+0x11c>)
 800140e:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <SystemInit+0x124>)
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <SystemInit+0x11c>)
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <SystemInit+0x128>)
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <SystemInit+0x11c>)
 800141a:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <SystemInit+0x12c>)
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <SystemInit+0x11c>)
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <SystemInit+0x11c>)
 8001426:	4a25      	ldr	r2, [pc, #148]	@ (80014bc <SystemInit+0x12c>)
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <SystemInit+0x11c>)
 800142c:	2200      	movs	r2, #0
 800142e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <SystemInit+0x11c>)
 8001432:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <SystemInit+0x12c>)
 8001434:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <SystemInit+0x11c>)
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <SystemInit+0x11c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <SystemInit+0x11c>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <SystemInit+0x11c>)
 800144a:	2200      	movs	r2, #0
 800144c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <SystemInit+0x130>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <SystemInit+0x134>)
 8001454:	4013      	ands	r3, r2
 8001456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800145a:	d202      	bcs.n	8001462 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <SystemInit+0x138>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <SystemInit+0x11c>)
 8001464:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d113      	bne.n	8001498 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <SystemInit+0x11c>)
 8001472:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001476:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <SystemInit+0x11c>)
 8001478:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800147c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <SystemInit+0x13c>)
 8001482:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001486:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <SystemInit+0x11c>)
 800148a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800148e:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <SystemInit+0x11c>)
 8001490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001494:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00
 80014a8:	52002000 	.word	0x52002000
 80014ac:	58024400 	.word	0x58024400
 80014b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b4:	02020200 	.word	0x02020200
 80014b8:	01ff0000 	.word	0x01ff0000
 80014bc:	01010280 	.word	0x01010280
 80014c0:	5c001000 	.word	0x5c001000
 80014c4:	ffff0000 	.word	0xffff0000
 80014c8:	51008108 	.word	0x51008108
 80014cc:	52004000 	.word	0x52004000

080014d0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <ExitRun0Mode+0x2c>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <ExitRun0Mode+0x2c>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80014e0:	bf00      	nop
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <ExitRun0Mode+0x2c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f9      	beq.n	80014e2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	58024800 	.word	0x58024800

08001500 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001506:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <MX_USART1_UART_Init+0x94>)
 8001508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800154a:	f004 f8cb 	bl	80056e4 <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001554:	f7ff fdea 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	480d      	ldr	r0, [pc, #52]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800155c:	f005 fdb2 	bl	80070c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001566:	f7ff fde1 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800156e:	f005 fde7 	bl	8007140 <HAL_UARTEx_SetRxFifoThreshold>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001578:	f7ff fdd8 	bl	800112c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <MX_USART1_UART_Init+0x90>)
 800157e:	f005 fd68 	bl	8007052 <HAL_UARTEx_DisableFifoMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001588:	f7ff fdd0 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	24000200 	.word	0x24000200
 8001594:	40011000 	.word	0x40011000

08001598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ba      	sub	sp, #232	@ 0xe8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	22c0      	movs	r2, #192	@ 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 fd85 	bl	80080c8 <memset>
  if(uartHandle->Instance==USART1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001670 <HAL_UART_MspInit+0xd8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d14e      	bne.n	8001666 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015c8:	f04f 0201 	mov.w	r2, #1
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fa54 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015ea:	f7ff fd9f 	bl	800112c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_UART_MspInit+0xdc>)
 80015f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001674 <HAL_UART_MspInit+0xdc>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <HAL_UART_MspInit+0xdc>)
 8001600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0xdc>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001612:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_UART_MspInit+0xdc>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_UART_MspInit+0xdc>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800162a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800162e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001638:	2301      	movs	r3, #1
 800163a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001644:	2307      	movs	r3, #7
 8001646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800164e:	4619      	mov	r1, r3
 8001650:	4809      	ldr	r0, [pc, #36]	@ (8001678 <HAL_UART_MspInit+0xe0>)
 8001652:	f000 ffdb 	bl	800260c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2025      	movs	r0, #37	@ 0x25
 800165c:	f000 f9c5 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001660:	2025      	movs	r0, #37	@ 0x25
 8001662:	f000 f9dc 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	37e8      	adds	r7, #232	@ 0xe8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40011000 	.word	0x40011000
 8001674:	58024400 	.word	0x58024400
 8001678:	58020000 	.word	0x58020000

0800167c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001684:	1d39      	adds	r1, r7, #4
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	2201      	movs	r2, #1
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <__io_putchar+0x20>)
 800168e:	f004 f879 	bl	8005784 <HAL_UART_Transmit>
    return ch;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000200 	.word	0x24000200

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016a4:	f7ff ff14 	bl	80014d0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a8:	f7ff fe72 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d2:	f006 fd51 	bl	8008178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff fbdf 	bl	8000e98 <main>
  bx  lr
 80016da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80016e8:	0800a02c 	.word	0x0800a02c
  ldr r2, =_sbss
 80016ec:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80016f0:	240003f8 	.word	0x240003f8

080016f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC3_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fe:	2003      	movs	r0, #3
 8001700:	f000 f968 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001704:	f001 ffec 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_Init+0x68>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4913      	ldr	r1, [pc, #76]	@ (8001764 <HAL_Init+0x6c>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_Init+0x68>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_Init+0x6c>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_Init+0x70>)
 800173a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <HAL_Init+0x74>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001742:	200f      	movs	r0, #15
 8001744:	f000 f814 	bl	8001770 <HAL_InitTick>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e002      	b.n	8001758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001752:	f7ff fcf1 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	58024400 	.word	0x58024400
 8001764:	08009c6c 	.word	0x08009c6c
 8001768:	24000008 	.word	0x24000008
 800176c:	24000004 	.word	0x24000004

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_InitTick+0x60>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e021      	b.n	80017c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <HAL_InitTick+0x64>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_InitTick+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f94d 	bl	8001a3a <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f917 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <HAL_InitTick+0x68>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	24000010 	.word	0x24000010
 80017d4:	24000004 	.word	0x24000004
 80017d8:	2400000c 	.word	0x2400000c

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	24000010 	.word	0x24000010
 8001800:	240002a8 	.word	0x240002a8

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	240002a8 	.word	0x240002a8

0800181c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetREVID+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0c1b      	lsrs	r3, r3, #16
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	5c001000 	.word	0x5c001000

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	4313      	orrs	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00
 8001878:	05fa0000 	.word	0x05fa0000

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	@ (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	@ (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	@ (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff40 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff90 	bl	8001928 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5f 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff33 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa4 	bl	8001990 <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a58:	f3bf 8f5f 	dmb	sy
}
 8001a5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_MPU_Disable+0x28>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <HAL_MPU_Disable+0x28>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a68:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_MPU_Disable+0x2c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	e000ed90 	.word	0xe000ed90

08001a84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_MPU_Enable+0x38>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_MPU_Enable+0x3c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_MPU_Enable+0x3c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa2:	f3bf 8f4f 	dsb	sy
}
 8001aa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aa8:	f3bf 8f6f 	isb	sy
}
 8001aac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed90 	.word	0xe000ed90
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ae0:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7adb      	ldrb	r3, [r3, #11]
 8001af2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001af4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a9b      	ldrb	r3, [r3, #10]
 8001afa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7b5b      	ldrb	r3, [r3, #13]
 8001b02:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7b9b      	ldrb	r3, [r3, #14]
 8001b0a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7bdb      	ldrb	r3, [r3, #15]
 8001b12:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7a5b      	ldrb	r3, [r3, #9]
 8001b1a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7a1b      	ldrb	r3, [r3, #8]
 8001b22:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b24:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b2e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b30:	6113      	str	r3, [r2, #16]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed90 	.word	0xe000ed90

08001b44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff fe5a 	bl	8001804 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e2dc      	b.n	8002116 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e2cd      	b.n	8002116 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a76      	ldr	r2, [pc, #472]	@ (8001d58 <HAL_DMA_Abort+0x214>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04a      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a74      	ldr	r2, [pc, #464]	@ (8001d5c <HAL_DMA_Abort+0x218>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d045      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a73      	ldr	r2, [pc, #460]	@ (8001d60 <HAL_DMA_Abort+0x21c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d040      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a71      	ldr	r2, [pc, #452]	@ (8001d64 <HAL_DMA_Abort+0x220>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d03b      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a70      	ldr	r2, [pc, #448]	@ (8001d68 <HAL_DMA_Abort+0x224>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d036      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8001d6c <HAL_DMA_Abort+0x228>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d031      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6d      	ldr	r2, [pc, #436]	@ (8001d70 <HAL_DMA_Abort+0x22c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d02c      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d74 <HAL_DMA_Abort+0x230>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d027      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6a      	ldr	r2, [pc, #424]	@ (8001d78 <HAL_DMA_Abort+0x234>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d022      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a68      	ldr	r2, [pc, #416]	@ (8001d7c <HAL_DMA_Abort+0x238>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a67      	ldr	r2, [pc, #412]	@ (8001d80 <HAL_DMA_Abort+0x23c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d018      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_DMA_Abort+0x240>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a64      	ldr	r2, [pc, #400]	@ (8001d88 <HAL_DMA_Abort+0x244>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00e      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a62      	ldr	r2, [pc, #392]	@ (8001d8c <HAL_DMA_Abort+0x248>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a61      	ldr	r2, [pc, #388]	@ (8001d90 <HAL_DMA_Abort+0x24c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d004      	beq.n	8001c1a <HAL_DMA_Abort+0xd6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5f      	ldr	r2, [pc, #380]	@ (8001d94 <HAL_DMA_Abort+0x250>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Abort+0xda>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_Abort+0xdc>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 021e 	bic.w	r2, r2, #30
 8001c32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e00a      	b.n	8001c62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020e 	bic.w	r2, r2, #14
 8001c5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a3c      	ldr	r2, [pc, #240]	@ (8001d58 <HAL_DMA_Abort+0x214>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d072      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a3a      	ldr	r2, [pc, #232]	@ (8001d5c <HAL_DMA_Abort+0x218>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d06d      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a39      	ldr	r2, [pc, #228]	@ (8001d60 <HAL_DMA_Abort+0x21c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d068      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a37      	ldr	r2, [pc, #220]	@ (8001d64 <HAL_DMA_Abort+0x220>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d063      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a36      	ldr	r2, [pc, #216]	@ (8001d68 <HAL_DMA_Abort+0x224>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d05e      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a34      	ldr	r2, [pc, #208]	@ (8001d6c <HAL_DMA_Abort+0x228>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d059      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a33      	ldr	r2, [pc, #204]	@ (8001d70 <HAL_DMA_Abort+0x22c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d054      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a31      	ldr	r2, [pc, #196]	@ (8001d74 <HAL_DMA_Abort+0x230>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04f      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a30      	ldr	r2, [pc, #192]	@ (8001d78 <HAL_DMA_Abort+0x234>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d7c <HAL_DMA_Abort+0x238>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d045      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <HAL_DMA_Abort+0x23c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d040      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d84 <HAL_DMA_Abort+0x240>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <HAL_DMA_Abort+0x244>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d036      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	@ (8001d8c <HAL_DMA_Abort+0x248>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <HAL_DMA_Abort+0x24c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02c      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	@ (8001d94 <HAL_DMA_Abort+0x250>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <HAL_DMA_Abort+0x254>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a22      	ldr	r2, [pc, #136]	@ (8001d9c <HAL_DMA_Abort+0x258>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <HAL_DMA_Abort+0x25c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_DMA_Abort+0x260>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_DMA_Abort+0x264>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_DMA_Abort+0x268>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_DMA_Abort+0x26c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort+0x20e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_DMA_Abort+0x270>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d132      	bne.n	8001db8 <HAL_DMA_Abort+0x274>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e031      	b.n	8001dba <HAL_DMA_Abort+0x276>
 8001d56:	bf00      	nop
 8001d58:	40020010 	.word	0x40020010
 8001d5c:	40020028 	.word	0x40020028
 8001d60:	40020040 	.word	0x40020040
 8001d64:	40020058 	.word	0x40020058
 8001d68:	40020070 	.word	0x40020070
 8001d6c:	40020088 	.word	0x40020088
 8001d70:	400200a0 	.word	0x400200a0
 8001d74:	400200b8 	.word	0x400200b8
 8001d78:	40020410 	.word	0x40020410
 8001d7c:	40020428 	.word	0x40020428
 8001d80:	40020440 	.word	0x40020440
 8001d84:	40020458 	.word	0x40020458
 8001d88:	40020470 	.word	0x40020470
 8001d8c:	40020488 	.word	0x40020488
 8001d90:	400204a0 	.word	0x400204a0
 8001d94:	400204b8 	.word	0x400204b8
 8001d98:	58025408 	.word	0x58025408
 8001d9c:	5802541c 	.word	0x5802541c
 8001da0:	58025430 	.word	0x58025430
 8001da4:	58025444 	.word	0x58025444
 8001da8:	58025458 	.word	0x58025458
 8001dac:	5802546c 	.word	0x5802546c
 8001db0:	58025480 	.word	0x58025480
 8001db4:	58025494 	.word	0x58025494
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6d      	ldr	r2, [pc, #436]	@ (8001f88 <HAL_DMA_Abort+0x444>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d04a      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6b      	ldr	r2, [pc, #428]	@ (8001f8c <HAL_DMA_Abort+0x448>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d045      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6a      	ldr	r2, [pc, #424]	@ (8001f90 <HAL_DMA_Abort+0x44c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d040      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a68      	ldr	r2, [pc, #416]	@ (8001f94 <HAL_DMA_Abort+0x450>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d03b      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a67      	ldr	r2, [pc, #412]	@ (8001f98 <HAL_DMA_Abort+0x454>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d036      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a65      	ldr	r2, [pc, #404]	@ (8001f9c <HAL_DMA_Abort+0x458>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d031      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a64      	ldr	r2, [pc, #400]	@ (8001fa0 <HAL_DMA_Abort+0x45c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d02c      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a62      	ldr	r2, [pc, #392]	@ (8001fa4 <HAL_DMA_Abort+0x460>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d027      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a61      	ldr	r2, [pc, #388]	@ (8001fa8 <HAL_DMA_Abort+0x464>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d022      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001fac <HAL_DMA_Abort+0x468>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01d      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb0 <HAL_DMA_Abort+0x46c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d018      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb4 <HAL_DMA_Abort+0x470>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb8 <HAL_DMA_Abort+0x474>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00e      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a59      	ldr	r2, [pc, #356]	@ (8001fbc <HAL_DMA_Abort+0x478>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a58      	ldr	r2, [pc, #352]	@ (8001fc0 <HAL_DMA_Abort+0x47c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d004      	beq.n	8001e6e <HAL_DMA_Abort+0x32a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a56      	ldr	r2, [pc, #344]	@ (8001fc4 <HAL_DMA_Abort+0x480>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d108      	bne.n	8001e80 <HAL_DMA_Abort+0x33c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e007      	b.n	8001e90 <HAL_DMA_Abort+0x34c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e90:	e013      	b.n	8001eba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e92:	f7ff fcb7 	bl	8001804 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d90c      	bls.n	8001eba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e12d      	b.n	8002116 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e5      	bne.n	8001e92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2f      	ldr	r2, [pc, #188]	@ (8001f88 <HAL_DMA_Abort+0x444>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d04a      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f8c <HAL_DMA_Abort+0x448>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d045      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2c      	ldr	r2, [pc, #176]	@ (8001f90 <HAL_DMA_Abort+0x44c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d040      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f94 <HAL_DMA_Abort+0x450>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d03b      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <HAL_DMA_Abort+0x454>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d036      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a27      	ldr	r2, [pc, #156]	@ (8001f9c <HAL_DMA_Abort+0x458>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d031      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a26      	ldr	r2, [pc, #152]	@ (8001fa0 <HAL_DMA_Abort+0x45c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d02c      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <HAL_DMA_Abort+0x460>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d027      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a23      	ldr	r2, [pc, #140]	@ (8001fa8 <HAL_DMA_Abort+0x464>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d022      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a21      	ldr	r2, [pc, #132]	@ (8001fac <HAL_DMA_Abort+0x468>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01d      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a20      	ldr	r2, [pc, #128]	@ (8001fb0 <HAL_DMA_Abort+0x46c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d018      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb4 <HAL_DMA_Abort+0x470>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_DMA_Abort+0x474>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00e      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fbc <HAL_DMA_Abort+0x478>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <HAL_DMA_Abort+0x47c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d004      	beq.n	8001f66 <HAL_DMA_Abort+0x422>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_DMA_Abort+0x480>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_DMA_Abort+0x426>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_DMA_Abort+0x428>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d02b      	beq.n	8001fc8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	223f      	movs	r2, #63	@ 0x3f
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	e02a      	b.n	8001fde <HAL_DMA_Abort+0x49a>
 8001f88:	40020010 	.word	0x40020010
 8001f8c:	40020028 	.word	0x40020028
 8001f90:	40020040 	.word	0x40020040
 8001f94:	40020058 	.word	0x40020058
 8001f98:	40020070 	.word	0x40020070
 8001f9c:	40020088 	.word	0x40020088
 8001fa0:	400200a0 	.word	0x400200a0
 8001fa4:	400200b8 	.word	0x400200b8
 8001fa8:	40020410 	.word	0x40020410
 8001fac:	40020428 	.word	0x40020428
 8001fb0:	40020440 	.word	0x40020440
 8001fb4:	40020458 	.word	0x40020458
 8001fb8:	40020470 	.word	0x40020470
 8001fbc:	40020488 	.word	0x40020488
 8001fc0:	400204a0 	.word	0x400204a0
 8001fc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4f      	ldr	r2, [pc, #316]	@ (8002120 <HAL_DMA_Abort+0x5dc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d072      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4d      	ldr	r2, [pc, #308]	@ (8002124 <HAL_DMA_Abort+0x5e0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d06d      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8002128 <HAL_DMA_Abort+0x5e4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d068      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4a      	ldr	r2, [pc, #296]	@ (800212c <HAL_DMA_Abort+0x5e8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d063      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a49      	ldr	r2, [pc, #292]	@ (8002130 <HAL_DMA_Abort+0x5ec>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d05e      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a47      	ldr	r2, [pc, #284]	@ (8002134 <HAL_DMA_Abort+0x5f0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d059      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a46      	ldr	r2, [pc, #280]	@ (8002138 <HAL_DMA_Abort+0x5f4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d054      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a44      	ldr	r2, [pc, #272]	@ (800213c <HAL_DMA_Abort+0x5f8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d04f      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a43      	ldr	r2, [pc, #268]	@ (8002140 <HAL_DMA_Abort+0x5fc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d04a      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a41      	ldr	r2, [pc, #260]	@ (8002144 <HAL_DMA_Abort+0x600>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d045      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a40      	ldr	r2, [pc, #256]	@ (8002148 <HAL_DMA_Abort+0x604>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d040      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3e      	ldr	r2, [pc, #248]	@ (800214c <HAL_DMA_Abort+0x608>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d03b      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3d      	ldr	r2, [pc, #244]	@ (8002150 <HAL_DMA_Abort+0x60c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d036      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3b      	ldr	r2, [pc, #236]	@ (8002154 <HAL_DMA_Abort+0x610>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d031      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3a      	ldr	r2, [pc, #232]	@ (8002158 <HAL_DMA_Abort+0x614>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d02c      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a38      	ldr	r2, [pc, #224]	@ (800215c <HAL_DMA_Abort+0x618>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d027      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a37      	ldr	r2, [pc, #220]	@ (8002160 <HAL_DMA_Abort+0x61c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a35      	ldr	r2, [pc, #212]	@ (8002164 <HAL_DMA_Abort+0x620>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01d      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a34      	ldr	r2, [pc, #208]	@ (8002168 <HAL_DMA_Abort+0x624>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d018      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a32      	ldr	r2, [pc, #200]	@ (800216c <HAL_DMA_Abort+0x628>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a31      	ldr	r2, [pc, #196]	@ (8002170 <HAL_DMA_Abort+0x62c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00e      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002174 <HAL_DMA_Abort+0x630>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2e      	ldr	r2, [pc, #184]	@ (8002178 <HAL_DMA_Abort+0x634>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_DMA_Abort+0x58a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2c      	ldr	r2, [pc, #176]	@ (800217c <HAL_DMA_Abort+0x638>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_DMA_Abort+0x58e>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_DMA_Abort+0x590>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002102:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40020010 	.word	0x40020010
 8002124:	40020028 	.word	0x40020028
 8002128:	40020040 	.word	0x40020040
 800212c:	40020058 	.word	0x40020058
 8002130:	40020070 	.word	0x40020070
 8002134:	40020088 	.word	0x40020088
 8002138:	400200a0 	.word	0x400200a0
 800213c:	400200b8 	.word	0x400200b8
 8002140:	40020410 	.word	0x40020410
 8002144:	40020428 	.word	0x40020428
 8002148:	40020440 	.word	0x40020440
 800214c:	40020458 	.word	0x40020458
 8002150:	40020470 	.word	0x40020470
 8002154:	40020488 	.word	0x40020488
 8002158:	400204a0 	.word	0x400204a0
 800215c:	400204b8 	.word	0x400204b8
 8002160:	58025408 	.word	0x58025408
 8002164:	5802541c 	.word	0x5802541c
 8002168:	58025430 	.word	0x58025430
 800216c:	58025444 	.word	0x58025444
 8002170:	58025458 	.word	0x58025458
 8002174:	5802546c 	.word	0x5802546c
 8002178:	58025480 	.word	0x58025480
 800217c:	58025494 	.word	0x58025494

08002180 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e237      	b.n	8002602 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d004      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2280      	movs	r2, #128	@ 0x80
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e22c      	b.n	8002602 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002320 <HAL_DMA_Abort_IT+0x1a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d04a      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002324 <HAL_DMA_Abort_IT+0x1a4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d045      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a59      	ldr	r2, [pc, #356]	@ (8002328 <HAL_DMA_Abort_IT+0x1a8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d040      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a58      	ldr	r2, [pc, #352]	@ (800232c <HAL_DMA_Abort_IT+0x1ac>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d03b      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a56      	ldr	r2, [pc, #344]	@ (8002330 <HAL_DMA_Abort_IT+0x1b0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d036      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a55      	ldr	r2, [pc, #340]	@ (8002334 <HAL_DMA_Abort_IT+0x1b4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d031      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a53      	ldr	r2, [pc, #332]	@ (8002338 <HAL_DMA_Abort_IT+0x1b8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02c      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a52      	ldr	r2, [pc, #328]	@ (800233c <HAL_DMA_Abort_IT+0x1bc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d027      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a50      	ldr	r2, [pc, #320]	@ (8002340 <HAL_DMA_Abort_IT+0x1c0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a4f      	ldr	r2, [pc, #316]	@ (8002344 <HAL_DMA_Abort_IT+0x1c4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01d      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4d      	ldr	r2, [pc, #308]	@ (8002348 <HAL_DMA_Abort_IT+0x1c8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4c      	ldr	r2, [pc, #304]	@ (800234c <HAL_DMA_Abort_IT+0x1cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4a      	ldr	r2, [pc, #296]	@ (8002350 <HAL_DMA_Abort_IT+0x1d0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a49      	ldr	r2, [pc, #292]	@ (8002354 <HAL_DMA_Abort_IT+0x1d4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a47      	ldr	r2, [pc, #284]	@ (8002358 <HAL_DMA_Abort_IT+0x1d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a46      	ldr	r2, [pc, #280]	@ (800235c <HAL_DMA_Abort_IT+0x1dc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_DMA_Abort_IT+0xcc>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_DMA_Abort_IT+0xce>
 800224c:	2300      	movs	r3, #0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8086 	beq.w	8002360 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2f      	ldr	r2, [pc, #188]	@ (8002320 <HAL_DMA_Abort_IT+0x1a0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d04a      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2e      	ldr	r2, [pc, #184]	@ (8002324 <HAL_DMA_Abort_IT+0x1a4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d045      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2c      	ldr	r2, [pc, #176]	@ (8002328 <HAL_DMA_Abort_IT+0x1a8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d040      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2b      	ldr	r2, [pc, #172]	@ (800232c <HAL_DMA_Abort_IT+0x1ac>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d03b      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a29      	ldr	r2, [pc, #164]	@ (8002330 <HAL_DMA_Abort_IT+0x1b0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d036      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <HAL_DMA_Abort_IT+0x1b4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d031      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <HAL_DMA_Abort_IT+0x1b8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02c      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a25      	ldr	r2, [pc, #148]	@ (800233c <HAL_DMA_Abort_IT+0x1bc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d027      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <HAL_DMA_Abort_IT+0x1c0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d022      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_DMA_Abort_IT+0x1c4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d01d      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a20      	ldr	r2, [pc, #128]	@ (8002348 <HAL_DMA_Abort_IT+0x1c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d018      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <HAL_DMA_Abort_IT+0x1cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <HAL_DMA_Abort_IT+0x1d0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_DMA_Abort_IT+0x1d4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <HAL_DMA_Abort_IT+0x1d8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_Abort_IT+0x17c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a19      	ldr	r2, [pc, #100]	@ (800235c <HAL_DMA_Abort_IT+0x1dc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d108      	bne.n	800230e <HAL_DMA_Abort_IT+0x18e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e178      	b.n	8002600 <HAL_DMA_Abort_IT+0x480>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e16f      	b.n	8002600 <HAL_DMA_Abort_IT+0x480>
 8002320:	40020010 	.word	0x40020010
 8002324:	40020028 	.word	0x40020028
 8002328:	40020040 	.word	0x40020040
 800232c:	40020058 	.word	0x40020058
 8002330:	40020070 	.word	0x40020070
 8002334:	40020088 	.word	0x40020088
 8002338:	400200a0 	.word	0x400200a0
 800233c:	400200b8 	.word	0x400200b8
 8002340:	40020410 	.word	0x40020410
 8002344:	40020428 	.word	0x40020428
 8002348:	40020440 	.word	0x40020440
 800234c:	40020458 	.word	0x40020458
 8002350:	40020470 	.word	0x40020470
 8002354:	40020488 	.word	0x40020488
 8002358:	400204a0 	.word	0x400204a0
 800235c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020e 	bic.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6c      	ldr	r2, [pc, #432]	@ (8002528 <HAL_DMA_Abort_IT+0x3a8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d04a      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6b      	ldr	r2, [pc, #428]	@ (800252c <HAL_DMA_Abort_IT+0x3ac>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d045      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a69      	ldr	r2, [pc, #420]	@ (8002530 <HAL_DMA_Abort_IT+0x3b0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d040      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a68      	ldr	r2, [pc, #416]	@ (8002534 <HAL_DMA_Abort_IT+0x3b4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d03b      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a66      	ldr	r2, [pc, #408]	@ (8002538 <HAL_DMA_Abort_IT+0x3b8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d036      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_DMA_Abort_IT+0x3bc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d031      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a63      	ldr	r2, [pc, #396]	@ (8002540 <HAL_DMA_Abort_IT+0x3c0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02c      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a62      	ldr	r2, [pc, #392]	@ (8002544 <HAL_DMA_Abort_IT+0x3c4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d027      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a60      	ldr	r2, [pc, #384]	@ (8002548 <HAL_DMA_Abort_IT+0x3c8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d022      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5f      	ldr	r2, [pc, #380]	@ (800254c <HAL_DMA_Abort_IT+0x3cc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d01d      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002550 <HAL_DMA_Abort_IT+0x3d0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d018      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002554 <HAL_DMA_Abort_IT+0x3d4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002558 <HAL_DMA_Abort_IT+0x3d8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00e      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a59      	ldr	r2, [pc, #356]	@ (800255c <HAL_DMA_Abort_IT+0x3dc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a57      	ldr	r2, [pc, #348]	@ (8002560 <HAL_DMA_Abort_IT+0x3e0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d004      	beq.n	8002410 <HAL_DMA_Abort_IT+0x290>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a56      	ldr	r2, [pc, #344]	@ (8002564 <HAL_DMA_Abort_IT+0x3e4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d108      	bne.n	8002422 <HAL_DMA_Abort_IT+0x2a2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e007      	b.n	8002432 <HAL_DMA_Abort_IT+0x2b2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3c      	ldr	r2, [pc, #240]	@ (8002528 <HAL_DMA_Abort_IT+0x3a8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d072      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3a      	ldr	r2, [pc, #232]	@ (800252c <HAL_DMA_Abort_IT+0x3ac>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d06d      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a39      	ldr	r2, [pc, #228]	@ (8002530 <HAL_DMA_Abort_IT+0x3b0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d068      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a37      	ldr	r2, [pc, #220]	@ (8002534 <HAL_DMA_Abort_IT+0x3b4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d063      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a36      	ldr	r2, [pc, #216]	@ (8002538 <HAL_DMA_Abort_IT+0x3b8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d05e      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a34      	ldr	r2, [pc, #208]	@ (800253c <HAL_DMA_Abort_IT+0x3bc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d059      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a33      	ldr	r2, [pc, #204]	@ (8002540 <HAL_DMA_Abort_IT+0x3c0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d054      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <HAL_DMA_Abort_IT+0x3c4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d04f      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a30      	ldr	r2, [pc, #192]	@ (8002548 <HAL_DMA_Abort_IT+0x3c8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d04a      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2e      	ldr	r2, [pc, #184]	@ (800254c <HAL_DMA_Abort_IT+0x3cc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d045      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2d      	ldr	r2, [pc, #180]	@ (8002550 <HAL_DMA_Abort_IT+0x3d0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d040      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <HAL_DMA_Abort_IT+0x3d4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d03b      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <HAL_DMA_Abort_IT+0x3d8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d036      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	@ (800255c <HAL_DMA_Abort_IT+0x3dc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d031      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a27      	ldr	r2, [pc, #156]	@ (8002560 <HAL_DMA_Abort_IT+0x3e0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d02c      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a25      	ldr	r2, [pc, #148]	@ (8002564 <HAL_DMA_Abort_IT+0x3e4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d027      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <HAL_DMA_Abort_IT+0x3e8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a22      	ldr	r2, [pc, #136]	@ (800256c <HAL_DMA_Abort_IT+0x3ec>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01d      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <HAL_DMA_Abort_IT+0x3f0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002574 <HAL_DMA_Abort_IT+0x3f4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <HAL_DMA_Abort_IT+0x3f8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1c      	ldr	r2, [pc, #112]	@ (800257c <HAL_DMA_Abort_IT+0x3fc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <HAL_DMA_Abort_IT+0x400>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_DMA_Abort_IT+0x3a2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a19      	ldr	r2, [pc, #100]	@ (8002584 <HAL_DMA_Abort_IT+0x404>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d132      	bne.n	8002588 <HAL_DMA_Abort_IT+0x408>
 8002522:	2301      	movs	r3, #1
 8002524:	e031      	b.n	800258a <HAL_DMA_Abort_IT+0x40a>
 8002526:	bf00      	nop
 8002528:	40020010 	.word	0x40020010
 800252c:	40020028 	.word	0x40020028
 8002530:	40020040 	.word	0x40020040
 8002534:	40020058 	.word	0x40020058
 8002538:	40020070 	.word	0x40020070
 800253c:	40020088 	.word	0x40020088
 8002540:	400200a0 	.word	0x400200a0
 8002544:	400200b8 	.word	0x400200b8
 8002548:	40020410 	.word	0x40020410
 800254c:	40020428 	.word	0x40020428
 8002550:	40020440 	.word	0x40020440
 8002554:	40020458 	.word	0x40020458
 8002558:	40020470 	.word	0x40020470
 800255c:	40020488 	.word	0x40020488
 8002560:	400204a0 	.word	0x400204a0
 8002564:	400204b8 	.word	0x400204b8
 8002568:	58025408 	.word	0x58025408
 800256c:	5802541c 	.word	0x5802541c
 8002570:	58025430 	.word	0x58025430
 8002574:	58025444 	.word	0x58025444
 8002578:	58025458 	.word	0x58025458
 800257c:	5802546c 	.word	0x5802546c
 8002580:	58025480 	.word	0x58025480
 8002584:	58025494 	.word	0x58025494
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d028      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800259c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2201      	movs	r2, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80025bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	@ 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800261a:	4b89      	ldr	r3, [pc, #548]	@ (8002840 <HAL_GPIO_Init+0x234>)
 800261c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800261e:	e194      	b.n	800294a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8186 	beq.w	8002944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d005      	beq.n	8002650 <HAL_GPIO_Init+0x44>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d130      	bne.n	80026b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002686:	2201      	movs	r2, #1
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0201 	and.w	r2, r3, #1
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d017      	beq.n	80026ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d123      	bne.n	8002742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	69b9      	ldr	r1, [r7, #24]
 800273e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80e0 	beq.w	8002944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002784:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_GPIO_Init+0x238>)
 8002786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800278a:	4a2e      	ldr	r2, [pc, #184]	@ (8002844 <HAL_GPIO_Init+0x238>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002794:	4b2b      	ldr	r3, [pc, #172]	@ (8002844 <HAL_GPIO_Init+0x238>)
 8002796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <HAL_GPIO_Init+0x23c>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a20      	ldr	r2, [pc, #128]	@ (800284c <HAL_GPIO_Init+0x240>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d052      	beq.n	8002874 <HAL_GPIO_Init+0x268>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <HAL_GPIO_Init+0x244>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d031      	beq.n	800283a <HAL_GPIO_Init+0x22e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <HAL_GPIO_Init+0x248>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02b      	beq.n	8002836 <HAL_GPIO_Init+0x22a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <HAL_GPIO_Init+0x24c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x226>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <HAL_GPIO_Init+0x250>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x222>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002860 <HAL_GPIO_Init+0x254>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x21e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <HAL_GPIO_Init+0x258>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x21a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a19      	ldr	r2, [pc, #100]	@ (8002868 <HAL_GPIO_Init+0x25c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x216>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a18      	ldr	r2, [pc, #96]	@ (800286c <HAL_GPIO_Init+0x260>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x212>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <HAL_GPIO_Init+0x264>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x20e>
 8002816:	2309      	movs	r3, #9
 8002818:	e02d      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 800281a:	230a      	movs	r3, #10
 800281c:	e02b      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 800281e:	2308      	movs	r3, #8
 8002820:	e029      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 8002822:	2307      	movs	r3, #7
 8002824:	e027      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 8002826:	2306      	movs	r3, #6
 8002828:	e025      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 800282a:	2305      	movs	r3, #5
 800282c:	e023      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 800282e:	2304      	movs	r3, #4
 8002830:	e021      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 8002832:	2303      	movs	r3, #3
 8002834:	e01f      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 8002836:	2302      	movs	r3, #2
 8002838:	e01d      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 800283a:	2301      	movs	r3, #1
 800283c:	e01b      	b.n	8002876 <HAL_GPIO_Init+0x26a>
 800283e:	bf00      	nop
 8002840:	58000080 	.word	0x58000080
 8002844:	58024400 	.word	0x58024400
 8002848:	58000400 	.word	0x58000400
 800284c:	58020000 	.word	0x58020000
 8002850:	58020400 	.word	0x58020400
 8002854:	58020800 	.word	0x58020800
 8002858:	58020c00 	.word	0x58020c00
 800285c:	58021000 	.word	0x58021000
 8002860:	58021400 	.word	0x58021400
 8002864:	58021800 	.word	0x58021800
 8002868:	58021c00 	.word	0x58021c00
 800286c:	58022000 	.word	0x58022000
 8002870:	58022400 	.word	0x58022400
 8002874:	2300      	movs	r3, #0
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	f002 0203 	and.w	r2, r2, #3
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	4093      	lsls	r3, r2
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002886:	4938      	ldr	r1, [pc, #224]	@ (8002968 <HAL_GPIO_Init+0x35c>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3301      	adds	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f ae63 	bne.w	8002620 <HAL_GPIO_Init+0x14>
  }
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	3724      	adds	r7, #36	@ 0x24
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	58000400 	.word	0x58000400

0800296c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e001      	b.n	800298e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	400b      	ands	r3, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f804 	bl	8002a36 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_PWREx_ConfigSupply+0x70>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d00a      	beq.n	8002a76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a60:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <HAL_PWREx_ConfigSupply+0x70>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e01f      	b.n	8002ab2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e01d      	b.n	8002ab2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_PWREx_ConfigSupply+0x70>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 0207 	bic.w	r2, r3, #7
 8002a7e:	490f      	ldr	r1, [pc, #60]	@ (8002abc <HAL_PWREx_ConfigSupply+0x70>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a86:	f7fe febd 	bl	8001804 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a8c:	e009      	b.n	8002aa2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a8e:	f7fe feb9 	bl	8001804 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a9c:	d901      	bls.n	8002aa2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e007      	b.n	8002ab2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_PWREx_ConfigSupply+0x70>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aae:	d1ee      	bne.n	8002a8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	58024800 	.word	0x58024800

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	@ 0x30
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f000 bc48 	b.w	8003364 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8088 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4b99      	ldr	r3, [pc, #612]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aec:	4b96      	ldr	r3, [pc, #600]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_OscConfig+0x48>
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	2b18      	cmp	r3, #24
 8002afc:	d111      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	4b8f      	ldr	r3, [pc, #572]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d06d      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x130>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d169      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f000 bc21 	b.w	8003364 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x7a>
 8002b2c:	4b86      	ldr	r3, [pc, #536]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a85      	ldr	r2, [pc, #532]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0xd8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x9c>
 8002b42:	4b81      	ldr	r3, [pc, #516]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a80      	ldr	r2, [pc, #512]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7d      	ldr	r2, [pc, #500]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xd8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b66:	4b78      	ldr	r3, [pc, #480]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a77      	ldr	r2, [pc, #476]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b75      	ldr	r3, [pc, #468]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a74      	ldr	r2, [pc, #464]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xd8>
 8002b80:	4b71      	ldr	r3, [pc, #452]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a70      	ldr	r2, [pc, #448]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6d      	ldr	r2, [pc, #436]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fe30 	bl	8001804 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fe2c 	bl	8001804 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e3d4      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bba:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fe1c 	bl	8001804 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fe18 	bl	8001804 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e3c0      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002be2:	4b59      	ldr	r3, [pc, #356]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x110>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80ca 	beq.w	8002d94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c00:	4b51      	ldr	r3, [pc, #324]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_OscConfig+0x166>
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	d156      	bne.n	8002cca <HAL_RCC_OscConfig+0x20a>
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d151      	bne.n	8002cca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c26:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x17e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e392      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c3e:	4b42      	ldr	r3, [pc, #264]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0219 	bic.w	r2, r3, #25
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	493f      	ldr	r1, [pc, #252]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fdd8 	bl	8001804 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe fdd4 	bl	8001804 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e37c      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6a:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	f7fe fdd1 	bl	800181c <HAL_GetREVID>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d817      	bhi.n	8002cb4 <HAL_RCC_OscConfig+0x1f4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b40      	cmp	r3, #64	@ 0x40
 8002c8a:	d108      	bne.n	8002c9e <HAL_RCC_OscConfig+0x1de>
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c94:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9c:	e07a      	b.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	031b      	lsls	r3, r3, #12
 8002cac:	4926      	ldr	r1, [pc, #152]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb2:	e06f      	b.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4921      	ldr	r1, [pc, #132]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc8:	e064      	b.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d047      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0219 	bic.w	r2, r3, #25
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	491a      	ldr	r1, [pc, #104]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fd8e 	bl	8001804 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd8a 	bl	8001804 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e332      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cfe:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	f7fe fd87 	bl	800181c <HAL_GetREVID>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d819      	bhi.n	8002d4c <HAL_RCC_OscConfig+0x28c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d108      	bne.n	8002d32 <HAL_RCC_OscConfig+0x272>
 8002d20:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d28:	4a07      	ldr	r2, [pc, #28]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2e:	6053      	str	r3, [r2, #4]
 8002d30:	e030      	b.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
 8002d32:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	031b      	lsls	r3, r3, #12
 8002d40:	4901      	ldr	r1, [pc, #4]	@ (8002d48 <HAL_RCC_OscConfig+0x288>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
 8002d46:	e025      	b.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	4997      	ldr	r1, [pc, #604]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e018      	b.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b95      	ldr	r3, [pc, #596]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a94      	ldr	r2, [pc, #592]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fd49 	bl	8001804 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fd45 	bl	8001804 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e2ed      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d88:	4b8b      	ldr	r3, [pc, #556]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a9 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da2:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002daa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dac:	4b82      	ldr	r3, [pc, #520]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d007      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x308>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b18      	cmp	r3, #24
 8002dbc:	d13a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x374>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d135      	bne.n	8002e34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_OscConfig+0x320>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b80      	cmp	r3, #128	@ 0x80
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e2c1      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002de0:	f7fe fd1c 	bl	800181c <HAL_GetREVID>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d817      	bhi.n	8002e1e <HAL_RCC_OscConfig+0x35e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d108      	bne.n	8002e08 <HAL_RCC_OscConfig+0x348>
 8002df6:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e06:	e075      	b.n	8002ef4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e08:	4b6b      	ldr	r3, [pc, #428]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	069b      	lsls	r3, r3, #26
 8002e16:	4968      	ldr	r1, [pc, #416]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e1c:	e06a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e1e:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	4962      	ldr	r1, [pc, #392]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e32:	e05f      	b.n	8002ef4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d042      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fcdc 	bl	8001804 <HAL_GetTick>
 8002e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e50:	f7fe fcd8 	bl	8001804 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e280      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e62:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e6e:	f7fe fcd5 	bl	800181c <HAL_GetREVID>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d817      	bhi.n	8002eac <HAL_RCC_OscConfig+0x3ec>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d108      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3d6>
 8002e84:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e92:	6053      	str	r3, [r2, #4]
 8002e94:	e02e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x434>
 8002e96:	4b48      	ldr	r3, [pc, #288]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	069b      	lsls	r3, r3, #26
 8002ea4:	4944      	ldr	r1, [pc, #272]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
 8002eaa:	e023      	b.n	8002ef4 <HAL_RCC_OscConfig+0x434>
 8002eac:	4b42      	ldr	r3, [pc, #264]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	493f      	ldr	r1, [pc, #252]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
 8002ec0:	e018      	b.n	8002ef4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe fc99 	bl	8001804 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fc95 	bl	8001804 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e23d      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ee8:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d036      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d019      	beq.n	8002f3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f08:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe fc76 	bl	8001804 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fc72 	bl	8001804 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e21a      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f2e:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x45c>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fc5c 	bl	8001804 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe fc58 	bl	8001804 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e200      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d039      	beq.n	8002fee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f82:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fc39 	bl	8001804 <HAL_GetTick>
 8002f92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f96:	f7fe fc35 	bl	8001804 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1dd      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4d6>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x52e>
 8002fb6:	bf00      	nop
 8002fb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fbc:	4b9b      	ldr	r3, [pc, #620]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a9a      	ldr	r2, [pc, #616]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8002fc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fc1c 	bl	8001804 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd0:	f7fe fc18 	bl	8001804 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1c0      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fe2:	4b92      	ldr	r3, [pc, #584]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8081 	beq.w	80030fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8003230 <HAL_RCC_OscConfig+0x770>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a8b      	ldr	r2, [pc, #556]	@ (8003230 <HAL_RCC_OscConfig+0x770>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003008:	f7fe fbfc 	bl	8001804 <HAL_GetTick>
 800300c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe fbf8 	bl	8001804 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1a0      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003022:	4b83      	ldr	r3, [pc, #524]	@ (8003230 <HAL_RCC_OscConfig+0x770>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x584>
 8003036:	4b7d      	ldr	r3, [pc, #500]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	4a7c      	ldr	r2, [pc, #496]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
 8003042:	e02d      	b.n	80030a0 <HAL_RCC_OscConfig+0x5e0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10c      	bne.n	8003066 <HAL_RCC_OscConfig+0x5a6>
 800304c:	4b77      	ldr	r3, [pc, #476]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a76      	ldr	r2, [pc, #472]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
 8003058:	4b74      	ldr	r3, [pc, #464]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	4a73      	ldr	r2, [pc, #460]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800305e:	f023 0304 	bic.w	r3, r3, #4
 8003062:	6713      	str	r3, [r2, #112]	@ 0x70
 8003064:	e01c      	b.n	80030a0 <HAL_RCC_OscConfig+0x5e0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c8>
 800306e:	4b6f      	ldr	r3, [pc, #444]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a6e      	ldr	r2, [pc, #440]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6713      	str	r3, [r2, #112]	@ 0x70
 800307a:	4b6c      	ldr	r3, [pc, #432]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	4a6b      	ldr	r2, [pc, #428]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	@ 0x70
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0x5e0>
 8003088:	4b68      	ldr	r3, [pc, #416]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a67      	ldr	r2, [pc, #412]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	@ 0x70
 8003094:	4b65      	ldr	r3, [pc, #404]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003098:	4a64      	ldr	r2, [pc, #400]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800309a:	f023 0304 	bic.w	r3, r3, #4
 800309e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d015      	beq.n	80030d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fbac 	bl	8001804 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe fba8 	bl	8001804 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e14e      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c6:	4b59      	ldr	r3, [pc, #356]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ee      	beq.n	80030b0 <HAL_RCC_OscConfig+0x5f0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe fb96 	bl	8001804 <HAL_GetTick>
 80030d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f7fe fb92 	bl	8001804 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e138      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f2:	4b4e      	ldr	r3, [pc, #312]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ee      	bne.n	80030dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 812d 	beq.w	8003362 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003108:	4b48      	ldr	r3, [pc, #288]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003110:	2b18      	cmp	r3, #24
 8003112:	f000 80bd 	beq.w	8003290 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	2b02      	cmp	r3, #2
 800311c:	f040 809e 	bne.w	800325c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b42      	ldr	r3, [pc, #264]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a41      	ldr	r2, [pc, #260]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fb6a 	bl	8001804 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fb66 	bl	8001804 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e10e      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003146:	4b39      	ldr	r3, [pc, #228]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003152:	4b36      	ldr	r3, [pc, #216]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003156:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <HAL_RCC_OscConfig+0x774>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	430a      	orrs	r2, r1
 8003166:	4931      	ldr	r1, [pc, #196]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	628b      	str	r3, [r1, #40]	@ 0x28
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	3b01      	subs	r3, #1
 8003172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317a:	3b01      	subs	r3, #1
 800317c:	025b      	lsls	r3, r3, #9
 800317e:	b29b      	uxth	r3, r3
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	3b01      	subs	r3, #1
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	3b01      	subs	r3, #1
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800319c:	4923      	ldr	r1, [pc, #140]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031a2:	4b22      	ldr	r3, [pc, #136]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	4a21      	ldr	r2, [pc, #132]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ae:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b2:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCC_OscConfig+0x778>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	491b      	ldr	r1, [pc, #108]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031c2:	4b1a      	ldr	r3, [pc, #104]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	f023 020c 	bic.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	4917      	ldr	r1, [pc, #92]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031d4:	4b15      	ldr	r3, [pc, #84]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	f023 0202 	bic.w	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	4912      	ldr	r1, [pc, #72]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	4a10      	ldr	r2, [pc, #64]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	4a0d      	ldr	r2, [pc, #52]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 80031f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	4a07      	ldr	r2, [pc, #28]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a04      	ldr	r2, [pc, #16]	@ (800322c <HAL_RCC_OscConfig+0x76c>)
 800321c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe faef 	bl	8001804 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003228:	e011      	b.n	800324e <HAL_RCC_OscConfig+0x78e>
 800322a:	bf00      	nop
 800322c:	58024400 	.word	0x58024400
 8003230:	58024800 	.word	0x58024800
 8003234:	fffffc0c 	.word	0xfffffc0c
 8003238:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fae2 	bl	8001804 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e08a      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800324e:	4b47      	ldr	r3, [pc, #284]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x77c>
 800325a:	e082      	b.n	8003362 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b43      	ldr	r3, [pc, #268]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a42      	ldr	r2, [pc, #264]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe facc 	bl	8001804 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fac8 	bl	8001804 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e070      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003282:	4b3a      	ldr	r3, [pc, #232]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x7b0>
 800328e:	e068      	b.n	8003362 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003290:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003296:	4b35      	ldr	r3, [pc, #212]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d031      	beq.n	8003308 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0203 	and.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d12a      	bne.n	8003308 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d122      	bne.n	8003308 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d11a      	bne.n	8003308 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	0a5b      	lsrs	r3, r3, #9
 80032d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d111      	bne.n	8003308 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d108      	bne.n	8003308 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e02b      	b.n	8003364 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800330c:	4b17      	ldr	r3, [pc, #92]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 800330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003316:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	d01f      	beq.n	8003362 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800332e:	f7fe fa69 	bl	8001804 <HAL_GetTick>
 8003332:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003334:	bf00      	nop
 8003336:	f7fe fa65 	bl	8001804 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	4293      	cmp	r3, r2
 8003340:	d0f9      	beq.n	8003336 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_RCC_OscConfig+0x8b0>)
 8003348:	4013      	ands	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800334e:	00d2      	lsls	r2, r2, #3
 8003350:	4906      	ldr	r1, [pc, #24]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003352:	4313      	orrs	r3, r2
 8003354:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003356:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	4a04      	ldr	r2, [pc, #16]	@ (800336c <HAL_RCC_OscConfig+0x8ac>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3730      	adds	r7, #48	@ 0x30
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58024400 	.word	0x58024400
 8003370:	ffff0007 	.word	0xffff0007

08003374 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e19c      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b8a      	ldr	r3, [pc, #552]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b87      	ldr	r3, [pc, #540]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	4985      	ldr	r1, [pc, #532]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b83      	ldr	r3, [pc, #524]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e184      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	4b7b      	ldr	r3, [pc, #492]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d908      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d4:	4b78      	ldr	r3, [pc, #480]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4975      	ldr	r1, [pc, #468]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b70      	ldr	r3, [pc, #448]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033fe:	429a      	cmp	r2, r3
 8003400:	d908      	bls.n	8003414 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003402:	4b6d      	ldr	r3, [pc, #436]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	496a      	ldr	r1, [pc, #424]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	4b64      	ldr	r3, [pc, #400]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800342c:	429a      	cmp	r2, r3
 800342e:	d908      	bls.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003430:	4b61      	ldr	r3, [pc, #388]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	495e      	ldr	r1, [pc, #376]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800343e:	4313      	orrs	r3, r2
 8003440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	4b59      	ldr	r3, [pc, #356]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800345a:	429a      	cmp	r2, r3
 800345c:	d908      	bls.n	8003470 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800345e:	4b56      	ldr	r3, [pc, #344]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4953      	ldr	r1, [pc, #332]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800346c:	4313      	orrs	r3, r2
 800346e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b4d      	ldr	r3, [pc, #308]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	429a      	cmp	r2, r3
 800348a:	d908      	bls.n	800349e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b4a      	ldr	r3, [pc, #296]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f023 020f 	bic.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4947      	ldr	r1, [pc, #284]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 800349a:	4313      	orrs	r3, r2
 800349c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d055      	beq.n	8003556 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034aa:	4b43      	ldr	r3, [pc, #268]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4940      	ldr	r1, [pc, #256]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034c4:	4b3c      	ldr	r3, [pc, #240]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d121      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0f6      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034dc:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0ea      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034f4:	4b30      	ldr	r3, [pc, #192]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0de      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003504:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d6      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003514:	4b28      	ldr	r3, [pc, #160]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f023 0207 	bic.w	r2, r3, #7
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4925      	ldr	r1, [pc, #148]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003526:	f7fe f96d 	bl	8001804 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352c:	e00a      	b.n	8003544 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352e:	f7fe f969 	bl	8001804 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0be      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	4b1c      	ldr	r3, [pc, #112]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	429a      	cmp	r2, r3
 8003554:	d1eb      	bne.n	800352e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d010      	beq.n	8003584 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	429a      	cmp	r2, r3
 8003570:	d208      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003572:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f023 020f 	bic.w	r2, r3, #15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	490e      	ldr	r1, [pc, #56]	@ (80035b8 <HAL_RCC_ClockConfig+0x244>)
 8003580:	4313      	orrs	r3, r2
 8003582:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d214      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	4906      	ldr	r1, [pc, #24]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <HAL_RCC_ClockConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e086      	b.n	80036c2 <HAL_RCC_ClockConfig+0x34e>
 80035b4:	52002000 	.word	0x52002000
 80035b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d208      	bcs.n	80035ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035d8:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4939      	ldr	r1, [pc, #228]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003602:	429a      	cmp	r2, r3
 8003604:	d208      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003606:	4b31      	ldr	r3, [pc, #196]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	492e      	ldr	r1, [pc, #184]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003614:	4313      	orrs	r3, r2
 8003616:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	4b28      	ldr	r3, [pc, #160]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003630:	429a      	cmp	r2, r3
 8003632:	d208      	bcs.n	8003646 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003634:	4b25      	ldr	r3, [pc, #148]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	4922      	ldr	r1, [pc, #136]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003642:	4313      	orrs	r3, r2
 8003644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d010      	beq.n	8003674 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800365e:	429a      	cmp	r2, r3
 8003660:	d208      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003662:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4917      	ldr	r1, [pc, #92]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003670:	4313      	orrs	r3, r2
 8003672:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003674:	f000 f834 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	4912      	ldr	r1, [pc, #72]	@ (80036d0 <HAL_RCC_ClockConfig+0x35c>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003692:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <HAL_RCC_ClockConfig+0x358>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4a0d      	ldr	r2, [pc, #52]	@ (80036d0 <HAL_RCC_ClockConfig+0x35c>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_RCC_ClockConfig+0x360>)
 80036aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ac:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <HAL_RCC_ClockConfig+0x364>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_RCC_ClockConfig+0x368>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f85a 	bl	8001770 <HAL_InitTick>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
 80036d0:	08009c6c 	.word	0x08009c6c
 80036d4:	24000008 	.word	0x24000008
 80036d8:	24000004 	.word	0x24000004
 80036dc:	2400000c 	.word	0x2400000c

080036e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e6:	4bb3      	ldr	r3, [pc, #716]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ee:	2b18      	cmp	r3, #24
 80036f0:	f200 8155 	bhi.w	800399e <HAL_RCC_GetSysClockFreq+0x2be>
 80036f4:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003761 	.word	0x08003761
 8003700:	0800399f 	.word	0x0800399f
 8003704:	0800399f 	.word	0x0800399f
 8003708:	0800399f 	.word	0x0800399f
 800370c:	0800399f 	.word	0x0800399f
 8003710:	0800399f 	.word	0x0800399f
 8003714:	0800399f 	.word	0x0800399f
 8003718:	0800399f 	.word	0x0800399f
 800371c:	08003787 	.word	0x08003787
 8003720:	0800399f 	.word	0x0800399f
 8003724:	0800399f 	.word	0x0800399f
 8003728:	0800399f 	.word	0x0800399f
 800372c:	0800399f 	.word	0x0800399f
 8003730:	0800399f 	.word	0x0800399f
 8003734:	0800399f 	.word	0x0800399f
 8003738:	0800399f 	.word	0x0800399f
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800399f 	.word	0x0800399f
 8003744:	0800399f 	.word	0x0800399f
 8003748:	0800399f 	.word	0x0800399f
 800374c:	0800399f 	.word	0x0800399f
 8003750:	0800399f 	.word	0x0800399f
 8003754:	0800399f 	.word	0x0800399f
 8003758:	0800399f 	.word	0x0800399f
 800375c:	08003793 	.word	0x08003793
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003760:	4b94      	ldr	r3, [pc, #592]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800376c:	4b91      	ldr	r3, [pc, #580]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	4a90      	ldr	r2, [pc, #576]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
 800377c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800377e:	e111      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003780:	4b8d      	ldr	r3, [pc, #564]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003782:	61bb      	str	r3, [r7, #24]
      break;
 8003784:	e10e      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003786:	4b8d      	ldr	r3, [pc, #564]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003788:	61bb      	str	r3, [r7, #24]
      break;
 800378a:	e10b      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800378c:	4b8c      	ldr	r3, [pc, #560]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800378e:	61bb      	str	r3, [r7, #24]
      break;
 8003790:	e108      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003792:	4b88      	ldr	r3, [pc, #544]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800379c:	4b85      	ldr	r3, [pc, #532]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037a8:	4b82      	ldr	r3, [pc, #520]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037b2:	4b80      	ldr	r3, [pc, #512]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80e1 	beq.w	8003998 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f000 8083 	beq.w	80038e4 <HAL_RCC_GetSysClockFreq+0x204>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f200 80a1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x248>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x114>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d056      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037f2:	e099      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f4:	4b6f      	ldr	r3, [pc, #444]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02d      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003800:	4b6c      	ldr	r3, [pc, #432]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	4a6b      	ldr	r2, [pc, #428]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b62      	ldr	r3, [pc, #392]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a02 	vldr	s12, [r7, #8]
 800383e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800385a:	e087      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80039c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b51      	ldr	r3, [pc, #324]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003882:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800389e:	e065      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80039cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b40      	ldr	r3, [pc, #256]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038e2:	e043      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b2f      	ldr	r3, [pc, #188]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a02 	vldr	s12, [r7, #8]
 800390a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003926:	e021      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394a:	ed97 6a02 	vldr	s12, [r7, #8]
 800394e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800395e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800396a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800396c:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	0a5b      	lsrs	r3, r3, #9
 8003972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003976:	3301      	adds	r3, #1
 8003978:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 3a90 	vmov	r3, s15
 8003994:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
      break;
 800399c:	e002      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a0:	61bb      	str	r3, [r7, #24]
      break;
 80039a2:	bf00      	nop
  }

  return sysclockfreq;
 80039a4:	69bb      	ldr	r3, [r7, #24]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	@ 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	58024400 	.word	0x58024400
 80039b8:	03d09000 	.word	0x03d09000
 80039bc:	003d0900 	.word	0x003d0900
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	46000000 	.word	0x46000000
 80039c8:	4c742400 	.word	0x4c742400
 80039cc:	4a742400 	.word	0x4a742400
 80039d0:	4af42400 	.word	0x4af42400

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039da:	f7ff fe81 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <HAL_RCC_GetHCLKFreq+0x50>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490f      	ldr	r1, [pc, #60]	@ (8003a28 <HAL_RCC_GetHCLKFreq+0x54>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <HAL_RCC_GetHCLKFreq+0x50>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a07      	ldr	r2, [pc, #28]	@ (8003a2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a12:	4a07      	ldr	r2, [pc, #28]	@ (8003a30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58024400 	.word	0x58024400
 8003a28:	08009c6c 	.word	0x08009c6c
 8003a2c:	24000008 	.word	0x24000008
 8003a30:	24000004 	.word	0x24000004

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a38:	f7ff ffcc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4904      	ldr	r1, [pc, #16]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	08009c6c 	.word	0x08009c6c

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a64:	f7ff ffb6 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4904      	ldr	r1, [pc, #16]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58024400 	.word	0x58024400
 8003a88:	08009c6c 	.word	0x08009c6c

08003a8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b0ca      	sub	sp, #296	@ 0x128
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ab6:	d049      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003abe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ac2:	d02f      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ac4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ac8:	d828      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003aca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ace:	d01a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ad0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ad4:	d822      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ade:	d007      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae2:	4bb8      	ldr	r3, [pc, #736]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	4ab7      	ldr	r2, [pc, #732]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aee:	e01a      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	3308      	adds	r3, #8
 8003af6:	2102      	movs	r1, #2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 fc8f 	bl	800541c <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b04:	e00f      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	3328      	adds	r3, #40	@ 0x28
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fd36 	bl	8005580 <RCCEx_PLL3_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b1a:	e004      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b2e:	4ba5      	ldr	r3, [pc, #660]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3c:	4aa1      	ldr	r2, [pc, #644]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b58:	f04f 0900 	mov.w	r9, #0
 8003b5c:	ea58 0309 	orrs.w	r3, r8, r9
 8003b60:	d047      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d82a      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b89 	.word	0x08003b89
 8003b78:	08003b97 	.word	0x08003b97
 8003b7c:	08003bad 	.word	0x08003bad
 8003b80:	08003bcb 	.word	0x08003bcb
 8003b84:	08003bcb 	.word	0x08003bcb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	4a8d      	ldr	r2, [pc, #564]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b94:	e01a      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fc3c 	bl	800541c <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003baa:	e00f      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	3328      	adds	r3, #40	@ 0x28
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fce3 	bl	8005580 <RCCEx_PLL3_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e004      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc8:	e000      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	f023 0107 	bic.w	r1, r3, #7
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	4a78      	ldr	r2, [pc, #480]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003bfe:	f04f 0b00 	mov.w	fp, #0
 8003c02:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c06:	d04c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	d030      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c18:	d829      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c1c:	d02d      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c20:	d825      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c22:	2b80      	cmp	r3, #128	@ 0x80
 8003c24:	d018      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	d821      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c2e:	2b40      	cmp	r3, #64	@ 0x40
 8003c30:	d007      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c32:	e01c      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b63      	ldr	r3, [pc, #396]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a62      	ldr	r2, [pc, #392]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c40:	e01c      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 fbe6 	bl	800541c <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c56:	e011      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	3328      	adds	r3, #40	@ 0x28
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fc8d 	bl	8005580 <RCCEx_PLL3_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c84:	4b4f      	ldr	r3, [pc, #316]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003cae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cb8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d053      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cce:	d035      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cd4:	d82e      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cda:	d031      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cdc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ce0:	d828      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ce6:	d01a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cec:	d822      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cf6:	d007      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfa:	4b32      	ldr	r3, [pc, #200]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	4a31      	ldr	r2, [pc, #196]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d06:	e01c      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fb83 	bl	800541c <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e011      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3328      	adds	r3, #40	@ 0x28
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 fc2a 	bl	8005580 <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d3a:	e002      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d84:	460b      	mov	r3, r1
 8003d86:	4313      	orrs	r3, r2
 8003d88:	d056      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d96:	d038      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d9c:	d831      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003da2:	d034      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003da4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003da8:	d82b      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dae:	d01d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003db0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003db4:	d825      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003dc0:	e01f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dc2:	bf00      	nop
 8003dc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc8:	4ba2      	ldr	r3, [pc, #648]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	4aa1      	ldr	r2, [pc, #644]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3308      	adds	r3, #8
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fb1c 	bl	800541c <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dea:	e011      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	3328      	adds	r3, #40	@ 0x28
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fbc3 	bl	8005580 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e18:	4b8e      	ldr	r3, [pc, #568]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e28:	4a8a      	ldr	r2, [pc, #552]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d03a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5e:	2b30      	cmp	r3, #48	@ 0x30
 8003e60:	d01f      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e62:	2b30      	cmp	r3, #48	@ 0x30
 8003e64:	d819      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d00c      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d815      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d019      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d111      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e76:	4b77      	ldr	r3, [pc, #476]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4a76      	ldr	r2, [pc, #472]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e82:	e011      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e88:	3308      	adds	r3, #8
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fac5 	bl	800541c <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003eb0:	4b68      	ldr	r3, [pc, #416]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebe:	4a65      	ldr	r2, [pc, #404]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003eda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d051      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ef8:	d035      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003efe:	d82e      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f04:	d031      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f0a:	d828      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f10:	d01a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f16:	d822      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f20:	d007      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f22:	e01c      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4b4b      	ldr	r3, [pc, #300]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	4a4a      	ldr	r2, [pc, #296]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f30:	e01c      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	3308      	adds	r3, #8
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 fa6e 	bl	800541c <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f46:	e011      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	3328      	adds	r3, #40	@ 0x28
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fb15 	bl	8005580 <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e006      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f64:	e002      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f74:	4b37      	ldr	r3, [pc, #220]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f82:	4a34      	ldr	r2, [pc, #208]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fa8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d056      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fbc:	d033      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003fbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fc2:	d82c      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fc8:	d02f      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fce:	d826      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fd4:	d02b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003fd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fda:	d820      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fe0:	d012      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fe6:	d81a      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d022      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff0:	d115      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 fa0e 	bl	800541c <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004006:	e015      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	3328      	adds	r3, #40	@ 0x28
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fab5 	bl	8005580 <RCCEx_PLL3_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800401c:	e00a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004026:	bf00      	nop
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800403c:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800403e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004040:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404a:	4a02      	ldr	r2, [pc, #8]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800404c:	430b      	orrs	r3, r1
 800404e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004052:	bf00      	nop
 8004054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004076:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d055      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800408c:	d033      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800408e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004092:	d82c      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d02f      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d826      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040a4:	d02b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040aa:	d820      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b0:	d012      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80040b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b6:	d81a      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80040bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040c0:	d115      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	3308      	adds	r3, #8
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f9a6 	bl	800541c <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040d6:	e015      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	3328      	adds	r3, #40	@ 0x28
 80040de:	2101      	movs	r1, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 fa4d 	bl	8005580 <RCCEx_PLL3_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800410c:	4ba3      	ldr	r3, [pc, #652]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004110:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800411c:	4a9f      	ldr	r2, [pc, #636]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800411e:	430b      	orrs	r3, r1
 8004120:	6593      	str	r3, [r2, #88]	@ 0x58
 8004122:	e003      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800413c:	2300      	movs	r3, #0
 800413e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004146:	460b      	mov	r3, r1
 8004148:	4313      	orrs	r3, r2
 800414a:	d037      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004156:	d00e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800415c:	d816      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004166:	d111      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4b8c      	ldr	r3, [pc, #560]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	4a8b      	ldr	r2, [pc, #556]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800416e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004174:	e00f      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	3308      	adds	r3, #8
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f94c 	bl	800541c <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800419e:	4b7f      	ldr	r3, [pc, #508]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a7b      	ldr	r2, [pc, #492]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ae:	430b      	orrs	r3, r1
 80041b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80041b2:	e003      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	d039      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d81c      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80041e6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004229 	.word	0x08004229
 80041f0:	080041fd 	.word	0x080041fd
 80041f4:	0800420b 	.word	0x0800420b
 80041f8:	08004229 	.word	0x08004229
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	4b67      	ldr	r3, [pc, #412]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	4a66      	ldr	r2, [pc, #408]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004208:	e00f      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	3308      	adds	r3, #8
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f001 f902 	bl	800541c <RCCEx_PLL2_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004232:	4b5a      	ldr	r3, [pc, #360]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	f023 0103 	bic.w	r1, r3, #3
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004240:	4a56      	ldr	r2, [pc, #344]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004242:	430b      	orrs	r3, r1
 8004244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800425c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004266:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	f000 809f 	beq.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004272:	4b4b      	ldr	r3, [pc, #300]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4a      	ldr	r2, [pc, #296]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fd fac1 	bl	8001804 <HAL_GetTick>
 8004282:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004286:	e00b      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fd fabc 	bl	8001804 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	@ 0x64
 8004296:	d903      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429e:	e005      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a0:	4b3f      	ldr	r3, [pc, #252]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ed      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80042ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d179      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042b4:	4b39      	ldr	r3, [pc, #228]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042c0:	4053      	eors	r3, r2
 80042c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d015      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ca:	4b34      	ldr	r3, [pc, #208]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	4b31      	ldr	r3, [pc, #196]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	4a30      	ldr	r2, [pc, #192]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e2:	4b2e      	ldr	r3, [pc, #184]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e6:	4a2d      	ldr	r2, [pc, #180]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042ee:	4a2b      	ldr	r2, [pc, #172]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004302:	d118      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fa7e 	bl	8001804 <HAL_GetTick>
 8004308:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800430c:	e00d      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fa79 	bl	8001804 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800431e:	429a      	cmp	r2, r3
 8004320:	d903      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004328:	e005      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432a:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0eb      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d129      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800434e:	d10e      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004360:	091a      	lsrs	r2, r3, #4
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004364:	4013      	ands	r3, r2
 8004366:	4a0d      	ldr	r2, [pc, #52]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004368:	430b      	orrs	r3, r1
 800436a:	6113      	str	r3, [r2, #16]
 800436c:	e005      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800436e:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	4a0a      	ldr	r2, [pc, #40]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004374:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004378:	6113      	str	r3, [r2, #16]
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800437c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438a:	4a04      	ldr	r2, [pc, #16]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004390:	e00e      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800439a:	e009      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800439c:	58024400 	.word	0x58024400
 80043a0:	58024800 	.word	0x58024800
 80043a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 0301 	and.w	r3, r2, #1
 80043bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f000 8089 	beq.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d8:	2b28      	cmp	r3, #40	@ 0x28
 80043da:	d86b      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043dc:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	080044bd 	.word	0x080044bd
 80043e8:	080044b5 	.word	0x080044b5
 80043ec:	080044b5 	.word	0x080044b5
 80043f0:	080044b5 	.word	0x080044b5
 80043f4:	080044b5 	.word	0x080044b5
 80043f8:	080044b5 	.word	0x080044b5
 80043fc:	080044b5 	.word	0x080044b5
 8004400:	080044b5 	.word	0x080044b5
 8004404:	08004489 	.word	0x08004489
 8004408:	080044b5 	.word	0x080044b5
 800440c:	080044b5 	.word	0x080044b5
 8004410:	080044b5 	.word	0x080044b5
 8004414:	080044b5 	.word	0x080044b5
 8004418:	080044b5 	.word	0x080044b5
 800441c:	080044b5 	.word	0x080044b5
 8004420:	080044b5 	.word	0x080044b5
 8004424:	0800449f 	.word	0x0800449f
 8004428:	080044b5 	.word	0x080044b5
 800442c:	080044b5 	.word	0x080044b5
 8004430:	080044b5 	.word	0x080044b5
 8004434:	080044b5 	.word	0x080044b5
 8004438:	080044b5 	.word	0x080044b5
 800443c:	080044b5 	.word	0x080044b5
 8004440:	080044b5 	.word	0x080044b5
 8004444:	080044bd 	.word	0x080044bd
 8004448:	080044b5 	.word	0x080044b5
 800444c:	080044b5 	.word	0x080044b5
 8004450:	080044b5 	.word	0x080044b5
 8004454:	080044b5 	.word	0x080044b5
 8004458:	080044b5 	.word	0x080044b5
 800445c:	080044b5 	.word	0x080044b5
 8004460:	080044b5 	.word	0x080044b5
 8004464:	080044bd 	.word	0x080044bd
 8004468:	080044b5 	.word	0x080044b5
 800446c:	080044b5 	.word	0x080044b5
 8004470:	080044b5 	.word	0x080044b5
 8004474:	080044b5 	.word	0x080044b5
 8004478:	080044b5 	.word	0x080044b5
 800447c:	080044b5 	.word	0x080044b5
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080044bd 	.word	0x080044bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	3308      	adds	r3, #8
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f000 ffc3 	bl	800541c <RCCEx_PLL2_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800449c:	e00f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	3328      	adds	r3, #40	@ 0x28
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f86a 	bl	8005580 <RCCEx_PLL3_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044b2:	e004      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80044bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044c6:	4bbf      	ldr	r3, [pc, #764]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044d4:	4abb      	ldr	r2, [pc, #748]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044da:	e003      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 0302 	and.w	r3, r2, #2
 80044f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d041      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800450a:	2b05      	cmp	r3, #5
 800450c:	d824      	bhi.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800450e:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004561 	.word	0x08004561
 8004518:	0800452d 	.word	0x0800452d
 800451c:	08004543 	.word	0x08004543
 8004520:	08004561 	.word	0x08004561
 8004524:	08004561 	.word	0x08004561
 8004528:	08004561 	.word	0x08004561
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	3308      	adds	r3, #8
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f000 ff71 	bl	800541c <RCCEx_PLL2_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004540:	e00f      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	3328      	adds	r3, #40	@ 0x28
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f818 	bl	8005580 <RCCEx_PLL3_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004556:	e004      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800455e:	e000      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800456a:	4b96      	ldr	r3, [pc, #600]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	f023 0107 	bic.w	r1, r3, #7
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004578:	4a92      	ldr	r2, [pc, #584]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800457a:	430b      	orrs	r3, r1
 800457c:	6553      	str	r3, [r2, #84]	@ 0x54
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0304 	and.w	r3, r2, #4
 8004594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800459e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d044      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d825      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	08004609 	.word	0x08004609
 80045c0:	080045d5 	.word	0x080045d5
 80045c4:	080045eb 	.word	0x080045eb
 80045c8:	08004609 	.word	0x08004609
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004609 	.word	0x08004609
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d8:	3308      	adds	r3, #8
 80045da:	2101      	movs	r1, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 ff1d 	bl	800541c <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045e8:	e00f      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	3328      	adds	r3, #40	@ 0x28
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 ffc4 	bl	8005580 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045fe:	e004      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004606:	e000      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10b      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004612:	4b6c      	ldr	r3, [pc, #432]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	f023 0107 	bic.w	r1, r3, #7
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004622:	4a68      	ldr	r2, [pc, #416]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004624:	430b      	orrs	r3, r1
 8004626:	6593      	str	r3, [r2, #88]	@ 0x58
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f002 0320 	and.w	r3, r2, #32
 800463e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004642:	2300      	movs	r3, #0
 8004644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800464c:	460b      	mov	r3, r1
 800464e:	4313      	orrs	r3, r2
 8004650:	d055      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465e:	d033      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004664:	d82c      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466a:	d02f      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004670:	d826      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004672:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004676:	d02b      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004678:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800467c:	d820      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800467e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004682:	d012      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004688:	d81a      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d022      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800468e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004692:	d115      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	3308      	adds	r3, #8
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f000 febd 	bl	800541c <RCCEx_PLL2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046a8:	e015      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	3328      	adds	r3, #40	@ 0x28
 80046b0:	2102      	movs	r1, #2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 ff64 	bl	8005580 <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046be:	e00a      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046c6:	e006      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046c8:	bf00      	nop
 80046ca:	e004      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046cc:	bf00      	nop
 80046ce:	e002      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046d0:	bf00      	nop
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046de:	4b39      	ldr	r3, [pc, #228]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	4a35      	ldr	r2, [pc, #212]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80046f4:	e003      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800470a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800470e:	2300      	movs	r3, #0
 8004710:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004714:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d058      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004726:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800472a:	d033      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800472c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004730:	d82c      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004736:	d02f      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473c:	d826      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800473e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004742:	d02b      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004744:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004748:	d820      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800474a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474e:	d012      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004754:	d81a      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d022      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475e:	d115      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	3308      	adds	r3, #8
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fe57 	bl	800541c <RCCEx_PLL2_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004774:	e015      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	3328      	adds	r3, #40	@ 0x28
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fefe 	bl	8005580 <RCCEx_PLL3_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800478a:	e00a      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004792:	e006      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004794:	bf00      	nop
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004798:	bf00      	nop
 800479a:	e002      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10e      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ba:	4a02      	ldr	r2, [pc, #8]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c0:	e006      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047c2:	bf00      	nop
 80047c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	d055      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047fc:	d033      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80047fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004802:	d82c      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004808:	d02f      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480e:	d826      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004810:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004814:	d02b      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004816:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800481a:	d820      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800481c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004820:	d012      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004826:	d81a      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d022      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800482c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004830:	d115      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	3308      	adds	r3, #8
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fdee 	bl	800541c <RCCEx_PLL2_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004846:	e015      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484c:	3328      	adds	r3, #40	@ 0x28
 800484e:	2102      	movs	r1, #2
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fe95 	bl	8005580 <RCCEx_PLL3_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800485c:	e00a      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004864:	e006      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004866:	bf00      	nop
 8004868:	e004      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800487c:	4ba1      	ldr	r3, [pc, #644]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800488c:	4a9d      	ldr	r2, [pc, #628]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800488e:	430b      	orrs	r3, r1
 8004890:	6593      	str	r3, [r2, #88]	@ 0x58
 8004892:	e003      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f002 0308 	and.w	r3, r2, #8
 80048a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048b6:	460b      	mov	r3, r1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	d01e      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3328      	adds	r3, #40	@ 0x28
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fe54 	bl	8005580 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048e4:	4b87      	ldr	r3, [pc, #540]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f4:	4a83      	ldr	r2, [pc, #524]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f002 0310 	and.w	r3, r2, #16
 8004906:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004910:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004914:	460b      	mov	r3, r1
 8004916:	4313      	orrs	r3, r2
 8004918:	d01e      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004926:	d10c      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	3328      	adds	r3, #40	@ 0x28
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fe25 	bl	8005580 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004942:	4b70      	ldr	r3, [pc, #448]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004952:	4a6c      	ldr	r2, [pc, #432]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004954:	430b      	orrs	r3, r1
 8004956:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800496e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004972:	460b      	mov	r3, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	d03e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004984:	d022      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800498a:	d81b      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d00b      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004996:	e015      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	3308      	adds	r3, #8
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd3b 	bl	800541c <RCCEx_PLL2_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049ac:	e00f      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	3328      	adds	r3, #40	@ 0x28
 80049b4:	2102      	movs	r1, #2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fde2 	bl	8005580 <RCCEx_PLL3_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049c2:	e004      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ca:	e000      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049e6:	4a47      	ldr	r2, [pc, #284]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a04:	2300      	movs	r3, #0
 8004a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	d03b      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a1e:	d01f      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a24:	d818      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a30:	d007      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4b33      	ldr	r3, [pc, #204]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	4a32      	ldr	r2, [pc, #200]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a40:	e00f      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	3328      	adds	r3, #40	@ 0x28
 8004a48:	2101      	movs	r1, #1
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd98 	bl	8005580 <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a6a:	4b26      	ldr	r3, [pc, #152]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7a:	4a22      	ldr	r2, [pc, #136]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a80:	e003      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a96:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a98:	2300      	movs	r3, #0
 8004a9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d034      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ab6:	e011      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab8:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ac4:	e00e      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aca:	3308      	adds	r3, #8
 8004acc:	2102      	movs	r1, #2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fca4 	bl	800541c <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ada:	e003      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10d      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afa:	4a02      	ldr	r2, [pc, #8]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004afc:	430b      	orrs	r3, r1
 8004afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b00:	e006      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b1e:	2300      	movs	r3, #0
 8004b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b26:	460b      	mov	r3, r1
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	d00c      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b30:	3328      	adds	r3, #40	@ 0x28
 8004b32:	2102      	movs	r1, #2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fd23 	bl	8005580 <RCCEx_PLL3_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b52:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b54:	2300      	movs	r3, #0
 8004b56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	d038      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b6e:	d018      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b74:	d811      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7a:	d014      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b80:	d80b      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b8c:	4bc3      	ldr	r3, [pc, #780]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	4ac2      	ldr	r2, [pc, #776]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b98:	e008      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ba0:	e004      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bb4:	4bb9      	ldr	r3, [pc, #740]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc4:	4ab5      	ldr	r2, [pc, #724]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bca:	e003      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004be0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004be2:	2300      	movs	r3, #0
 8004be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004bea:	460b      	mov	r3, r1
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bf0:	4baa      	ldr	r3, [pc, #680]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	4aa7      	ldr	r2, [pc, #668]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c12:	2300      	movs	r3, #0
 8004c14:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c20:	4b9e      	ldr	r3, [pc, #632]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c30:	4a9a      	ldr	r2, [pc, #616]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c44:	2300      	movs	r3, #0
 8004c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c52:	4b92      	ldr	r3, [pc, #584]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c60:	4a8e      	ldr	r2, [pc, #568]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c62:	430b      	orrs	r3, r1
 8004c64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c74:	2300      	movs	r3, #0
 8004c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c82:	4b86      	ldr	r3, [pc, #536]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	4a85      	ldr	r2, [pc, #532]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c8c:	6113      	str	r3, [r2, #16]
 8004c8e:	4b83      	ldr	r3, [pc, #524]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c90:	6919      	ldr	r1, [r3, #16]
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c9a:	4a80      	ldr	r2, [pc, #512]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cae:	2300      	movs	r3, #0
 8004cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	d009      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cbc:	4b77      	ldr	r3, [pc, #476]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	4a74      	ldr	r2, [pc, #464]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cec:	4b6b      	ldr	r3, [pc, #428]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cfc:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	3308      	adds	r3, #8
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fb78 	bl	800541c <RCCEx_PLL2_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6239      	str	r1, [r7, #32]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d011      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	3308      	adds	r3, #8
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fb58 	bl	800541c <RCCEx_PLL2_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	61b9      	str	r1, [r7, #24]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d011      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	3308      	adds	r3, #8
 8004da4:	2102      	movs	r1, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb38 	bl	800541c <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6139      	str	r1, [r7, #16]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	d011      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	3328      	adds	r3, #40	@ 0x28
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fbca 	bl	8005580 <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d011      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	3328      	adds	r3, #40	@ 0x28
 8004e24:	2101      	movs	r1, #1
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fbaa 	bl	8005580 <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	d011      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	3328      	adds	r3, #40	@ 0x28
 8004e64:	2102      	movs	r1, #2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb8a 	bl	8005580 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e96:	46bd      	mov	sp, r7
 8004e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9c:	58024400 	.word	0x58024400

08004ea0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ea4:	f7fe fd96 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4904      	ldr	r1, [pc, #16]	@ (8004ec8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	58024400 	.word	0x58024400
 8004ec8:	08009c6c 	.word	0x08009c6c

08004ecc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ed4:	4ba1      	ldr	r3, [pc, #644]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ede:	4b9f      	ldr	r3, [pc, #636]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	0b1b      	lsrs	r3, r3, #12
 8004ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004eea:	4b9c      	ldr	r3, [pc, #624]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ef6:	4b99      	ldr	r3, [pc, #612]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	08db      	lsrs	r3, r3, #3
 8004efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8111 	beq.w	800513c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	f000 8083 	beq.w	8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f200 80a1 	bhi.w	800506c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d056      	beq.n	8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f36:	e099      	b.n	800506c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f38:	4b88      	ldr	r3, [pc, #544]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d02d      	beq.n	8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f44:	4b85      	ldr	r3, [pc, #532]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	08db      	lsrs	r3, r3, #3
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	4a84      	ldr	r2, [pc, #528]	@ (8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f9e:	e087      	b.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fe2:	e065      	b.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b59      	ldr	r3, [pc, #356]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005026:	e043      	b.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b48      	ldr	r3, [pc, #288]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800506a:	e021      	b.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b37      	ldr	r3, [pc, #220]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050b0:	4b2a      	ldr	r3, [pc, #168]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	0a5b      	lsrs	r3, r3, #9
 80050b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d6:	ee17 2a90 	vmov	r2, s15
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050de:	4b1f      	ldr	r3, [pc, #124]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005104:	ee17 2a90 	vmov	r2, s15
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005126:	edd7 6a07 	vldr	s13, [r7, #28]
 800512a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005132:	ee17 2a90 	vmov	r2, s15
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800513a:	e008      	b.n	800514e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
}
 800514e:	bf00      	nop
 8005150:	3724      	adds	r7, #36	@ 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
 8005160:	03d09000 	.word	0x03d09000
 8005164:	46000000 	.word	0x46000000
 8005168:	4c742400 	.word	0x4c742400
 800516c:	4a742400 	.word	0x4a742400
 8005170:	4af42400 	.word	0x4af42400

08005174 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005174:	b480      	push	{r7}
 8005176:	b089      	sub	sp, #36	@ 0x24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800517c:	4ba1      	ldr	r3, [pc, #644]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005186:	4b9f      	ldr	r3, [pc, #636]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	0d1b      	lsrs	r3, r3, #20
 800518c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005190:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005192:	4b9c      	ldr	r3, [pc, #624]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800519e:	4b99      	ldr	r3, [pc, #612]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	08db      	lsrs	r3, r3, #3
 80051a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8111 	beq.w	80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f000 8083 	beq.w	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f200 80a1 	bhi.w	8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d056      	beq.n	800528c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051de:	e099      	b.n	8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e0:	4b88      	ldr	r3, [pc, #544]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02d      	beq.n	8005248 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051ec:	4b85      	ldr	r3, [pc, #532]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	08db      	lsrs	r3, r3, #3
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	4a84      	ldr	r2, [pc, #528]	@ (8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
 80051fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	4b7b      	ldr	r3, [pc, #492]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	ed97 6a03 	vldr	s12, [r7, #12]
 800522a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800522e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800523a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005246:	e087      	b.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005252:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525a:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a03 	vldr	s12, [r7, #12]
 800526e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800528a:	e065      	b.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b59      	ldr	r3, [pc, #356]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ce:	e043      	b.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e2:	4b48      	ldr	r3, [pc, #288]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005312:	e021      	b.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005326:	4b37      	ldr	r3, [pc, #220]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005336:	ed97 6a03 	vldr	s12, [r7, #12]
 800533a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800533e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800534a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005356:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005358:	4b2a      	ldr	r3, [pc, #168]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	0a5b      	lsrs	r3, r3, #9
 800535e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800536e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005372:	edd7 6a07 	vldr	s13, [r7, #28]
 8005376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800537a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800537e:	ee17 2a90 	vmov	r2, s15
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	0c1b      	lsrs	r3, r3, #16
 800538c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800539c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ac:	ee17 2a90 	vmov	r2, s15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053b4:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	0e1b      	lsrs	r3, r3, #24
 80053ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053da:	ee17 2a90 	vmov	r2, s15
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053e2:	e008      	b.n	80053f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]
}
 80053f6:	bf00      	nop
 80053f8:	3724      	adds	r7, #36	@ 0x24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	58024400 	.word	0x58024400
 8005408:	03d09000 	.word	0x03d09000
 800540c:	46000000 	.word	0x46000000
 8005410:	4c742400 	.word	0x4c742400
 8005414:	4a742400 	.word	0x4a742400
 8005418:	4af42400 	.word	0x4af42400

0800541c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800542a:	4b53      	ldr	r3, [pc, #332]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b03      	cmp	r3, #3
 8005434:	d101      	bne.n	800543a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e099      	b.n	800556e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800543a:	4b4f      	ldr	r3, [pc, #316]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a4e      	ldr	r2, [pc, #312]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005440:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005446:	f7fc f9dd 	bl	8001804 <HAL_GetTick>
 800544a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544c:	e008      	b.n	8005460 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800544e:	f7fc f9d9 	bl	8001804 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e086      	b.n	800556e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005460:	4b45      	ldr	r3, [pc, #276]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f0      	bne.n	800544e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800546c:	4b42      	ldr	r3, [pc, #264]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	493f      	ldr	r1, [pc, #252]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	3b01      	subs	r3, #1
 8005486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	3b01      	subs	r3, #1
 8005490:	025b      	lsls	r3, r3, #9
 8005492:	b29b      	uxth	r3, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054b0:	4931      	ldr	r1, [pc, #196]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054b6:	4b30      	ldr	r3, [pc, #192]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	492d      	ldr	r1, [pc, #180]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	f023 0220 	bic.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4928      	ldr	r1, [pc, #160]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	4a26      	ldr	r2, [pc, #152]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054e6:	4b24      	ldr	r3, [pc, #144]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ea:	4b24      	ldr	r3, [pc, #144]	@ (800557c <RCCEx_PLL2_Config+0x160>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	69d2      	ldr	r2, [r2, #28]
 80054f2:	00d2      	lsls	r2, r2, #3
 80054f4:	4920      	ldr	r1, [pc, #128]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005500:	f043 0310 	orr.w	r3, r3, #16
 8005504:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800550c:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005512:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005518:	e00f      	b.n	800553a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d106      	bne.n	800552e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005520:	4b15      	ldr	r3, [pc, #84]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	4a14      	ldr	r2, [pc, #80]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800552c:	e005      	b.n	800553a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800552e:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	4a11      	ldr	r2, [pc, #68]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005538:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0e      	ldr	r2, [pc, #56]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fc f95d 	bl	8001804 <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800554e:	f7fc f959 	bl	8001804 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e006      	b.n	800556e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
 800557c:	ffff0007 	.word	0xffff0007

08005580 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800558e:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b03      	cmp	r3, #3
 8005598:	d101      	bne.n	800559e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e099      	b.n	80056d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800559e:	4b4f      	ldr	r3, [pc, #316]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a4e      	ldr	r2, [pc, #312]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fc f92b 	bl	8001804 <HAL_GetTick>
 80055ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055b2:	f7fc f927 	bl	8001804 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e086      	b.n	80056d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055c4:	4b45      	ldr	r3, [pc, #276]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055d0:	4b42      	ldr	r3, [pc, #264]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	493f      	ldr	r1, [pc, #252]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	3b01      	subs	r3, #1
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	3b01      	subs	r3, #1
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005614:	4931      	ldr	r1, [pc, #196]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800561a:	4b30      	ldr	r3, [pc, #192]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 800561c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	492d      	ldr	r1, [pc, #180]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005628:	4313      	orrs	r3, r2
 800562a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800562c:	4b2b      	ldr	r3, [pc, #172]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4928      	ldr	r1, [pc, #160]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800563e:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	4a26      	ldr	r2, [pc, #152]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800564a:	4b24      	ldr	r3, [pc, #144]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 800564c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800564e:	4b24      	ldr	r3, [pc, #144]	@ (80056e0 <RCCEx_PLL3_Config+0x160>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	69d2      	ldr	r2, [r2, #28]
 8005656:	00d2      	lsls	r2, r2, #3
 8005658:	4920      	ldr	r1, [pc, #128]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800565e:	4b1f      	ldr	r3, [pc, #124]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	4a1e      	ldr	r2, [pc, #120]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005676:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800567a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800567c:	e00f      	b.n	800569e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d106      	bne.n	8005692 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005684:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	4a14      	ldr	r2, [pc, #80]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 800568a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800568e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005690:	e005      	b.n	800569e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005692:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005696:	4a11      	ldr	r2, [pc, #68]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800569e:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a0e      	ldr	r2, [pc, #56]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056aa:	f7fc f8ab 	bl	8001804 <HAL_GetTick>
 80056ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b0:	e008      	b.n	80056c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056b2:	f7fc f8a7 	bl	8001804 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056c4:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <RCCEx_PLL3_Config+0x15c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	ffff0007 	.word	0xffff0007

080056e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e042      	b.n	800577c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fb ff45 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fa14 	bl	8006b5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fca9 	bl	800608c <UART_SetConfig>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e01b      	b.n	800577c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fa93 	bl	8006ca0 <UART_CheckIdleState>
 800577a:	4603      	mov	r3, r0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	@ 0x28
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	2b20      	cmp	r3, #32
 800579c:	d17b      	bne.n	8005896 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_UART_Transmit+0x26>
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e074      	b.n	8005898 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2221      	movs	r2, #33	@ 0x21
 80057ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057be:	f7fc f821 	bl	8001804 <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057dc:	d108      	bne.n	80057f0 <HAL_UART_Transmit+0x6c>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e003      	b.n	80057f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057f8:	e030      	b.n	800585c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	2180      	movs	r1, #128	@ 0x80
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f001 faf5 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e03d      	b.n	8005898 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	3302      	adds	r3, #2
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	e007      	b.n	800584a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1c8      	bne.n	80057fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	2140      	movs	r1, #64	@ 0x40
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f001 fabe 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e006      	b.n	8005898 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b0ba      	sub	sp, #232	@ 0xe8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80058ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058ce:	4013      	ands	r3, r2
 80058d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80058d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11b      	bne.n	8005914 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d015      	beq.n	8005914 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8393 	beq.w	8006030 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
      }
      return;
 8005912:	e38d      	b.n	8006030 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8123 	beq.w	8005b64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800591e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005922:	4b8d      	ldr	r3, [pc, #564]	@ (8005b58 <HAL_UART_IRQHandler+0x2b8>)
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800592a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800592e:	4b8b      	ldr	r3, [pc, #556]	@ (8005b5c <HAL_UART_IRQHandler+0x2bc>)
 8005930:	4013      	ands	r3, r2
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8116 	beq.w	8005b64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d011      	beq.n	8005968 <HAL_UART_IRQHandler+0xc8>
 8005944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2201      	movs	r2, #1
 8005956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	f043 0201 	orr.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d011      	beq.n	8005998 <HAL_UART_IRQHandler+0xf8>
 8005974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2202      	movs	r2, #2
 8005986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598e:	f043 0204 	orr.w	r2, r3, #4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d011      	beq.n	80059c8 <HAL_UART_IRQHandler+0x128>
 80059a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2204      	movs	r2, #4
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059be:	f043 0202 	orr.w	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d017      	beq.n	8005a04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80059e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005b58 <HAL_UART_IRQHandler+0x2b8>)
 80059e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	f043 0208 	orr.w	r2, r3, #8
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d012      	beq.n	8005a36 <HAL_UART_IRQHandler+0x196>
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 82f9 	beq.w	8006034 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8a:	2b40      	cmp	r3, #64	@ 0x40
 8005a8c:	d005      	beq.n	8005a9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d054      	beq.n	8005b44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fa18 	bl	8006ed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d146      	bne.n	8005b3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ada:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1d9      	bne.n	8005aae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d017      	beq.n	8005b34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b0a:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <HAL_UART_IRQHandler+0x2c0>)
 8005b0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fc fb33 	bl	8002180 <HAL_DMA_Abort_IT>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d019      	beq.n	8005b54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b32:	e00f      	b.n	8005b54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa93 	bl	8006060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3a:	e00b      	b.n	8005b54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fa8f 	bl	8006060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b42:	e007      	b.n	8005b54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fa8b 	bl	8006060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005b52:	e26f      	b.n	8006034 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	bf00      	nop
    return;
 8005b56:	e26d      	b.n	8006034 <HAL_UART_IRQHandler+0x794>
 8005b58:	10000001 	.word	0x10000001
 8005b5c:	04000120 	.word	0x04000120
 8005b60:	08006f9d 	.word	0x08006f9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 8203 	bne.w	8005f74 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 81fc 	beq.w	8005f74 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 81f5 	beq.w	8005f74 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b40      	cmp	r3, #64	@ 0x40
 8005b9e:	f040 816d 	bne.w	8005e7c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4aa4      	ldr	r2, [pc, #656]	@ (8005e3c <HAL_UART_IRQHandler+0x59c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d068      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4aa1      	ldr	r2, [pc, #644]	@ (8005e40 <HAL_UART_IRQHandler+0x5a0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d061      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a9f      	ldr	r2, [pc, #636]	@ (8005e44 <HAL_UART_IRQHandler+0x5a4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d05a      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a9c      	ldr	r2, [pc, #624]	@ (8005e48 <HAL_UART_IRQHandler+0x5a8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d053      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a9a      	ldr	r2, [pc, #616]	@ (8005e4c <HAL_UART_IRQHandler+0x5ac>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d04c      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a97      	ldr	r2, [pc, #604]	@ (8005e50 <HAL_UART_IRQHandler+0x5b0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d045      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a95      	ldr	r2, [pc, #596]	@ (8005e54 <HAL_UART_IRQHandler+0x5b4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d03e      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a92      	ldr	r2, [pc, #584]	@ (8005e58 <HAL_UART_IRQHandler+0x5b8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d037      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a90      	ldr	r2, [pc, #576]	@ (8005e5c <HAL_UART_IRQHandler+0x5bc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d030      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a8d      	ldr	r2, [pc, #564]	@ (8005e60 <HAL_UART_IRQHandler+0x5c0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d029      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a8b      	ldr	r2, [pc, #556]	@ (8005e64 <HAL_UART_IRQHandler+0x5c4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d022      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a88      	ldr	r2, [pc, #544]	@ (8005e68 <HAL_UART_IRQHandler+0x5c8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01b      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a86      	ldr	r2, [pc, #536]	@ (8005e6c <HAL_UART_IRQHandler+0x5cc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d014      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a83      	ldr	r2, [pc, #524]	@ (8005e70 <HAL_UART_IRQHandler+0x5d0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00d      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a81      	ldr	r2, [pc, #516]	@ (8005e74 <HAL_UART_IRQHandler+0x5d4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d006      	beq.n	8005c82 <HAL_UART_IRQHandler+0x3e2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7e      	ldr	r2, [pc, #504]	@ (8005e78 <HAL_UART_IRQHandler+0x5d8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d106      	bne.n	8005c90 <HAL_UART_IRQHandler+0x3f0>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	e005      	b.n	8005c9c <HAL_UART_IRQHandler+0x3fc>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80ad 	beq.w	8005e04 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f080 80a5 	bcs.w	8005e04 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cd0:	f000 8087 	beq.w	8005de2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005cfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1da      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e1      	bne.n	8005d1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e3      	bne.n	8005d5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db0:	f023 0310 	bic.w	r3, r3, #16
 8005db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e4      	bne.n	8005da0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fb feb1 	bl	8001b44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f939 	bl	8006074 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e02:	e119      	b.n	8006038 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f040 8112 	bne.w	8006038 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e20:	f040 810a 	bne.w	8006038 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f91e 	bl	8006074 <HAL_UARTEx_RxEventCallback>
      return;
 8005e38:	e0fe      	b.n	8006038 <HAL_UART_IRQHandler+0x798>
 8005e3a:	bf00      	nop
 8005e3c:	40020010 	.word	0x40020010
 8005e40:	40020028 	.word	0x40020028
 8005e44:	40020040 	.word	0x40020040
 8005e48:	40020058 	.word	0x40020058
 8005e4c:	40020070 	.word	0x40020070
 8005e50:	40020088 	.word	0x40020088
 8005e54:	400200a0 	.word	0x400200a0
 8005e58:	400200b8 	.word	0x400200b8
 8005e5c:	40020410 	.word	0x40020410
 8005e60:	40020428 	.word	0x40020428
 8005e64:	40020440 	.word	0x40020440
 8005e68:	40020458 	.word	0x40020458
 8005e6c:	40020470 	.word	0x40020470
 8005e70:	40020488 	.word	0x40020488
 8005e74:	400204a0 	.word	0x400204a0
 8005e78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80cf 	beq.w	800603c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005e9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 80ca 	beq.w	800603c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ecc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e4      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	623b      	str	r3, [r7, #32]
   return(result);
 8005eee:	6a3a      	ldr	r2, [r7, #32]
 8005ef0:	4b55      	ldr	r3, [pc, #340]	@ (8006048 <HAL_UART_IRQHandler+0x7a8>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e3      	bne.n	8005ede <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0310 	bic.w	r3, r3, #16
 8005f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e4      	bne.n	8005f2a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f881 	bl	8006074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f72:	e063      	b.n	800603c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00e      	beq.n	8005f9e <HAL_UART_IRQHandler+0x6fe>
 8005f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 f83d 	bl	8007016 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f9c:	e051      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d014      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d03a      	beq.n	8006040 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
    }
    return;
 8005fd2:	e035      	b.n	8006040 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x754>
 8005fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 ffe7 	bl	8006fc0 <UART_EndTransmit_IT>
    return;
 8005ff2:	e026      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <HAL_UART_IRQHandler+0x774>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006004:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f816 	bl	800703e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006012:	e016      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <HAL_UART_IRQHandler+0x7a2>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006024:	2b00      	cmp	r3, #0
 8006026:	da0c      	bge.n	8006042 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fffe 	bl	800702a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800602e:	e008      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006030:	bf00      	nop
 8006032:	e006      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006034:	bf00      	nop
 8006036:	e004      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
      return;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006040:	bf00      	nop
  }
}
 8006042:	37e8      	adds	r7, #232	@ 0xe8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	effffffe 	.word	0xeffffffe

0800604c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800608c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006090:	b092      	sub	sp, #72	@ 0x48
 8006092:	af00      	add	r7, sp, #0
 8006094:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	431a      	orrs	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4bbe      	ldr	r3, [pc, #760]	@ (80063b4 <UART_SetConfig+0x328>)
 80060bc:	4013      	ands	r3, r2
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4ab3      	ldr	r2, [pc, #716]	@ (80063b8 <UART_SetConfig+0x32c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d004      	beq.n	80060f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f4:	4313      	orrs	r3, r2
 80060f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	4baf      	ldr	r3, [pc, #700]	@ (80063bc <UART_SetConfig+0x330>)
 8006100:	4013      	ands	r3, r2
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006108:	430b      	orrs	r3, r1
 800610a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	f023 010f 	bic.w	r1, r3, #15
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4aa6      	ldr	r2, [pc, #664]	@ (80063c0 <UART_SetConfig+0x334>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d177      	bne.n	800621c <UART_SetConfig+0x190>
 800612c:	4ba5      	ldr	r3, [pc, #660]	@ (80063c4 <UART_SetConfig+0x338>)
 800612e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006134:	2b28      	cmp	r3, #40	@ 0x28
 8006136:	d86d      	bhi.n	8006214 <UART_SetConfig+0x188>
 8006138:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <UART_SetConfig+0xb4>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	080061e5 	.word	0x080061e5
 8006144:	08006215 	.word	0x08006215
 8006148:	08006215 	.word	0x08006215
 800614c:	08006215 	.word	0x08006215
 8006150:	08006215 	.word	0x08006215
 8006154:	08006215 	.word	0x08006215
 8006158:	08006215 	.word	0x08006215
 800615c:	08006215 	.word	0x08006215
 8006160:	080061ed 	.word	0x080061ed
 8006164:	08006215 	.word	0x08006215
 8006168:	08006215 	.word	0x08006215
 800616c:	08006215 	.word	0x08006215
 8006170:	08006215 	.word	0x08006215
 8006174:	08006215 	.word	0x08006215
 8006178:	08006215 	.word	0x08006215
 800617c:	08006215 	.word	0x08006215
 8006180:	080061f5 	.word	0x080061f5
 8006184:	08006215 	.word	0x08006215
 8006188:	08006215 	.word	0x08006215
 800618c:	08006215 	.word	0x08006215
 8006190:	08006215 	.word	0x08006215
 8006194:	08006215 	.word	0x08006215
 8006198:	08006215 	.word	0x08006215
 800619c:	08006215 	.word	0x08006215
 80061a0:	080061fd 	.word	0x080061fd
 80061a4:	08006215 	.word	0x08006215
 80061a8:	08006215 	.word	0x08006215
 80061ac:	08006215 	.word	0x08006215
 80061b0:	08006215 	.word	0x08006215
 80061b4:	08006215 	.word	0x08006215
 80061b8:	08006215 	.word	0x08006215
 80061bc:	08006215 	.word	0x08006215
 80061c0:	08006205 	.word	0x08006205
 80061c4:	08006215 	.word	0x08006215
 80061c8:	08006215 	.word	0x08006215
 80061cc:	08006215 	.word	0x08006215
 80061d0:	08006215 	.word	0x08006215
 80061d4:	08006215 	.word	0x08006215
 80061d8:	08006215 	.word	0x08006215
 80061dc:	08006215 	.word	0x08006215
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e222      	b.n	8006632 <UART_SetConfig+0x5a6>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e21e      	b.n	8006632 <UART_SetConfig+0x5a6>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e21a      	b.n	8006632 <UART_SetConfig+0x5a6>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006202:	e216      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006204:	2320      	movs	r3, #32
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620a:	e212      	b.n	8006632 <UART_SetConfig+0x5a6>
 800620c:	2340      	movs	r3, #64	@ 0x40
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006212:	e20e      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621a:	e20a      	b.n	8006632 <UART_SetConfig+0x5a6>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a69      	ldr	r2, [pc, #420]	@ (80063c8 <UART_SetConfig+0x33c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d130      	bne.n	8006288 <UART_SetConfig+0x1fc>
 8006226:	4b67      	ldr	r3, [pc, #412]	@ (80063c4 <UART_SetConfig+0x338>)
 8006228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	2b05      	cmp	r3, #5
 8006230:	d826      	bhi.n	8006280 <UART_SetConfig+0x1f4>
 8006232:	a201      	add	r2, pc, #4	@ (adr r2, 8006238 <UART_SetConfig+0x1ac>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	08006251 	.word	0x08006251
 800623c:	08006259 	.word	0x08006259
 8006240:	08006261 	.word	0x08006261
 8006244:	08006269 	.word	0x08006269
 8006248:	08006271 	.word	0x08006271
 800624c:	08006279 	.word	0x08006279
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e1ec      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006258:	2304      	movs	r3, #4
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e1e8      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006260:	2308      	movs	r3, #8
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e1e4      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006268:	2310      	movs	r3, #16
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626e:	e1e0      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006270:	2320      	movs	r3, #32
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006276:	e1dc      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006278:	2340      	movs	r3, #64	@ 0x40
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627e:	e1d8      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006286:	e1d4      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a4f      	ldr	r2, [pc, #316]	@ (80063cc <UART_SetConfig+0x340>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d130      	bne.n	80062f4 <UART_SetConfig+0x268>
 8006292:	4b4c      	ldr	r3, [pc, #304]	@ (80063c4 <UART_SetConfig+0x338>)
 8006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	2b05      	cmp	r3, #5
 800629c:	d826      	bhi.n	80062ec <UART_SetConfig+0x260>
 800629e:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <UART_SetConfig+0x218>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062bd 	.word	0x080062bd
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062cd 	.word	0x080062cd
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e1b6      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e1b2      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062cc:	2308      	movs	r3, #8
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d2:	e1ae      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062da:	e1aa      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062dc:	2320      	movs	r3, #32
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e2:	e1a6      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062e4:	2340      	movs	r3, #64	@ 0x40
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ea:	e1a2      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062ec:	2380      	movs	r3, #128	@ 0x80
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f2:	e19e      	b.n	8006632 <UART_SetConfig+0x5a6>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a35      	ldr	r2, [pc, #212]	@ (80063d0 <UART_SetConfig+0x344>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d130      	bne.n	8006360 <UART_SetConfig+0x2d4>
 80062fe:	4b31      	ldr	r3, [pc, #196]	@ (80063c4 <UART_SetConfig+0x338>)
 8006300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b05      	cmp	r3, #5
 8006308:	d826      	bhi.n	8006358 <UART_SetConfig+0x2cc>
 800630a:	a201      	add	r2, pc, #4	@ (adr r2, 8006310 <UART_SetConfig+0x284>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006329 	.word	0x08006329
 8006314:	08006331 	.word	0x08006331
 8006318:	08006339 	.word	0x08006339
 800631c:	08006341 	.word	0x08006341
 8006320:	08006349 	.word	0x08006349
 8006324:	08006351 	.word	0x08006351
 8006328:	2300      	movs	r3, #0
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e180      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006330:	2304      	movs	r3, #4
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e17c      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006338:	2308      	movs	r3, #8
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633e:	e178      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006340:	2310      	movs	r3, #16
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006346:	e174      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006348:	2320      	movs	r3, #32
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634e:	e170      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006350:	2340      	movs	r3, #64	@ 0x40
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006356:	e16c      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006358:	2380      	movs	r3, #128	@ 0x80
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635e:	e168      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1b      	ldr	r2, [pc, #108]	@ (80063d4 <UART_SetConfig+0x348>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d142      	bne.n	80063f0 <UART_SetConfig+0x364>
 800636a:	4b16      	ldr	r3, [pc, #88]	@ (80063c4 <UART_SetConfig+0x338>)
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b05      	cmp	r3, #5
 8006374:	d838      	bhi.n	80063e8 <UART_SetConfig+0x35c>
 8006376:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <UART_SetConfig+0x2f0>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	08006395 	.word	0x08006395
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063a5 	.word	0x080063a5
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063d9 	.word	0x080063d9
 8006390:	080063e1 	.word	0x080063e1
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e14a      	b.n	8006632 <UART_SetConfig+0x5a6>
 800639c:	2304      	movs	r3, #4
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e146      	b.n	8006632 <UART_SetConfig+0x5a6>
 80063a4:	2308      	movs	r3, #8
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e142      	b.n	8006632 <UART_SetConfig+0x5a6>
 80063ac:	2310      	movs	r3, #16
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e13e      	b.n	8006632 <UART_SetConfig+0x5a6>
 80063b4:	cfff69f3 	.word	0xcfff69f3
 80063b8:	58000c00 	.word	0x58000c00
 80063bc:	11fff4ff 	.word	0x11fff4ff
 80063c0:	40011000 	.word	0x40011000
 80063c4:	58024400 	.word	0x58024400
 80063c8:	40004400 	.word	0x40004400
 80063cc:	40004800 	.word	0x40004800
 80063d0:	40004c00 	.word	0x40004c00
 80063d4:	40005000 	.word	0x40005000
 80063d8:	2320      	movs	r3, #32
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063de:	e128      	b.n	8006632 <UART_SetConfig+0x5a6>
 80063e0:	2340      	movs	r3, #64	@ 0x40
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e6:	e124      	b.n	8006632 <UART_SetConfig+0x5a6>
 80063e8:	2380      	movs	r3, #128	@ 0x80
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ee:	e120      	b.n	8006632 <UART_SetConfig+0x5a6>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4acb      	ldr	r2, [pc, #812]	@ (8006724 <UART_SetConfig+0x698>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d176      	bne.n	80064e8 <UART_SetConfig+0x45c>
 80063fa:	4bcb      	ldr	r3, [pc, #812]	@ (8006728 <UART_SetConfig+0x69c>)
 80063fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006402:	2b28      	cmp	r3, #40	@ 0x28
 8006404:	d86c      	bhi.n	80064e0 <UART_SetConfig+0x454>
 8006406:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <UART_SetConfig+0x380>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	080064b1 	.word	0x080064b1
 8006410:	080064e1 	.word	0x080064e1
 8006414:	080064e1 	.word	0x080064e1
 8006418:	080064e1 	.word	0x080064e1
 800641c:	080064e1 	.word	0x080064e1
 8006420:	080064e1 	.word	0x080064e1
 8006424:	080064e1 	.word	0x080064e1
 8006428:	080064e1 	.word	0x080064e1
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064e1 	.word	0x080064e1
 8006434:	080064e1 	.word	0x080064e1
 8006438:	080064e1 	.word	0x080064e1
 800643c:	080064e1 	.word	0x080064e1
 8006440:	080064e1 	.word	0x080064e1
 8006444:	080064e1 	.word	0x080064e1
 8006448:	080064e1 	.word	0x080064e1
 800644c:	080064c1 	.word	0x080064c1
 8006450:	080064e1 	.word	0x080064e1
 8006454:	080064e1 	.word	0x080064e1
 8006458:	080064e1 	.word	0x080064e1
 800645c:	080064e1 	.word	0x080064e1
 8006460:	080064e1 	.word	0x080064e1
 8006464:	080064e1 	.word	0x080064e1
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080064c9 	.word	0x080064c9
 8006470:	080064e1 	.word	0x080064e1
 8006474:	080064e1 	.word	0x080064e1
 8006478:	080064e1 	.word	0x080064e1
 800647c:	080064e1 	.word	0x080064e1
 8006480:	080064e1 	.word	0x080064e1
 8006484:	080064e1 	.word	0x080064e1
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064d1 	.word	0x080064d1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064e1 	.word	0x080064e1
 800649c:	080064e1 	.word	0x080064e1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b6:	e0bc      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064be:	e0b8      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c6:	e0b4      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ce:	e0b0      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064d0:	2320      	movs	r3, #32
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d6:	e0ac      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064d8:	2340      	movs	r3, #64	@ 0x40
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064de:	e0a8      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064e0:	2380      	movs	r3, #128	@ 0x80
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e6:	e0a4      	b.n	8006632 <UART_SetConfig+0x5a6>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a8f      	ldr	r2, [pc, #572]	@ (800672c <UART_SetConfig+0x6a0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d130      	bne.n	8006554 <UART_SetConfig+0x4c8>
 80064f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006728 <UART_SetConfig+0x69c>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d826      	bhi.n	800654c <UART_SetConfig+0x4c0>
 80064fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <UART_SetConfig+0x478>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	0800651d 	.word	0x0800651d
 8006508:	08006525 	.word	0x08006525
 800650c:	0800652d 	.word	0x0800652d
 8006510:	08006535 	.word	0x08006535
 8006514:	0800653d 	.word	0x0800653d
 8006518:	08006545 	.word	0x08006545
 800651c:	2300      	movs	r3, #0
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e086      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e082      	b.n	8006632 <UART_SetConfig+0x5a6>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e07e      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e07a      	b.n	8006632 <UART_SetConfig+0x5a6>
 800653c:	2320      	movs	r3, #32
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e076      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006544:	2340      	movs	r3, #64	@ 0x40
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654a:	e072      	b.n	8006632 <UART_SetConfig+0x5a6>
 800654c:	2380      	movs	r3, #128	@ 0x80
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006552:	e06e      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a75      	ldr	r2, [pc, #468]	@ (8006730 <UART_SetConfig+0x6a4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d130      	bne.n	80065c0 <UART_SetConfig+0x534>
 800655e:	4b72      	ldr	r3, [pc, #456]	@ (8006728 <UART_SetConfig+0x69c>)
 8006560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	2b05      	cmp	r3, #5
 8006568:	d826      	bhi.n	80065b8 <UART_SetConfig+0x52c>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <UART_SetConfig+0x4e4>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006589 	.word	0x08006589
 8006574:	08006591 	.word	0x08006591
 8006578:	08006599 	.word	0x08006599
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	2300      	movs	r3, #0
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e050      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e04c      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e048      	b.n	8006632 <UART_SetConfig+0x5a6>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e044      	b.n	8006632 <UART_SetConfig+0x5a6>
 80065a8:	2320      	movs	r3, #32
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e040      	b.n	8006632 <UART_SetConfig+0x5a6>
 80065b0:	2340      	movs	r3, #64	@ 0x40
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e03c      	b.n	8006632 <UART_SetConfig+0x5a6>
 80065b8:	2380      	movs	r3, #128	@ 0x80
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065be:	e038      	b.n	8006632 <UART_SetConfig+0x5a6>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a5b      	ldr	r2, [pc, #364]	@ (8006734 <UART_SetConfig+0x6a8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d130      	bne.n	800662c <UART_SetConfig+0x5a0>
 80065ca:	4b57      	ldr	r3, [pc, #348]	@ (8006728 <UART_SetConfig+0x69c>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	d826      	bhi.n	8006624 <UART_SetConfig+0x598>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <UART_SetConfig+0x550>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065f5 	.word	0x080065f5
 80065e0:	080065fd 	.word	0x080065fd
 80065e4:	08006605 	.word	0x08006605
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006615 	.word	0x08006615
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	2302      	movs	r3, #2
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e01a      	b.n	8006632 <UART_SetConfig+0x5a6>
 80065fc:	2304      	movs	r3, #4
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e016      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006604:	2308      	movs	r3, #8
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e012      	b.n	8006632 <UART_SetConfig+0x5a6>
 800660c:	2310      	movs	r3, #16
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e00e      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006614:	2320      	movs	r3, #32
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e00a      	b.n	8006632 <UART_SetConfig+0x5a6>
 800661c:	2340      	movs	r3, #64	@ 0x40
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e006      	b.n	8006632 <UART_SetConfig+0x5a6>
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662a:	e002      	b.n	8006632 <UART_SetConfig+0x5a6>
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3f      	ldr	r2, [pc, #252]	@ (8006734 <UART_SetConfig+0x6a8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	f040 80f8 	bne.w	800682e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800663e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006642:	2b20      	cmp	r3, #32
 8006644:	dc46      	bgt.n	80066d4 <UART_SetConfig+0x648>
 8006646:	2b02      	cmp	r3, #2
 8006648:	f2c0 8082 	blt.w	8006750 <UART_SetConfig+0x6c4>
 800664c:	3b02      	subs	r3, #2
 800664e:	2b1e      	cmp	r3, #30
 8006650:	d87e      	bhi.n	8006750 <UART_SetConfig+0x6c4>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0x5cc>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	080066db 	.word	0x080066db
 800665c:	08006751 	.word	0x08006751
 8006660:	080066e3 	.word	0x080066e3
 8006664:	08006751 	.word	0x08006751
 8006668:	08006751 	.word	0x08006751
 800666c:	08006751 	.word	0x08006751
 8006670:	080066f3 	.word	0x080066f3
 8006674:	08006751 	.word	0x08006751
 8006678:	08006751 	.word	0x08006751
 800667c:	08006751 	.word	0x08006751
 8006680:	08006751 	.word	0x08006751
 8006684:	08006751 	.word	0x08006751
 8006688:	08006751 	.word	0x08006751
 800668c:	08006751 	.word	0x08006751
 8006690:	08006703 	.word	0x08006703
 8006694:	08006751 	.word	0x08006751
 8006698:	08006751 	.word	0x08006751
 800669c:	08006751 	.word	0x08006751
 80066a0:	08006751 	.word	0x08006751
 80066a4:	08006751 	.word	0x08006751
 80066a8:	08006751 	.word	0x08006751
 80066ac:	08006751 	.word	0x08006751
 80066b0:	08006751 	.word	0x08006751
 80066b4:	08006751 	.word	0x08006751
 80066b8:	08006751 	.word	0x08006751
 80066bc:	08006751 	.word	0x08006751
 80066c0:	08006751 	.word	0x08006751
 80066c4:	08006751 	.word	0x08006751
 80066c8:	08006751 	.word	0x08006751
 80066cc:	08006751 	.word	0x08006751
 80066d0:	08006743 	.word	0x08006743
 80066d4:	2b40      	cmp	r3, #64	@ 0x40
 80066d6:	d037      	beq.n	8006748 <UART_SetConfig+0x6bc>
 80066d8:	e03a      	b.n	8006750 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80066da:	f7fe fbe1 	bl	8004ea0 <HAL_RCCEx_GetD3PCLK1Freq>
 80066de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066e0:	e03c      	b.n	800675c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fbf0 	bl	8004ecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f0:	e034      	b.n	800675c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066f2:	f107 0318 	add.w	r3, r7, #24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fd3c 	bl	8005174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006700:	e02c      	b.n	800675c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006702:	4b09      	ldr	r3, [pc, #36]	@ (8006728 <UART_SetConfig+0x69c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800670e:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <UART_SetConfig+0x69c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a07      	ldr	r2, [pc, #28]	@ (8006738 <UART_SetConfig+0x6ac>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006720:	e01c      	b.n	800675c <UART_SetConfig+0x6d0>
 8006722:	bf00      	nop
 8006724:	40011400 	.word	0x40011400
 8006728:	58024400 	.word	0x58024400
 800672c:	40007800 	.word	0x40007800
 8006730:	40007c00 	.word	0x40007c00
 8006734:	58000c00 	.word	0x58000c00
 8006738:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800673c:	4b9d      	ldr	r3, [pc, #628]	@ (80069b4 <UART_SetConfig+0x928>)
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006740:	e00c      	b.n	800675c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006742:	4b9d      	ldr	r3, [pc, #628]	@ (80069b8 <UART_SetConfig+0x92c>)
 8006744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006746:	e009      	b.n	800675c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800674c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800674e:	e005      	b.n	800675c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800675a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800675c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 81de 	beq.w	8006b20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	4a94      	ldr	r2, [pc, #592]	@ (80069bc <UART_SetConfig+0x930>)
 800676a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800676e:	461a      	mov	r2, r3
 8006770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006772:	fbb3 f3f2 	udiv	r3, r3, r2
 8006776:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006784:	429a      	cmp	r2, r3
 8006786:	d305      	bcc.n	8006794 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800678e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006790:	429a      	cmp	r2, r3
 8006792:	d903      	bls.n	800679c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800679a:	e1c1      	b.n	8006b20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679e:	2200      	movs	r2, #0
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	60fa      	str	r2, [r7, #12]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	4a84      	ldr	r2, [pc, #528]	@ (80069bc <UART_SetConfig+0x930>)
 80067aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2200      	movs	r2, #0
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067be:	f7f9 fde7 	bl	8000390 <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4610      	mov	r0, r2
 80067c8:	4619      	mov	r1, r3
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	020b      	lsls	r3, r1, #8
 80067d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067d8:	0202      	lsls	r2, r0, #8
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	6849      	ldr	r1, [r1, #4]
 80067de:	0849      	lsrs	r1, r1, #1
 80067e0:	2000      	movs	r0, #0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4605      	mov	r5, r0
 80067e6:	eb12 0804 	adds.w	r8, r2, r4
 80067ea:	eb43 0905 	adc.w	r9, r3, r5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	469a      	mov	sl, r3
 80067f6:	4693      	mov	fp, r2
 80067f8:	4652      	mov	r2, sl
 80067fa:	465b      	mov	r3, fp
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	f7f9 fdc6 	bl	8000390 <__aeabi_uldivmod>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4613      	mov	r3, r2
 800680a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800680c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006812:	d308      	bcc.n	8006826 <UART_SetConfig+0x79a>
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800681a:	d204      	bcs.n	8006826 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	e17c      	b.n	8006b20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800682c:	e178      	b.n	8006b20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006836:	f040 80c5 	bne.w	80069c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800683a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800683e:	2b20      	cmp	r3, #32
 8006840:	dc48      	bgt.n	80068d4 <UART_SetConfig+0x848>
 8006842:	2b00      	cmp	r3, #0
 8006844:	db7b      	blt.n	800693e <UART_SetConfig+0x8b2>
 8006846:	2b20      	cmp	r3, #32
 8006848:	d879      	bhi.n	800693e <UART_SetConfig+0x8b2>
 800684a:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <UART_SetConfig+0x7c4>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	080068db 	.word	0x080068db
 8006854:	080068e3 	.word	0x080068e3
 8006858:	0800693f 	.word	0x0800693f
 800685c:	0800693f 	.word	0x0800693f
 8006860:	080068eb 	.word	0x080068eb
 8006864:	0800693f 	.word	0x0800693f
 8006868:	0800693f 	.word	0x0800693f
 800686c:	0800693f 	.word	0x0800693f
 8006870:	080068fb 	.word	0x080068fb
 8006874:	0800693f 	.word	0x0800693f
 8006878:	0800693f 	.word	0x0800693f
 800687c:	0800693f 	.word	0x0800693f
 8006880:	0800693f 	.word	0x0800693f
 8006884:	0800693f 	.word	0x0800693f
 8006888:	0800693f 	.word	0x0800693f
 800688c:	0800693f 	.word	0x0800693f
 8006890:	0800690b 	.word	0x0800690b
 8006894:	0800693f 	.word	0x0800693f
 8006898:	0800693f 	.word	0x0800693f
 800689c:	0800693f 	.word	0x0800693f
 80068a0:	0800693f 	.word	0x0800693f
 80068a4:	0800693f 	.word	0x0800693f
 80068a8:	0800693f 	.word	0x0800693f
 80068ac:	0800693f 	.word	0x0800693f
 80068b0:	0800693f 	.word	0x0800693f
 80068b4:	0800693f 	.word	0x0800693f
 80068b8:	0800693f 	.word	0x0800693f
 80068bc:	0800693f 	.word	0x0800693f
 80068c0:	0800693f 	.word	0x0800693f
 80068c4:	0800693f 	.word	0x0800693f
 80068c8:	0800693f 	.word	0x0800693f
 80068cc:	0800693f 	.word	0x0800693f
 80068d0:	08006931 	.word	0x08006931
 80068d4:	2b40      	cmp	r3, #64	@ 0x40
 80068d6:	d02e      	beq.n	8006936 <UART_SetConfig+0x8aa>
 80068d8:	e031      	b.n	800693e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068da:	f7fd f8ab 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 80068de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068e0:	e033      	b.n	800694a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e2:	f7fd f8bd 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 80068e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068e8:	e02f      	b.n	800694a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe faec 	bl	8004ecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f8:	e027      	b.n	800694a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fa:	f107 0318 	add.w	r3, r7, #24
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fc38 	bl	8005174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006908:	e01f      	b.n	800694a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800690a:	4b2d      	ldr	r3, [pc, #180]	@ (80069c0 <UART_SetConfig+0x934>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006916:	4b2a      	ldr	r3, [pc, #168]	@ (80069c0 <UART_SetConfig+0x934>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	08db      	lsrs	r3, r3, #3
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	4a24      	ldr	r2, [pc, #144]	@ (80069b4 <UART_SetConfig+0x928>)
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006928:	e00f      	b.n	800694a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800692a:	4b22      	ldr	r3, [pc, #136]	@ (80069b4 <UART_SetConfig+0x928>)
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692e:	e00c      	b.n	800694a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006930:	4b21      	ldr	r3, [pc, #132]	@ (80069b8 <UART_SetConfig+0x92c>)
 8006932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800693c:	e005      	b.n	800694a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800694a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80e7 	beq.w	8006b20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <UART_SetConfig+0x930>)
 8006958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695c:	461a      	mov	r2, r3
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	fbb3 f3f2 	udiv	r3, r3, r2
 8006964:	005a      	lsls	r2, r3, #1
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	441a      	add	r2, r3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	fbb2 f3f3 	udiv	r3, r2, r3
 8006976:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	2b0f      	cmp	r3, #15
 800697c:	d916      	bls.n	80069ac <UART_SetConfig+0x920>
 800697e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006984:	d212      	bcs.n	80069ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006988:	b29b      	uxth	r3, r3
 800698a:	f023 030f 	bic.w	r3, r3, #15
 800698e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	b29b      	uxth	r3, r3
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	b29a      	uxth	r2, r3
 800699c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800699e:	4313      	orrs	r3, r2
 80069a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e0b9      	b.n	8006b20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069b2:	e0b5      	b.n	8006b20 <UART_SetConfig+0xa94>
 80069b4:	03d09000 	.word	0x03d09000
 80069b8:	003d0900 	.word	0x003d0900
 80069bc:	08009c7c 	.word	0x08009c7c
 80069c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80069c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	dc49      	bgt.n	8006a60 <UART_SetConfig+0x9d4>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	db7c      	blt.n	8006aca <UART_SetConfig+0xa3e>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d87a      	bhi.n	8006aca <UART_SetConfig+0xa3e>
 80069d4:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <UART_SetConfig+0x950>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a67 	.word	0x08006a67
 80069e0:	08006a6f 	.word	0x08006a6f
 80069e4:	08006acb 	.word	0x08006acb
 80069e8:	08006acb 	.word	0x08006acb
 80069ec:	08006a77 	.word	0x08006a77
 80069f0:	08006acb 	.word	0x08006acb
 80069f4:	08006acb 	.word	0x08006acb
 80069f8:	08006acb 	.word	0x08006acb
 80069fc:	08006a87 	.word	0x08006a87
 8006a00:	08006acb 	.word	0x08006acb
 8006a04:	08006acb 	.word	0x08006acb
 8006a08:	08006acb 	.word	0x08006acb
 8006a0c:	08006acb 	.word	0x08006acb
 8006a10:	08006acb 	.word	0x08006acb
 8006a14:	08006acb 	.word	0x08006acb
 8006a18:	08006acb 	.word	0x08006acb
 8006a1c:	08006a97 	.word	0x08006a97
 8006a20:	08006acb 	.word	0x08006acb
 8006a24:	08006acb 	.word	0x08006acb
 8006a28:	08006acb 	.word	0x08006acb
 8006a2c:	08006acb 	.word	0x08006acb
 8006a30:	08006acb 	.word	0x08006acb
 8006a34:	08006acb 	.word	0x08006acb
 8006a38:	08006acb 	.word	0x08006acb
 8006a3c:	08006acb 	.word	0x08006acb
 8006a40:	08006acb 	.word	0x08006acb
 8006a44:	08006acb 	.word	0x08006acb
 8006a48:	08006acb 	.word	0x08006acb
 8006a4c:	08006acb 	.word	0x08006acb
 8006a50:	08006acb 	.word	0x08006acb
 8006a54:	08006acb 	.word	0x08006acb
 8006a58:	08006acb 	.word	0x08006acb
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	2b40      	cmp	r3, #64	@ 0x40
 8006a62:	d02e      	beq.n	8006ac2 <UART_SetConfig+0xa36>
 8006a64:	e031      	b.n	8006aca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a66:	f7fc ffe5 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a6c:	e033      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6e:	f7fc fff7 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8006a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a74:	e02f      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fa26 	bl	8004ecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a84:	e027      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a86:	f107 0318 	add.w	r3, r7, #24
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fb72 	bl	8005174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a94:	e01f      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a96:	4b2d      	ldr	r3, [pc, #180]	@ (8006b4c <UART_SetConfig+0xac0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b4c <UART_SetConfig+0xac0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	08db      	lsrs	r3, r3, #3
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	4a28      	ldr	r2, [pc, #160]	@ (8006b50 <UART_SetConfig+0xac4>)
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ab4:	e00f      	b.n	8006ad6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006ab6:	4b26      	ldr	r3, [pc, #152]	@ (8006b50 <UART_SetConfig+0xac4>)
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aba:	e00c      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <UART_SetConfig+0xac8>)
 8006abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac0:	e009      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac8:	e005      	b.n	8006ad6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ad4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d021      	beq.n	8006b20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b58 <UART_SetConfig+0xacc>)
 8006ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aea:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	441a      	add	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d909      	bls.n	8006b1a <UART_SetConfig+0xa8e>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b0c:	d205      	bcs.n	8006b1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e002      	b.n	8006b20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b3c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3748      	adds	r7, #72	@ 0x48
 8006b44:	46bd      	mov	sp, r7
 8006b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	03d09000 	.word	0x03d09000
 8006b54:	003d0900 	.word	0x003d0900
 8006b58:	08009c7c 	.word	0x08009c7c

08006b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01a      	beq.n	8006c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c5a:	d10a      	bne.n	8006c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]
  }
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b098      	sub	sp, #96	@ 0x60
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb0:	f7fa fda8 	bl	8001804 <HAL_GetTick>
 8006cb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d12f      	bne.n	8006d24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f88e 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d022      	beq.n	8006d24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e6      	bne.n	8006cde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e063      	b.n	8006dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d149      	bne.n	8006dc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f857 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d03c      	beq.n	8006dc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e6      	bne.n	8006d4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d9e:	61fa      	str	r2, [r7, #28]
 8006da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	69b9      	ldr	r1, [r7, #24]
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	617b      	str	r3, [r7, #20]
   return(result);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e012      	b.n	8006dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3758      	adds	r7, #88	@ 0x58
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e04:	e04f      	b.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d04b      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0e:	f7fa fcf9 	bl	8001804 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d302      	bcc.n	8006e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e04e      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d037      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b80      	cmp	r3, #128	@ 0x80
 8006e3a:	d034      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b40      	cmp	r3, #64	@ 0x40
 8006e40:	d031      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d110      	bne.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2208      	movs	r2, #8
 8006e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f839 	bl	8006ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2208      	movs	r2, #8
 8006e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e029      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e80:	d111      	bne.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f81f 	bl	8006ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e00f      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d0a0      	beq.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b095      	sub	sp, #84	@ 0x54
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ef8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006efc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f98 <UART_EndRxTransfer+0xc8>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d118      	bne.n	8006f78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6979      	ldr	r1, [r7, #20]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	613b      	str	r3, [r7, #16]
   return(result);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f8c:	bf00      	nop
 8006f8e:	3754      	adds	r7, #84	@ 0x54
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	effffffe 	.word	0xeffffffe

08006f9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff f854 	bl	8006060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fdc:	61fb      	str	r3, [r7, #28]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6979      	ldr	r1, [r7, #20]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e6      	bne.n	8006fc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f81f 	bl	800604c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800700e:	bf00      	nop
 8007010:	3720      	adds	r7, #32
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_UARTEx_DisableFifoMode+0x16>
 8007064:	2302      	movs	r3, #2
 8007066:	e027      	b.n	80070b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	@ 0x24
 8007074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e02d      	b.n	8007138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	@ 0x24
 80070e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f84f 	bl	80071bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007154:	2302      	movs	r3, #2
 8007156:	e02d      	b.n	80071b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2224      	movs	r2, #36	@ 0x24
 8007164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f811 	bl	80071bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d108      	bne.n	80071de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071dc:	e031      	b.n	8007242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071de:	2310      	movs	r3, #16
 80071e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071e2:	2310      	movs	r3, #16
 80071e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	0e5b      	lsrs	r3, r3, #25
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	0f5b      	lsrs	r3, r3, #29
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	7b3a      	ldrb	r2, [r7, #12]
 800720a:	4911      	ldr	r1, [pc, #68]	@ (8007250 <UARTEx_SetNbDataToProcess+0x94>)
 800720c:	5c8a      	ldrb	r2, [r1, r2]
 800720e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007212:	7b3a      	ldrb	r2, [r7, #12]
 8007214:	490f      	ldr	r1, [pc, #60]	@ (8007254 <UARTEx_SetNbDataToProcess+0x98>)
 8007216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007218:	fb93 f3f2 	sdiv	r3, r3, r2
 800721c:	b29a      	uxth	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	7b7a      	ldrb	r2, [r7, #13]
 8007228:	4909      	ldr	r1, [pc, #36]	@ (8007250 <UARTEx_SetNbDataToProcess+0x94>)
 800722a:	5c8a      	ldrb	r2, [r1, r2]
 800722c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007230:	7b7a      	ldrb	r2, [r7, #13]
 8007232:	4908      	ldr	r1, [pc, #32]	@ (8007254 <UARTEx_SetNbDataToProcess+0x98>)
 8007234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007236:	fb93 f3f2 	sdiv	r3, r3, r2
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	08009c94 	.word	0x08009c94
 8007254:	08009c9c 	.word	0x08009c9c

08007258 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800726a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726e:	d10e      	bne.n	800728e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d107      	bne.n	800728e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f06f 0201 	mvn.w	r2, #1
 8007286:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f804 	bl	8007296 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <__cvt>:
 80072aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ac:	ed2d 8b02 	vpush	{d8}
 80072b0:	eeb0 8b40 	vmov.f64	d8, d0
 80072b4:	b085      	sub	sp, #20
 80072b6:	4617      	mov	r7, r2
 80072b8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80072ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072bc:	ee18 2a90 	vmov	r2, s17
 80072c0:	f025 0520 	bic.w	r5, r5, #32
 80072c4:	2a00      	cmp	r2, #0
 80072c6:	bfb6      	itet	lt
 80072c8:	222d      	movlt	r2, #45	@ 0x2d
 80072ca:	2200      	movge	r2, #0
 80072cc:	eeb1 8b40 	vneglt.f64	d8, d0
 80072d0:	2d46      	cmp	r5, #70	@ 0x46
 80072d2:	460c      	mov	r4, r1
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	d004      	beq.n	80072e2 <__cvt+0x38>
 80072d8:	2d45      	cmp	r5, #69	@ 0x45
 80072da:	d100      	bne.n	80072de <__cvt+0x34>
 80072dc:	3401      	adds	r4, #1
 80072de:	2102      	movs	r1, #2
 80072e0:	e000      	b.n	80072e4 <__cvt+0x3a>
 80072e2:	2103      	movs	r1, #3
 80072e4:	ab03      	add	r3, sp, #12
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	ab02      	add	r3, sp, #8
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4622      	mov	r2, r4
 80072ee:	4633      	mov	r3, r6
 80072f0:	eeb0 0b48 	vmov.f64	d0, d8
 80072f4:	f000 fff0 	bl	80082d8 <_dtoa_r>
 80072f8:	2d47      	cmp	r5, #71	@ 0x47
 80072fa:	d114      	bne.n	8007326 <__cvt+0x7c>
 80072fc:	07fb      	lsls	r3, r7, #31
 80072fe:	d50a      	bpl.n	8007316 <__cvt+0x6c>
 8007300:	1902      	adds	r2, r0, r4
 8007302:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730a:	bf08      	it	eq
 800730c:	9203      	streq	r2, [sp, #12]
 800730e:	2130      	movs	r1, #48	@ 0x30
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	4293      	cmp	r3, r2
 8007314:	d319      	bcc.n	800734a <__cvt+0xa0>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800731a:	1a1b      	subs	r3, r3, r0
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	b005      	add	sp, #20
 8007320:	ecbd 8b02 	vpop	{d8}
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007326:	2d46      	cmp	r5, #70	@ 0x46
 8007328:	eb00 0204 	add.w	r2, r0, r4
 800732c:	d1e9      	bne.n	8007302 <__cvt+0x58>
 800732e:	7803      	ldrb	r3, [r0, #0]
 8007330:	2b30      	cmp	r3, #48	@ 0x30
 8007332:	d107      	bne.n	8007344 <__cvt+0x9a>
 8007334:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	bf1c      	itt	ne
 800733e:	f1c4 0401 	rsbne	r4, r4, #1
 8007342:	6034      	strne	r4, [r6, #0]
 8007344:	6833      	ldr	r3, [r6, #0]
 8007346:	441a      	add	r2, r3
 8007348:	e7db      	b.n	8007302 <__cvt+0x58>
 800734a:	1c5c      	adds	r4, r3, #1
 800734c:	9403      	str	r4, [sp, #12]
 800734e:	7019      	strb	r1, [r3, #0]
 8007350:	e7de      	b.n	8007310 <__cvt+0x66>

08007352 <__exponent>:
 8007352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007354:	2900      	cmp	r1, #0
 8007356:	bfba      	itte	lt
 8007358:	4249      	neglt	r1, r1
 800735a:	232d      	movlt	r3, #45	@ 0x2d
 800735c:	232b      	movge	r3, #43	@ 0x2b
 800735e:	2909      	cmp	r1, #9
 8007360:	7002      	strb	r2, [r0, #0]
 8007362:	7043      	strb	r3, [r0, #1]
 8007364:	dd29      	ble.n	80073ba <__exponent+0x68>
 8007366:	f10d 0307 	add.w	r3, sp, #7
 800736a:	461d      	mov	r5, r3
 800736c:	270a      	movs	r7, #10
 800736e:	461a      	mov	r2, r3
 8007370:	fbb1 f6f7 	udiv	r6, r1, r7
 8007374:	fb07 1416 	mls	r4, r7, r6, r1
 8007378:	3430      	adds	r4, #48	@ 0x30
 800737a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800737e:	460c      	mov	r4, r1
 8007380:	2c63      	cmp	r4, #99	@ 0x63
 8007382:	f103 33ff 	add.w	r3, r3, #4294967295
 8007386:	4631      	mov	r1, r6
 8007388:	dcf1      	bgt.n	800736e <__exponent+0x1c>
 800738a:	3130      	adds	r1, #48	@ 0x30
 800738c:	1e94      	subs	r4, r2, #2
 800738e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007392:	1c41      	adds	r1, r0, #1
 8007394:	4623      	mov	r3, r4
 8007396:	42ab      	cmp	r3, r5
 8007398:	d30a      	bcc.n	80073b0 <__exponent+0x5e>
 800739a:	f10d 0309 	add.w	r3, sp, #9
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	42ac      	cmp	r4, r5
 80073a2:	bf88      	it	hi
 80073a4:	2300      	movhi	r3, #0
 80073a6:	3302      	adds	r3, #2
 80073a8:	4403      	add	r3, r0
 80073aa:	1a18      	subs	r0, r3, r0
 80073ac:	b003      	add	sp, #12
 80073ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073b8:	e7ed      	b.n	8007396 <__exponent+0x44>
 80073ba:	2330      	movs	r3, #48	@ 0x30
 80073bc:	3130      	adds	r1, #48	@ 0x30
 80073be:	7083      	strb	r3, [r0, #2]
 80073c0:	70c1      	strb	r1, [r0, #3]
 80073c2:	1d03      	adds	r3, r0, #4
 80073c4:	e7f1      	b.n	80073aa <__exponent+0x58>
	...

080073c8 <_printf_float>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b08d      	sub	sp, #52	@ 0x34
 80073ce:	460c      	mov	r4, r1
 80073d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073d4:	4616      	mov	r6, r2
 80073d6:	461f      	mov	r7, r3
 80073d8:	4605      	mov	r5, r0
 80073da:	f000 fe7d 	bl	80080d8 <_localeconv_r>
 80073de:	f8d0 b000 	ldr.w	fp, [r0]
 80073e2:	4658      	mov	r0, fp
 80073e4:	f7f8 ffcc 	bl	8000380 <strlen>
 80073e8:	2300      	movs	r3, #0
 80073ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ec:	f8d8 3000 	ldr.w	r3, [r8]
 80073f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	9005      	str	r0, [sp, #20]
 80073f8:	3307      	adds	r3, #7
 80073fa:	f023 0307 	bic.w	r3, r3, #7
 80073fe:	f103 0108 	add.w	r1, r3, #8
 8007402:	f8c8 1000 	str.w	r1, [r8]
 8007406:	ed93 0b00 	vldr	d0, [r3]
 800740a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007668 <_printf_float+0x2a0>
 800740e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007412:	eeb4 7b46 	vcmp.f64	d7, d6
 8007416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800741e:	dd24      	ble.n	800746a <_printf_float+0xa2>
 8007420:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007428:	d502      	bpl.n	8007430 <_printf_float+0x68>
 800742a:	232d      	movs	r3, #45	@ 0x2d
 800742c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007430:	498f      	ldr	r1, [pc, #572]	@ (8007670 <_printf_float+0x2a8>)
 8007432:	4b90      	ldr	r3, [pc, #576]	@ (8007674 <_printf_float+0x2ac>)
 8007434:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007438:	bf8c      	ite	hi
 800743a:	4688      	movhi	r8, r1
 800743c:	4698      	movls	r8, r3
 800743e:	f022 0204 	bic.w	r2, r2, #4
 8007442:	2303      	movs	r3, #3
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	f04f 0a00 	mov.w	sl, #0
 800744c:	9700      	str	r7, [sp, #0]
 800744e:	4633      	mov	r3, r6
 8007450:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007452:	4621      	mov	r1, r4
 8007454:	4628      	mov	r0, r5
 8007456:	f000 f9d1 	bl	80077fc <_printf_common>
 800745a:	3001      	adds	r0, #1
 800745c:	f040 8089 	bne.w	8007572 <_printf_float+0x1aa>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b00d      	add	sp, #52	@ 0x34
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	eeb4 0b40 	vcmp.f64	d0, d0
 800746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007472:	d709      	bvc.n	8007488 <_printf_float+0xc0>
 8007474:	ee10 3a90 	vmov	r3, s1
 8007478:	2b00      	cmp	r3, #0
 800747a:	bfbc      	itt	lt
 800747c:	232d      	movlt	r3, #45	@ 0x2d
 800747e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007482:	497d      	ldr	r1, [pc, #500]	@ (8007678 <_printf_float+0x2b0>)
 8007484:	4b7d      	ldr	r3, [pc, #500]	@ (800767c <_printf_float+0x2b4>)
 8007486:	e7d5      	b.n	8007434 <_printf_float+0x6c>
 8007488:	6863      	ldr	r3, [r4, #4]
 800748a:	1c59      	adds	r1, r3, #1
 800748c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007490:	d139      	bne.n	8007506 <_printf_float+0x13e>
 8007492:	2306      	movs	r3, #6
 8007494:	6063      	str	r3, [r4, #4]
 8007496:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800749a:	2300      	movs	r3, #0
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80074a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80074a6:	ab09      	add	r3, sp, #36	@ 0x24
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	6861      	ldr	r1, [r4, #4]
 80074ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074b0:	4628      	mov	r0, r5
 80074b2:	f7ff fefa 	bl	80072aa <__cvt>
 80074b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074bc:	4680      	mov	r8, r0
 80074be:	d129      	bne.n	8007514 <_printf_float+0x14c>
 80074c0:	1cc8      	adds	r0, r1, #3
 80074c2:	db02      	blt.n	80074ca <_printf_float+0x102>
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	4299      	cmp	r1, r3
 80074c8:	dd41      	ble.n	800754e <_printf_float+0x186>
 80074ca:	f1a9 0902 	sub.w	r9, r9, #2
 80074ce:	fa5f f989 	uxtb.w	r9, r9
 80074d2:	3901      	subs	r1, #1
 80074d4:	464a      	mov	r2, r9
 80074d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074da:	9109      	str	r1, [sp, #36]	@ 0x24
 80074dc:	f7ff ff39 	bl	8007352 <__exponent>
 80074e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074e2:	1813      	adds	r3, r2, r0
 80074e4:	2a01      	cmp	r2, #1
 80074e6:	4682      	mov	sl, r0
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	dc02      	bgt.n	80074f2 <_printf_float+0x12a>
 80074ec:	6822      	ldr	r2, [r4, #0]
 80074ee:	07d2      	lsls	r2, r2, #31
 80074f0:	d501      	bpl.n	80074f6 <_printf_float+0x12e>
 80074f2:	3301      	adds	r3, #1
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0a6      	beq.n	800744c <_printf_float+0x84>
 80074fe:	232d      	movs	r3, #45	@ 0x2d
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007504:	e7a2      	b.n	800744c <_printf_float+0x84>
 8007506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800750a:	d1c4      	bne.n	8007496 <_printf_float+0xce>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1c2      	bne.n	8007496 <_printf_float+0xce>
 8007510:	2301      	movs	r3, #1
 8007512:	e7bf      	b.n	8007494 <_printf_float+0xcc>
 8007514:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007518:	d9db      	bls.n	80074d2 <_printf_float+0x10a>
 800751a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800751e:	d118      	bne.n	8007552 <_printf_float+0x18a>
 8007520:	2900      	cmp	r1, #0
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	dd0b      	ble.n	800753e <_printf_float+0x176>
 8007526:	6121      	str	r1, [r4, #16]
 8007528:	b913      	cbnz	r3, 8007530 <_printf_float+0x168>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	07d0      	lsls	r0, r2, #31
 800752e:	d502      	bpl.n	8007536 <_printf_float+0x16e>
 8007530:	3301      	adds	r3, #1
 8007532:	440b      	add	r3, r1
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007538:	f04f 0a00 	mov.w	sl, #0
 800753c:	e7db      	b.n	80074f6 <_printf_float+0x12e>
 800753e:	b913      	cbnz	r3, 8007546 <_printf_float+0x17e>
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	07d2      	lsls	r2, r2, #31
 8007544:	d501      	bpl.n	800754a <_printf_float+0x182>
 8007546:	3302      	adds	r3, #2
 8007548:	e7f4      	b.n	8007534 <_printf_float+0x16c>
 800754a:	2301      	movs	r3, #1
 800754c:	e7f2      	b.n	8007534 <_printf_float+0x16c>
 800754e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007554:	4299      	cmp	r1, r3
 8007556:	db05      	blt.n	8007564 <_printf_float+0x19c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	6121      	str	r1, [r4, #16]
 800755c:	07d8      	lsls	r0, r3, #31
 800755e:	d5ea      	bpl.n	8007536 <_printf_float+0x16e>
 8007560:	1c4b      	adds	r3, r1, #1
 8007562:	e7e7      	b.n	8007534 <_printf_float+0x16c>
 8007564:	2900      	cmp	r1, #0
 8007566:	bfd4      	ite	le
 8007568:	f1c1 0202 	rsble	r2, r1, #2
 800756c:	2201      	movgt	r2, #1
 800756e:	4413      	add	r3, r2
 8007570:	e7e0      	b.n	8007534 <_printf_float+0x16c>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	055a      	lsls	r2, r3, #21
 8007576:	d407      	bmi.n	8007588 <_printf_float+0x1c0>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	4642      	mov	r2, r8
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d12a      	bne.n	80075dc <_printf_float+0x214>
 8007586:	e76b      	b.n	8007460 <_printf_float+0x98>
 8007588:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800758c:	f240 80e0 	bls.w	8007750 <_printf_float+0x388>
 8007590:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	d133      	bne.n	8007606 <_printf_float+0x23e>
 800759e:	4a38      	ldr	r2, [pc, #224]	@ (8007680 <_printf_float+0x2b8>)
 80075a0:	2301      	movs	r3, #1
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	f43f af59 	beq.w	8007460 <_printf_float+0x98>
 80075ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075b2:	4543      	cmp	r3, r8
 80075b4:	db02      	blt.n	80075bc <_printf_float+0x1f4>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	07d8      	lsls	r0, r3, #31
 80075ba:	d50f      	bpl.n	80075dc <_printf_float+0x214>
 80075bc:	9b05      	ldr	r3, [sp, #20]
 80075be:	465a      	mov	r2, fp
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f af4a 	beq.w	8007460 <_printf_float+0x98>
 80075cc:	f04f 0900 	mov.w	r9, #0
 80075d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80075d4:	f104 0a1a 	add.w	sl, r4, #26
 80075d8:	45c8      	cmp	r8, r9
 80075da:	dc09      	bgt.n	80075f0 <_printf_float+0x228>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	079b      	lsls	r3, r3, #30
 80075e0:	f100 8107 	bmi.w	80077f2 <_printf_float+0x42a>
 80075e4:	68e0      	ldr	r0, [r4, #12]
 80075e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075e8:	4298      	cmp	r0, r3
 80075ea:	bfb8      	it	lt
 80075ec:	4618      	movlt	r0, r3
 80075ee:	e739      	b.n	8007464 <_printf_float+0x9c>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4652      	mov	r2, sl
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f af30 	beq.w	8007460 <_printf_float+0x98>
 8007600:	f109 0901 	add.w	r9, r9, #1
 8007604:	e7e8      	b.n	80075d8 <_printf_float+0x210>
 8007606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	dc3b      	bgt.n	8007684 <_printf_float+0x2bc>
 800760c:	4a1c      	ldr	r2, [pc, #112]	@ (8007680 <_printf_float+0x2b8>)
 800760e:	2301      	movs	r3, #1
 8007610:	4631      	mov	r1, r6
 8007612:	4628      	mov	r0, r5
 8007614:	47b8      	blx	r7
 8007616:	3001      	adds	r0, #1
 8007618:	f43f af22 	beq.w	8007460 <_printf_float+0x98>
 800761c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007620:	ea59 0303 	orrs.w	r3, r9, r3
 8007624:	d102      	bne.n	800762c <_printf_float+0x264>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	07d9      	lsls	r1, r3, #31
 800762a:	d5d7      	bpl.n	80075dc <_printf_float+0x214>
 800762c:	9b05      	ldr	r3, [sp, #20]
 800762e:	465a      	mov	r2, fp
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f af12 	beq.w	8007460 <_printf_float+0x98>
 800763c:	f04f 0a00 	mov.w	sl, #0
 8007640:	f104 0b1a 	add.w	fp, r4, #26
 8007644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007646:	425b      	negs	r3, r3
 8007648:	4553      	cmp	r3, sl
 800764a:	dc01      	bgt.n	8007650 <_printf_float+0x288>
 800764c:	464b      	mov	r3, r9
 800764e:	e794      	b.n	800757a <_printf_float+0x1b2>
 8007650:	2301      	movs	r3, #1
 8007652:	465a      	mov	r2, fp
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f af00 	beq.w	8007460 <_printf_float+0x98>
 8007660:	f10a 0a01 	add.w	sl, sl, #1
 8007664:	e7ee      	b.n	8007644 <_printf_float+0x27c>
 8007666:	bf00      	nop
 8007668:	ffffffff 	.word	0xffffffff
 800766c:	7fefffff 	.word	0x7fefffff
 8007670:	08009ca8 	.word	0x08009ca8
 8007674:	08009ca4 	.word	0x08009ca4
 8007678:	08009cb0 	.word	0x08009cb0
 800767c:	08009cac 	.word	0x08009cac
 8007680:	08009cb4 	.word	0x08009cb4
 8007684:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007686:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800768a:	4553      	cmp	r3, sl
 800768c:	bfa8      	it	ge
 800768e:	4653      	movge	r3, sl
 8007690:	2b00      	cmp	r3, #0
 8007692:	4699      	mov	r9, r3
 8007694:	dc37      	bgt.n	8007706 <_printf_float+0x33e>
 8007696:	2300      	movs	r3, #0
 8007698:	9307      	str	r3, [sp, #28]
 800769a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800769e:	f104 021a 	add.w	r2, r4, #26
 80076a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076a4:	9907      	ldr	r1, [sp, #28]
 80076a6:	9306      	str	r3, [sp, #24]
 80076a8:	eba3 0309 	sub.w	r3, r3, r9
 80076ac:	428b      	cmp	r3, r1
 80076ae:	dc31      	bgt.n	8007714 <_printf_float+0x34c>
 80076b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b2:	459a      	cmp	sl, r3
 80076b4:	dc3b      	bgt.n	800772e <_printf_float+0x366>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	07da      	lsls	r2, r3, #31
 80076ba:	d438      	bmi.n	800772e <_printf_float+0x366>
 80076bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076be:	ebaa 0903 	sub.w	r9, sl, r3
 80076c2:	9b06      	ldr	r3, [sp, #24]
 80076c4:	ebaa 0303 	sub.w	r3, sl, r3
 80076c8:	4599      	cmp	r9, r3
 80076ca:	bfa8      	it	ge
 80076cc:	4699      	movge	r9, r3
 80076ce:	f1b9 0f00 	cmp.w	r9, #0
 80076d2:	dc34      	bgt.n	800773e <_printf_float+0x376>
 80076d4:	f04f 0800 	mov.w	r8, #0
 80076d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076dc:	f104 0b1a 	add.w	fp, r4, #26
 80076e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e2:	ebaa 0303 	sub.w	r3, sl, r3
 80076e6:	eba3 0309 	sub.w	r3, r3, r9
 80076ea:	4543      	cmp	r3, r8
 80076ec:	f77f af76 	ble.w	80075dc <_printf_float+0x214>
 80076f0:	2301      	movs	r3, #1
 80076f2:	465a      	mov	r2, fp
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f aeb0 	beq.w	8007460 <_printf_float+0x98>
 8007700:	f108 0801 	add.w	r8, r8, #1
 8007704:	e7ec      	b.n	80076e0 <_printf_float+0x318>
 8007706:	4642      	mov	r2, r8
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	d1c1      	bne.n	8007696 <_printf_float+0x2ce>
 8007712:	e6a5      	b.n	8007460 <_printf_float+0x98>
 8007714:	2301      	movs	r3, #1
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	9206      	str	r2, [sp, #24]
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f ae9e 	beq.w	8007460 <_printf_float+0x98>
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	9a06      	ldr	r2, [sp, #24]
 8007728:	3301      	adds	r3, #1
 800772a:	9307      	str	r3, [sp, #28]
 800772c:	e7b9      	b.n	80076a2 <_printf_float+0x2da>
 800772e:	9b05      	ldr	r3, [sp, #20]
 8007730:	465a      	mov	r2, fp
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	d1bf      	bne.n	80076bc <_printf_float+0x2f4>
 800773c:	e690      	b.n	8007460 <_printf_float+0x98>
 800773e:	9a06      	ldr	r2, [sp, #24]
 8007740:	464b      	mov	r3, r9
 8007742:	4442      	add	r2, r8
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	d1c2      	bne.n	80076d4 <_printf_float+0x30c>
 800774e:	e687      	b.n	8007460 <_printf_float+0x98>
 8007750:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007754:	f1b9 0f01 	cmp.w	r9, #1
 8007758:	dc01      	bgt.n	800775e <_printf_float+0x396>
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d536      	bpl.n	80077cc <_printf_float+0x404>
 800775e:	2301      	movs	r3, #1
 8007760:	4642      	mov	r2, r8
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae79 	beq.w	8007460 <_printf_float+0x98>
 800776e:	9b05      	ldr	r3, [sp, #20]
 8007770:	465a      	mov	r2, fp
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f ae71 	beq.w	8007460 <_printf_float+0x98>
 800777e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007782:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778a:	f109 39ff 	add.w	r9, r9, #4294967295
 800778e:	d018      	beq.n	80077c2 <_printf_float+0x3fa>
 8007790:	464b      	mov	r3, r9
 8007792:	f108 0201 	add.w	r2, r8, #1
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d10c      	bne.n	80077ba <_printf_float+0x3f2>
 80077a0:	e65e      	b.n	8007460 <_printf_float+0x98>
 80077a2:	2301      	movs	r3, #1
 80077a4:	465a      	mov	r2, fp
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f ae57 	beq.w	8007460 <_printf_float+0x98>
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	45c8      	cmp	r8, r9
 80077b8:	dbf3      	blt.n	80077a2 <_printf_float+0x3da>
 80077ba:	4653      	mov	r3, sl
 80077bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077c0:	e6dc      	b.n	800757c <_printf_float+0x1b4>
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	f104 0b1a 	add.w	fp, r4, #26
 80077ca:	e7f4      	b.n	80077b6 <_printf_float+0x3ee>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4642      	mov	r2, r8
 80077d0:	e7e1      	b.n	8007796 <_printf_float+0x3ce>
 80077d2:	2301      	movs	r3, #1
 80077d4:	464a      	mov	r2, r9
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae3f 	beq.w	8007460 <_printf_float+0x98>
 80077e2:	f108 0801 	add.w	r8, r8, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	4543      	cmp	r3, r8
 80077ee:	dcf0      	bgt.n	80077d2 <_printf_float+0x40a>
 80077f0:	e6f8      	b.n	80075e4 <_printf_float+0x21c>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	f104 0919 	add.w	r9, r4, #25
 80077fa:	e7f4      	b.n	80077e6 <_printf_float+0x41e>

080077fc <_printf_common>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4616      	mov	r6, r2
 8007802:	4698      	mov	r8, r3
 8007804:	688a      	ldr	r2, [r1, #8]
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800780c:	4293      	cmp	r3, r2
 800780e:	bfb8      	it	lt
 8007810:	4613      	movlt	r3, r2
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007818:	4607      	mov	r7, r0
 800781a:	460c      	mov	r4, r1
 800781c:	b10a      	cbz	r2, 8007822 <_printf_common+0x26>
 800781e:	3301      	adds	r3, #1
 8007820:	6033      	str	r3, [r6, #0]
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	0699      	lsls	r1, r3, #26
 8007826:	bf42      	ittt	mi
 8007828:	6833      	ldrmi	r3, [r6, #0]
 800782a:	3302      	addmi	r3, #2
 800782c:	6033      	strmi	r3, [r6, #0]
 800782e:	6825      	ldr	r5, [r4, #0]
 8007830:	f015 0506 	ands.w	r5, r5, #6
 8007834:	d106      	bne.n	8007844 <_printf_common+0x48>
 8007836:	f104 0a19 	add.w	sl, r4, #25
 800783a:	68e3      	ldr	r3, [r4, #12]
 800783c:	6832      	ldr	r2, [r6, #0]
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc26      	bgt.n	8007892 <_printf_common+0x96>
 8007844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007848:	6822      	ldr	r2, [r4, #0]
 800784a:	3b00      	subs	r3, #0
 800784c:	bf18      	it	ne
 800784e:	2301      	movne	r3, #1
 8007850:	0692      	lsls	r2, r2, #26
 8007852:	d42b      	bmi.n	80078ac <_printf_common+0xb0>
 8007854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007858:	4641      	mov	r1, r8
 800785a:	4638      	mov	r0, r7
 800785c:	47c8      	blx	r9
 800785e:	3001      	adds	r0, #1
 8007860:	d01e      	beq.n	80078a0 <_printf_common+0xa4>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	6922      	ldr	r2, [r4, #16]
 8007866:	f003 0306 	and.w	r3, r3, #6
 800786a:	2b04      	cmp	r3, #4
 800786c:	bf02      	ittt	eq
 800786e:	68e5      	ldreq	r5, [r4, #12]
 8007870:	6833      	ldreq	r3, [r6, #0]
 8007872:	1aed      	subeq	r5, r5, r3
 8007874:	68a3      	ldr	r3, [r4, #8]
 8007876:	bf0c      	ite	eq
 8007878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800787c:	2500      	movne	r5, #0
 800787e:	4293      	cmp	r3, r2
 8007880:	bfc4      	itt	gt
 8007882:	1a9b      	subgt	r3, r3, r2
 8007884:	18ed      	addgt	r5, r5, r3
 8007886:	2600      	movs	r6, #0
 8007888:	341a      	adds	r4, #26
 800788a:	42b5      	cmp	r5, r6
 800788c:	d11a      	bne.n	80078c4 <_printf_common+0xc8>
 800788e:	2000      	movs	r0, #0
 8007890:	e008      	b.n	80078a4 <_printf_common+0xa8>
 8007892:	2301      	movs	r3, #1
 8007894:	4652      	mov	r2, sl
 8007896:	4641      	mov	r1, r8
 8007898:	4638      	mov	r0, r7
 800789a:	47c8      	blx	r9
 800789c:	3001      	adds	r0, #1
 800789e:	d103      	bne.n	80078a8 <_printf_common+0xac>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	3501      	adds	r5, #1
 80078aa:	e7c6      	b.n	800783a <_printf_common+0x3e>
 80078ac:	18e1      	adds	r1, r4, r3
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	2030      	movs	r0, #48	@ 0x30
 80078b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078b6:	4422      	add	r2, r4
 80078b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078c0:	3302      	adds	r3, #2
 80078c2:	e7c7      	b.n	8007854 <_printf_common+0x58>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4622      	mov	r2, r4
 80078c8:	4641      	mov	r1, r8
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c8      	blx	r9
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0e6      	beq.n	80078a0 <_printf_common+0xa4>
 80078d2:	3601      	adds	r6, #1
 80078d4:	e7d9      	b.n	800788a <_printf_common+0x8e>
	...

080078d8 <_printf_i>:
 80078d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	7e0f      	ldrb	r7, [r1, #24]
 80078de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078e0:	2f78      	cmp	r7, #120	@ 0x78
 80078e2:	4691      	mov	r9, r2
 80078e4:	4680      	mov	r8, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	469a      	mov	sl, r3
 80078ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ee:	d807      	bhi.n	8007900 <_printf_i+0x28>
 80078f0:	2f62      	cmp	r7, #98	@ 0x62
 80078f2:	d80a      	bhi.n	800790a <_printf_i+0x32>
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	f000 80d1 	beq.w	8007a9c <_printf_i+0x1c4>
 80078fa:	2f58      	cmp	r7, #88	@ 0x58
 80078fc:	f000 80b8 	beq.w	8007a70 <_printf_i+0x198>
 8007900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007908:	e03a      	b.n	8007980 <_printf_i+0xa8>
 800790a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800790e:	2b15      	cmp	r3, #21
 8007910:	d8f6      	bhi.n	8007900 <_printf_i+0x28>
 8007912:	a101      	add	r1, pc, #4	@ (adr r1, 8007918 <_printf_i+0x40>)
 8007914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007918:	08007971 	.word	0x08007971
 800791c:	08007985 	.word	0x08007985
 8007920:	08007901 	.word	0x08007901
 8007924:	08007901 	.word	0x08007901
 8007928:	08007901 	.word	0x08007901
 800792c:	08007901 	.word	0x08007901
 8007930:	08007985 	.word	0x08007985
 8007934:	08007901 	.word	0x08007901
 8007938:	08007901 	.word	0x08007901
 800793c:	08007901 	.word	0x08007901
 8007940:	08007901 	.word	0x08007901
 8007944:	08007a83 	.word	0x08007a83
 8007948:	080079af 	.word	0x080079af
 800794c:	08007a3d 	.word	0x08007a3d
 8007950:	08007901 	.word	0x08007901
 8007954:	08007901 	.word	0x08007901
 8007958:	08007aa5 	.word	0x08007aa5
 800795c:	08007901 	.word	0x08007901
 8007960:	080079af 	.word	0x080079af
 8007964:	08007901 	.word	0x08007901
 8007968:	08007901 	.word	0x08007901
 800796c:	08007a45 	.word	0x08007a45
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	1d1a      	adds	r2, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6032      	str	r2, [r6, #0]
 8007978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800797c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007980:	2301      	movs	r3, #1
 8007982:	e09c      	b.n	8007abe <_printf_i+0x1e6>
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	1d19      	adds	r1, r3, #4
 800798a:	6031      	str	r1, [r6, #0]
 800798c:	0606      	lsls	r6, r0, #24
 800798e:	d501      	bpl.n	8007994 <_printf_i+0xbc>
 8007990:	681d      	ldr	r5, [r3, #0]
 8007992:	e003      	b.n	800799c <_printf_i+0xc4>
 8007994:	0645      	lsls	r5, r0, #25
 8007996:	d5fb      	bpl.n	8007990 <_printf_i+0xb8>
 8007998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800799c:	2d00      	cmp	r5, #0
 800799e:	da03      	bge.n	80079a8 <_printf_i+0xd0>
 80079a0:	232d      	movs	r3, #45	@ 0x2d
 80079a2:	426d      	negs	r5, r5
 80079a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a8:	4858      	ldr	r0, [pc, #352]	@ (8007b0c <_printf_i+0x234>)
 80079aa:	230a      	movs	r3, #10
 80079ac:	e011      	b.n	80079d2 <_printf_i+0xfa>
 80079ae:	6821      	ldr	r1, [r4, #0]
 80079b0:	6833      	ldr	r3, [r6, #0]
 80079b2:	0608      	lsls	r0, r1, #24
 80079b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079b8:	d402      	bmi.n	80079c0 <_printf_i+0xe8>
 80079ba:	0649      	lsls	r1, r1, #25
 80079bc:	bf48      	it	mi
 80079be:	b2ad      	uxthmi	r5, r5
 80079c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079c2:	4852      	ldr	r0, [pc, #328]	@ (8007b0c <_printf_i+0x234>)
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	bf14      	ite	ne
 80079c8:	230a      	movne	r3, #10
 80079ca:	2308      	moveq	r3, #8
 80079cc:	2100      	movs	r1, #0
 80079ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079d2:	6866      	ldr	r6, [r4, #4]
 80079d4:	60a6      	str	r6, [r4, #8]
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	db05      	blt.n	80079e6 <_printf_i+0x10e>
 80079da:	6821      	ldr	r1, [r4, #0]
 80079dc:	432e      	orrs	r6, r5
 80079de:	f021 0104 	bic.w	r1, r1, #4
 80079e2:	6021      	str	r1, [r4, #0]
 80079e4:	d04b      	beq.n	8007a7e <_printf_i+0x1a6>
 80079e6:	4616      	mov	r6, r2
 80079e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ec:	fb03 5711 	mls	r7, r3, r1, r5
 80079f0:	5dc7      	ldrb	r7, [r0, r7]
 80079f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079f6:	462f      	mov	r7, r5
 80079f8:	42bb      	cmp	r3, r7
 80079fa:	460d      	mov	r5, r1
 80079fc:	d9f4      	bls.n	80079e8 <_printf_i+0x110>
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d10b      	bne.n	8007a1a <_printf_i+0x142>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	07df      	lsls	r7, r3, #31
 8007a06:	d508      	bpl.n	8007a1a <_printf_i+0x142>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	6861      	ldr	r1, [r4, #4]
 8007a0c:	4299      	cmp	r1, r3
 8007a0e:	bfde      	ittt	le
 8007a10:	2330      	movle	r3, #48	@ 0x30
 8007a12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a1a:	1b92      	subs	r2, r2, r6
 8007a1c:	6122      	str	r2, [r4, #16]
 8007a1e:	f8cd a000 	str.w	sl, [sp]
 8007a22:	464b      	mov	r3, r9
 8007a24:	aa03      	add	r2, sp, #12
 8007a26:	4621      	mov	r1, r4
 8007a28:	4640      	mov	r0, r8
 8007a2a:	f7ff fee7 	bl	80077fc <_printf_common>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d14a      	bne.n	8007ac8 <_printf_i+0x1f0>
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295
 8007a36:	b004      	add	sp, #16
 8007a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	f043 0320 	orr.w	r3, r3, #32
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	4832      	ldr	r0, [pc, #200]	@ (8007b10 <_printf_i+0x238>)
 8007a46:	2778      	movs	r7, #120	@ 0x78
 8007a48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	6831      	ldr	r1, [r6, #0]
 8007a50:	061f      	lsls	r7, r3, #24
 8007a52:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a56:	d402      	bmi.n	8007a5e <_printf_i+0x186>
 8007a58:	065f      	lsls	r7, r3, #25
 8007a5a:	bf48      	it	mi
 8007a5c:	b2ad      	uxthmi	r5, r5
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	07d9      	lsls	r1, r3, #31
 8007a62:	bf44      	itt	mi
 8007a64:	f043 0320 	orrmi.w	r3, r3, #32
 8007a68:	6023      	strmi	r3, [r4, #0]
 8007a6a:	b11d      	cbz	r5, 8007a74 <_printf_i+0x19c>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	e7ad      	b.n	80079cc <_printf_i+0xf4>
 8007a70:	4826      	ldr	r0, [pc, #152]	@ (8007b0c <_printf_i+0x234>)
 8007a72:	e7e9      	b.n	8007a48 <_printf_i+0x170>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	f023 0320 	bic.w	r3, r3, #32
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	e7f6      	b.n	8007a6c <_printf_i+0x194>
 8007a7e:	4616      	mov	r6, r2
 8007a80:	e7bd      	b.n	80079fe <_printf_i+0x126>
 8007a82:	6833      	ldr	r3, [r6, #0]
 8007a84:	6825      	ldr	r5, [r4, #0]
 8007a86:	6961      	ldr	r1, [r4, #20]
 8007a88:	1d18      	adds	r0, r3, #4
 8007a8a:	6030      	str	r0, [r6, #0]
 8007a8c:	062e      	lsls	r6, r5, #24
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	d501      	bpl.n	8007a96 <_printf_i+0x1be>
 8007a92:	6019      	str	r1, [r3, #0]
 8007a94:	e002      	b.n	8007a9c <_printf_i+0x1c4>
 8007a96:	0668      	lsls	r0, r5, #25
 8007a98:	d5fb      	bpl.n	8007a92 <_printf_i+0x1ba>
 8007a9a:	8019      	strh	r1, [r3, #0]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	e7bc      	b.n	8007a1e <_printf_i+0x146>
 8007aa4:	6833      	ldr	r3, [r6, #0]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	6032      	str	r2, [r6, #0]
 8007aaa:	681e      	ldr	r6, [r3, #0]
 8007aac:	6862      	ldr	r2, [r4, #4]
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7f8 fc15 	bl	80002e0 <memchr>
 8007ab6:	b108      	cbz	r0, 8007abc <_printf_i+0x1e4>
 8007ab8:	1b80      	subs	r0, r0, r6
 8007aba:	6060      	str	r0, [r4, #4]
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	6123      	str	r3, [r4, #16]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ac6:	e7aa      	b.n	8007a1e <_printf_i+0x146>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	4632      	mov	r2, r6
 8007acc:	4649      	mov	r1, r9
 8007ace:	4640      	mov	r0, r8
 8007ad0:	47d0      	blx	sl
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d0ad      	beq.n	8007a32 <_printf_i+0x15a>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	079b      	lsls	r3, r3, #30
 8007ada:	d413      	bmi.n	8007b04 <_printf_i+0x22c>
 8007adc:	68e0      	ldr	r0, [r4, #12]
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	4298      	cmp	r0, r3
 8007ae2:	bfb8      	it	lt
 8007ae4:	4618      	movlt	r0, r3
 8007ae6:	e7a6      	b.n	8007a36 <_printf_i+0x15e>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	4632      	mov	r2, r6
 8007aec:	4649      	mov	r1, r9
 8007aee:	4640      	mov	r0, r8
 8007af0:	47d0      	blx	sl
 8007af2:	3001      	adds	r0, #1
 8007af4:	d09d      	beq.n	8007a32 <_printf_i+0x15a>
 8007af6:	3501      	adds	r5, #1
 8007af8:	68e3      	ldr	r3, [r4, #12]
 8007afa:	9903      	ldr	r1, [sp, #12]
 8007afc:	1a5b      	subs	r3, r3, r1
 8007afe:	42ab      	cmp	r3, r5
 8007b00:	dcf2      	bgt.n	8007ae8 <_printf_i+0x210>
 8007b02:	e7eb      	b.n	8007adc <_printf_i+0x204>
 8007b04:	2500      	movs	r5, #0
 8007b06:	f104 0619 	add.w	r6, r4, #25
 8007b0a:	e7f5      	b.n	8007af8 <_printf_i+0x220>
 8007b0c:	08009cb6 	.word	0x08009cb6
 8007b10:	08009cc7 	.word	0x08009cc7

08007b14 <__sflush_r>:
 8007b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1c:	0716      	lsls	r6, r2, #28
 8007b1e:	4605      	mov	r5, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	d454      	bmi.n	8007bce <__sflush_r+0xba>
 8007b24:	684b      	ldr	r3, [r1, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dc02      	bgt.n	8007b30 <__sflush_r+0x1c>
 8007b2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd48      	ble.n	8007bc2 <__sflush_r+0xae>
 8007b30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d045      	beq.n	8007bc2 <__sflush_r+0xae>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b3c:	682f      	ldr	r7, [r5, #0]
 8007b3e:	6a21      	ldr	r1, [r4, #32]
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	d030      	beq.n	8007ba6 <__sflush_r+0x92>
 8007b44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	0759      	lsls	r1, r3, #29
 8007b4a:	d505      	bpl.n	8007b58 <__sflush_r+0x44>
 8007b4c:	6863      	ldr	r3, [r4, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b52:	b10b      	cbz	r3, 8007b58 <__sflush_r+0x44>
 8007b54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b5c:	6a21      	ldr	r1, [r4, #32]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b0      	blx	r6
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	d106      	bne.n	8007b76 <__sflush_r+0x62>
 8007b68:	6829      	ldr	r1, [r5, #0]
 8007b6a:	291d      	cmp	r1, #29
 8007b6c:	d82b      	bhi.n	8007bc6 <__sflush_r+0xb2>
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c18 <__sflush_r+0x104>)
 8007b70:	40ca      	lsrs	r2, r1
 8007b72:	07d6      	lsls	r6, r2, #31
 8007b74:	d527      	bpl.n	8007bc6 <__sflush_r+0xb2>
 8007b76:	2200      	movs	r2, #0
 8007b78:	6062      	str	r2, [r4, #4]
 8007b7a:	04d9      	lsls	r1, r3, #19
 8007b7c:	6922      	ldr	r2, [r4, #16]
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	d504      	bpl.n	8007b8c <__sflush_r+0x78>
 8007b82:	1c42      	adds	r2, r0, #1
 8007b84:	d101      	bne.n	8007b8a <__sflush_r+0x76>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b903      	cbnz	r3, 8007b8c <__sflush_r+0x78>
 8007b8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b8e:	602f      	str	r7, [r5, #0]
 8007b90:	b1b9      	cbz	r1, 8007bc2 <__sflush_r+0xae>
 8007b92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b96:	4299      	cmp	r1, r3
 8007b98:	d002      	beq.n	8007ba0 <__sflush_r+0x8c>
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f001 f8fa 	bl	8008d94 <_free_r>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ba4:	e00d      	b.n	8007bc2 <__sflush_r+0xae>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b0      	blx	r6
 8007bac:	4602      	mov	r2, r0
 8007bae:	1c50      	adds	r0, r2, #1
 8007bb0:	d1c9      	bne.n	8007b46 <__sflush_r+0x32>
 8007bb2:	682b      	ldr	r3, [r5, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0c6      	beq.n	8007b46 <__sflush_r+0x32>
 8007bb8:	2b1d      	cmp	r3, #29
 8007bba:	d001      	beq.n	8007bc0 <__sflush_r+0xac>
 8007bbc:	2b16      	cmp	r3, #22
 8007bbe:	d11e      	bne.n	8007bfe <__sflush_r+0xea>
 8007bc0:	602f      	str	r7, [r5, #0]
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e022      	b.n	8007c0c <__sflush_r+0xf8>
 8007bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bca:	b21b      	sxth	r3, r3
 8007bcc:	e01b      	b.n	8007c06 <__sflush_r+0xf2>
 8007bce:	690f      	ldr	r7, [r1, #16]
 8007bd0:	2f00      	cmp	r7, #0
 8007bd2:	d0f6      	beq.n	8007bc2 <__sflush_r+0xae>
 8007bd4:	0793      	lsls	r3, r2, #30
 8007bd6:	680e      	ldr	r6, [r1, #0]
 8007bd8:	bf08      	it	eq
 8007bda:	694b      	ldreq	r3, [r1, #20]
 8007bdc:	600f      	str	r7, [r1, #0]
 8007bde:	bf18      	it	ne
 8007be0:	2300      	movne	r3, #0
 8007be2:	eba6 0807 	sub.w	r8, r6, r7
 8007be6:	608b      	str	r3, [r1, #8]
 8007be8:	f1b8 0f00 	cmp.w	r8, #0
 8007bec:	dde9      	ble.n	8007bc2 <__sflush_r+0xae>
 8007bee:	6a21      	ldr	r1, [r4, #32]
 8007bf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bf2:	4643      	mov	r3, r8
 8007bf4:	463a      	mov	r2, r7
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b0      	blx	r6
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	dc08      	bgt.n	8007c10 <__sflush_r+0xfc>
 8007bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c06:	81a3      	strh	r3, [r4, #12]
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c10:	4407      	add	r7, r0
 8007c12:	eba8 0800 	sub.w	r8, r8, r0
 8007c16:	e7e7      	b.n	8007be8 <__sflush_r+0xd4>
 8007c18:	20400001 	.word	0x20400001

08007c1c <_fflush_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	690b      	ldr	r3, [r1, #16]
 8007c20:	4605      	mov	r5, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b913      	cbnz	r3, 8007c2c <_fflush_r+0x10>
 8007c26:	2500      	movs	r5, #0
 8007c28:	4628      	mov	r0, r5
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	b118      	cbz	r0, 8007c36 <_fflush_r+0x1a>
 8007c2e:	6a03      	ldr	r3, [r0, #32]
 8007c30:	b90b      	cbnz	r3, 8007c36 <_fflush_r+0x1a>
 8007c32:	f000 f8bb 	bl	8007dac <__sinit>
 8007c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f3      	beq.n	8007c26 <_fflush_r+0xa>
 8007c3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c40:	07d0      	lsls	r0, r2, #31
 8007c42:	d404      	bmi.n	8007c4e <_fflush_r+0x32>
 8007c44:	0599      	lsls	r1, r3, #22
 8007c46:	d402      	bmi.n	8007c4e <_fflush_r+0x32>
 8007c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c4a:	f000 faba 	bl	80081c2 <__retarget_lock_acquire_recursive>
 8007c4e:	4628      	mov	r0, r5
 8007c50:	4621      	mov	r1, r4
 8007c52:	f7ff ff5f 	bl	8007b14 <__sflush_r>
 8007c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c58:	07da      	lsls	r2, r3, #31
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	d4e4      	bmi.n	8007c28 <_fflush_r+0xc>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	059b      	lsls	r3, r3, #22
 8007c62:	d4e1      	bmi.n	8007c28 <_fflush_r+0xc>
 8007c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c66:	f000 faad 	bl	80081c4 <__retarget_lock_release_recursive>
 8007c6a:	e7dd      	b.n	8007c28 <_fflush_r+0xc>

08007c6c <fflush>:
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	b920      	cbnz	r0, 8007c7a <fflush+0xe>
 8007c70:	4a04      	ldr	r2, [pc, #16]	@ (8007c84 <fflush+0x18>)
 8007c72:	4905      	ldr	r1, [pc, #20]	@ (8007c88 <fflush+0x1c>)
 8007c74:	4805      	ldr	r0, [pc, #20]	@ (8007c8c <fflush+0x20>)
 8007c76:	f000 b8b1 	b.w	8007ddc <_fwalk_sglue>
 8007c7a:	4b05      	ldr	r3, [pc, #20]	@ (8007c90 <fflush+0x24>)
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	f7ff bfcd 	b.w	8007c1c <_fflush_r>
 8007c82:	bf00      	nop
 8007c84:	24000014 	.word	0x24000014
 8007c88:	08007c1d 	.word	0x08007c1d
 8007c8c:	24000024 	.word	0x24000024
 8007c90:	24000020 	.word	0x24000020

08007c94 <std>:
 8007c94:	2300      	movs	r3, #0
 8007c96:	b510      	push	{r4, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca2:	6083      	str	r3, [r0, #8]
 8007ca4:	8181      	strh	r1, [r0, #12]
 8007ca6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ca8:	81c2      	strh	r2, [r0, #14]
 8007caa:	6183      	str	r3, [r0, #24]
 8007cac:	4619      	mov	r1, r3
 8007cae:	2208      	movs	r2, #8
 8007cb0:	305c      	adds	r0, #92	@ 0x5c
 8007cb2:	f000 fa09 	bl	80080c8 <memset>
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <std+0x58>)
 8007cb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <std+0x5c>)
 8007cbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <std+0x60>)
 8007cc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <std+0x64>)
 8007cc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cfc <std+0x68>)
 8007cc8:	6224      	str	r4, [r4, #32]
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	d006      	beq.n	8007cdc <std+0x48>
 8007cce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	d002      	beq.n	8007cdc <std+0x48>
 8007cd6:	33d0      	adds	r3, #208	@ 0xd0
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d105      	bne.n	8007ce8 <std+0x54>
 8007cdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f000 ba6c 	b.w	80081c0 <__retarget_lock_init_recursive>
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	08007ef9 	.word	0x08007ef9
 8007cf0:	08007f1b 	.word	0x08007f1b
 8007cf4:	08007f53 	.word	0x08007f53
 8007cf8:	08007f77 	.word	0x08007f77
 8007cfc:	240002ac 	.word	0x240002ac

08007d00 <stdio_exit_handler>:
 8007d00:	4a02      	ldr	r2, [pc, #8]	@ (8007d0c <stdio_exit_handler+0xc>)
 8007d02:	4903      	ldr	r1, [pc, #12]	@ (8007d10 <stdio_exit_handler+0x10>)
 8007d04:	4803      	ldr	r0, [pc, #12]	@ (8007d14 <stdio_exit_handler+0x14>)
 8007d06:	f000 b869 	b.w	8007ddc <_fwalk_sglue>
 8007d0a:	bf00      	nop
 8007d0c:	24000014 	.word	0x24000014
 8007d10:	08007c1d 	.word	0x08007c1d
 8007d14:	24000024 	.word	0x24000024

08007d18 <cleanup_stdio>:
 8007d18:	6841      	ldr	r1, [r0, #4]
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d4c <cleanup_stdio+0x34>)
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	4604      	mov	r4, r0
 8007d22:	d001      	beq.n	8007d28 <cleanup_stdio+0x10>
 8007d24:	f7ff ff7a 	bl	8007c1c <_fflush_r>
 8007d28:	68a1      	ldr	r1, [r4, #8]
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <cleanup_stdio+0x38>)
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d002      	beq.n	8007d36 <cleanup_stdio+0x1e>
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7ff ff73 	bl	8007c1c <_fflush_r>
 8007d36:	68e1      	ldr	r1, [r4, #12]
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <cleanup_stdio+0x3c>)
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	d004      	beq.n	8007d48 <cleanup_stdio+0x30>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	f7ff bf6a 	b.w	8007c1c <_fflush_r>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop
 8007d4c:	240002ac 	.word	0x240002ac
 8007d50:	24000314 	.word	0x24000314
 8007d54:	2400037c 	.word	0x2400037c

08007d58 <global_stdio_init.part.0>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d88 <global_stdio_init.part.0+0x30>)
 8007d5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d8c <global_stdio_init.part.0+0x34>)
 8007d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d90 <global_stdio_init.part.0+0x38>)
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	4620      	mov	r0, r4
 8007d64:	2200      	movs	r2, #0
 8007d66:	2104      	movs	r1, #4
 8007d68:	f7ff ff94 	bl	8007c94 <std>
 8007d6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d70:	2201      	movs	r2, #1
 8007d72:	2109      	movs	r1, #9
 8007d74:	f7ff ff8e 	bl	8007c94 <std>
 8007d78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d82:	2112      	movs	r1, #18
 8007d84:	f7ff bf86 	b.w	8007c94 <std>
 8007d88:	240003e4 	.word	0x240003e4
 8007d8c:	240002ac 	.word	0x240002ac
 8007d90:	08007d01 	.word	0x08007d01

08007d94 <__sfp_lock_acquire>:
 8007d94:	4801      	ldr	r0, [pc, #4]	@ (8007d9c <__sfp_lock_acquire+0x8>)
 8007d96:	f000 ba14 	b.w	80081c2 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	240003ed 	.word	0x240003ed

08007da0 <__sfp_lock_release>:
 8007da0:	4801      	ldr	r0, [pc, #4]	@ (8007da8 <__sfp_lock_release+0x8>)
 8007da2:	f000 ba0f 	b.w	80081c4 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	240003ed 	.word	0x240003ed

08007dac <__sinit>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	4604      	mov	r4, r0
 8007db0:	f7ff fff0 	bl	8007d94 <__sfp_lock_acquire>
 8007db4:	6a23      	ldr	r3, [r4, #32]
 8007db6:	b11b      	cbz	r3, 8007dc0 <__sinit+0x14>
 8007db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbc:	f7ff bff0 	b.w	8007da0 <__sfp_lock_release>
 8007dc0:	4b04      	ldr	r3, [pc, #16]	@ (8007dd4 <__sinit+0x28>)
 8007dc2:	6223      	str	r3, [r4, #32]
 8007dc4:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <__sinit+0x2c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f5      	bne.n	8007db8 <__sinit+0xc>
 8007dcc:	f7ff ffc4 	bl	8007d58 <global_stdio_init.part.0>
 8007dd0:	e7f2      	b.n	8007db8 <__sinit+0xc>
 8007dd2:	bf00      	nop
 8007dd4:	08007d19 	.word	0x08007d19
 8007dd8:	240003e4 	.word	0x240003e4

08007ddc <_fwalk_sglue>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4607      	mov	r7, r0
 8007de2:	4688      	mov	r8, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	2600      	movs	r6, #0
 8007de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dec:	f1b9 0901 	subs.w	r9, r9, #1
 8007df0:	d505      	bpl.n	8007dfe <_fwalk_sglue+0x22>
 8007df2:	6824      	ldr	r4, [r4, #0]
 8007df4:	2c00      	cmp	r4, #0
 8007df6:	d1f7      	bne.n	8007de8 <_fwalk_sglue+0xc>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d907      	bls.n	8007e14 <_fwalk_sglue+0x38>
 8007e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	d003      	beq.n	8007e14 <_fwalk_sglue+0x38>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	4306      	orrs	r6, r0
 8007e14:	3568      	adds	r5, #104	@ 0x68
 8007e16:	e7e9      	b.n	8007dec <_fwalk_sglue+0x10>

08007e18 <iprintf>:
 8007e18:	b40f      	push	{r0, r1, r2, r3}
 8007e1a:	b507      	push	{r0, r1, r2, lr}
 8007e1c:	4906      	ldr	r1, [pc, #24]	@ (8007e38 <iprintf+0x20>)
 8007e1e:	ab04      	add	r3, sp, #16
 8007e20:	6808      	ldr	r0, [r1, #0]
 8007e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e26:	6881      	ldr	r1, [r0, #8]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	f001 fc57 	bl	80096dc <_vfiprintf_r>
 8007e2e:	b003      	add	sp, #12
 8007e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e34:	b004      	add	sp, #16
 8007e36:	4770      	bx	lr
 8007e38:	24000020 	.word	0x24000020

08007e3c <_puts_r>:
 8007e3c:	6a03      	ldr	r3, [r0, #32]
 8007e3e:	b570      	push	{r4, r5, r6, lr}
 8007e40:	6884      	ldr	r4, [r0, #8]
 8007e42:	4605      	mov	r5, r0
 8007e44:	460e      	mov	r6, r1
 8007e46:	b90b      	cbnz	r3, 8007e4c <_puts_r+0x10>
 8007e48:	f7ff ffb0 	bl	8007dac <__sinit>
 8007e4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e4e:	07db      	lsls	r3, r3, #31
 8007e50:	d405      	bmi.n	8007e5e <_puts_r+0x22>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	0598      	lsls	r0, r3, #22
 8007e56:	d402      	bmi.n	8007e5e <_puts_r+0x22>
 8007e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e5a:	f000 f9b2 	bl	80081c2 <__retarget_lock_acquire_recursive>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	0719      	lsls	r1, r3, #28
 8007e62:	d502      	bpl.n	8007e6a <_puts_r+0x2e>
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d135      	bne.n	8007ed6 <_puts_r+0x9a>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 f8c5 	bl	8007ffc <__swsetup_r>
 8007e72:	b380      	cbz	r0, 8007ed6 <_puts_r+0x9a>
 8007e74:	f04f 35ff 	mov.w	r5, #4294967295
 8007e78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <_puts_r+0x4e>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	059b      	lsls	r3, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_puts_r+0x4e>
 8007e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e86:	f000 f99d 	bl	80081c4 <__retarget_lock_release_recursive>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da04      	bge.n	8007e9c <_puts_r+0x60>
 8007e92:	69a2      	ldr	r2, [r4, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	dc17      	bgt.n	8007ec8 <_puts_r+0x8c>
 8007e98:	290a      	cmp	r1, #10
 8007e9a:	d015      	beq.n	8007ec8 <_puts_r+0x8c>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	7019      	strb	r1, [r3, #0]
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	60a3      	str	r3, [r4, #8]
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	d1ed      	bne.n	8007e8e <_puts_r+0x52>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da11      	bge.n	8007eda <_puts_r+0x9e>
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	210a      	movs	r1, #10
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 f85f 	bl	8007f7e <__swbuf_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0d7      	beq.n	8007e74 <_puts_r+0x38>
 8007ec4:	250a      	movs	r5, #10
 8007ec6:	e7d7      	b.n	8007e78 <_puts_r+0x3c>
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 f857 	bl	8007f7e <__swbuf_r>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d1e7      	bne.n	8007ea4 <_puts_r+0x68>
 8007ed4:	e7ce      	b.n	8007e74 <_puts_r+0x38>
 8007ed6:	3e01      	subs	r6, #1
 8007ed8:	e7e4      	b.n	8007ea4 <_puts_r+0x68>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	e7ee      	b.n	8007ec4 <_puts_r+0x88>
	...

08007ee8 <puts>:
 8007ee8:	4b02      	ldr	r3, [pc, #8]	@ (8007ef4 <puts+0xc>)
 8007eea:	4601      	mov	r1, r0
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f7ff bfa5 	b.w	8007e3c <_puts_r>
 8007ef2:	bf00      	nop
 8007ef4:	24000020 	.word	0x24000020

08007ef8 <__sread>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	460c      	mov	r4, r1
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	f000 f910 	bl	8008124 <_read_r>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	bfab      	itete	ge
 8007f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f0c:	181b      	addge	r3, r3, r0
 8007f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f12:	bfac      	ite	ge
 8007f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f16:	81a3      	strhlt	r3, [r4, #12]
 8007f18:	bd10      	pop	{r4, pc}

08007f1a <__swrite>:
 8007f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	461f      	mov	r7, r3
 8007f20:	898b      	ldrh	r3, [r1, #12]
 8007f22:	05db      	lsls	r3, r3, #23
 8007f24:	4605      	mov	r5, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4616      	mov	r6, r2
 8007f2a:	d505      	bpl.n	8007f38 <__swrite+0x1e>
 8007f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f30:	2302      	movs	r3, #2
 8007f32:	2200      	movs	r2, #0
 8007f34:	f000 f8e4 	bl	8008100 <_lseek_r>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	4632      	mov	r2, r6
 8007f46:	463b      	mov	r3, r7
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	f000 b8fb 	b.w	8008148 <_write_r>

08007f52 <__sseek>:
 8007f52:	b510      	push	{r4, lr}
 8007f54:	460c      	mov	r4, r1
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 f8d1 	bl	8008100 <_lseek_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	bf15      	itete	ne
 8007f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f6e:	81a3      	strheq	r3, [r4, #12]
 8007f70:	bf18      	it	ne
 8007f72:	81a3      	strhne	r3, [r4, #12]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__sclose>:
 8007f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7a:	f000 b8b1 	b.w	80080e0 <_close_r>

08007f7e <__swbuf_r>:
 8007f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f80:	460e      	mov	r6, r1
 8007f82:	4614      	mov	r4, r2
 8007f84:	4605      	mov	r5, r0
 8007f86:	b118      	cbz	r0, 8007f90 <__swbuf_r+0x12>
 8007f88:	6a03      	ldr	r3, [r0, #32]
 8007f8a:	b90b      	cbnz	r3, 8007f90 <__swbuf_r+0x12>
 8007f8c:	f7ff ff0e 	bl	8007dac <__sinit>
 8007f90:	69a3      	ldr	r3, [r4, #24]
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	071a      	lsls	r2, r3, #28
 8007f98:	d501      	bpl.n	8007f9e <__swbuf_r+0x20>
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	b943      	cbnz	r3, 8007fb0 <__swbuf_r+0x32>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 f82b 	bl	8007ffc <__swsetup_r>
 8007fa6:	b118      	cbz	r0, 8007fb0 <__swbuf_r+0x32>
 8007fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8007fac:	4638      	mov	r0, r7
 8007fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	6922      	ldr	r2, [r4, #16]
 8007fb4:	1a98      	subs	r0, r3, r2
 8007fb6:	6963      	ldr	r3, [r4, #20]
 8007fb8:	b2f6      	uxtb	r6, r6
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	4637      	mov	r7, r6
 8007fbe:	dc05      	bgt.n	8007fcc <__swbuf_r+0x4e>
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7ff fe2a 	bl	8007c1c <_fflush_r>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d1ed      	bne.n	8007fa8 <__swbuf_r+0x2a>
 8007fcc:	68a3      	ldr	r3, [r4, #8]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	60a3      	str	r3, [r4, #8]
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	6022      	str	r2, [r4, #0]
 8007fd8:	701e      	strb	r6, [r3, #0]
 8007fda:	6962      	ldr	r2, [r4, #20]
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d004      	beq.n	8007fec <__swbuf_r+0x6e>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	07db      	lsls	r3, r3, #31
 8007fe6:	d5e1      	bpl.n	8007fac <__swbuf_r+0x2e>
 8007fe8:	2e0a      	cmp	r6, #10
 8007fea:	d1df      	bne.n	8007fac <__swbuf_r+0x2e>
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7ff fe14 	bl	8007c1c <_fflush_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d0d9      	beq.n	8007fac <__swbuf_r+0x2e>
 8007ff8:	e7d6      	b.n	8007fa8 <__swbuf_r+0x2a>
	...

08007ffc <__swsetup_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4b29      	ldr	r3, [pc, #164]	@ (80080a4 <__swsetup_r+0xa8>)
 8008000:	4605      	mov	r5, r0
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	460c      	mov	r4, r1
 8008006:	b118      	cbz	r0, 8008010 <__swsetup_r+0x14>
 8008008:	6a03      	ldr	r3, [r0, #32]
 800800a:	b90b      	cbnz	r3, 8008010 <__swsetup_r+0x14>
 800800c:	f7ff fece 	bl	8007dac <__sinit>
 8008010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008014:	0719      	lsls	r1, r3, #28
 8008016:	d422      	bmi.n	800805e <__swsetup_r+0x62>
 8008018:	06da      	lsls	r2, r3, #27
 800801a:	d407      	bmi.n	800802c <__swsetup_r+0x30>
 800801c:	2209      	movs	r2, #9
 800801e:	602a      	str	r2, [r5, #0]
 8008020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	f04f 30ff 	mov.w	r0, #4294967295
 800802a:	e033      	b.n	8008094 <__swsetup_r+0x98>
 800802c:	0758      	lsls	r0, r3, #29
 800802e:	d512      	bpl.n	8008056 <__swsetup_r+0x5a>
 8008030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008032:	b141      	cbz	r1, 8008046 <__swsetup_r+0x4a>
 8008034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__swsetup_r+0x46>
 800803c:	4628      	mov	r0, r5
 800803e:	f000 fea9 	bl	8008d94 <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	@ 0x34
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	b94b      	cbnz	r3, 8008076 <__swsetup_r+0x7a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800806c:	d003      	beq.n	8008076 <__swsetup_r+0x7a>
 800806e:	4621      	mov	r1, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f001 fc71 	bl	8009958 <__smakebuf_r>
 8008076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807a:	f013 0201 	ands.w	r2, r3, #1
 800807e:	d00a      	beq.n	8008096 <__swsetup_r+0x9a>
 8008080:	2200      	movs	r2, #0
 8008082:	60a2      	str	r2, [r4, #8]
 8008084:	6962      	ldr	r2, [r4, #20]
 8008086:	4252      	negs	r2, r2
 8008088:	61a2      	str	r2, [r4, #24]
 800808a:	6922      	ldr	r2, [r4, #16]
 800808c:	b942      	cbnz	r2, 80080a0 <__swsetup_r+0xa4>
 800808e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008092:	d1c5      	bne.n	8008020 <__swsetup_r+0x24>
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	0799      	lsls	r1, r3, #30
 8008098:	bf58      	it	pl
 800809a:	6962      	ldrpl	r2, [r4, #20]
 800809c:	60a2      	str	r2, [r4, #8]
 800809e:	e7f4      	b.n	800808a <__swsetup_r+0x8e>
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7f7      	b.n	8008094 <__swsetup_r+0x98>
 80080a4:	24000020 	.word	0x24000020

080080a8 <memcmp>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	3901      	subs	r1, #1
 80080ac:	4402      	add	r2, r0
 80080ae:	4290      	cmp	r0, r2
 80080b0:	d101      	bne.n	80080b6 <memcmp+0xe>
 80080b2:	2000      	movs	r0, #0
 80080b4:	e005      	b.n	80080c2 <memcmp+0x1a>
 80080b6:	7803      	ldrb	r3, [r0, #0]
 80080b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d001      	beq.n	80080c4 <memcmp+0x1c>
 80080c0:	1b18      	subs	r0, r3, r4
 80080c2:	bd10      	pop	{r4, pc}
 80080c4:	3001      	adds	r0, #1
 80080c6:	e7f2      	b.n	80080ae <memcmp+0x6>

080080c8 <memset>:
 80080c8:	4402      	add	r2, r0
 80080ca:	4603      	mov	r3, r0
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d100      	bne.n	80080d2 <memset+0xa>
 80080d0:	4770      	bx	lr
 80080d2:	f803 1b01 	strb.w	r1, [r3], #1
 80080d6:	e7f9      	b.n	80080cc <memset+0x4>

080080d8 <_localeconv_r>:
 80080d8:	4800      	ldr	r0, [pc, #0]	@ (80080dc <_localeconv_r+0x4>)
 80080da:	4770      	bx	lr
 80080dc:	24000160 	.word	0x24000160

080080e0 <_close_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4d06      	ldr	r5, [pc, #24]	@ (80080fc <_close_r+0x1c>)
 80080e4:	2300      	movs	r3, #0
 80080e6:	4604      	mov	r4, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	f7f9 f8e6 	bl	80012bc <_close>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_close_r+0x1a>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_close_r+0x1a>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	240003e8 	.word	0x240003e8

08008100 <_lseek_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d07      	ldr	r5, [pc, #28]	@ (8008120 <_lseek_r+0x20>)
 8008104:	4604      	mov	r4, r0
 8008106:	4608      	mov	r0, r1
 8008108:	4611      	mov	r1, r2
 800810a:	2200      	movs	r2, #0
 800810c:	602a      	str	r2, [r5, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	f7f9 f8fb 	bl	800130a <_lseek>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_lseek_r+0x1e>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_lseek_r+0x1e>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	240003e8 	.word	0x240003e8

08008124 <_read_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d07      	ldr	r5, [pc, #28]	@ (8008144 <_read_r+0x20>)
 8008128:	4604      	mov	r4, r0
 800812a:	4608      	mov	r0, r1
 800812c:	4611      	mov	r1, r2
 800812e:	2200      	movs	r2, #0
 8008130:	602a      	str	r2, [r5, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	f7f9 f889 	bl	800124a <_read>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_read_r+0x1e>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_read_r+0x1e>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	240003e8 	.word	0x240003e8

08008148 <_write_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d07      	ldr	r5, [pc, #28]	@ (8008168 <_write_r+0x20>)
 800814c:	4604      	mov	r4, r0
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	2200      	movs	r2, #0
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	f7f9 f894 	bl	8001284 <_write>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_write_r+0x1e>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_write_r+0x1e>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	240003e8 	.word	0x240003e8

0800816c <__errno>:
 800816c:	4b01      	ldr	r3, [pc, #4]	@ (8008174 <__errno+0x8>)
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	24000020 	.word	0x24000020

08008178 <__libc_init_array>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	4d0d      	ldr	r5, [pc, #52]	@ (80081b0 <__libc_init_array+0x38>)
 800817c:	4c0d      	ldr	r4, [pc, #52]	@ (80081b4 <__libc_init_array+0x3c>)
 800817e:	1b64      	subs	r4, r4, r5
 8008180:	10a4      	asrs	r4, r4, #2
 8008182:	2600      	movs	r6, #0
 8008184:	42a6      	cmp	r6, r4
 8008186:	d109      	bne.n	800819c <__libc_init_array+0x24>
 8008188:	4d0b      	ldr	r5, [pc, #44]	@ (80081b8 <__libc_init_array+0x40>)
 800818a:	4c0c      	ldr	r4, [pc, #48]	@ (80081bc <__libc_init_array+0x44>)
 800818c:	f001 fd10 	bl	8009bb0 <_init>
 8008190:	1b64      	subs	r4, r4, r5
 8008192:	10a4      	asrs	r4, r4, #2
 8008194:	2600      	movs	r6, #0
 8008196:	42a6      	cmp	r6, r4
 8008198:	d105      	bne.n	80081a6 <__libc_init_array+0x2e>
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a0:	4798      	blx	r3
 80081a2:	3601      	adds	r6, #1
 80081a4:	e7ee      	b.n	8008184 <__libc_init_array+0xc>
 80081a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081aa:	4798      	blx	r3
 80081ac:	3601      	adds	r6, #1
 80081ae:	e7f2      	b.n	8008196 <__libc_init_array+0x1e>
 80081b0:	0800a024 	.word	0x0800a024
 80081b4:	0800a024 	.word	0x0800a024
 80081b8:	0800a024 	.word	0x0800a024
 80081bc:	0800a028 	.word	0x0800a028

080081c0 <__retarget_lock_init_recursive>:
 80081c0:	4770      	bx	lr

080081c2 <__retarget_lock_acquire_recursive>:
 80081c2:	4770      	bx	lr

080081c4 <__retarget_lock_release_recursive>:
 80081c4:	4770      	bx	lr

080081c6 <quorem>:
 80081c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	6903      	ldr	r3, [r0, #16]
 80081cc:	690c      	ldr	r4, [r1, #16]
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	4607      	mov	r7, r0
 80081d2:	db7e      	blt.n	80082d2 <quorem+0x10c>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	f101 0814 	add.w	r8, r1, #20
 80081da:	00a3      	lsls	r3, r4, #2
 80081dc:	f100 0514 	add.w	r5, r0, #20
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f0:	3301      	adds	r3, #1
 80081f2:	429a      	cmp	r2, r3
 80081f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80081fc:	d32e      	bcc.n	800825c <quorem+0x96>
 80081fe:	f04f 0a00 	mov.w	sl, #0
 8008202:	46c4      	mov	ip, r8
 8008204:	46ae      	mov	lr, r5
 8008206:	46d3      	mov	fp, sl
 8008208:	f85c 3b04 	ldr.w	r3, [ip], #4
 800820c:	b298      	uxth	r0, r3
 800820e:	fb06 a000 	mla	r0, r6, r0, sl
 8008212:	0c02      	lsrs	r2, r0, #16
 8008214:	0c1b      	lsrs	r3, r3, #16
 8008216:	fb06 2303 	mla	r3, r6, r3, r2
 800821a:	f8de 2000 	ldr.w	r2, [lr]
 800821e:	b280      	uxth	r0, r0
 8008220:	b292      	uxth	r2, r2
 8008222:	1a12      	subs	r2, r2, r0
 8008224:	445a      	add	r2, fp
 8008226:	f8de 0000 	ldr.w	r0, [lr]
 800822a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800822e:	b29b      	uxth	r3, r3
 8008230:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008234:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008238:	b292      	uxth	r2, r2
 800823a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800823e:	45e1      	cmp	r9, ip
 8008240:	f84e 2b04 	str.w	r2, [lr], #4
 8008244:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008248:	d2de      	bcs.n	8008208 <quorem+0x42>
 800824a:	9b00      	ldr	r3, [sp, #0]
 800824c:	58eb      	ldr	r3, [r5, r3]
 800824e:	b92b      	cbnz	r3, 800825c <quorem+0x96>
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	3b04      	subs	r3, #4
 8008254:	429d      	cmp	r5, r3
 8008256:	461a      	mov	r2, r3
 8008258:	d32f      	bcc.n	80082ba <quorem+0xf4>
 800825a:	613c      	str	r4, [r7, #16]
 800825c:	4638      	mov	r0, r7
 800825e:	f001 f90b 	bl	8009478 <__mcmp>
 8008262:	2800      	cmp	r0, #0
 8008264:	db25      	blt.n	80082b2 <quorem+0xec>
 8008266:	4629      	mov	r1, r5
 8008268:	2000      	movs	r0, #0
 800826a:	f858 2b04 	ldr.w	r2, [r8], #4
 800826e:	f8d1 c000 	ldr.w	ip, [r1]
 8008272:	fa1f fe82 	uxth.w	lr, r2
 8008276:	fa1f f38c 	uxth.w	r3, ip
 800827a:	eba3 030e 	sub.w	r3, r3, lr
 800827e:	4403      	add	r3, r0
 8008280:	0c12      	lsrs	r2, r2, #16
 8008282:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008286:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800828a:	b29b      	uxth	r3, r3
 800828c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008290:	45c1      	cmp	r9, r8
 8008292:	f841 3b04 	str.w	r3, [r1], #4
 8008296:	ea4f 4022 	mov.w	r0, r2, asr #16
 800829a:	d2e6      	bcs.n	800826a <quorem+0xa4>
 800829c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a4:	b922      	cbnz	r2, 80082b0 <quorem+0xea>
 80082a6:	3b04      	subs	r3, #4
 80082a8:	429d      	cmp	r5, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	d30b      	bcc.n	80082c6 <quorem+0x100>
 80082ae:	613c      	str	r4, [r7, #16]
 80082b0:	3601      	adds	r6, #1
 80082b2:	4630      	mov	r0, r6
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	3b04      	subs	r3, #4
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d1cb      	bne.n	800825a <quorem+0x94>
 80082c2:	3c01      	subs	r4, #1
 80082c4:	e7c6      	b.n	8008254 <quorem+0x8e>
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1ef      	bne.n	80082ae <quorem+0xe8>
 80082ce:	3c01      	subs	r4, #1
 80082d0:	e7ea      	b.n	80082a8 <quorem+0xe2>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7ee      	b.n	80082b4 <quorem+0xee>
	...

080082d8 <_dtoa_r>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	ed2d 8b02 	vpush	{d8}
 80082e0:	69c7      	ldr	r7, [r0, #28]
 80082e2:	b091      	sub	sp, #68	@ 0x44
 80082e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082e8:	ec55 4b10 	vmov	r4, r5, d0
 80082ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80082ee:	9107      	str	r1, [sp, #28]
 80082f0:	4681      	mov	r9, r0
 80082f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80082f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80082f6:	b97f      	cbnz	r7, 8008318 <_dtoa_r+0x40>
 80082f8:	2010      	movs	r0, #16
 80082fa:	f000 fd95 	bl	8008e28 <malloc>
 80082fe:	4602      	mov	r2, r0
 8008300:	f8c9 001c 	str.w	r0, [r9, #28]
 8008304:	b920      	cbnz	r0, 8008310 <_dtoa_r+0x38>
 8008306:	4ba0      	ldr	r3, [pc, #640]	@ (8008588 <_dtoa_r+0x2b0>)
 8008308:	21ef      	movs	r1, #239	@ 0xef
 800830a:	48a0      	ldr	r0, [pc, #640]	@ (800858c <_dtoa_r+0x2b4>)
 800830c:	f001 fba0 	bl	8009a50 <__assert_func>
 8008310:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008314:	6007      	str	r7, [r0, #0]
 8008316:	60c7      	str	r7, [r0, #12]
 8008318:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	b159      	cbz	r1, 8008338 <_dtoa_r+0x60>
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	604a      	str	r2, [r1, #4]
 8008324:	2301      	movs	r3, #1
 8008326:	4093      	lsls	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
 800832a:	4648      	mov	r0, r9
 800832c:	f000 fe72 	bl	8009014 <_Bfree>
 8008330:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	1e2b      	subs	r3, r5, #0
 800833a:	bfbb      	ittet	lt
 800833c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008340:	9303      	strlt	r3, [sp, #12]
 8008342:	2300      	movge	r3, #0
 8008344:	2201      	movlt	r2, #1
 8008346:	bfac      	ite	ge
 8008348:	6033      	strge	r3, [r6, #0]
 800834a:	6032      	strlt	r2, [r6, #0]
 800834c:	4b90      	ldr	r3, [pc, #576]	@ (8008590 <_dtoa_r+0x2b8>)
 800834e:	9e03      	ldr	r6, [sp, #12]
 8008350:	43b3      	bics	r3, r6
 8008352:	d110      	bne.n	8008376 <_dtoa_r+0x9e>
 8008354:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008356:	f242 730f 	movw	r3, #9999	@ 0x270f
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008360:	4323      	orrs	r3, r4
 8008362:	f000 84e6 	beq.w	8008d32 <_dtoa_r+0xa5a>
 8008366:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008368:	4f8a      	ldr	r7, [pc, #552]	@ (8008594 <_dtoa_r+0x2bc>)
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 84e8 	beq.w	8008d40 <_dtoa_r+0xa68>
 8008370:	1cfb      	adds	r3, r7, #3
 8008372:	f000 bce3 	b.w	8008d3c <_dtoa_r+0xa64>
 8008376:	ed9d 8b02 	vldr	d8, [sp, #8]
 800837a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008382:	d10a      	bne.n	800839a <_dtoa_r+0xc2>
 8008384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008386:	2301      	movs	r3, #1
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800838c:	b113      	cbz	r3, 8008394 <_dtoa_r+0xbc>
 800838e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008390:	4b81      	ldr	r3, [pc, #516]	@ (8008598 <_dtoa_r+0x2c0>)
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	4f81      	ldr	r7, [pc, #516]	@ (800859c <_dtoa_r+0x2c4>)
 8008396:	f000 bcd3 	b.w	8008d40 <_dtoa_r+0xa68>
 800839a:	aa0e      	add	r2, sp, #56	@ 0x38
 800839c:	a90f      	add	r1, sp, #60	@ 0x3c
 800839e:	4648      	mov	r0, r9
 80083a0:	eeb0 0b48 	vmov.f64	d0, d8
 80083a4:	f001 f918 	bl	80095d8 <__d2b>
 80083a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80083ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ae:	9001      	str	r0, [sp, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d045      	beq.n	8008440 <_dtoa_r+0x168>
 80083b4:	eeb0 7b48 	vmov.f64	d7, d8
 80083b8:	ee18 1a90 	vmov	r1, s17
 80083bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80083c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80083c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80083c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80083cc:	2500      	movs	r5, #0
 80083ce:	ee07 1a90 	vmov	s15, r1
 80083d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80083d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008570 <_dtoa_r+0x298>
 80083da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80083de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008578 <_dtoa_r+0x2a0>
 80083e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80083e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008580 <_dtoa_r+0x2a8>
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80083f2:	eeb0 7b46 	vmov.f64	d7, d6
 80083f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80083fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80083fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008406:	ee16 8a90 	vmov	r8, s13
 800840a:	d508      	bpl.n	800841e <_dtoa_r+0x146>
 800840c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008410:	eeb4 6b47 	vcmp.f64	d6, d7
 8008414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008418:	bf18      	it	ne
 800841a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800841e:	f1b8 0f16 	cmp.w	r8, #22
 8008422:	d82b      	bhi.n	800847c <_dtoa_r+0x1a4>
 8008424:	495e      	ldr	r1, [pc, #376]	@ (80085a0 <_dtoa_r+0x2c8>)
 8008426:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800842a:	ed91 7b00 	vldr	d7, [r1]
 800842e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008436:	d501      	bpl.n	800843c <_dtoa_r+0x164>
 8008438:	f108 38ff 	add.w	r8, r8, #4294967295
 800843c:	2100      	movs	r1, #0
 800843e:	e01e      	b.n	800847e <_dtoa_r+0x1a6>
 8008440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008442:	4413      	add	r3, r2
 8008444:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008448:	2920      	cmp	r1, #32
 800844a:	bfc1      	itttt	gt
 800844c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008450:	408e      	lslgt	r6, r1
 8008452:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008456:	fa24 f101 	lsrgt.w	r1, r4, r1
 800845a:	bfd6      	itet	le
 800845c:	f1c1 0120 	rsble	r1, r1, #32
 8008460:	4331      	orrgt	r1, r6
 8008462:	fa04 f101 	lslle.w	r1, r4, r1
 8008466:	ee07 1a90 	vmov	s15, r1
 800846a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800846e:	3b01      	subs	r3, #1
 8008470:	ee17 1a90 	vmov	r1, s15
 8008474:	2501      	movs	r5, #1
 8008476:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800847a:	e7a8      	b.n	80083ce <_dtoa_r+0xf6>
 800847c:	2101      	movs	r1, #1
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	1e53      	subs	r3, r2, #1
 8008482:	9306      	str	r3, [sp, #24]
 8008484:	bf45      	ittet	mi
 8008486:	f1c2 0301 	rsbmi	r3, r2, #1
 800848a:	9304      	strmi	r3, [sp, #16]
 800848c:	2300      	movpl	r3, #0
 800848e:	2300      	movmi	r3, #0
 8008490:	bf4c      	ite	mi
 8008492:	9306      	strmi	r3, [sp, #24]
 8008494:	9304      	strpl	r3, [sp, #16]
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	910c      	str	r1, [sp, #48]	@ 0x30
 800849c:	db18      	blt.n	80084d0 <_dtoa_r+0x1f8>
 800849e:	9b06      	ldr	r3, [sp, #24]
 80084a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80084a4:	4443      	add	r3, r8
 80084a6:	9306      	str	r3, [sp, #24]
 80084a8:	2300      	movs	r3, #0
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	2a09      	cmp	r2, #9
 80084ae:	d845      	bhi.n	800853c <_dtoa_r+0x264>
 80084b0:	2a05      	cmp	r2, #5
 80084b2:	bfc4      	itt	gt
 80084b4:	3a04      	subgt	r2, #4
 80084b6:	9207      	strgt	r2, [sp, #28]
 80084b8:	9a07      	ldr	r2, [sp, #28]
 80084ba:	f1a2 0202 	sub.w	r2, r2, #2
 80084be:	bfcc      	ite	gt
 80084c0:	2400      	movgt	r4, #0
 80084c2:	2401      	movle	r4, #1
 80084c4:	2a03      	cmp	r2, #3
 80084c6:	d844      	bhi.n	8008552 <_dtoa_r+0x27a>
 80084c8:	e8df f002 	tbb	[pc, r2]
 80084cc:	0b173634 	.word	0x0b173634
 80084d0:	9b04      	ldr	r3, [sp, #16]
 80084d2:	2200      	movs	r2, #0
 80084d4:	eba3 0308 	sub.w	r3, r3, r8
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	920a      	str	r2, [sp, #40]	@ 0x28
 80084dc:	f1c8 0300 	rsb	r3, r8, #0
 80084e0:	e7e3      	b.n	80084aa <_dtoa_r+0x1d2>
 80084e2:	2201      	movs	r2, #1
 80084e4:	9208      	str	r2, [sp, #32]
 80084e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084e8:	eb08 0b02 	add.w	fp, r8, r2
 80084ec:	f10b 0a01 	add.w	sl, fp, #1
 80084f0:	4652      	mov	r2, sl
 80084f2:	2a01      	cmp	r2, #1
 80084f4:	bfb8      	it	lt
 80084f6:	2201      	movlt	r2, #1
 80084f8:	e006      	b.n	8008508 <_dtoa_r+0x230>
 80084fa:	2201      	movs	r2, #1
 80084fc:	9208      	str	r2, [sp, #32]
 80084fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008500:	2a00      	cmp	r2, #0
 8008502:	dd29      	ble.n	8008558 <_dtoa_r+0x280>
 8008504:	4693      	mov	fp, r2
 8008506:	4692      	mov	sl, r2
 8008508:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800850c:	2100      	movs	r1, #0
 800850e:	2004      	movs	r0, #4
 8008510:	f100 0614 	add.w	r6, r0, #20
 8008514:	4296      	cmp	r6, r2
 8008516:	d926      	bls.n	8008566 <_dtoa_r+0x28e>
 8008518:	6079      	str	r1, [r7, #4]
 800851a:	4648      	mov	r0, r9
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f000 fd39 	bl	8008f94 <_Balloc>
 8008522:	9b05      	ldr	r3, [sp, #20]
 8008524:	4607      	mov	r7, r0
 8008526:	2800      	cmp	r0, #0
 8008528:	d13e      	bne.n	80085a8 <_dtoa_r+0x2d0>
 800852a:	4b1e      	ldr	r3, [pc, #120]	@ (80085a4 <_dtoa_r+0x2cc>)
 800852c:	4602      	mov	r2, r0
 800852e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008532:	e6ea      	b.n	800830a <_dtoa_r+0x32>
 8008534:	2200      	movs	r2, #0
 8008536:	e7e1      	b.n	80084fc <_dtoa_r+0x224>
 8008538:	2200      	movs	r2, #0
 800853a:	e7d3      	b.n	80084e4 <_dtoa_r+0x20c>
 800853c:	2401      	movs	r4, #1
 800853e:	2200      	movs	r2, #0
 8008540:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008544:	f04f 3bff 	mov.w	fp, #4294967295
 8008548:	2100      	movs	r1, #0
 800854a:	46da      	mov	sl, fp
 800854c:	2212      	movs	r2, #18
 800854e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008550:	e7da      	b.n	8008508 <_dtoa_r+0x230>
 8008552:	2201      	movs	r2, #1
 8008554:	9208      	str	r2, [sp, #32]
 8008556:	e7f5      	b.n	8008544 <_dtoa_r+0x26c>
 8008558:	f04f 0b01 	mov.w	fp, #1
 800855c:	46da      	mov	sl, fp
 800855e:	465a      	mov	r2, fp
 8008560:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008564:	e7d0      	b.n	8008508 <_dtoa_r+0x230>
 8008566:	3101      	adds	r1, #1
 8008568:	0040      	lsls	r0, r0, #1
 800856a:	e7d1      	b.n	8008510 <_dtoa_r+0x238>
 800856c:	f3af 8000 	nop.w
 8008570:	636f4361 	.word	0x636f4361
 8008574:	3fd287a7 	.word	0x3fd287a7
 8008578:	8b60c8b3 	.word	0x8b60c8b3
 800857c:	3fc68a28 	.word	0x3fc68a28
 8008580:	509f79fb 	.word	0x509f79fb
 8008584:	3fd34413 	.word	0x3fd34413
 8008588:	08009ce5 	.word	0x08009ce5
 800858c:	08009cfc 	.word	0x08009cfc
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	08009ce1 	.word	0x08009ce1
 8008598:	08009cb5 	.word	0x08009cb5
 800859c:	08009cb4 	.word	0x08009cb4
 80085a0:	08009e50 	.word	0x08009e50
 80085a4:	08009d54 	.word	0x08009d54
 80085a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80085ac:	f1ba 0f0e 	cmp.w	sl, #14
 80085b0:	6010      	str	r0, [r2, #0]
 80085b2:	d86e      	bhi.n	8008692 <_dtoa_r+0x3ba>
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	d06c      	beq.n	8008692 <_dtoa_r+0x3ba>
 80085b8:	f1b8 0f00 	cmp.w	r8, #0
 80085bc:	f340 80b4 	ble.w	8008728 <_dtoa_r+0x450>
 80085c0:	4ac8      	ldr	r2, [pc, #800]	@ (80088e4 <_dtoa_r+0x60c>)
 80085c2:	f008 010f 	and.w	r1, r8, #15
 80085c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80085ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80085ce:	ed92 7b00 	vldr	d7, [r2]
 80085d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80085d6:	f000 809b 	beq.w	8008710 <_dtoa_r+0x438>
 80085da:	4ac3      	ldr	r2, [pc, #780]	@ (80088e8 <_dtoa_r+0x610>)
 80085dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80085e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80085e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80085e8:	f001 010f 	and.w	r1, r1, #15
 80085ec:	2203      	movs	r2, #3
 80085ee:	48be      	ldr	r0, [pc, #760]	@ (80088e8 <_dtoa_r+0x610>)
 80085f0:	2900      	cmp	r1, #0
 80085f2:	f040 808f 	bne.w	8008714 <_dtoa_r+0x43c>
 80085f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80085fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008602:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008608:	2900      	cmp	r1, #0
 800860a:	f000 80b3 	beq.w	8008774 <_dtoa_r+0x49c>
 800860e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008612:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861a:	f140 80ab 	bpl.w	8008774 <_dtoa_r+0x49c>
 800861e:	f1ba 0f00 	cmp.w	sl, #0
 8008622:	f000 80a7 	beq.w	8008774 <_dtoa_r+0x49c>
 8008626:	f1bb 0f00 	cmp.w	fp, #0
 800862a:	dd30      	ble.n	800868e <_dtoa_r+0x3b6>
 800862c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008630:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008634:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008638:	f108 31ff 	add.w	r1, r8, #4294967295
 800863c:	9105      	str	r1, [sp, #20]
 800863e:	3201      	adds	r2, #1
 8008640:	465c      	mov	r4, fp
 8008642:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008646:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800864a:	ee07 2a90 	vmov	s15, r2
 800864e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008652:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008656:	ee15 2a90 	vmov	r2, s11
 800865a:	ec51 0b15 	vmov	r0, r1, d5
 800865e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008662:	2c00      	cmp	r4, #0
 8008664:	f040 808a 	bne.w	800877c <_dtoa_r+0x4a4>
 8008668:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800866c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008670:	ec41 0b17 	vmov	d7, r0, r1
 8008674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867c:	f300 826a 	bgt.w	8008b54 <_dtoa_r+0x87c>
 8008680:	eeb1 7b47 	vneg.f64	d7, d7
 8008684:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	d423      	bmi.n	80086d6 <_dtoa_r+0x3fe>
 800868e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008692:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008694:	2a00      	cmp	r2, #0
 8008696:	f2c0 8129 	blt.w	80088ec <_dtoa_r+0x614>
 800869a:	f1b8 0f0e 	cmp.w	r8, #14
 800869e:	f300 8125 	bgt.w	80088ec <_dtoa_r+0x614>
 80086a2:	4b90      	ldr	r3, [pc, #576]	@ (80088e4 <_dtoa_r+0x60c>)
 80086a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80086a8:	ed93 6b00 	vldr	d6, [r3]
 80086ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f280 80c8 	bge.w	8008844 <_dtoa_r+0x56c>
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	f300 80c4 	bgt.w	8008844 <_dtoa_r+0x56c>
 80086bc:	d10b      	bne.n	80086d6 <_dtoa_r+0x3fe>
 80086be:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80086c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80086c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d2:	f2c0 823c 	blt.w	8008b4e <_dtoa_r+0x876>
 80086d6:	2400      	movs	r4, #0
 80086d8:	4625      	mov	r5, r4
 80086da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086dc:	43db      	mvns	r3, r3
 80086de:	9305      	str	r3, [sp, #20]
 80086e0:	463e      	mov	r6, r7
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	4621      	mov	r1, r4
 80086e8:	4648      	mov	r0, r9
 80086ea:	f000 fc93 	bl	8009014 <_Bfree>
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	f000 80a2 	beq.w	8008838 <_dtoa_r+0x560>
 80086f4:	f1b8 0f00 	cmp.w	r8, #0
 80086f8:	d005      	beq.n	8008706 <_dtoa_r+0x42e>
 80086fa:	45a8      	cmp	r8, r5
 80086fc:	d003      	beq.n	8008706 <_dtoa_r+0x42e>
 80086fe:	4641      	mov	r1, r8
 8008700:	4648      	mov	r0, r9
 8008702:	f000 fc87 	bl	8009014 <_Bfree>
 8008706:	4629      	mov	r1, r5
 8008708:	4648      	mov	r0, r9
 800870a:	f000 fc83 	bl	8009014 <_Bfree>
 800870e:	e093      	b.n	8008838 <_dtoa_r+0x560>
 8008710:	2202      	movs	r2, #2
 8008712:	e76c      	b.n	80085ee <_dtoa_r+0x316>
 8008714:	07cc      	lsls	r4, r1, #31
 8008716:	d504      	bpl.n	8008722 <_dtoa_r+0x44a>
 8008718:	ed90 6b00 	vldr	d6, [r0]
 800871c:	3201      	adds	r2, #1
 800871e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008722:	1049      	asrs	r1, r1, #1
 8008724:	3008      	adds	r0, #8
 8008726:	e763      	b.n	80085f0 <_dtoa_r+0x318>
 8008728:	d022      	beq.n	8008770 <_dtoa_r+0x498>
 800872a:	f1c8 0100 	rsb	r1, r8, #0
 800872e:	4a6d      	ldr	r2, [pc, #436]	@ (80088e4 <_dtoa_r+0x60c>)
 8008730:	f001 000f 	and.w	r0, r1, #15
 8008734:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008738:	ed92 7b00 	vldr	d7, [r2]
 800873c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008740:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008744:	4868      	ldr	r0, [pc, #416]	@ (80088e8 <_dtoa_r+0x610>)
 8008746:	1109      	asrs	r1, r1, #4
 8008748:	2400      	movs	r4, #0
 800874a:	2202      	movs	r2, #2
 800874c:	b929      	cbnz	r1, 800875a <_dtoa_r+0x482>
 800874e:	2c00      	cmp	r4, #0
 8008750:	f43f af57 	beq.w	8008602 <_dtoa_r+0x32a>
 8008754:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008758:	e753      	b.n	8008602 <_dtoa_r+0x32a>
 800875a:	07ce      	lsls	r6, r1, #31
 800875c:	d505      	bpl.n	800876a <_dtoa_r+0x492>
 800875e:	ed90 6b00 	vldr	d6, [r0]
 8008762:	3201      	adds	r2, #1
 8008764:	2401      	movs	r4, #1
 8008766:	ee27 7b06 	vmul.f64	d7, d7, d6
 800876a:	1049      	asrs	r1, r1, #1
 800876c:	3008      	adds	r0, #8
 800876e:	e7ed      	b.n	800874c <_dtoa_r+0x474>
 8008770:	2202      	movs	r2, #2
 8008772:	e746      	b.n	8008602 <_dtoa_r+0x32a>
 8008774:	f8cd 8014 	str.w	r8, [sp, #20]
 8008778:	4654      	mov	r4, sl
 800877a:	e762      	b.n	8008642 <_dtoa_r+0x36a>
 800877c:	4a59      	ldr	r2, [pc, #356]	@ (80088e4 <_dtoa_r+0x60c>)
 800877e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008782:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008786:	9a08      	ldr	r2, [sp, #32]
 8008788:	ec41 0b17 	vmov	d7, r0, r1
 800878c:	443c      	add	r4, r7
 800878e:	b34a      	cbz	r2, 80087e4 <_dtoa_r+0x50c>
 8008790:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008794:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008798:	463e      	mov	r6, r7
 800879a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800879e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80087a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087aa:	ee14 2a90 	vmov	r2, s9
 80087ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80087b2:	3230      	adds	r2, #48	@ 0x30
 80087b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80087b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c0:	f806 2b01 	strb.w	r2, [r6], #1
 80087c4:	d438      	bmi.n	8008838 <_dtoa_r+0x560>
 80087c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80087ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80087ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d2:	d46e      	bmi.n	80088b2 <_dtoa_r+0x5da>
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	f43f af5a 	beq.w	800868e <_dtoa_r+0x3b6>
 80087da:	ee27 7b03 	vmul.f64	d7, d7, d3
 80087de:	ee26 6b03 	vmul.f64	d6, d6, d3
 80087e2:	e7e0      	b.n	80087a6 <_dtoa_r+0x4ce>
 80087e4:	4621      	mov	r1, r4
 80087e6:	463e      	mov	r6, r7
 80087e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087ec:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80087f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087f4:	ee14 2a90 	vmov	r2, s9
 80087f8:	3230      	adds	r2, #48	@ 0x30
 80087fa:	f806 2b01 	strb.w	r2, [r6], #1
 80087fe:	42a6      	cmp	r6, r4
 8008800:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008804:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008808:	d119      	bne.n	800883e <_dtoa_r+0x566>
 800880a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800880e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008812:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881a:	dc4a      	bgt.n	80088b2 <_dtoa_r+0x5da>
 800881c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008820:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008828:	f57f af31 	bpl.w	800868e <_dtoa_r+0x3b6>
 800882c:	460e      	mov	r6, r1
 800882e:	3901      	subs	r1, #1
 8008830:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008834:	2b30      	cmp	r3, #48	@ 0x30
 8008836:	d0f9      	beq.n	800882c <_dtoa_r+0x554>
 8008838:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800883c:	e027      	b.n	800888e <_dtoa_r+0x5b6>
 800883e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008842:	e7d5      	b.n	80087f0 <_dtoa_r+0x518>
 8008844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008848:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800884c:	463e      	mov	r6, r7
 800884e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008852:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008856:	ee15 3a10 	vmov	r3, s10
 800885a:	3330      	adds	r3, #48	@ 0x30
 800885c:	f806 3b01 	strb.w	r3, [r6], #1
 8008860:	1bf3      	subs	r3, r6, r7
 8008862:	459a      	cmp	sl, r3
 8008864:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008868:	eea3 7b46 	vfms.f64	d7, d3, d6
 800886c:	d132      	bne.n	80088d4 <_dtoa_r+0x5fc>
 800886e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008872:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887a:	dc18      	bgt.n	80088ae <_dtoa_r+0x5d6>
 800887c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008884:	d103      	bne.n	800888e <_dtoa_r+0x5b6>
 8008886:	ee15 3a10 	vmov	r3, s10
 800888a:	07db      	lsls	r3, r3, #31
 800888c:	d40f      	bmi.n	80088ae <_dtoa_r+0x5d6>
 800888e:	9901      	ldr	r1, [sp, #4]
 8008890:	4648      	mov	r0, r9
 8008892:	f000 fbbf 	bl	8009014 <_Bfree>
 8008896:	2300      	movs	r3, #0
 8008898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800889a:	7033      	strb	r3, [r6, #0]
 800889c:	f108 0301 	add.w	r3, r8, #1
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 824b 	beq.w	8008d40 <_dtoa_r+0xa68>
 80088aa:	601e      	str	r6, [r3, #0]
 80088ac:	e248      	b.n	8008d40 <_dtoa_r+0xa68>
 80088ae:	f8cd 8014 	str.w	r8, [sp, #20]
 80088b2:	4633      	mov	r3, r6
 80088b4:	461e      	mov	r6, r3
 80088b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ba:	2a39      	cmp	r2, #57	@ 0x39
 80088bc:	d106      	bne.n	80088cc <_dtoa_r+0x5f4>
 80088be:	429f      	cmp	r7, r3
 80088c0:	d1f8      	bne.n	80088b4 <_dtoa_r+0x5dc>
 80088c2:	9a05      	ldr	r2, [sp, #20]
 80088c4:	3201      	adds	r2, #1
 80088c6:	9205      	str	r2, [sp, #20]
 80088c8:	2230      	movs	r2, #48	@ 0x30
 80088ca:	703a      	strb	r2, [r7, #0]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	3201      	adds	r2, #1
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	e7b1      	b.n	8008838 <_dtoa_r+0x560>
 80088d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80088d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e0:	d1b5      	bne.n	800884e <_dtoa_r+0x576>
 80088e2:	e7d4      	b.n	800888e <_dtoa_r+0x5b6>
 80088e4:	08009e50 	.word	0x08009e50
 80088e8:	08009e28 	.word	0x08009e28
 80088ec:	9908      	ldr	r1, [sp, #32]
 80088ee:	2900      	cmp	r1, #0
 80088f0:	f000 80e9 	beq.w	8008ac6 <_dtoa_r+0x7ee>
 80088f4:	9907      	ldr	r1, [sp, #28]
 80088f6:	2901      	cmp	r1, #1
 80088f8:	f300 80cb 	bgt.w	8008a92 <_dtoa_r+0x7ba>
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	f000 80c4 	beq.w	8008a8a <_dtoa_r+0x7b2>
 8008902:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008906:	9e04      	ldr	r6, [sp, #16]
 8008908:	461c      	mov	r4, r3
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	4413      	add	r3, r2
 8008910:	9304      	str	r3, [sp, #16]
 8008912:	9b06      	ldr	r3, [sp, #24]
 8008914:	2101      	movs	r1, #1
 8008916:	4413      	add	r3, r2
 8008918:	4648      	mov	r0, r9
 800891a:	9306      	str	r3, [sp, #24]
 800891c:	f000 fc2e 	bl	800917c <__i2b>
 8008920:	9b05      	ldr	r3, [sp, #20]
 8008922:	4605      	mov	r5, r0
 8008924:	b166      	cbz	r6, 8008940 <_dtoa_r+0x668>
 8008926:	9a06      	ldr	r2, [sp, #24]
 8008928:	2a00      	cmp	r2, #0
 800892a:	dd09      	ble.n	8008940 <_dtoa_r+0x668>
 800892c:	42b2      	cmp	r2, r6
 800892e:	9904      	ldr	r1, [sp, #16]
 8008930:	bfa8      	it	ge
 8008932:	4632      	movge	r2, r6
 8008934:	1a89      	subs	r1, r1, r2
 8008936:	9104      	str	r1, [sp, #16]
 8008938:	9906      	ldr	r1, [sp, #24]
 800893a:	1ab6      	subs	r6, r6, r2
 800893c:	1a8a      	subs	r2, r1, r2
 800893e:	9206      	str	r2, [sp, #24]
 8008940:	b30b      	cbz	r3, 8008986 <_dtoa_r+0x6ae>
 8008942:	9a08      	ldr	r2, [sp, #32]
 8008944:	2a00      	cmp	r2, #0
 8008946:	f000 80c5 	beq.w	8008ad4 <_dtoa_r+0x7fc>
 800894a:	2c00      	cmp	r4, #0
 800894c:	f000 80bf 	beq.w	8008ace <_dtoa_r+0x7f6>
 8008950:	4629      	mov	r1, r5
 8008952:	4622      	mov	r2, r4
 8008954:	4648      	mov	r0, r9
 8008956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008958:	f000 fcc8 	bl	80092ec <__pow5mult>
 800895c:	9a01      	ldr	r2, [sp, #4]
 800895e:	4601      	mov	r1, r0
 8008960:	4605      	mov	r5, r0
 8008962:	4648      	mov	r0, r9
 8008964:	f000 fc20 	bl	80091a8 <__multiply>
 8008968:	9901      	ldr	r1, [sp, #4]
 800896a:	9005      	str	r0, [sp, #20]
 800896c:	4648      	mov	r0, r9
 800896e:	f000 fb51 	bl	8009014 <_Bfree>
 8008972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008974:	1b1b      	subs	r3, r3, r4
 8008976:	f000 80b0 	beq.w	8008ada <_dtoa_r+0x802>
 800897a:	9905      	ldr	r1, [sp, #20]
 800897c:	461a      	mov	r2, r3
 800897e:	4648      	mov	r0, r9
 8008980:	f000 fcb4 	bl	80092ec <__pow5mult>
 8008984:	9001      	str	r0, [sp, #4]
 8008986:	2101      	movs	r1, #1
 8008988:	4648      	mov	r0, r9
 800898a:	f000 fbf7 	bl	800917c <__i2b>
 800898e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008990:	4604      	mov	r4, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 81da 	beq.w	8008d4c <_dtoa_r+0xa74>
 8008998:	461a      	mov	r2, r3
 800899a:	4601      	mov	r1, r0
 800899c:	4648      	mov	r0, r9
 800899e:	f000 fca5 	bl	80092ec <__pow5mult>
 80089a2:	9b07      	ldr	r3, [sp, #28]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	f300 80a0 	bgt.w	8008aec <_dtoa_r+0x814>
 80089ac:	9b02      	ldr	r3, [sp, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 8096 	bne.w	8008ae0 <_dtoa_r+0x808>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	f040 8092 	bne.w	8008ae4 <_dtoa_r+0x80c>
 80089c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80089c4:	0d12      	lsrs	r2, r2, #20
 80089c6:	0512      	lsls	r2, r2, #20
 80089c8:	2a00      	cmp	r2, #0
 80089ca:	f000 808d 	beq.w	8008ae8 <_dtoa_r+0x810>
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	3301      	adds	r3, #1
 80089d8:	9306      	str	r3, [sp, #24]
 80089da:	2301      	movs	r3, #1
 80089dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 81b9 	beq.w	8008d58 <_dtoa_r+0xa80>
 80089e6:	6922      	ldr	r2, [r4, #16]
 80089e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80089ec:	6910      	ldr	r0, [r2, #16]
 80089ee:	f000 fb79 	bl	80090e4 <__hi0bits>
 80089f2:	f1c0 0020 	rsb	r0, r0, #32
 80089f6:	9b06      	ldr	r3, [sp, #24]
 80089f8:	4418      	add	r0, r3
 80089fa:	f010 001f 	ands.w	r0, r0, #31
 80089fe:	f000 8081 	beq.w	8008b04 <_dtoa_r+0x82c>
 8008a02:	f1c0 0220 	rsb	r2, r0, #32
 8008a06:	2a04      	cmp	r2, #4
 8008a08:	dd73      	ble.n	8008af2 <_dtoa_r+0x81a>
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	f1c0 001c 	rsb	r0, r0, #28
 8008a10:	4403      	add	r3, r0
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	9b06      	ldr	r3, [sp, #24]
 8008a16:	4406      	add	r6, r0
 8008a18:	4403      	add	r3, r0
 8008a1a:	9306      	str	r3, [sp, #24]
 8008a1c:	9b04      	ldr	r3, [sp, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd05      	ble.n	8008a2e <_dtoa_r+0x756>
 8008a22:	9901      	ldr	r1, [sp, #4]
 8008a24:	461a      	mov	r2, r3
 8008a26:	4648      	mov	r0, r9
 8008a28:	f000 fcba 	bl	80093a0 <__lshift>
 8008a2c:	9001      	str	r0, [sp, #4]
 8008a2e:	9b06      	ldr	r3, [sp, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd05      	ble.n	8008a40 <_dtoa_r+0x768>
 8008a34:	4621      	mov	r1, r4
 8008a36:	461a      	mov	r2, r3
 8008a38:	4648      	mov	r0, r9
 8008a3a:	f000 fcb1 	bl	80093a0 <__lshift>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d060      	beq.n	8008b08 <_dtoa_r+0x830>
 8008a46:	9801      	ldr	r0, [sp, #4]
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f000 fd15 	bl	8009478 <__mcmp>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	da5a      	bge.n	8008b08 <_dtoa_r+0x830>
 8008a52:	f108 33ff 	add.w	r3, r8, #4294967295
 8008a56:	9305      	str	r3, [sp, #20]
 8008a58:	9901      	ldr	r1, [sp, #4]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	4648      	mov	r0, r9
 8008a60:	f000 fafa 	bl	8009058 <__multadd>
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	9001      	str	r0, [sp, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8177 	beq.w	8008d5c <_dtoa_r+0xa84>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	2300      	movs	r3, #0
 8008a72:	220a      	movs	r2, #10
 8008a74:	4648      	mov	r0, r9
 8008a76:	f000 faef 	bl	8009058 <__multadd>
 8008a7a:	f1bb 0f00 	cmp.w	fp, #0
 8008a7e:	4605      	mov	r5, r0
 8008a80:	dc6e      	bgt.n	8008b60 <_dtoa_r+0x888>
 8008a82:	9b07      	ldr	r3, [sp, #28]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	dc48      	bgt.n	8008b1a <_dtoa_r+0x842>
 8008a88:	e06a      	b.n	8008b60 <_dtoa_r+0x888>
 8008a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008a90:	e739      	b.n	8008906 <_dtoa_r+0x62e>
 8008a92:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	db07      	blt.n	8008aaa <_dtoa_r+0x7d2>
 8008a9a:	f1ba 0f00 	cmp.w	sl, #0
 8008a9e:	eba3 0404 	sub.w	r4, r3, r4
 8008aa2:	db0b      	blt.n	8008abc <_dtoa_r+0x7e4>
 8008aa4:	9e04      	ldr	r6, [sp, #16]
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	e72f      	b.n	800890a <_dtoa_r+0x632>
 8008aaa:	1ae2      	subs	r2, r4, r3
 8008aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aae:	9e04      	ldr	r6, [sp, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	2400      	movs	r4, #0
 8008aba:	e726      	b.n	800890a <_dtoa_r+0x632>
 8008abc:	9a04      	ldr	r2, [sp, #16]
 8008abe:	eba2 060a 	sub.w	r6, r2, sl
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	e721      	b.n	800890a <_dtoa_r+0x632>
 8008ac6:	9e04      	ldr	r6, [sp, #16]
 8008ac8:	9d08      	ldr	r5, [sp, #32]
 8008aca:	461c      	mov	r4, r3
 8008acc:	e72a      	b.n	8008924 <_dtoa_r+0x64c>
 8008ace:	9a01      	ldr	r2, [sp, #4]
 8008ad0:	9205      	str	r2, [sp, #20]
 8008ad2:	e752      	b.n	800897a <_dtoa_r+0x6a2>
 8008ad4:	9901      	ldr	r1, [sp, #4]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	e751      	b.n	800897e <_dtoa_r+0x6a6>
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	e752      	b.n	8008986 <_dtoa_r+0x6ae>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e77b      	b.n	80089dc <_dtoa_r+0x704>
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	e779      	b.n	80089dc <_dtoa_r+0x704>
 8008ae8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008aea:	e778      	b.n	80089de <_dtoa_r+0x706>
 8008aec:	2300      	movs	r3, #0
 8008aee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af0:	e779      	b.n	80089e6 <_dtoa_r+0x70e>
 8008af2:	d093      	beq.n	8008a1c <_dtoa_r+0x744>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	321c      	adds	r2, #28
 8008af8:	4413      	add	r3, r2
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	9b06      	ldr	r3, [sp, #24]
 8008afe:	4416      	add	r6, r2
 8008b00:	4413      	add	r3, r2
 8008b02:	e78a      	b.n	8008a1a <_dtoa_r+0x742>
 8008b04:	4602      	mov	r2, r0
 8008b06:	e7f5      	b.n	8008af4 <_dtoa_r+0x81c>
 8008b08:	f1ba 0f00 	cmp.w	sl, #0
 8008b0c:	f8cd 8014 	str.w	r8, [sp, #20]
 8008b10:	46d3      	mov	fp, sl
 8008b12:	dc21      	bgt.n	8008b58 <_dtoa_r+0x880>
 8008b14:	9b07      	ldr	r3, [sp, #28]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	dd1e      	ble.n	8008b58 <_dtoa_r+0x880>
 8008b1a:	f1bb 0f00 	cmp.w	fp, #0
 8008b1e:	f47f addc 	bne.w	80086da <_dtoa_r+0x402>
 8008b22:	4621      	mov	r1, r4
 8008b24:	465b      	mov	r3, fp
 8008b26:	2205      	movs	r2, #5
 8008b28:	4648      	mov	r0, r9
 8008b2a:	f000 fa95 	bl	8009058 <__multadd>
 8008b2e:	4601      	mov	r1, r0
 8008b30:	4604      	mov	r4, r0
 8008b32:	9801      	ldr	r0, [sp, #4]
 8008b34:	f000 fca0 	bl	8009478 <__mcmp>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f77f adce 	ble.w	80086da <_dtoa_r+0x402>
 8008b3e:	463e      	mov	r6, r7
 8008b40:	2331      	movs	r3, #49	@ 0x31
 8008b42:	f806 3b01 	strb.w	r3, [r6], #1
 8008b46:	9b05      	ldr	r3, [sp, #20]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	e5c9      	b.n	80086e2 <_dtoa_r+0x40a>
 8008b4e:	f8cd 8014 	str.w	r8, [sp, #20]
 8008b52:	4654      	mov	r4, sl
 8008b54:	4625      	mov	r5, r4
 8008b56:	e7f2      	b.n	8008b3e <_dtoa_r+0x866>
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8102 	beq.w	8008d64 <_dtoa_r+0xa8c>
 8008b60:	2e00      	cmp	r6, #0
 8008b62:	dd05      	ble.n	8008b70 <_dtoa_r+0x898>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4632      	mov	r2, r6
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f000 fc19 	bl	80093a0 <__lshift>
 8008b6e:	4605      	mov	r5, r0
 8008b70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d058      	beq.n	8008c28 <_dtoa_r+0x950>
 8008b76:	6869      	ldr	r1, [r5, #4]
 8008b78:	4648      	mov	r0, r9
 8008b7a:	f000 fa0b 	bl	8008f94 <_Balloc>
 8008b7e:	4606      	mov	r6, r0
 8008b80:	b928      	cbnz	r0, 8008b8e <_dtoa_r+0x8b6>
 8008b82:	4b82      	ldr	r3, [pc, #520]	@ (8008d8c <_dtoa_r+0xab4>)
 8008b84:	4602      	mov	r2, r0
 8008b86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b8a:	f7ff bbbe 	b.w	800830a <_dtoa_r+0x32>
 8008b8e:	692a      	ldr	r2, [r5, #16]
 8008b90:	3202      	adds	r2, #2
 8008b92:	0092      	lsls	r2, r2, #2
 8008b94:	f105 010c 	add.w	r1, r5, #12
 8008b98:	300c      	adds	r0, #12
 8008b9a:	f000 ff4b 	bl	8009a34 <memcpy>
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4648      	mov	r0, r9
 8008ba4:	f000 fbfc 	bl	80093a0 <__lshift>
 8008ba8:	1c7b      	adds	r3, r7, #1
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	eb07 030b 	add.w	r3, r7, fp
 8008bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	46a8      	mov	r8, r5
 8008bba:	9308      	str	r3, [sp, #32]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	9801      	ldr	r0, [sp, #4]
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f103 3bff 	add.w	fp, r3, #4294967295
 8008bc8:	f7ff fafd 	bl	80081c6 <quorem>
 8008bcc:	4641      	mov	r1, r8
 8008bce:	9002      	str	r0, [sp, #8]
 8008bd0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008bd4:	9801      	ldr	r0, [sp, #4]
 8008bd6:	f000 fc4f 	bl	8009478 <__mcmp>
 8008bda:	462a      	mov	r2, r5
 8008bdc:	9006      	str	r0, [sp, #24]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4648      	mov	r0, r9
 8008be2:	f000 fc65 	bl	80094b0 <__mdiff>
 8008be6:	68c2      	ldr	r2, [r0, #12]
 8008be8:	4606      	mov	r6, r0
 8008bea:	b9fa      	cbnz	r2, 8008c2c <_dtoa_r+0x954>
 8008bec:	4601      	mov	r1, r0
 8008bee:	9801      	ldr	r0, [sp, #4]
 8008bf0:	f000 fc42 	bl	8009478 <__mcmp>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	920a      	str	r2, [sp, #40]	@ 0x28
 8008bfc:	f000 fa0a 	bl	8009014 <_Bfree>
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c04:	9e04      	ldr	r6, [sp, #16]
 8008c06:	ea42 0103 	orr.w	r1, r2, r3
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	4319      	orrs	r1, r3
 8008c0e:	d10f      	bne.n	8008c30 <_dtoa_r+0x958>
 8008c10:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008c14:	d028      	beq.n	8008c68 <_dtoa_r+0x990>
 8008c16:	9b06      	ldr	r3, [sp, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dd02      	ble.n	8008c22 <_dtoa_r+0x94a>
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008c22:	f88b a000 	strb.w	sl, [fp]
 8008c26:	e55e      	b.n	80086e6 <_dtoa_r+0x40e>
 8008c28:	4628      	mov	r0, r5
 8008c2a:	e7bd      	b.n	8008ba8 <_dtoa_r+0x8d0>
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	e7e2      	b.n	8008bf6 <_dtoa_r+0x91e>
 8008c30:	9b06      	ldr	r3, [sp, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	db04      	blt.n	8008c40 <_dtoa_r+0x968>
 8008c36:	9907      	ldr	r1, [sp, #28]
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	9908      	ldr	r1, [sp, #32]
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	d120      	bne.n	8008c82 <_dtoa_r+0x9aa>
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	ddee      	ble.n	8008c22 <_dtoa_r+0x94a>
 8008c44:	9901      	ldr	r1, [sp, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	4648      	mov	r0, r9
 8008c4a:	f000 fba9 	bl	80093a0 <__lshift>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	9001      	str	r0, [sp, #4]
 8008c52:	f000 fc11 	bl	8009478 <__mcmp>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	dc03      	bgt.n	8008c62 <_dtoa_r+0x98a>
 8008c5a:	d1e2      	bne.n	8008c22 <_dtoa_r+0x94a>
 8008c5c:	f01a 0f01 	tst.w	sl, #1
 8008c60:	d0df      	beq.n	8008c22 <_dtoa_r+0x94a>
 8008c62:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008c66:	d1d9      	bne.n	8008c1c <_dtoa_r+0x944>
 8008c68:	2339      	movs	r3, #57	@ 0x39
 8008c6a:	f88b 3000 	strb.w	r3, [fp]
 8008c6e:	4633      	mov	r3, r6
 8008c70:	461e      	mov	r6, r3
 8008c72:	3b01      	subs	r3, #1
 8008c74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c78:	2a39      	cmp	r2, #57	@ 0x39
 8008c7a:	d052      	beq.n	8008d22 <_dtoa_r+0xa4a>
 8008c7c:	3201      	adds	r2, #1
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	e531      	b.n	80086e6 <_dtoa_r+0x40e>
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	dd07      	ble.n	8008c96 <_dtoa_r+0x9be>
 8008c86:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008c8a:	d0ed      	beq.n	8008c68 <_dtoa_r+0x990>
 8008c8c:	f10a 0301 	add.w	r3, sl, #1
 8008c90:	f88b 3000 	strb.w	r3, [fp]
 8008c94:	e527      	b.n	80086e6 <_dtoa_r+0x40e>
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c9a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d029      	beq.n	8008cf6 <_dtoa_r+0xa1e>
 8008ca2:	9901      	ldr	r1, [sp, #4]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	220a      	movs	r2, #10
 8008ca8:	4648      	mov	r0, r9
 8008caa:	f000 f9d5 	bl	8009058 <__multadd>
 8008cae:	45a8      	cmp	r8, r5
 8008cb0:	9001      	str	r0, [sp, #4]
 8008cb2:	f04f 0300 	mov.w	r3, #0
 8008cb6:	f04f 020a 	mov.w	r2, #10
 8008cba:	4641      	mov	r1, r8
 8008cbc:	4648      	mov	r0, r9
 8008cbe:	d107      	bne.n	8008cd0 <_dtoa_r+0x9f8>
 8008cc0:	f000 f9ca 	bl	8009058 <__multadd>
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	9b04      	ldr	r3, [sp, #16]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	e776      	b.n	8008bbe <_dtoa_r+0x8e6>
 8008cd0:	f000 f9c2 	bl	8009058 <__multadd>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	220a      	movs	r2, #10
 8008cdc:	4648      	mov	r0, r9
 8008cde:	f000 f9bb 	bl	8009058 <__multadd>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	e7f0      	b.n	8008cc8 <_dtoa_r+0x9f0>
 8008ce6:	f1bb 0f00 	cmp.w	fp, #0
 8008cea:	bfcc      	ite	gt
 8008cec:	465e      	movgt	r6, fp
 8008cee:	2601      	movle	r6, #1
 8008cf0:	443e      	add	r6, r7
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	f000 fb50 	bl	80093a0 <__lshift>
 8008d00:	4621      	mov	r1, r4
 8008d02:	9001      	str	r0, [sp, #4]
 8008d04:	f000 fbb8 	bl	8009478 <__mcmp>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dcb0      	bgt.n	8008c6e <_dtoa_r+0x996>
 8008d0c:	d102      	bne.n	8008d14 <_dtoa_r+0xa3c>
 8008d0e:	f01a 0f01 	tst.w	sl, #1
 8008d12:	d1ac      	bne.n	8008c6e <_dtoa_r+0x996>
 8008d14:	4633      	mov	r3, r6
 8008d16:	461e      	mov	r6, r3
 8008d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d1c:	2a30      	cmp	r2, #48	@ 0x30
 8008d1e:	d0fa      	beq.n	8008d16 <_dtoa_r+0xa3e>
 8008d20:	e4e1      	b.n	80086e6 <_dtoa_r+0x40e>
 8008d22:	429f      	cmp	r7, r3
 8008d24:	d1a4      	bne.n	8008c70 <_dtoa_r+0x998>
 8008d26:	9b05      	ldr	r3, [sp, #20]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	2331      	movs	r3, #49	@ 0x31
 8008d2e:	703b      	strb	r3, [r7, #0]
 8008d30:	e4d9      	b.n	80086e6 <_dtoa_r+0x40e>
 8008d32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d34:	4f16      	ldr	r7, [pc, #88]	@ (8008d90 <_dtoa_r+0xab8>)
 8008d36:	b11b      	cbz	r3, 8008d40 <_dtoa_r+0xa68>
 8008d38:	f107 0308 	add.w	r3, r7, #8
 8008d3c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	4638      	mov	r0, r7
 8008d42:	b011      	add	sp, #68	@ 0x44
 8008d44:	ecbd 8b02 	vpop	{d8}
 8008d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4c:	9b07      	ldr	r3, [sp, #28]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	f77f ae2c 	ble.w	80089ac <_dtoa_r+0x6d4>
 8008d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d58:	2001      	movs	r0, #1
 8008d5a:	e64c      	b.n	80089f6 <_dtoa_r+0x71e>
 8008d5c:	f1bb 0f00 	cmp.w	fp, #0
 8008d60:	f77f aed8 	ble.w	8008b14 <_dtoa_r+0x83c>
 8008d64:	463e      	mov	r6, r7
 8008d66:	9801      	ldr	r0, [sp, #4]
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f7ff fa2c 	bl	80081c6 <quorem>
 8008d6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008d72:	f806 ab01 	strb.w	sl, [r6], #1
 8008d76:	1bf2      	subs	r2, r6, r7
 8008d78:	4593      	cmp	fp, r2
 8008d7a:	ddb4      	ble.n	8008ce6 <_dtoa_r+0xa0e>
 8008d7c:	9901      	ldr	r1, [sp, #4]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	220a      	movs	r2, #10
 8008d82:	4648      	mov	r0, r9
 8008d84:	f000 f968 	bl	8009058 <__multadd>
 8008d88:	9001      	str	r0, [sp, #4]
 8008d8a:	e7ec      	b.n	8008d66 <_dtoa_r+0xa8e>
 8008d8c:	08009d54 	.word	0x08009d54
 8008d90:	08009cd8 	.word	0x08009cd8

08008d94 <_free_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4605      	mov	r5, r0
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	d041      	beq.n	8008e20 <_free_r+0x8c>
 8008d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008da0:	1f0c      	subs	r4, r1, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfb8      	it	lt
 8008da6:	18e4      	addlt	r4, r4, r3
 8008da8:	f000 f8e8 	bl	8008f7c <__malloc_lock>
 8008dac:	4a1d      	ldr	r2, [pc, #116]	@ (8008e24 <_free_r+0x90>)
 8008dae:	6813      	ldr	r3, [r2, #0]
 8008db0:	b933      	cbnz	r3, 8008dc0 <_free_r+0x2c>
 8008db2:	6063      	str	r3, [r4, #4]
 8008db4:	6014      	str	r4, [r2, #0]
 8008db6:	4628      	mov	r0, r5
 8008db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dbc:	f000 b8e4 	b.w	8008f88 <__malloc_unlock>
 8008dc0:	42a3      	cmp	r3, r4
 8008dc2:	d908      	bls.n	8008dd6 <_free_r+0x42>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	1821      	adds	r1, r4, r0
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	bf01      	itttt	eq
 8008dcc:	6819      	ldreq	r1, [r3, #0]
 8008dce:	685b      	ldreq	r3, [r3, #4]
 8008dd0:	1809      	addeq	r1, r1, r0
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	e7ed      	b.n	8008db2 <_free_r+0x1e>
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	b10b      	cbz	r3, 8008de0 <_free_r+0x4c>
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d9fa      	bls.n	8008dd6 <_free_r+0x42>
 8008de0:	6811      	ldr	r1, [r2, #0]
 8008de2:	1850      	adds	r0, r2, r1
 8008de4:	42a0      	cmp	r0, r4
 8008de6:	d10b      	bne.n	8008e00 <_free_r+0x6c>
 8008de8:	6820      	ldr	r0, [r4, #0]
 8008dea:	4401      	add	r1, r0
 8008dec:	1850      	adds	r0, r2, r1
 8008dee:	4283      	cmp	r3, r0
 8008df0:	6011      	str	r1, [r2, #0]
 8008df2:	d1e0      	bne.n	8008db6 <_free_r+0x22>
 8008df4:	6818      	ldr	r0, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	6053      	str	r3, [r2, #4]
 8008dfa:	4408      	add	r0, r1
 8008dfc:	6010      	str	r0, [r2, #0]
 8008dfe:	e7da      	b.n	8008db6 <_free_r+0x22>
 8008e00:	d902      	bls.n	8008e08 <_free_r+0x74>
 8008e02:	230c      	movs	r3, #12
 8008e04:	602b      	str	r3, [r5, #0]
 8008e06:	e7d6      	b.n	8008db6 <_free_r+0x22>
 8008e08:	6820      	ldr	r0, [r4, #0]
 8008e0a:	1821      	adds	r1, r4, r0
 8008e0c:	428b      	cmp	r3, r1
 8008e0e:	bf04      	itt	eq
 8008e10:	6819      	ldreq	r1, [r3, #0]
 8008e12:	685b      	ldreq	r3, [r3, #4]
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	bf04      	itt	eq
 8008e18:	1809      	addeq	r1, r1, r0
 8008e1a:	6021      	streq	r1, [r4, #0]
 8008e1c:	6054      	str	r4, [r2, #4]
 8008e1e:	e7ca      	b.n	8008db6 <_free_r+0x22>
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	240003f4 	.word	0x240003f4

08008e28 <malloc>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	@ (8008e34 <malloc+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f000 b825 	b.w	8008e7c <_malloc_r>
 8008e32:	bf00      	nop
 8008e34:	24000020 	.word	0x24000020

08008e38 <sbrk_aligned>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8008e78 <sbrk_aligned+0x40>)
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	6831      	ldr	r1, [r6, #0]
 8008e40:	4605      	mov	r5, r0
 8008e42:	b911      	cbnz	r1, 8008e4a <sbrk_aligned+0x12>
 8008e44:	f000 fde6 	bl	8009a14 <_sbrk_r>
 8008e48:	6030      	str	r0, [r6, #0]
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 fde1 	bl	8009a14 <_sbrk_r>
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	d103      	bne.n	8008e5e <sbrk_aligned+0x26>
 8008e56:	f04f 34ff 	mov.w	r4, #4294967295
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	bd70      	pop	{r4, r5, r6, pc}
 8008e5e:	1cc4      	adds	r4, r0, #3
 8008e60:	f024 0403 	bic.w	r4, r4, #3
 8008e64:	42a0      	cmp	r0, r4
 8008e66:	d0f8      	beq.n	8008e5a <sbrk_aligned+0x22>
 8008e68:	1a21      	subs	r1, r4, r0
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 fdd2 	bl	8009a14 <_sbrk_r>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d1f2      	bne.n	8008e5a <sbrk_aligned+0x22>
 8008e74:	e7ef      	b.n	8008e56 <sbrk_aligned+0x1e>
 8008e76:	bf00      	nop
 8008e78:	240003f0 	.word	0x240003f0

08008e7c <_malloc_r>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	1ccd      	adds	r5, r1, #3
 8008e82:	f025 0503 	bic.w	r5, r5, #3
 8008e86:	3508      	adds	r5, #8
 8008e88:	2d0c      	cmp	r5, #12
 8008e8a:	bf38      	it	cc
 8008e8c:	250c      	movcc	r5, #12
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	4606      	mov	r6, r0
 8008e92:	db01      	blt.n	8008e98 <_malloc_r+0x1c>
 8008e94:	42a9      	cmp	r1, r5
 8008e96:	d904      	bls.n	8008ea2 <_malloc_r+0x26>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f78 <_malloc_r+0xfc>
 8008ea6:	f000 f869 	bl	8008f7c <__malloc_lock>
 8008eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8008eae:	461c      	mov	r4, r3
 8008eb0:	bb44      	cbnz	r4, 8008f04 <_malloc_r+0x88>
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff ffbf 	bl	8008e38 <sbrk_aligned>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	d158      	bne.n	8008f72 <_malloc_r+0xf6>
 8008ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ec4:	4627      	mov	r7, r4
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d143      	bne.n	8008f52 <_malloc_r+0xd6>
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	d04b      	beq.n	8008f66 <_malloc_r+0xea>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	eb04 0903 	add.w	r9, r4, r3
 8008ed8:	f000 fd9c 	bl	8009a14 <_sbrk_r>
 8008edc:	4581      	cmp	r9, r0
 8008ede:	d142      	bne.n	8008f66 <_malloc_r+0xea>
 8008ee0:	6821      	ldr	r1, [r4, #0]
 8008ee2:	1a6d      	subs	r5, r5, r1
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ffa6 	bl	8008e38 <sbrk_aligned>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d03a      	beq.n	8008f66 <_malloc_r+0xea>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	442b      	add	r3, r5
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	bb62      	cbnz	r2, 8008f58 <_malloc_r+0xdc>
 8008efe:	f8c8 7000 	str.w	r7, [r8]
 8008f02:	e00f      	b.n	8008f24 <_malloc_r+0xa8>
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	1b52      	subs	r2, r2, r5
 8008f08:	d420      	bmi.n	8008f4c <_malloc_r+0xd0>
 8008f0a:	2a0b      	cmp	r2, #11
 8008f0c:	d917      	bls.n	8008f3e <_malloc_r+0xc2>
 8008f0e:	1961      	adds	r1, r4, r5
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	6025      	str	r5, [r4, #0]
 8008f14:	bf18      	it	ne
 8008f16:	6059      	strne	r1, [r3, #4]
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	bf08      	it	eq
 8008f1c:	f8c8 1000 	streq.w	r1, [r8]
 8008f20:	5162      	str	r2, [r4, r5]
 8008f22:	604b      	str	r3, [r1, #4]
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 f82f 	bl	8008f88 <__malloc_unlock>
 8008f2a:	f104 000b 	add.w	r0, r4, #11
 8008f2e:	1d23      	adds	r3, r4, #4
 8008f30:	f020 0007 	bic.w	r0, r0, #7
 8008f34:	1ac2      	subs	r2, r0, r3
 8008f36:	bf1c      	itt	ne
 8008f38:	1a1b      	subne	r3, r3, r0
 8008f3a:	50a3      	strne	r3, [r4, r2]
 8008f3c:	e7af      	b.n	8008e9e <_malloc_r+0x22>
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	bf0c      	ite	eq
 8008f44:	f8c8 2000 	streq.w	r2, [r8]
 8008f48:	605a      	strne	r2, [r3, #4]
 8008f4a:	e7eb      	b.n	8008f24 <_malloc_r+0xa8>
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	6864      	ldr	r4, [r4, #4]
 8008f50:	e7ae      	b.n	8008eb0 <_malloc_r+0x34>
 8008f52:	463c      	mov	r4, r7
 8008f54:	687f      	ldr	r7, [r7, #4]
 8008f56:	e7b6      	b.n	8008ec6 <_malloc_r+0x4a>
 8008f58:	461a      	mov	r2, r3
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d1fb      	bne.n	8008f58 <_malloc_r+0xdc>
 8008f60:	2300      	movs	r3, #0
 8008f62:	6053      	str	r3, [r2, #4]
 8008f64:	e7de      	b.n	8008f24 <_malloc_r+0xa8>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 f80c 	bl	8008f88 <__malloc_unlock>
 8008f70:	e794      	b.n	8008e9c <_malloc_r+0x20>
 8008f72:	6005      	str	r5, [r0, #0]
 8008f74:	e7d6      	b.n	8008f24 <_malloc_r+0xa8>
 8008f76:	bf00      	nop
 8008f78:	240003f4 	.word	0x240003f4

08008f7c <__malloc_lock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	@ (8008f84 <__malloc_lock+0x8>)
 8008f7e:	f7ff b920 	b.w	80081c2 <__retarget_lock_acquire_recursive>
 8008f82:	bf00      	nop
 8008f84:	240003ec 	.word	0x240003ec

08008f88 <__malloc_unlock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	@ (8008f90 <__malloc_unlock+0x8>)
 8008f8a:	f7ff b91b 	b.w	80081c4 <__retarget_lock_release_recursive>
 8008f8e:	bf00      	nop
 8008f90:	240003ec 	.word	0x240003ec

08008f94 <_Balloc>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	69c6      	ldr	r6, [r0, #28]
 8008f98:	4604      	mov	r4, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	b976      	cbnz	r6, 8008fbc <_Balloc+0x28>
 8008f9e:	2010      	movs	r0, #16
 8008fa0:	f7ff ff42 	bl	8008e28 <malloc>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	61e0      	str	r0, [r4, #28]
 8008fa8:	b920      	cbnz	r0, 8008fb4 <_Balloc+0x20>
 8008faa:	4b18      	ldr	r3, [pc, #96]	@ (800900c <_Balloc+0x78>)
 8008fac:	4818      	ldr	r0, [pc, #96]	@ (8009010 <_Balloc+0x7c>)
 8008fae:	216b      	movs	r1, #107	@ 0x6b
 8008fb0:	f000 fd4e 	bl	8009a50 <__assert_func>
 8008fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb8:	6006      	str	r6, [r0, #0]
 8008fba:	60c6      	str	r6, [r0, #12]
 8008fbc:	69e6      	ldr	r6, [r4, #28]
 8008fbe:	68f3      	ldr	r3, [r6, #12]
 8008fc0:	b183      	cbz	r3, 8008fe4 <_Balloc+0x50>
 8008fc2:	69e3      	ldr	r3, [r4, #28]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fca:	b9b8      	cbnz	r0, 8008ffc <_Balloc+0x68>
 8008fcc:	2101      	movs	r1, #1
 8008fce:	fa01 f605 	lsl.w	r6, r1, r5
 8008fd2:	1d72      	adds	r2, r6, #5
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 fd58 	bl	8009a8c <_calloc_r>
 8008fdc:	b160      	cbz	r0, 8008ff8 <_Balloc+0x64>
 8008fde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fe2:	e00e      	b.n	8009002 <_Balloc+0x6e>
 8008fe4:	2221      	movs	r2, #33	@ 0x21
 8008fe6:	2104      	movs	r1, #4
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fd4f 	bl	8009a8c <_calloc_r>
 8008fee:	69e3      	ldr	r3, [r4, #28]
 8008ff0:	60f0      	str	r0, [r6, #12]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e4      	bne.n	8008fc2 <_Balloc+0x2e>
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	6802      	ldr	r2, [r0, #0]
 8008ffe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009002:	2300      	movs	r3, #0
 8009004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009008:	e7f7      	b.n	8008ffa <_Balloc+0x66>
 800900a:	bf00      	nop
 800900c:	08009ce5 	.word	0x08009ce5
 8009010:	08009d65 	.word	0x08009d65

08009014 <_Bfree>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	69c6      	ldr	r6, [r0, #28]
 8009018:	4605      	mov	r5, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b976      	cbnz	r6, 800903c <_Bfree+0x28>
 800901e:	2010      	movs	r0, #16
 8009020:	f7ff ff02 	bl	8008e28 <malloc>
 8009024:	4602      	mov	r2, r0
 8009026:	61e8      	str	r0, [r5, #28]
 8009028:	b920      	cbnz	r0, 8009034 <_Bfree+0x20>
 800902a:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <_Bfree+0x3c>)
 800902c:	4809      	ldr	r0, [pc, #36]	@ (8009054 <_Bfree+0x40>)
 800902e:	218f      	movs	r1, #143	@ 0x8f
 8009030:	f000 fd0e 	bl	8009a50 <__assert_func>
 8009034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009038:	6006      	str	r6, [r0, #0]
 800903a:	60c6      	str	r6, [r0, #12]
 800903c:	b13c      	cbz	r4, 800904e <_Bfree+0x3a>
 800903e:	69eb      	ldr	r3, [r5, #28]
 8009040:	6862      	ldr	r2, [r4, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009048:	6021      	str	r1, [r4, #0]
 800904a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	08009ce5 	.word	0x08009ce5
 8009054:	08009d65 	.word	0x08009d65

08009058 <__multadd>:
 8009058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905c:	690d      	ldr	r5, [r1, #16]
 800905e:	4607      	mov	r7, r0
 8009060:	460c      	mov	r4, r1
 8009062:	461e      	mov	r6, r3
 8009064:	f101 0c14 	add.w	ip, r1, #20
 8009068:	2000      	movs	r0, #0
 800906a:	f8dc 3000 	ldr.w	r3, [ip]
 800906e:	b299      	uxth	r1, r3
 8009070:	fb02 6101 	mla	r1, r2, r1, r6
 8009074:	0c1e      	lsrs	r6, r3, #16
 8009076:	0c0b      	lsrs	r3, r1, #16
 8009078:	fb02 3306 	mla	r3, r2, r6, r3
 800907c:	b289      	uxth	r1, r1
 800907e:	3001      	adds	r0, #1
 8009080:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009084:	4285      	cmp	r5, r0
 8009086:	f84c 1b04 	str.w	r1, [ip], #4
 800908a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800908e:	dcec      	bgt.n	800906a <__multadd+0x12>
 8009090:	b30e      	cbz	r6, 80090d6 <__multadd+0x7e>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	42ab      	cmp	r3, r5
 8009096:	dc19      	bgt.n	80090cc <__multadd+0x74>
 8009098:	6861      	ldr	r1, [r4, #4]
 800909a:	4638      	mov	r0, r7
 800909c:	3101      	adds	r1, #1
 800909e:	f7ff ff79 	bl	8008f94 <_Balloc>
 80090a2:	4680      	mov	r8, r0
 80090a4:	b928      	cbnz	r0, 80090b2 <__multadd+0x5a>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b0c      	ldr	r3, [pc, #48]	@ (80090dc <__multadd+0x84>)
 80090aa:	480d      	ldr	r0, [pc, #52]	@ (80090e0 <__multadd+0x88>)
 80090ac:	21ba      	movs	r1, #186	@ 0xba
 80090ae:	f000 fccf 	bl	8009a50 <__assert_func>
 80090b2:	6922      	ldr	r2, [r4, #16]
 80090b4:	3202      	adds	r2, #2
 80090b6:	f104 010c 	add.w	r1, r4, #12
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	300c      	adds	r0, #12
 80090be:	f000 fcb9 	bl	8009a34 <memcpy>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff ffa5 	bl	8009014 <_Bfree>
 80090ca:	4644      	mov	r4, r8
 80090cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090d0:	3501      	adds	r5, #1
 80090d2:	615e      	str	r6, [r3, #20]
 80090d4:	6125      	str	r5, [r4, #16]
 80090d6:	4620      	mov	r0, r4
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090dc:	08009d54 	.word	0x08009d54
 80090e0:	08009d65 	.word	0x08009d65

080090e4 <__hi0bits>:
 80090e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090e8:	4603      	mov	r3, r0
 80090ea:	bf36      	itet	cc
 80090ec:	0403      	lslcc	r3, r0, #16
 80090ee:	2000      	movcs	r0, #0
 80090f0:	2010      	movcc	r0, #16
 80090f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090f6:	bf3c      	itt	cc
 80090f8:	021b      	lslcc	r3, r3, #8
 80090fa:	3008      	addcc	r0, #8
 80090fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009100:	bf3c      	itt	cc
 8009102:	011b      	lslcc	r3, r3, #4
 8009104:	3004      	addcc	r0, #4
 8009106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800910a:	bf3c      	itt	cc
 800910c:	009b      	lslcc	r3, r3, #2
 800910e:	3002      	addcc	r0, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	db05      	blt.n	8009120 <__hi0bits+0x3c>
 8009114:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009118:	f100 0001 	add.w	r0, r0, #1
 800911c:	bf08      	it	eq
 800911e:	2020      	moveq	r0, #32
 8009120:	4770      	bx	lr

08009122 <__lo0bits>:
 8009122:	6803      	ldr	r3, [r0, #0]
 8009124:	4602      	mov	r2, r0
 8009126:	f013 0007 	ands.w	r0, r3, #7
 800912a:	d00b      	beq.n	8009144 <__lo0bits+0x22>
 800912c:	07d9      	lsls	r1, r3, #31
 800912e:	d421      	bmi.n	8009174 <__lo0bits+0x52>
 8009130:	0798      	lsls	r0, r3, #30
 8009132:	bf49      	itett	mi
 8009134:	085b      	lsrmi	r3, r3, #1
 8009136:	089b      	lsrpl	r3, r3, #2
 8009138:	2001      	movmi	r0, #1
 800913a:	6013      	strmi	r3, [r2, #0]
 800913c:	bf5c      	itt	pl
 800913e:	6013      	strpl	r3, [r2, #0]
 8009140:	2002      	movpl	r0, #2
 8009142:	4770      	bx	lr
 8009144:	b299      	uxth	r1, r3
 8009146:	b909      	cbnz	r1, 800914c <__lo0bits+0x2a>
 8009148:	0c1b      	lsrs	r3, r3, #16
 800914a:	2010      	movs	r0, #16
 800914c:	b2d9      	uxtb	r1, r3
 800914e:	b909      	cbnz	r1, 8009154 <__lo0bits+0x32>
 8009150:	3008      	adds	r0, #8
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	0719      	lsls	r1, r3, #28
 8009156:	bf04      	itt	eq
 8009158:	091b      	lsreq	r3, r3, #4
 800915a:	3004      	addeq	r0, #4
 800915c:	0799      	lsls	r1, r3, #30
 800915e:	bf04      	itt	eq
 8009160:	089b      	lsreq	r3, r3, #2
 8009162:	3002      	addeq	r0, #2
 8009164:	07d9      	lsls	r1, r3, #31
 8009166:	d403      	bmi.n	8009170 <__lo0bits+0x4e>
 8009168:	085b      	lsrs	r3, r3, #1
 800916a:	f100 0001 	add.w	r0, r0, #1
 800916e:	d003      	beq.n	8009178 <__lo0bits+0x56>
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	4770      	bx	lr
 8009174:	2000      	movs	r0, #0
 8009176:	4770      	bx	lr
 8009178:	2020      	movs	r0, #32
 800917a:	4770      	bx	lr

0800917c <__i2b>:
 800917c:	b510      	push	{r4, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	2101      	movs	r1, #1
 8009182:	f7ff ff07 	bl	8008f94 <_Balloc>
 8009186:	4602      	mov	r2, r0
 8009188:	b928      	cbnz	r0, 8009196 <__i2b+0x1a>
 800918a:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <__i2b+0x24>)
 800918c:	4805      	ldr	r0, [pc, #20]	@ (80091a4 <__i2b+0x28>)
 800918e:	f240 1145 	movw	r1, #325	@ 0x145
 8009192:	f000 fc5d 	bl	8009a50 <__assert_func>
 8009196:	2301      	movs	r3, #1
 8009198:	6144      	str	r4, [r0, #20]
 800919a:	6103      	str	r3, [r0, #16]
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	08009d54 	.word	0x08009d54
 80091a4:	08009d65 	.word	0x08009d65

080091a8 <__multiply>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	4617      	mov	r7, r2
 80091ae:	690a      	ldr	r2, [r1, #16]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	bfa8      	it	ge
 80091b6:	463b      	movge	r3, r7
 80091b8:	4689      	mov	r9, r1
 80091ba:	bfa4      	itt	ge
 80091bc:	460f      	movge	r7, r1
 80091be:	4699      	movge	r9, r3
 80091c0:	693d      	ldr	r5, [r7, #16]
 80091c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	eb05 060a 	add.w	r6, r5, sl
 80091ce:	42b3      	cmp	r3, r6
 80091d0:	b085      	sub	sp, #20
 80091d2:	bfb8      	it	lt
 80091d4:	3101      	addlt	r1, #1
 80091d6:	f7ff fedd 	bl	8008f94 <_Balloc>
 80091da:	b930      	cbnz	r0, 80091ea <__multiply+0x42>
 80091dc:	4602      	mov	r2, r0
 80091de:	4b41      	ldr	r3, [pc, #260]	@ (80092e4 <__multiply+0x13c>)
 80091e0:	4841      	ldr	r0, [pc, #260]	@ (80092e8 <__multiply+0x140>)
 80091e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091e6:	f000 fc33 	bl	8009a50 <__assert_func>
 80091ea:	f100 0414 	add.w	r4, r0, #20
 80091ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80091f2:	4623      	mov	r3, r4
 80091f4:	2200      	movs	r2, #0
 80091f6:	4573      	cmp	r3, lr
 80091f8:	d320      	bcc.n	800923c <__multiply+0x94>
 80091fa:	f107 0814 	add.w	r8, r7, #20
 80091fe:	f109 0114 	add.w	r1, r9, #20
 8009202:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009206:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800920a:	9302      	str	r3, [sp, #8]
 800920c:	1beb      	subs	r3, r5, r7
 800920e:	3b15      	subs	r3, #21
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	3304      	adds	r3, #4
 8009216:	3715      	adds	r7, #21
 8009218:	42bd      	cmp	r5, r7
 800921a:	bf38      	it	cc
 800921c:	2304      	movcc	r3, #4
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	9b02      	ldr	r3, [sp, #8]
 8009222:	9103      	str	r1, [sp, #12]
 8009224:	428b      	cmp	r3, r1
 8009226:	d80c      	bhi.n	8009242 <__multiply+0x9a>
 8009228:	2e00      	cmp	r6, #0
 800922a:	dd03      	ble.n	8009234 <__multiply+0x8c>
 800922c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009230:	2b00      	cmp	r3, #0
 8009232:	d055      	beq.n	80092e0 <__multiply+0x138>
 8009234:	6106      	str	r6, [r0, #16]
 8009236:	b005      	add	sp, #20
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	f843 2b04 	str.w	r2, [r3], #4
 8009240:	e7d9      	b.n	80091f6 <__multiply+0x4e>
 8009242:	f8b1 a000 	ldrh.w	sl, [r1]
 8009246:	f1ba 0f00 	cmp.w	sl, #0
 800924a:	d01f      	beq.n	800928c <__multiply+0xe4>
 800924c:	46c4      	mov	ip, r8
 800924e:	46a1      	mov	r9, r4
 8009250:	2700      	movs	r7, #0
 8009252:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009256:	f8d9 3000 	ldr.w	r3, [r9]
 800925a:	fa1f fb82 	uxth.w	fp, r2
 800925e:	b29b      	uxth	r3, r3
 8009260:	fb0a 330b 	mla	r3, sl, fp, r3
 8009264:	443b      	add	r3, r7
 8009266:	f8d9 7000 	ldr.w	r7, [r9]
 800926a:	0c12      	lsrs	r2, r2, #16
 800926c:	0c3f      	lsrs	r7, r7, #16
 800926e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009272:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009276:	b29b      	uxth	r3, r3
 8009278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800927c:	4565      	cmp	r5, ip
 800927e:	f849 3b04 	str.w	r3, [r9], #4
 8009282:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009286:	d8e4      	bhi.n	8009252 <__multiply+0xaa>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	50e7      	str	r7, [r4, r3]
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009292:	3104      	adds	r1, #4
 8009294:	f1b9 0f00 	cmp.w	r9, #0
 8009298:	d020      	beq.n	80092dc <__multiply+0x134>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	4647      	mov	r7, r8
 800929e:	46a4      	mov	ip, r4
 80092a0:	f04f 0a00 	mov.w	sl, #0
 80092a4:	f8b7 b000 	ldrh.w	fp, [r7]
 80092a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80092ac:	fb09 220b 	mla	r2, r9, fp, r2
 80092b0:	4452      	add	r2, sl
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092b8:	f84c 3b04 	str.w	r3, [ip], #4
 80092bc:	f857 3b04 	ldr.w	r3, [r7], #4
 80092c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092c4:	f8bc 3000 	ldrh.w	r3, [ip]
 80092c8:	fb09 330a 	mla	r3, r9, sl, r3
 80092cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80092d0:	42bd      	cmp	r5, r7
 80092d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092d6:	d8e5      	bhi.n	80092a4 <__multiply+0xfc>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	50a3      	str	r3, [r4, r2]
 80092dc:	3404      	adds	r4, #4
 80092de:	e79f      	b.n	8009220 <__multiply+0x78>
 80092e0:	3e01      	subs	r6, #1
 80092e2:	e7a1      	b.n	8009228 <__multiply+0x80>
 80092e4:	08009d54 	.word	0x08009d54
 80092e8:	08009d65 	.word	0x08009d65

080092ec <__pow5mult>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	4615      	mov	r5, r2
 80092f2:	f012 0203 	ands.w	r2, r2, #3
 80092f6:	4607      	mov	r7, r0
 80092f8:	460e      	mov	r6, r1
 80092fa:	d007      	beq.n	800930c <__pow5mult+0x20>
 80092fc:	4c25      	ldr	r4, [pc, #148]	@ (8009394 <__pow5mult+0xa8>)
 80092fe:	3a01      	subs	r2, #1
 8009300:	2300      	movs	r3, #0
 8009302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009306:	f7ff fea7 	bl	8009058 <__multadd>
 800930a:	4606      	mov	r6, r0
 800930c:	10ad      	asrs	r5, r5, #2
 800930e:	d03d      	beq.n	800938c <__pow5mult+0xa0>
 8009310:	69fc      	ldr	r4, [r7, #28]
 8009312:	b97c      	cbnz	r4, 8009334 <__pow5mult+0x48>
 8009314:	2010      	movs	r0, #16
 8009316:	f7ff fd87 	bl	8008e28 <malloc>
 800931a:	4602      	mov	r2, r0
 800931c:	61f8      	str	r0, [r7, #28]
 800931e:	b928      	cbnz	r0, 800932c <__pow5mult+0x40>
 8009320:	4b1d      	ldr	r3, [pc, #116]	@ (8009398 <__pow5mult+0xac>)
 8009322:	481e      	ldr	r0, [pc, #120]	@ (800939c <__pow5mult+0xb0>)
 8009324:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009328:	f000 fb92 	bl	8009a50 <__assert_func>
 800932c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009330:	6004      	str	r4, [r0, #0]
 8009332:	60c4      	str	r4, [r0, #12]
 8009334:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800933c:	b94c      	cbnz	r4, 8009352 <__pow5mult+0x66>
 800933e:	f240 2171 	movw	r1, #625	@ 0x271
 8009342:	4638      	mov	r0, r7
 8009344:	f7ff ff1a 	bl	800917c <__i2b>
 8009348:	2300      	movs	r3, #0
 800934a:	f8c8 0008 	str.w	r0, [r8, #8]
 800934e:	4604      	mov	r4, r0
 8009350:	6003      	str	r3, [r0, #0]
 8009352:	f04f 0900 	mov.w	r9, #0
 8009356:	07eb      	lsls	r3, r5, #31
 8009358:	d50a      	bpl.n	8009370 <__pow5mult+0x84>
 800935a:	4631      	mov	r1, r6
 800935c:	4622      	mov	r2, r4
 800935e:	4638      	mov	r0, r7
 8009360:	f7ff ff22 	bl	80091a8 <__multiply>
 8009364:	4631      	mov	r1, r6
 8009366:	4680      	mov	r8, r0
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff fe53 	bl	8009014 <_Bfree>
 800936e:	4646      	mov	r6, r8
 8009370:	106d      	asrs	r5, r5, #1
 8009372:	d00b      	beq.n	800938c <__pow5mult+0xa0>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	b938      	cbnz	r0, 8009388 <__pow5mult+0x9c>
 8009378:	4622      	mov	r2, r4
 800937a:	4621      	mov	r1, r4
 800937c:	4638      	mov	r0, r7
 800937e:	f7ff ff13 	bl	80091a8 <__multiply>
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	f8c0 9000 	str.w	r9, [r0]
 8009388:	4604      	mov	r4, r0
 800938a:	e7e4      	b.n	8009356 <__pow5mult+0x6a>
 800938c:	4630      	mov	r0, r6
 800938e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009392:	bf00      	nop
 8009394:	08009e18 	.word	0x08009e18
 8009398:	08009ce5 	.word	0x08009ce5
 800939c:	08009d65 	.word	0x08009d65

080093a0 <__lshift>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	460c      	mov	r4, r1
 80093a6:	6849      	ldr	r1, [r1, #4]
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	4607      	mov	r7, r0
 80093b2:	4691      	mov	r9, r2
 80093b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093b8:	f108 0601 	add.w	r6, r8, #1
 80093bc:	42b3      	cmp	r3, r6
 80093be:	db0b      	blt.n	80093d8 <__lshift+0x38>
 80093c0:	4638      	mov	r0, r7
 80093c2:	f7ff fde7 	bl	8008f94 <_Balloc>
 80093c6:	4605      	mov	r5, r0
 80093c8:	b948      	cbnz	r0, 80093de <__lshift+0x3e>
 80093ca:	4602      	mov	r2, r0
 80093cc:	4b28      	ldr	r3, [pc, #160]	@ (8009470 <__lshift+0xd0>)
 80093ce:	4829      	ldr	r0, [pc, #164]	@ (8009474 <__lshift+0xd4>)
 80093d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093d4:	f000 fb3c 	bl	8009a50 <__assert_func>
 80093d8:	3101      	adds	r1, #1
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	e7ee      	b.n	80093bc <__lshift+0x1c>
 80093de:	2300      	movs	r3, #0
 80093e0:	f100 0114 	add.w	r1, r0, #20
 80093e4:	f100 0210 	add.w	r2, r0, #16
 80093e8:	4618      	mov	r0, r3
 80093ea:	4553      	cmp	r3, sl
 80093ec:	db33      	blt.n	8009456 <__lshift+0xb6>
 80093ee:	6920      	ldr	r0, [r4, #16]
 80093f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093f4:	f104 0314 	add.w	r3, r4, #20
 80093f8:	f019 091f 	ands.w	r9, r9, #31
 80093fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009404:	d02b      	beq.n	800945e <__lshift+0xbe>
 8009406:	f1c9 0e20 	rsb	lr, r9, #32
 800940a:	468a      	mov	sl, r1
 800940c:	2200      	movs	r2, #0
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	fa00 f009 	lsl.w	r0, r0, r9
 8009414:	4310      	orrs	r0, r2
 8009416:	f84a 0b04 	str.w	r0, [sl], #4
 800941a:	f853 2b04 	ldr.w	r2, [r3], #4
 800941e:	459c      	cmp	ip, r3
 8009420:	fa22 f20e 	lsr.w	r2, r2, lr
 8009424:	d8f3      	bhi.n	800940e <__lshift+0x6e>
 8009426:	ebac 0304 	sub.w	r3, ip, r4
 800942a:	3b15      	subs	r3, #21
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	3304      	adds	r3, #4
 8009432:	f104 0015 	add.w	r0, r4, #21
 8009436:	4560      	cmp	r0, ip
 8009438:	bf88      	it	hi
 800943a:	2304      	movhi	r3, #4
 800943c:	50ca      	str	r2, [r1, r3]
 800943e:	b10a      	cbz	r2, 8009444 <__lshift+0xa4>
 8009440:	f108 0602 	add.w	r6, r8, #2
 8009444:	3e01      	subs	r6, #1
 8009446:	4638      	mov	r0, r7
 8009448:	612e      	str	r6, [r5, #16]
 800944a:	4621      	mov	r1, r4
 800944c:	f7ff fde2 	bl	8009014 <_Bfree>
 8009450:	4628      	mov	r0, r5
 8009452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009456:	f842 0f04 	str.w	r0, [r2, #4]!
 800945a:	3301      	adds	r3, #1
 800945c:	e7c5      	b.n	80093ea <__lshift+0x4a>
 800945e:	3904      	subs	r1, #4
 8009460:	f853 2b04 	ldr.w	r2, [r3], #4
 8009464:	f841 2f04 	str.w	r2, [r1, #4]!
 8009468:	459c      	cmp	ip, r3
 800946a:	d8f9      	bhi.n	8009460 <__lshift+0xc0>
 800946c:	e7ea      	b.n	8009444 <__lshift+0xa4>
 800946e:	bf00      	nop
 8009470:	08009d54 	.word	0x08009d54
 8009474:	08009d65 	.word	0x08009d65

08009478 <__mcmp>:
 8009478:	690a      	ldr	r2, [r1, #16]
 800947a:	4603      	mov	r3, r0
 800947c:	6900      	ldr	r0, [r0, #16]
 800947e:	1a80      	subs	r0, r0, r2
 8009480:	b530      	push	{r4, r5, lr}
 8009482:	d10e      	bne.n	80094a2 <__mcmp+0x2a>
 8009484:	3314      	adds	r3, #20
 8009486:	3114      	adds	r1, #20
 8009488:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800948c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009498:	4295      	cmp	r5, r2
 800949a:	d003      	beq.n	80094a4 <__mcmp+0x2c>
 800949c:	d205      	bcs.n	80094aa <__mcmp+0x32>
 800949e:	f04f 30ff 	mov.w	r0, #4294967295
 80094a2:	bd30      	pop	{r4, r5, pc}
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	d3f3      	bcc.n	8009490 <__mcmp+0x18>
 80094a8:	e7fb      	b.n	80094a2 <__mcmp+0x2a>
 80094aa:	2001      	movs	r0, #1
 80094ac:	e7f9      	b.n	80094a2 <__mcmp+0x2a>
	...

080094b0 <__mdiff>:
 80094b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	4689      	mov	r9, r1
 80094b6:	4606      	mov	r6, r0
 80094b8:	4611      	mov	r1, r2
 80094ba:	4648      	mov	r0, r9
 80094bc:	4614      	mov	r4, r2
 80094be:	f7ff ffdb 	bl	8009478 <__mcmp>
 80094c2:	1e05      	subs	r5, r0, #0
 80094c4:	d112      	bne.n	80094ec <__mdiff+0x3c>
 80094c6:	4629      	mov	r1, r5
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff fd63 	bl	8008f94 <_Balloc>
 80094ce:	4602      	mov	r2, r0
 80094d0:	b928      	cbnz	r0, 80094de <__mdiff+0x2e>
 80094d2:	4b3f      	ldr	r3, [pc, #252]	@ (80095d0 <__mdiff+0x120>)
 80094d4:	f240 2137 	movw	r1, #567	@ 0x237
 80094d8:	483e      	ldr	r0, [pc, #248]	@ (80095d4 <__mdiff+0x124>)
 80094da:	f000 fab9 	bl	8009a50 <__assert_func>
 80094de:	2301      	movs	r3, #1
 80094e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094e4:	4610      	mov	r0, r2
 80094e6:	b003      	add	sp, #12
 80094e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ec:	bfbc      	itt	lt
 80094ee:	464b      	movlt	r3, r9
 80094f0:	46a1      	movlt	r9, r4
 80094f2:	4630      	mov	r0, r6
 80094f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094f8:	bfba      	itte	lt
 80094fa:	461c      	movlt	r4, r3
 80094fc:	2501      	movlt	r5, #1
 80094fe:	2500      	movge	r5, #0
 8009500:	f7ff fd48 	bl	8008f94 <_Balloc>
 8009504:	4602      	mov	r2, r0
 8009506:	b918      	cbnz	r0, 8009510 <__mdiff+0x60>
 8009508:	4b31      	ldr	r3, [pc, #196]	@ (80095d0 <__mdiff+0x120>)
 800950a:	f240 2145 	movw	r1, #581	@ 0x245
 800950e:	e7e3      	b.n	80094d8 <__mdiff+0x28>
 8009510:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009514:	6926      	ldr	r6, [r4, #16]
 8009516:	60c5      	str	r5, [r0, #12]
 8009518:	f109 0310 	add.w	r3, r9, #16
 800951c:	f109 0514 	add.w	r5, r9, #20
 8009520:	f104 0e14 	add.w	lr, r4, #20
 8009524:	f100 0b14 	add.w	fp, r0, #20
 8009528:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800952c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	46d9      	mov	r9, fp
 8009534:	f04f 0c00 	mov.w	ip, #0
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800953e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	fa1f f38a 	uxth.w	r3, sl
 8009548:	4619      	mov	r1, r3
 800954a:	b283      	uxth	r3, r0
 800954c:	1acb      	subs	r3, r1, r3
 800954e:	0c00      	lsrs	r0, r0, #16
 8009550:	4463      	add	r3, ip
 8009552:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009556:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800955a:	b29b      	uxth	r3, r3
 800955c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009560:	4576      	cmp	r6, lr
 8009562:	f849 3b04 	str.w	r3, [r9], #4
 8009566:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800956a:	d8e5      	bhi.n	8009538 <__mdiff+0x88>
 800956c:	1b33      	subs	r3, r6, r4
 800956e:	3b15      	subs	r3, #21
 8009570:	f023 0303 	bic.w	r3, r3, #3
 8009574:	3415      	adds	r4, #21
 8009576:	3304      	adds	r3, #4
 8009578:	42a6      	cmp	r6, r4
 800957a:	bf38      	it	cc
 800957c:	2304      	movcc	r3, #4
 800957e:	441d      	add	r5, r3
 8009580:	445b      	add	r3, fp
 8009582:	461e      	mov	r6, r3
 8009584:	462c      	mov	r4, r5
 8009586:	4544      	cmp	r4, r8
 8009588:	d30e      	bcc.n	80095a8 <__mdiff+0xf8>
 800958a:	f108 0103 	add.w	r1, r8, #3
 800958e:	1b49      	subs	r1, r1, r5
 8009590:	f021 0103 	bic.w	r1, r1, #3
 8009594:	3d03      	subs	r5, #3
 8009596:	45a8      	cmp	r8, r5
 8009598:	bf38      	it	cc
 800959a:	2100      	movcc	r1, #0
 800959c:	440b      	add	r3, r1
 800959e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095a2:	b191      	cbz	r1, 80095ca <__mdiff+0x11a>
 80095a4:	6117      	str	r7, [r2, #16]
 80095a6:	e79d      	b.n	80094e4 <__mdiff+0x34>
 80095a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80095ac:	46e6      	mov	lr, ip
 80095ae:	0c08      	lsrs	r0, r1, #16
 80095b0:	fa1c fc81 	uxtah	ip, ip, r1
 80095b4:	4471      	add	r1, lr
 80095b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095ba:	b289      	uxth	r1, r1
 80095bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095c0:	f846 1b04 	str.w	r1, [r6], #4
 80095c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095c8:	e7dd      	b.n	8009586 <__mdiff+0xd6>
 80095ca:	3f01      	subs	r7, #1
 80095cc:	e7e7      	b.n	800959e <__mdiff+0xee>
 80095ce:	bf00      	nop
 80095d0:	08009d54 	.word	0x08009d54
 80095d4:	08009d65 	.word	0x08009d65

080095d8 <__d2b>:
 80095d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	460f      	mov	r7, r1
 80095de:	2101      	movs	r1, #1
 80095e0:	ec59 8b10 	vmov	r8, r9, d0
 80095e4:	4616      	mov	r6, r2
 80095e6:	f7ff fcd5 	bl	8008f94 <_Balloc>
 80095ea:	4604      	mov	r4, r0
 80095ec:	b930      	cbnz	r0, 80095fc <__d2b+0x24>
 80095ee:	4602      	mov	r2, r0
 80095f0:	4b23      	ldr	r3, [pc, #140]	@ (8009680 <__d2b+0xa8>)
 80095f2:	4824      	ldr	r0, [pc, #144]	@ (8009684 <__d2b+0xac>)
 80095f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80095f8:	f000 fa2a 	bl	8009a50 <__assert_func>
 80095fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009604:	b10d      	cbz	r5, 800960a <__d2b+0x32>
 8009606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	f1b8 0300 	subs.w	r3, r8, #0
 8009610:	d023      	beq.n	800965a <__d2b+0x82>
 8009612:	4668      	mov	r0, sp
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	f7ff fd84 	bl	8009122 <__lo0bits>
 800961a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800961e:	b1d0      	cbz	r0, 8009656 <__d2b+0x7e>
 8009620:	f1c0 0320 	rsb	r3, r0, #32
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	430b      	orrs	r3, r1
 800962a:	40c2      	lsrs	r2, r0
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	9201      	str	r2, [sp, #4]
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	61a3      	str	r3, [r4, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	bf0c      	ite	eq
 8009638:	2201      	moveq	r2, #1
 800963a:	2202      	movne	r2, #2
 800963c:	6122      	str	r2, [r4, #16]
 800963e:	b1a5      	cbz	r5, 800966a <__d2b+0x92>
 8009640:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009644:	4405      	add	r5, r0
 8009646:	603d      	str	r5, [r7, #0]
 8009648:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800964c:	6030      	str	r0, [r6, #0]
 800964e:	4620      	mov	r0, r4
 8009650:	b003      	add	sp, #12
 8009652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009656:	6161      	str	r1, [r4, #20]
 8009658:	e7ea      	b.n	8009630 <__d2b+0x58>
 800965a:	a801      	add	r0, sp, #4
 800965c:	f7ff fd61 	bl	8009122 <__lo0bits>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	6163      	str	r3, [r4, #20]
 8009664:	3020      	adds	r0, #32
 8009666:	2201      	movs	r2, #1
 8009668:	e7e8      	b.n	800963c <__d2b+0x64>
 800966a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800966e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009672:	6038      	str	r0, [r7, #0]
 8009674:	6918      	ldr	r0, [r3, #16]
 8009676:	f7ff fd35 	bl	80090e4 <__hi0bits>
 800967a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800967e:	e7e5      	b.n	800964c <__d2b+0x74>
 8009680:	08009d54 	.word	0x08009d54
 8009684:	08009d65 	.word	0x08009d65

08009688 <__sfputc_r>:
 8009688:	6893      	ldr	r3, [r2, #8]
 800968a:	3b01      	subs	r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	b410      	push	{r4}
 8009690:	6093      	str	r3, [r2, #8]
 8009692:	da08      	bge.n	80096a6 <__sfputc_r+0x1e>
 8009694:	6994      	ldr	r4, [r2, #24]
 8009696:	42a3      	cmp	r3, r4
 8009698:	db01      	blt.n	800969e <__sfputc_r+0x16>
 800969a:	290a      	cmp	r1, #10
 800969c:	d103      	bne.n	80096a6 <__sfputc_r+0x1e>
 800969e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a2:	f7fe bc6c 	b.w	8007f7e <__swbuf_r>
 80096a6:	6813      	ldr	r3, [r2, #0]
 80096a8:	1c58      	adds	r0, r3, #1
 80096aa:	6010      	str	r0, [r2, #0]
 80096ac:	7019      	strb	r1, [r3, #0]
 80096ae:	4608      	mov	r0, r1
 80096b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <__sfputs_r>:
 80096b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b8:	4606      	mov	r6, r0
 80096ba:	460f      	mov	r7, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	18d5      	adds	r5, r2, r3
 80096c0:	42ac      	cmp	r4, r5
 80096c2:	d101      	bne.n	80096c8 <__sfputs_r+0x12>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e007      	b.n	80096d8 <__sfputs_r+0x22>
 80096c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096cc:	463a      	mov	r2, r7
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7ff ffda 	bl	8009688 <__sfputc_r>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d1f3      	bne.n	80096c0 <__sfputs_r+0xa>
 80096d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096dc <_vfiprintf_r>:
 80096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	460d      	mov	r5, r1
 80096e2:	b09d      	sub	sp, #116	@ 0x74
 80096e4:	4614      	mov	r4, r2
 80096e6:	4698      	mov	r8, r3
 80096e8:	4606      	mov	r6, r0
 80096ea:	b118      	cbz	r0, 80096f4 <_vfiprintf_r+0x18>
 80096ec:	6a03      	ldr	r3, [r0, #32]
 80096ee:	b90b      	cbnz	r3, 80096f4 <_vfiprintf_r+0x18>
 80096f0:	f7fe fb5c 	bl	8007dac <__sinit>
 80096f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096f6:	07d9      	lsls	r1, r3, #31
 80096f8:	d405      	bmi.n	8009706 <_vfiprintf_r+0x2a>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	059a      	lsls	r2, r3, #22
 80096fe:	d402      	bmi.n	8009706 <_vfiprintf_r+0x2a>
 8009700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009702:	f7fe fd5e 	bl	80081c2 <__retarget_lock_acquire_recursive>
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	071b      	lsls	r3, r3, #28
 800970a:	d501      	bpl.n	8009710 <_vfiprintf_r+0x34>
 800970c:	692b      	ldr	r3, [r5, #16]
 800970e:	b99b      	cbnz	r3, 8009738 <_vfiprintf_r+0x5c>
 8009710:	4629      	mov	r1, r5
 8009712:	4630      	mov	r0, r6
 8009714:	f7fe fc72 	bl	8007ffc <__swsetup_r>
 8009718:	b170      	cbz	r0, 8009738 <_vfiprintf_r+0x5c>
 800971a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800971c:	07dc      	lsls	r4, r3, #31
 800971e:	d504      	bpl.n	800972a <_vfiprintf_r+0x4e>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	b01d      	add	sp, #116	@ 0x74
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	0598      	lsls	r0, r3, #22
 800972e:	d4f7      	bmi.n	8009720 <_vfiprintf_r+0x44>
 8009730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009732:	f7fe fd47 	bl	80081c4 <__retarget_lock_release_recursive>
 8009736:	e7f3      	b.n	8009720 <_vfiprintf_r+0x44>
 8009738:	2300      	movs	r3, #0
 800973a:	9309      	str	r3, [sp, #36]	@ 0x24
 800973c:	2320      	movs	r3, #32
 800973e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009742:	f8cd 800c 	str.w	r8, [sp, #12]
 8009746:	2330      	movs	r3, #48	@ 0x30
 8009748:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098f8 <_vfiprintf_r+0x21c>
 800974c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009750:	f04f 0901 	mov.w	r9, #1
 8009754:	4623      	mov	r3, r4
 8009756:	469a      	mov	sl, r3
 8009758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800975c:	b10a      	cbz	r2, 8009762 <_vfiprintf_r+0x86>
 800975e:	2a25      	cmp	r2, #37	@ 0x25
 8009760:	d1f9      	bne.n	8009756 <_vfiprintf_r+0x7a>
 8009762:	ebba 0b04 	subs.w	fp, sl, r4
 8009766:	d00b      	beq.n	8009780 <_vfiprintf_r+0xa4>
 8009768:	465b      	mov	r3, fp
 800976a:	4622      	mov	r2, r4
 800976c:	4629      	mov	r1, r5
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ffa1 	bl	80096b6 <__sfputs_r>
 8009774:	3001      	adds	r0, #1
 8009776:	f000 80a7 	beq.w	80098c8 <_vfiprintf_r+0x1ec>
 800977a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800977c:	445a      	add	r2, fp
 800977e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 809f 	beq.w	80098c8 <_vfiprintf_r+0x1ec>
 800978a:	2300      	movs	r3, #0
 800978c:	f04f 32ff 	mov.w	r2, #4294967295
 8009790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009794:	f10a 0a01 	add.w	sl, sl, #1
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80097a2:	4654      	mov	r4, sl
 80097a4:	2205      	movs	r2, #5
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	4853      	ldr	r0, [pc, #332]	@ (80098f8 <_vfiprintf_r+0x21c>)
 80097ac:	f7f6 fd98 	bl	80002e0 <memchr>
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	b9d8      	cbnz	r0, 80097ec <_vfiprintf_r+0x110>
 80097b4:	06d1      	lsls	r1, r2, #27
 80097b6:	bf44      	itt	mi
 80097b8:	2320      	movmi	r3, #32
 80097ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097be:	0713      	lsls	r3, r2, #28
 80097c0:	bf44      	itt	mi
 80097c2:	232b      	movmi	r3, #43	@ 0x2b
 80097c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c8:	f89a 3000 	ldrb.w	r3, [sl]
 80097cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ce:	d015      	beq.n	80097fc <_vfiprintf_r+0x120>
 80097d0:	9a07      	ldr	r2, [sp, #28]
 80097d2:	4654      	mov	r4, sl
 80097d4:	2000      	movs	r0, #0
 80097d6:	f04f 0c0a 	mov.w	ip, #10
 80097da:	4621      	mov	r1, r4
 80097dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e0:	3b30      	subs	r3, #48	@ 0x30
 80097e2:	2b09      	cmp	r3, #9
 80097e4:	d94b      	bls.n	800987e <_vfiprintf_r+0x1a2>
 80097e6:	b1b0      	cbz	r0, 8009816 <_vfiprintf_r+0x13a>
 80097e8:	9207      	str	r2, [sp, #28]
 80097ea:	e014      	b.n	8009816 <_vfiprintf_r+0x13a>
 80097ec:	eba0 0308 	sub.w	r3, r0, r8
 80097f0:	fa09 f303 	lsl.w	r3, r9, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	46a2      	mov	sl, r4
 80097fa:	e7d2      	b.n	80097a2 <_vfiprintf_r+0xc6>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1d19      	adds	r1, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9103      	str	r1, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfbb      	ittet	lt
 8009808:	425b      	neglt	r3, r3
 800980a:	f042 0202 	orrlt.w	r2, r2, #2
 800980e:	9307      	strge	r3, [sp, #28]
 8009810:	9307      	strlt	r3, [sp, #28]
 8009812:	bfb8      	it	lt
 8009814:	9204      	strlt	r2, [sp, #16]
 8009816:	7823      	ldrb	r3, [r4, #0]
 8009818:	2b2e      	cmp	r3, #46	@ 0x2e
 800981a:	d10a      	bne.n	8009832 <_vfiprintf_r+0x156>
 800981c:	7863      	ldrb	r3, [r4, #1]
 800981e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009820:	d132      	bne.n	8009888 <_vfiprintf_r+0x1ac>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	9203      	str	r2, [sp, #12]
 800982a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800982e:	3402      	adds	r4, #2
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009908 <_vfiprintf_r+0x22c>
 8009836:	7821      	ldrb	r1, [r4, #0]
 8009838:	2203      	movs	r2, #3
 800983a:	4650      	mov	r0, sl
 800983c:	f7f6 fd50 	bl	80002e0 <memchr>
 8009840:	b138      	cbz	r0, 8009852 <_vfiprintf_r+0x176>
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	eba0 000a 	sub.w	r0, r0, sl
 8009848:	2240      	movs	r2, #64	@ 0x40
 800984a:	4082      	lsls	r2, r0
 800984c:	4313      	orrs	r3, r2
 800984e:	3401      	adds	r4, #1
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009856:	4829      	ldr	r0, [pc, #164]	@ (80098fc <_vfiprintf_r+0x220>)
 8009858:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800985c:	2206      	movs	r2, #6
 800985e:	f7f6 fd3f 	bl	80002e0 <memchr>
 8009862:	2800      	cmp	r0, #0
 8009864:	d03f      	beq.n	80098e6 <_vfiprintf_r+0x20a>
 8009866:	4b26      	ldr	r3, [pc, #152]	@ (8009900 <_vfiprintf_r+0x224>)
 8009868:	bb1b      	cbnz	r3, 80098b2 <_vfiprintf_r+0x1d6>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	3307      	adds	r3, #7
 800986e:	f023 0307 	bic.w	r3, r3, #7
 8009872:	3308      	adds	r3, #8
 8009874:	9303      	str	r3, [sp, #12]
 8009876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009878:	443b      	add	r3, r7
 800987a:	9309      	str	r3, [sp, #36]	@ 0x24
 800987c:	e76a      	b.n	8009754 <_vfiprintf_r+0x78>
 800987e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009882:	460c      	mov	r4, r1
 8009884:	2001      	movs	r0, #1
 8009886:	e7a8      	b.n	80097da <_vfiprintf_r+0xfe>
 8009888:	2300      	movs	r3, #0
 800988a:	3401      	adds	r4, #1
 800988c:	9305      	str	r3, [sp, #20]
 800988e:	4619      	mov	r1, r3
 8009890:	f04f 0c0a 	mov.w	ip, #10
 8009894:	4620      	mov	r0, r4
 8009896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800989a:	3a30      	subs	r2, #48	@ 0x30
 800989c:	2a09      	cmp	r2, #9
 800989e:	d903      	bls.n	80098a8 <_vfiprintf_r+0x1cc>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0c6      	beq.n	8009832 <_vfiprintf_r+0x156>
 80098a4:	9105      	str	r1, [sp, #20]
 80098a6:	e7c4      	b.n	8009832 <_vfiprintf_r+0x156>
 80098a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ac:	4604      	mov	r4, r0
 80098ae:	2301      	movs	r3, #1
 80098b0:	e7f0      	b.n	8009894 <_vfiprintf_r+0x1b8>
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	462a      	mov	r2, r5
 80098b8:	4b12      	ldr	r3, [pc, #72]	@ (8009904 <_vfiprintf_r+0x228>)
 80098ba:	a904      	add	r1, sp, #16
 80098bc:	4630      	mov	r0, r6
 80098be:	f7fd fd83 	bl	80073c8 <_printf_float>
 80098c2:	4607      	mov	r7, r0
 80098c4:	1c78      	adds	r0, r7, #1
 80098c6:	d1d6      	bne.n	8009876 <_vfiprintf_r+0x19a>
 80098c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d405      	bmi.n	80098da <_vfiprintf_r+0x1fe>
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	059a      	lsls	r2, r3, #22
 80098d2:	d402      	bmi.n	80098da <_vfiprintf_r+0x1fe>
 80098d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098d6:	f7fe fc75 	bl	80081c4 <__retarget_lock_release_recursive>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	065b      	lsls	r3, r3, #25
 80098de:	f53f af1f 	bmi.w	8009720 <_vfiprintf_r+0x44>
 80098e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e4:	e71e      	b.n	8009724 <_vfiprintf_r+0x48>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <_vfiprintf_r+0x228>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7fd fff1 	bl	80078d8 <_printf_i>
 80098f6:	e7e4      	b.n	80098c2 <_vfiprintf_r+0x1e6>
 80098f8:	08009dbe 	.word	0x08009dbe
 80098fc:	08009dc8 	.word	0x08009dc8
 8009900:	080073c9 	.word	0x080073c9
 8009904:	080096b7 	.word	0x080096b7
 8009908:	08009dc4 	.word	0x08009dc4

0800990c <__swhatbuf_r>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	460c      	mov	r4, r1
 8009910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009914:	2900      	cmp	r1, #0
 8009916:	b096      	sub	sp, #88	@ 0x58
 8009918:	4615      	mov	r5, r2
 800991a:	461e      	mov	r6, r3
 800991c:	da0d      	bge.n	800993a <__swhatbuf_r+0x2e>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009924:	f04f 0100 	mov.w	r1, #0
 8009928:	bf14      	ite	ne
 800992a:	2340      	movne	r3, #64	@ 0x40
 800992c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009930:	2000      	movs	r0, #0
 8009932:	6031      	str	r1, [r6, #0]
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	b016      	add	sp, #88	@ 0x58
 8009938:	bd70      	pop	{r4, r5, r6, pc}
 800993a:	466a      	mov	r2, sp
 800993c:	f000 f848 	bl	80099d0 <_fstat_r>
 8009940:	2800      	cmp	r0, #0
 8009942:	dbec      	blt.n	800991e <__swhatbuf_r+0x12>
 8009944:	9901      	ldr	r1, [sp, #4]
 8009946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800994a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800994e:	4259      	negs	r1, r3
 8009950:	4159      	adcs	r1, r3
 8009952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009956:	e7eb      	b.n	8009930 <__swhatbuf_r+0x24>

08009958 <__smakebuf_r>:
 8009958:	898b      	ldrh	r3, [r1, #12]
 800995a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995c:	079d      	lsls	r5, r3, #30
 800995e:	4606      	mov	r6, r0
 8009960:	460c      	mov	r4, r1
 8009962:	d507      	bpl.n	8009974 <__smakebuf_r+0x1c>
 8009964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	2301      	movs	r3, #1
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	b003      	add	sp, #12
 8009972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009974:	ab01      	add	r3, sp, #4
 8009976:	466a      	mov	r2, sp
 8009978:	f7ff ffc8 	bl	800990c <__swhatbuf_r>
 800997c:	9f00      	ldr	r7, [sp, #0]
 800997e:	4605      	mov	r5, r0
 8009980:	4639      	mov	r1, r7
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff fa7a 	bl	8008e7c <_malloc_r>
 8009988:	b948      	cbnz	r0, 800999e <__smakebuf_r+0x46>
 800998a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998e:	059a      	lsls	r2, r3, #22
 8009990:	d4ee      	bmi.n	8009970 <__smakebuf_r+0x18>
 8009992:	f023 0303 	bic.w	r3, r3, #3
 8009996:	f043 0302 	orr.w	r3, r3, #2
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	e7e2      	b.n	8009964 <__smakebuf_r+0xc>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	6020      	str	r0, [r4, #0]
 80099a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	9b01      	ldr	r3, [sp, #4]
 80099aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099ae:	b15b      	cbz	r3, 80099c8 <__smakebuf_r+0x70>
 80099b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 f81d 	bl	80099f4 <_isatty_r>
 80099ba:	b128      	cbz	r0, 80099c8 <__smakebuf_r+0x70>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	431d      	orrs	r5, r3
 80099cc:	81a5      	strh	r5, [r4, #12]
 80099ce:	e7cf      	b.n	8009970 <__smakebuf_r+0x18>

080099d0 <_fstat_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d07      	ldr	r5, [pc, #28]	@ (80099f0 <_fstat_r+0x20>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	4611      	mov	r1, r2
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	f7f7 fc79 	bl	80012d4 <_fstat>
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	d102      	bne.n	80099ec <_fstat_r+0x1c>
 80099e6:	682b      	ldr	r3, [r5, #0]
 80099e8:	b103      	cbz	r3, 80099ec <_fstat_r+0x1c>
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
 80099ee:	bf00      	nop
 80099f0:	240003e8 	.word	0x240003e8

080099f4 <_isatty_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d06      	ldr	r5, [pc, #24]	@ (8009a10 <_isatty_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f7 fc78 	bl	80012f4 <_isatty>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_isatty_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_isatty_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	240003e8 	.word	0x240003e8

08009a14 <_sbrk_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	@ (8009a30 <_sbrk_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f7 fc80 	bl	8001324 <_sbrk>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_sbrk_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_sbrk_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	240003e8 	.word	0x240003e8

08009a34 <memcpy>:
 8009a34:	440a      	add	r2, r1
 8009a36:	4291      	cmp	r1, r2
 8009a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a3c:	d100      	bne.n	8009a40 <memcpy+0xc>
 8009a3e:	4770      	bx	lr
 8009a40:	b510      	push	{r4, lr}
 8009a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	d1f9      	bne.n	8009a42 <memcpy+0xe>
 8009a4e:	bd10      	pop	{r4, pc}

08009a50 <__assert_func>:
 8009a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a52:	4614      	mov	r4, r2
 8009a54:	461a      	mov	r2, r3
 8009a56:	4b09      	ldr	r3, [pc, #36]	@ (8009a7c <__assert_func+0x2c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	68d8      	ldr	r0, [r3, #12]
 8009a5e:	b14c      	cbz	r4, 8009a74 <__assert_func+0x24>
 8009a60:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <__assert_func+0x30>)
 8009a62:	9100      	str	r1, [sp, #0]
 8009a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a68:	4906      	ldr	r1, [pc, #24]	@ (8009a84 <__assert_func+0x34>)
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	f000 f842 	bl	8009af4 <fiprintf>
 8009a70:	f000 f852 	bl	8009b18 <abort>
 8009a74:	4b04      	ldr	r3, [pc, #16]	@ (8009a88 <__assert_func+0x38>)
 8009a76:	461c      	mov	r4, r3
 8009a78:	e7f3      	b.n	8009a62 <__assert_func+0x12>
 8009a7a:	bf00      	nop
 8009a7c:	24000020 	.word	0x24000020
 8009a80:	08009dd9 	.word	0x08009dd9
 8009a84:	08009de6 	.word	0x08009de6
 8009a88:	08009e14 	.word	0x08009e14

08009a8c <_calloc_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	fba1 5402 	umull	r5, r4, r1, r2
 8009a92:	b934      	cbnz	r4, 8009aa2 <_calloc_r+0x16>
 8009a94:	4629      	mov	r1, r5
 8009a96:	f7ff f9f1 	bl	8008e7c <_malloc_r>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	b928      	cbnz	r0, 8009aaa <_calloc_r+0x1e>
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
 8009aa2:	220c      	movs	r2, #12
 8009aa4:	6002      	str	r2, [r0, #0]
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	e7f9      	b.n	8009a9e <_calloc_r+0x12>
 8009aaa:	462a      	mov	r2, r5
 8009aac:	4621      	mov	r1, r4
 8009aae:	f7fe fb0b 	bl	80080c8 <memset>
 8009ab2:	e7f4      	b.n	8009a9e <_calloc_r+0x12>

08009ab4 <__ascii_mbtowc>:
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	b901      	cbnz	r1, 8009aba <__ascii_mbtowc+0x6>
 8009ab8:	a901      	add	r1, sp, #4
 8009aba:	b142      	cbz	r2, 8009ace <__ascii_mbtowc+0x1a>
 8009abc:	b14b      	cbz	r3, 8009ad2 <__ascii_mbtowc+0x1e>
 8009abe:	7813      	ldrb	r3, [r2, #0]
 8009ac0:	600b      	str	r3, [r1, #0]
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	1e10      	subs	r0, r2, #0
 8009ac6:	bf18      	it	ne
 8009ac8:	2001      	movne	r0, #1
 8009aca:	b002      	add	sp, #8
 8009acc:	4770      	bx	lr
 8009ace:	4610      	mov	r0, r2
 8009ad0:	e7fb      	b.n	8009aca <__ascii_mbtowc+0x16>
 8009ad2:	f06f 0001 	mvn.w	r0, #1
 8009ad6:	e7f8      	b.n	8009aca <__ascii_mbtowc+0x16>

08009ad8 <__ascii_wctomb>:
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	b141      	cbz	r1, 8009af0 <__ascii_wctomb+0x18>
 8009ade:	2aff      	cmp	r2, #255	@ 0xff
 8009ae0:	d904      	bls.n	8009aec <__ascii_wctomb+0x14>
 8009ae2:	228a      	movs	r2, #138	@ 0x8a
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aea:	4770      	bx	lr
 8009aec:	700a      	strb	r2, [r1, #0]
 8009aee:	2001      	movs	r0, #1
 8009af0:	4770      	bx	lr
	...

08009af4 <fiprintf>:
 8009af4:	b40e      	push	{r1, r2, r3}
 8009af6:	b503      	push	{r0, r1, lr}
 8009af8:	4601      	mov	r1, r0
 8009afa:	ab03      	add	r3, sp, #12
 8009afc:	4805      	ldr	r0, [pc, #20]	@ (8009b14 <fiprintf+0x20>)
 8009afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b02:	6800      	ldr	r0, [r0, #0]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	f7ff fde9 	bl	80096dc <_vfiprintf_r>
 8009b0a:	b002      	add	sp, #8
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	b003      	add	sp, #12
 8009b12:	4770      	bx	lr
 8009b14:	24000020 	.word	0x24000020

08009b18 <abort>:
 8009b18:	b508      	push	{r3, lr}
 8009b1a:	2006      	movs	r0, #6
 8009b1c:	f000 f82c 	bl	8009b78 <raise>
 8009b20:	2001      	movs	r0, #1
 8009b22:	f7f7 fb87 	bl	8001234 <_exit>

08009b26 <_raise_r>:
 8009b26:	291f      	cmp	r1, #31
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	d904      	bls.n	8009b3a <_raise_r+0x14>
 8009b30:	2316      	movs	r3, #22
 8009b32:	6003      	str	r3, [r0, #0]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	bd38      	pop	{r3, r4, r5, pc}
 8009b3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b3c:	b112      	cbz	r2, 8009b44 <_raise_r+0x1e>
 8009b3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b42:	b94b      	cbnz	r3, 8009b58 <_raise_r+0x32>
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f831 	bl	8009bac <_getpid_r>
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4601      	mov	r1, r0
 8009b4e:	4628      	mov	r0, r5
 8009b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b54:	f000 b818 	b.w	8009b88 <_kill_r>
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d00a      	beq.n	8009b72 <_raise_r+0x4c>
 8009b5c:	1c59      	adds	r1, r3, #1
 8009b5e:	d103      	bne.n	8009b68 <_raise_r+0x42>
 8009b60:	2316      	movs	r3, #22
 8009b62:	6003      	str	r3, [r0, #0]
 8009b64:	2001      	movs	r0, #1
 8009b66:	e7e7      	b.n	8009b38 <_raise_r+0x12>
 8009b68:	2100      	movs	r1, #0
 8009b6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4798      	blx	r3
 8009b72:	2000      	movs	r0, #0
 8009b74:	e7e0      	b.n	8009b38 <_raise_r+0x12>
	...

08009b78 <raise>:
 8009b78:	4b02      	ldr	r3, [pc, #8]	@ (8009b84 <raise+0xc>)
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	f7ff bfd2 	b.w	8009b26 <_raise_r>
 8009b82:	bf00      	nop
 8009b84:	24000020 	.word	0x24000020

08009b88 <_kill_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d07      	ldr	r5, [pc, #28]	@ (8009ba8 <_kill_r+0x20>)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	4611      	mov	r1, r2
 8009b94:	602b      	str	r3, [r5, #0]
 8009b96:	f7f7 fb3d 	bl	8001214 <_kill>
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	d102      	bne.n	8009ba4 <_kill_r+0x1c>
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	b103      	cbz	r3, 8009ba4 <_kill_r+0x1c>
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	bd38      	pop	{r3, r4, r5, pc}
 8009ba6:	bf00      	nop
 8009ba8:	240003e8 	.word	0x240003e8

08009bac <_getpid_r>:
 8009bac:	f7f7 bb2a 	b.w	8001204 <_getpid>

08009bb0 <_init>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr

08009bbc <_fini>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr
