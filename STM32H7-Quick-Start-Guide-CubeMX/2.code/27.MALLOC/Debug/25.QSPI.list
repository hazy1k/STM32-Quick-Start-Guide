
25.QSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800a960  0800a960  0000b960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800adac  0800adac  0000bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800adb4  0800adb4  0000bdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800adb8  0800adb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800adbc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001268  240001dc  0800af98  0000c1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001444  0800af98  0000c444  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000163d9  00000000  00000000  0000c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003637  00000000  00000000  000225e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f70  00000000  00000000  00025c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ba3  00000000  00000000  00026b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c314  00000000  00000000  00027733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d665  00000000  00000000  00063a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001748fc  00000000  00000000  000810ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f59a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b04  00000000  00000000  001f59ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001fa4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a948 	.word	0x0800a948

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800a948 	.word	0x0800a948

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f002 fc64 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f002 faa7 	bl	8002c60 <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <delay_init>:
 * @brief     初始化延迟函数
 * @param     sysclk: 系统时钟频率, 即CPU频率(rcc_c_ck), 480MHz
 * @retval    无
 */
void delay_init(uint16_t sysclk)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
#if SYS_SUPPORT_OS                                      /* 如果需要支持OS */
    uint32_t reload;
#endif
    g_fac_us = sysclk;                                  /* 由于在HAL_Init中已对systick做了配置，所以这里无需重新配置 */
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	4a03      	ldr	r2, [pc, #12]	@ (8000740 <delay_init+0x1c>)
 8000732:	6013      	str	r3, [r2, #0]
    g_fac_ms = 1000 / delay_ostickspersec;              /* 代表OS可以延时的最少单位 */
    SysTick->CTRL |= 1 << 1;                            /* 开启SYSTICK中断 */
    SysTick->LOAD = reload;                             /* 每1/delay_ostickspersec秒中断一次 */
    SysTick->CTRL |= 1 << 0;                            /* 开启SYSTICK */
#endif
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	240001f8 	.word	0x240001f8

08000744 <delay_us>:
 * @param     nus: 要延时的us数
 * @note      nus取值范围: 0 ~ (2^32 / fac_us) (fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_us(uint32_t nus)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <delay_us+0x74>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <delay_us+0x78>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	613b      	str	r3, [r7, #16]

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedlock();                    /* 锁定 OS 的任务调度器 */
#endif

    told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <delay_us+0x74>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <delay_us+0x74>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	429a      	cmp	r2, r3
 8000774:	d0f8      	beq.n	8000768 <delay_us+0x24>
        {
            if (tnow < told)
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	429a      	cmp	r2, r3
 800077c:	d206      	bcs.n	800078c <delay_us+0x48>
            {
                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	4413      	add	r3, r2
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	e007      	b.n	800079c <delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1ad2      	subs	r2, r2, r3
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	4413      	add	r3, r2
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4413      	add	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d200      	bcs.n	80007aa <delay_us+0x66>
        tnow = SysTick->VAL;
 80007a8:	e7de      	b.n	8000768 <delay_us+0x24>
            {
                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 80007aa:	bf00      	nop

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedunlock();                  /* 恢复 OS 的任务调度器 */
#endif

}
 80007ac:	bf00      	nop
 80007ae:	3724      	adds	r7, #36	@ 0x24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000e010 	.word	0xe000e010
 80007bc:	240001f8 	.word	0x240001f8

080007c0 <delay_ms>:
 * @brief     延时nms
 * @param     nms: 要延时的ms数 (0< nms <= (2^32 / fac_us / 1000))(fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_ms(uint16_t nms)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]

        nms %= g_fac_ms;                                /* OS已经无法提供这么小的延时了,采用普通方式延时 */
    }
#endif

    delay_us((uint32_t)(nms * 1000));                   /* 普通方式延时 */
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ffb5 	bl	8000744 <delay_us>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
     delay_ms(Delay);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ffe6 	bl	80007c0 <delay_ms>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_KEY_GPIO_Init+0x68>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	4a13      	ldr	r2, [pc, #76]	@ (8000864 <MX_KEY_GPIO_Init+0x68>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000820:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_KEY_GPIO_Init+0x68>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800082e:	2301      	movs	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	480a      	ldr	r0, [pc, #40]	@ (8000868 <MX_KEY_GPIO_Init+0x6c>)
 8000840:	f002 fa0e 	bl	8002c60 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8000844:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084e:	2301      	movs	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_KEY_GPIO_Init+0x6c>)
 8000858:	f002 fa02 	bl	8002c60 <HAL_GPIO_Init>
}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	58024400 	.word	0x58024400
 8000868:	58020000 	.word	0x58020000

0800086c <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <MX_LED_GPIO_Init+0xa8>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <MX_LED_GPIO_Init+0xa8>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_LED_GPIO_Init+0xa8>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_LED_GPIO_Init+0xa8>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <MX_LED_GPIO_Init+0xa8>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_LED_GPIO_Init+0xa8>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2160      	movs	r1, #96	@ 0x60
 80008c2:	4815      	ldr	r0, [pc, #84]	@ (8000918 <MX_LED_GPIO_Init+0xac>)
 80008c4:	f002 fb7c 	bl	8002fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_LED_GPIO_Init+0xb0>)
 80008ce:	f002 fb77 	bl	8002fc0 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008d2:	2360      	movs	r3, #96	@ 0x60
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <MX_LED_GPIO_Init+0xac>)
 80008ea:	f002 f9b9 	bl	8002c60 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008ee:	2310      	movs	r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_LED_GPIO_Init+0xb0>)
 8000906:	f002 f9ab 	bl	8002c60 <HAL_GPIO_Init>
}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58024400 	.word	0x58024400
 8000918:	58021000 	.word	0x58021000
 800091c:	58020400 	.word	0x58020400

08000920 <norflash_wait_busy>:
 * @brief       等待空闲
 * @param       无
 * @retval      无
 */
static void norflash_wait_busy(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    while ((norflash_read_sr(1) & 0x01) == 0x01);   /*  等待BUSY位清空 */
 8000924:	bf00      	nop
 8000926:	2001      	movs	r0, #1
 8000928:	f000 f812 	bl	8000950 <norflash_read_sr>
 800092c:	4603      	mov	r3, r0
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b01      	cmp	r3, #1
 8000934:	d0f7      	beq.n	8000926 <norflash_wait_busy+0x6>
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <norflash_write_enable>:
 *   @note      将S1寄存器的WEL置位
 * @param       无
 * @retval      无
 */
void norflash_write_enable(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    /* SPI,写使能指令,地址为0,无数据_8位地址_无地址_单线传输指令,无空周期,0个字节数据 */
    qspi_send_cmd(FLASH_WriteEnable, 0, (0 << 6) | (0 << 4) | (0 << 2) | (1 << 0), 0);
 8000940:	2300      	movs	r3, #0
 8000942:	2201      	movs	r2, #1
 8000944:	2100      	movs	r1, #0
 8000946:	2006      	movs	r0, #6
 8000948:	f000 fd12 	bl	8001370 <qspi_send_cmd>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <norflash_read_sr>:
 *
 * @param       regno: 状态寄存器号，范围:1~3
 * @retval      状态寄存器值
 */
uint8_t norflash_read_sr(uint8_t regno)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
    uint8_t byte = 0, command = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	73bb      	strb	r3, [r7, #14]
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]

    switch (regno)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d00c      	beq.n	8000982 <norflash_read_sr+0x32>
 8000968:	2b03      	cmp	r3, #3
 800096a:	dc0d      	bgt.n	8000988 <norflash_read_sr+0x38>
 800096c:	2b01      	cmp	r3, #1
 800096e:	d002      	beq.n	8000976 <norflash_read_sr+0x26>
 8000970:	2b02      	cmp	r3, #2
 8000972:	d003      	beq.n	800097c <norflash_read_sr+0x2c>
 8000974:	e008      	b.n	8000988 <norflash_read_sr+0x38>
    {
        case 1:
            command = FLASH_ReadStatusReg1;  /* 读状态寄存器1指令 */
 8000976:	2305      	movs	r3, #5
 8000978:	73fb      	strb	r3, [r7, #15]
            break;
 800097a:	e008      	b.n	800098e <norflash_read_sr+0x3e>

        case 2:
            command = FLASH_ReadStatusReg2;  /* 读状态寄存器2指令 */
 800097c:	2335      	movs	r3, #53	@ 0x35
 800097e:	73fb      	strb	r3, [r7, #15]
            break;
 8000980:	e005      	b.n	800098e <norflash_read_sr+0x3e>

        case 3:
            command = FLASH_ReadStatusReg3;  /* 读状态寄存器3指令 */
 8000982:	2315      	movs	r3, #21
 8000984:	73fb      	strb	r3, [r7, #15]
            break;
 8000986:	e002      	b.n	800098e <norflash_read_sr+0x3e>

        default:
            command = FLASH_ReadStatusReg1;
 8000988:	2305      	movs	r3, #5
 800098a:	73fb      	strb	r3, [r7, #15]
            break;
 800098c:	bf00      	nop
    }

    /* SPI,写command指令,地址为0,单线传数据_8位地址_无地址_单线传输指令,无空周期,1个字节数据 */
    qspi_send_cmd(command, 0, (1 << 6) | (0 << 4) | (0 << 2) | (1 << 0), 0);
 800098e:	7bf8      	ldrb	r0, [r7, #15]
 8000990:	2300      	movs	r3, #0
 8000992:	2241      	movs	r2, #65	@ 0x41
 8000994:	2100      	movs	r1, #0
 8000996:	f000 fceb 	bl	8001370 <qspi_send_cmd>
    qspi_receive(&byte, 1);
 800099a:	f107 030e 	add.w	r3, r7, #14
 800099e:	2101      	movs	r1, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fdad 	bl	8001500 <qspi_receive>
    return byte;
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <norflash_read_id>:
 * @param       无
 * @retval      FLASH芯片ID
 *   @note      芯片ID列表见: norflash.h, 芯片列表部分
 */
uint16_t norflash_read_id(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
    uint8_t temp[2];
    uint16_t deviceid;
    qspi_init();          /* 进行库函数调用前要先初始化 */
 80009b6:	f000 fc1d 	bl	80011f4 <qspi_init>
    /* SPI,读id,地址为0,单线传输数据_24位地址_单线传输地址_单线传输指令,无空周期,2个字节数据 */
    qspi_send_cmd(FLASH_ManufactDeviceID, 0, (1 << 6) | (2 << 4) | (1 << 2) | (1 << 0), 0);
 80009ba:	2300      	movs	r3, #0
 80009bc:	2265      	movs	r2, #101	@ 0x65
 80009be:	2100      	movs	r1, #0
 80009c0:	2090      	movs	r0, #144	@ 0x90
 80009c2:	f000 fcd5 	bl	8001370 <qspi_send_cmd>
    qspi_receive(temp, 2);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fd98 	bl	8001500 <qspi_receive>
    deviceid = (temp[0] << 8) | temp[1];
 80009d0:	793b      	ldrb	r3, [r7, #4]
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	797b      	ldrb	r3, [r7, #5]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b21b      	sxth	r3, r3
 80009e0:	80fb      	strh	r3, [r7, #6]

    if (deviceid == W25Q256)
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	f64e 7218 	movw	r2, #61208	@ 0xef18
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d102      	bne.n	80009f2 <norflash_read_id+0x42>
    {
        g_norflash_addrw = 3;   /* 如果是W25Q256, 标记32bit地址宽度 */
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <norflash_read_id+0x4c>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	701a      	strb	r2, [r3, #0]
    }

    return deviceid;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	24000000 	.word	0x24000000

08000a00 <norflash_read>:
 * @param       addr    : 开始读取的地址(最大32bit)
 * @param       datalen : 要读取的字节数(最大65535)
 * @retval      无
 */
void norflash_read(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	80fb      	strh	r3, [r7, #6]
    /* QSPI,快速读数据,地址为addr,4线传输数据_24/32位地址_4线传输地址_1线传输指令,6空周期,datalen个数据 */
    qspi_send_cmd(FLASH_FastReadQuad, addr, (3 << 6) | (g_norflash_addrw << 4) | (3 << 2) | (1 << 0), 6);
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <norflash_read+0x40>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	f063 0332 	orn	r3, r3, #50	@ 0x32
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	2306      	movs	r3, #6
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	20eb      	movs	r0, #235	@ 0xeb
 8000a28:	f000 fca2 	bl	8001370 <qspi_send_cmd>
    qspi_receive(pbuf, datalen);
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 fd65 	bl	8001500 <qspi_receive>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000000 	.word	0x24000000

08000a44 <norflash_write_page>:
 * @param       addr    : 开始写入的地址(最大32bit)
 * @param       datalen : 要写入的字节数(最大256),该数不应该超过该页的剩余字节数!!!
 * @retval      无
 */
static void norflash_write_page(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
    norflash_write_enable();        /* 写使能 */
 8000a52:	f7ff ff73 	bl	800093c <norflash_write_enable>

    /* QSPI,页写指令,地址为addr,4线传输数据_24/32位地址_1线传输地址_1线传输指令,无空周期,datalen个数据 */
    qspi_send_cmd(FLASH_PageProgramQuad, addr, (3 << 6) | (g_norflash_addrw << 4) | (1 << 2) | (1 << 0), 0);
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <norflash_write_page+0x48>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	f063 033a 	orn	r3, r3, #58	@ 0x3a
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	2032      	movs	r0, #50	@ 0x32
 8000a70:	f000 fc7e 	bl	8001370 <qspi_send_cmd>

    qspi_transmit(pbuf, datalen);   /* 发送数据 */
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	4619      	mov	r1, r3
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 fd5d 	bl	8001538 <qspi_transmit>
    norflash_wait_busy();           /* 等待写入结束 */
 8000a7e:	f7ff ff4f 	bl	8000920 <norflash_wait_busy>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000000 	.word	0x24000000

08000a90 <norflash_write_nocheck>:
 * @param       addr    : 开始写入的地址(最大32bit)
 * @param       datalen : 要写入的字节数(最大65535)
 * @retval      无
 */
static void norflash_write_nocheck(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	80fb      	strh	r3, [r7, #6]
    uint16_t pageremain;
    pageremain = 256 - addr % 256;  /* 单页剩余的字节数 */
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000aaa:	82fb      	strh	r3, [r7, #22]

    if (datalen <= pageremain)      /* 不大于256个字节 */
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	8afb      	ldrh	r3, [r7, #22]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d801      	bhi.n	8000ab8 <norflash_write_nocheck+0x28>
    {
        pageremain = datalen;
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	82fb      	strh	r3, [r7, #22]
    while (1)
    {
        /* 当写入字节比页内剩余地址还少的时候, 一次性写完
         * 当写入直接比页内剩余地址还多的时候, 先写完整个页内剩余地址, 然后根据剩余长度进行不同处理
         */
        norflash_write_page(pbuf, addr, pageremain);
 8000ab8:	8afb      	ldrh	r3, [r7, #22]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ffc0 	bl	8000a44 <norflash_write_page>

        if (datalen == pageremain)   /* 写入结束了 */
 8000ac4:	88fa      	ldrh	r2, [r7, #6]
 8000ac6:	8afb      	ldrh	r3, [r7, #22]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d016      	beq.n	8000afa <norflash_write_nocheck+0x6a>
        {
            break;
        }
        else     /* datalen > pageremain */
        {
            pbuf += pageremain;         /* pbuf指针地址偏移,前面已经写了pageremain字节 */
 8000acc:	8afb      	ldrh	r3, [r7, #22]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
            addr += pageremain;         /* 写地址偏移,前面已经写了pageremain字节 */
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
            datalen -= pageremain;      /* 写入总长度减去已经写入了的字节数 */
 8000adc:	88fa      	ldrh	r2, [r7, #6]
 8000ade:	8afb      	ldrh	r3, [r7, #22]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	80fb      	strh	r3, [r7, #6]

            if (datalen > 256)          /* 剩余数据还大于一页,可以一次写一页 */
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000aea:	d903      	bls.n	8000af4 <norflash_write_nocheck+0x64>
            {
                pageremain = 256;       /* 一次可以写入256个字节 */
 8000aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af0:	82fb      	strh	r3, [r7, #22]
 8000af2:	e7e1      	b.n	8000ab8 <norflash_write_nocheck+0x28>
            }
            else     /* 剩余数据小于一页,可以一次写完 */
            {
                pageremain = datalen;   /* 不够256个字节了 */
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	82fb      	strh	r3, [r7, #22]
        norflash_write_page(pbuf, addr, pageremain);
 8000af8:	e7de      	b.n	8000ab8 <norflash_write_nocheck+0x28>
            break;
 8000afa:	bf00      	nop
            }
        }
    }
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <norflash_write>:
 * @retval      无
 */
uint8_t g_norflash_buf[4096];   /* 扇区缓存 */

void norflash_write(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	80fb      	strh	r3, [r7, #6]
    uint16_t secoff;
    uint16_t secremain;
    uint16_t i;
    uint8_t *norflash_buf;

    norflash_buf = g_norflash_buf;
 8000b12:	4b40      	ldr	r3, [pc, #256]	@ (8000c14 <norflash_write+0x110>)
 8000b14:	613b      	str	r3, [r7, #16]
    secpos = addr / 4096;       /* 扇区地址 */
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	0b1b      	lsrs	r3, r3, #12
 8000b1a:	61fb      	str	r3, [r7, #28]
    secoff = addr % 4096;       /* 在扇区内的偏移 */
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b24:	837b      	strh	r3, [r7, #26]
    secremain = 4096 - secoff;  /* 扇区剩余空间大小 */
 8000b26:	8b7b      	ldrh	r3, [r7, #26]
 8000b28:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000b2c:	833b      	strh	r3, [r7, #24]

    //printf("ad:%X,nb:%X\r\n", addr, datalen); /* 测试用 */
    if (datalen <= secremain)
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	8b3b      	ldrh	r3, [r7, #24]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d801      	bhi.n	8000b3a <norflash_write+0x36>
    {
        secremain = datalen;    /* 不大于4096个字节 */
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	833b      	strh	r3, [r7, #24]
    }

    while (1)
    {
        norflash_read(norflash_buf, secpos * 4096, 4096);   /* 读出整个扇区的内容 */
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	031b      	lsls	r3, r3, #12
 8000b3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b42:	4619      	mov	r1, r3
 8000b44:	6938      	ldr	r0, [r7, #16]
 8000b46:	f7ff ff5b 	bl	8000a00 <norflash_read>

        for (i = 0; i < secremain; i++)   /* 校验数据 */
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	82fb      	strh	r3, [r7, #22]
 8000b4e:	e00b      	b.n	8000b68 <norflash_write+0x64>
        {
            if (norflash_buf[secoff + i] != 0XFF)
 8000b50:	8b7a      	ldrh	r2, [r7, #26]
 8000b52:	8afb      	ldrh	r3, [r7, #22]
 8000b54:	4413      	add	r3, r2
 8000b56:	461a      	mov	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2bff      	cmp	r3, #255	@ 0xff
 8000b60:	d107      	bne.n	8000b72 <norflash_write+0x6e>
        for (i = 0; i < secremain; i++)   /* 校验数据 */
 8000b62:	8afb      	ldrh	r3, [r7, #22]
 8000b64:	3301      	adds	r3, #1
 8000b66:	82fb      	strh	r3, [r7, #22]
 8000b68:	8afa      	ldrh	r2, [r7, #22]
 8000b6a:	8b3b      	ldrh	r3, [r7, #24]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3ef      	bcc.n	8000b50 <norflash_write+0x4c>
 8000b70:	e000      	b.n	8000b74 <norflash_write+0x70>
            {
                break;      /* 需要擦除, 直接退出for循环 */
 8000b72:	bf00      	nop
            }
        }

        if (i < secremain)   /* 需要擦除 */
 8000b74:	8afa      	ldrh	r2, [r7, #22]
 8000b76:	8b3b      	ldrh	r3, [r7, #24]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d220      	bcs.n	8000bbe <norflash_write+0xba>
        {
            norflash_erase_sector(secpos);  /* 擦除这个扇区 */
 8000b7c:	69f8      	ldr	r0, [r7, #28]
 8000b7e:	f000 f84b 	bl	8000c18 <norflash_erase_sector>

            for (i = 0; i < secremain; i++)   /* 复制 */
 8000b82:	2300      	movs	r3, #0
 8000b84:	82fb      	strh	r3, [r7, #22]
 8000b86:	e00d      	b.n	8000ba4 <norflash_write+0xa0>
            {
                norflash_buf[i + secoff] = pbuf[i];
 8000b88:	8afb      	ldrh	r3, [r7, #22]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	441a      	add	r2, r3
 8000b8e:	8af9      	ldrh	r1, [r7, #22]
 8000b90:	8b7b      	ldrh	r3, [r7, #26]
 8000b92:	440b      	add	r3, r1
 8000b94:	4619      	mov	r1, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	440b      	add	r3, r1
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < secremain; i++)   /* 复制 */
 8000b9e:	8afb      	ldrh	r3, [r7, #22]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	82fb      	strh	r3, [r7, #22]
 8000ba4:	8afa      	ldrh	r2, [r7, #22]
 8000ba6:	8b3b      	ldrh	r3, [r7, #24]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d3ed      	bcc.n	8000b88 <norflash_write+0x84>
            }

            norflash_write_nocheck(norflash_buf, secpos * 4096, 4096);  /* 写入整个扇区 */
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	031b      	lsls	r3, r3, #12
 8000bb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6938      	ldr	r0, [r7, #16]
 8000bb8:	f7ff ff6a 	bl	8000a90 <norflash_write_nocheck>
 8000bbc:	e005      	b.n	8000bca <norflash_write+0xc6>
        }
        else        /* 写已经擦除了的,直接写入扇区剩余区间. */
        {
            norflash_write_nocheck(pbuf, addr, secremain);  /* 直接写扇区 */
 8000bbe:	8b3b      	ldrh	r3, [r7, #24]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff ff63 	bl	8000a90 <norflash_write_nocheck>
        }

        if (datalen == secremain)
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	8b3b      	ldrh	r3, [r7, #24]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d01b      	beq.n	8000c0a <norflash_write+0x106>
        {
            break;  /* 写入结束了 */
        }
        else        /* 写入未结束 */
        {
            secpos++;               /* 扇区地址增1 */
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
            secoff = 0;             /* 偏移位置为0 */
 8000bd8:	2300      	movs	r3, #0
 8000bda:	837b      	strh	r3, [r7, #26]

            pbuf += secremain;      /* 指针偏移 */
 8000bdc:	8b3b      	ldrh	r3, [r7, #24]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
            addr += secremain;      /* 写地址偏移 */
 8000be4:	8b3b      	ldrh	r3, [r7, #24]
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	4413      	add	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
            datalen -= secremain;   /* 字节数递减 */
 8000bec:	88fa      	ldrh	r2, [r7, #6]
 8000bee:	8b3b      	ldrh	r3, [r7, #24]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	80fb      	strh	r3, [r7, #6]

            if (datalen > 4096)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000bfa:	d903      	bls.n	8000c04 <norflash_write+0x100>
            {
                secremain = 4096;   /* 下一个扇区还是写不完 */
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	833b      	strh	r3, [r7, #24]
 8000c02:	e79a      	b.n	8000b3a <norflash_write+0x36>
            }
            else
            {
                secremain = datalen;/* 下一个扇区可以写完了 */
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	833b      	strh	r3, [r7, #24]
        norflash_read(norflash_buf, secpos * 4096, 4096);   /* 读出整个扇区的内容 */
 8000c08:	e797      	b.n	8000b3a <norflash_write+0x36>
            break;  /* 写入结束了 */
 8000c0a:	bf00      	nop
            }
        }
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240001fc 	.word	0x240001fc

08000c18 <norflash_erase_sector>:
 *
 * @param       saddr : 扇区地址 根据实际容量设置
 * @retval      无
 */
void norflash_erase_sector(uint32_t saddr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    //printf("fe:%x\r\n", saddr);   /* 监视falsh擦除情况,测试用 */
    saddr *= 4096;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	031b      	lsls	r3, r3, #12
 8000c24:	607b      	str	r3, [r7, #4]
    norflash_write_enable();        /* 写使能 */
 8000c26:	f7ff fe89 	bl	800093c <norflash_write_enable>
    norflash_wait_busy();           /* 等待空闲 */
 8000c2a:	f7ff fe79 	bl	8000920 <norflash_wait_busy>

    /* QPI,写扇区擦除指令,地址为0,无数据_24/32位地址_1线传输地址_1线传输指令,无空周期,0个字节数据 */
    qspi_send_cmd(FLASH_SectorErase, saddr, (0 << 6) | (g_norflash_addrw << 4) | (1 << 2) | (1 << 0), 0);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <norflash_erase_sector+0x40>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	f043 0305 	orr.w	r3, r3, #5
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	2020      	movs	r0, #32
 8000c48:	f000 fb92 	bl	8001370 <qspi_send_cmd>

    norflash_wait_busy();           /* 等待擦除完成 */
 8000c4c:	f7ff fe68 	bl	8000920 <norflash_wait_busy>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000000 	.word	0x24000000

08000c5c <sys_intx_disable>:
 * @brief       关闭所有中断(但是不包括fault和NMI中断)
 * @param       无
 * @retval      无
 */
void sys_intx_disable(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
    __ASM volatile("cpsid i");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <sys_intx_enable>:
 * @brief       开启所有中断
 * @param       无
 * @retval      无
 */
void sys_intx_enable(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
    __ASM volatile("cpsie i");
 8000c70:	b662      	cpsie	i
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <norflash_ex_enter_mmap>:
 *              sys_qspi_enable_memmapmode or norflash_init
 * @param       无
 * @retval      无
 */
static void norflash_ex_enter_mmap(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
    uint32_t tempreg = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]

    /* BY/W25QXX 写使能（0X06指令） */
    while (QUADSPI->SR & (1 << 5)); /* 等待BUSY位清零 */
 8000c86:	bf00      	nop
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <norflash_ex_enter_mmap+0xa0>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 0320 	and.w	r3, r3, #32
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <norflash_ex_enter_mmap+0xc>

    QUADSPI->CCR = 0X00000106;      /* 发送0X06指令，BY/W25QXX写使能 */
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <norflash_ex_enter_mmap+0xa0>)
 8000c96:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8000c9a:	615a      	str	r2, [r3, #20]

    while ((QUADSPI->SR & (1 << 1)) == 0);  /* 等待指令发送完成 */
 8000c9c:	bf00      	nop
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <norflash_ex_enter_mmap+0xa0>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f9      	beq.n	8000c9e <norflash_ex_enter_mmap+0x22>

    QUADSPI->FCR |= 1 << 1;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <norflash_ex_enter_mmap+0xa0>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <norflash_ex_enter_mmap+0xa0>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	60d3      	str	r3, [r2, #12]

    if (qspi_wait_flag(1 << 5, 0, 0XFFFF) == 0) /* 等待BUSY空闲 */
 8000cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	f000 fa6b 	bl	8001198 <qspi_wait_flag>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d122      	bne.n	8000d0e <norflash_ex_enter_mmap+0x92>
    {
        tempreg = 0XEB;         /* INSTRUCTION[7:0]=0XEB,发送0XEB指令（Fast Read QUAD I/O） */
 8000cc8:	23eb      	movs	r3, #235	@ 0xeb
 8000cca:	607b      	str	r3, [r7, #4]
        tempreg |= 1 << 8;      /* IMODE[1:0]=1,单线传输指令 */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd2:	607b      	str	r3, [r7, #4]
        tempreg |= 3 << 10;     /* ADDRESS[1:0]=3,四线传输地址 */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000cda:	607b      	str	r3, [r7, #4]
        tempreg |= (uint32_t)g_norflash_addrw << 12;    /* ADSIZE[1:0]=2,24/32位地址长度 */
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <norflash_ex_enter_mmap+0xa4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	031b      	lsls	r3, r3, #12
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
        tempreg |= 3 << 14;     /* ABMODE[1:0]=3,四线传输交替字节 */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cee:	607b      	str	r3, [r7, #4]
        tempreg |= 0 << 16;     /* ABSIZE[1:0]=0,8位交替字节(M0~M7) */
        tempreg |= 4 << 18;     /* DCYC[4:0]=4,4个dummy周期 */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000cf6:	607b      	str	r3, [r7, #4]
        tempreg |= 3 << 24;     /* DMODE[1:0]=3,四线传输数据 */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000cfe:	607b      	str	r3, [r7, #4]
        tempreg |= 3 << 26;     /* FMODE[1:0]=3,内存映射模式 */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8000d06:	607b      	str	r3, [r7, #4]
        QUADSPI->CCR = tempreg; /* 设置CCR寄存器 */
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <norflash_ex_enter_mmap+0xa0>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6153      	str	r3, [r2, #20]
    }
    sys_intx_enable();          /* 开启中断 */
 8000d0e:	f7ff ffad 	bl	8000c6c <sys_intx_enable>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	52005000 	.word	0x52005000
 8000d20:	24000000 	.word	0x24000000

08000d24 <norflash_ex_exit_mmap>:
 *              sys_qspi_enable_memmapmode or norflash_init
 * @param       无
 * @retval      0, OK;  其他, 错误代码
 */
static uint8_t norflash_ex_exit_mmap(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]

    sys_intx_disable();         /* 关闭中断 */
 8000d2e:	f7ff ff95 	bl	8000c5c <sys_intx_disable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d32:	f3bf 8f4f 	dsb	sy
}
 8000d36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d38:	f3bf 8f6f 	isb	sy
}
 8000d3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <norflash_ex_exit_mmap+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d46:	f3bf 8f4f 	dsb	sy
}
 8000d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d4c:	f3bf 8f6f 	isb	sy
}
 8000d50:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000d52:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <norflash_ex_exit_mmap+0xdc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5c:	f3bf 8f4f 	dsb	sy
}
 8000d60:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <norflash_ex_exit_mmap+0xdc>)
 8000d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d68:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	0b5b      	lsrs	r3, r3, #13
 8000d6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d72:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d7c:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	015a      	lsls	r2, r3, #5
 8000d82:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000d86:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d8c:	491c      	ldr	r1, [pc, #112]	@ (8000e00 <norflash_ex_exit_mmap+0xdc>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	1e5a      	subs	r2, r3, #1
 8000d98:	603a      	str	r2, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1ef      	bne.n	8000d7e <norflash_ex_exit_mmap+0x5a>
    } while(sets-- != 0U);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e5      	bne.n	8000d74 <norflash_ex_exit_mmap+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
 8000da8:	f3bf 8f4f 	dsb	sy
}
 8000dac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dae:	f3bf 8f6f 	isb	sy
}
 8000db2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000db4:	bf00      	nop
    SCB_InvalidateICache();     /* 清空I CACHE */
    SCB_InvalidateDCache();     /* 清空D CACHE */
    QUADSPI->CR &= ~(1 << 0);   /* 关闭 QSPI 接口 */
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000dbc:	f023 0301 	bic.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]
    QUADSPI->CR |= 1 << 1;      /* 退出MEMMAPED模式 */
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6013      	str	r3, [r2, #0]
    res = qspi_wait_flag(1 << 5, 0, 0XFFFF);    /* 等待BUSY空闲 */
 8000dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2020      	movs	r0, #32
 8000dd6:	f000 f9df 	bl	8001198 <qspi_wait_flag>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]

    if (res == 0)
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d108      	bne.n	8000df6 <norflash_ex_exit_mmap+0xd2>
    {
        QUADSPI->CCR = 0;       /* CCR寄存器清零 */
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
        QUADSPI->CR |= 1 << 0;  /* 使能 QSPI 接口 */
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <norflash_ex_exit_mmap+0xe0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6013      	str	r3, [r2, #0]
    }

    return res;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	52005000 	.word	0x52005000

08000e08 <norflash_ex_write>:
 * @param       addr    : 开始写入的地址(最大32bit)
 * @param       datalen : 要写入的字节数(最大65535)
 * @retval      0, OK;  其他, 错误代码
 */
uint8_t norflash_ex_write(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	80fb      	strh	r3, [r7, #6]
    uint8_t res = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]
    res = norflash_ex_exit_mmap();  /* 退出内存映射模式 */
 8000e1a:	f7ff ff83 	bl	8000d24 <norflash_ex_exit_mmap>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	75fb      	strb	r3, [r7, #23]

    if (res == 0)
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <norflash_ex_write+0x2c>
    {
        norflash_write(pbuf, addr, datalen);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff fe68 	bl	8000b04 <norflash_write>
    }

    norflash_ex_enter_mmap();       /* 进入内存映射模式 */
 8000e34:	f7ff ff22 	bl	8000c7c <norflash_ex_enter_mmap>
    return res;
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <norflash_ex_read>:
 * @param       addr    : 开始读取的地址(最大32bit)
 * @param       datalen : 要读取的字节数(最大65535)
 * @retval      0, OK;  其他, 错误代码
 */
void norflash_ex_read(uint8_t *pbuf, uint32_t addr, uint16_t datalen)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	82fb      	strh	r3, [r7, #22]
    addr += 0X90000000;     /* 使用内存映射模式读取，QSPI的基址是0X90000000，所以这里要加上基址 */
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f103 4310 	add.w	r3, r3, #2415919104	@ 0x90000000
 8000e5a:	60bb      	str	r3, [r7, #8]
    sys_intx_disable();     /* 关闭中断 */
 8000e5c:	f7ff fefe 	bl	8000c5c <sys_intx_disable>

    for (i = 0; i < datalen; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	82fb      	strh	r3, [r7, #22]
 8000e64:	e00c      	b.n	8000e80 <norflash_ex_read+0x3e>
    {
        pbuf[i] = *(volatile uint8_t *)(addr + i);
 8000e66:	8afa      	ldrh	r2, [r7, #22]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	8afb      	ldrh	r3, [r7, #22]
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	780a      	ldrb	r2, [r1, #0]
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < datalen; i++)
 8000e7a:	8afb      	ldrh	r3, [r7, #22]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	82fb      	strh	r3, [r7, #22]
 8000e80:	8afa      	ldrh	r2, [r7, #22]
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3ee      	bcc.n	8000e66 <norflash_ex_read+0x24>
    }

    sys_intx_enable();      /* 开启中断 */
 8000e88:	f7ff fef0 	bl	8000c6c <sys_intx_enable>
}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <norflash_ex_read_id>:
 * @brief       读取QSPI FLASH的ID
 * @param       无
 * @retval      NOR FLASH ID
 */
uint16_t norflash_ex_read_id(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	717b      	strb	r3, [r7, #5]
    uint16_t id = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    res = norflash_ex_exit_mmap();  /* 退出内存映射模式 */
 8000ea2:	f7ff ff3f 	bl	8000d24 <norflash_ex_exit_mmap>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	717b      	strb	r3, [r7, #5]

    if (res == 0)
 8000eaa:	797b      	ldrb	r3, [r7, #5]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d103      	bne.n	8000eb8 <norflash_ex_read_id+0x24>
    {
        id = norflash_read_id();
 8000eb0:	f7ff fd7e 	bl	80009b0 <norflash_read_id>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	80fb      	strh	r3, [r7, #6]
    }

    norflash_ex_enter_mmap();       /* 进入内存映射模式 */
 8000eb8:	f7ff fee0 	bl	8000c7c <norflash_ex_enter_mmap>
    return id;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000eca:	f7ff fccf 	bl	800086c <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000ece:	f7ff fbf5 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000ed2:	f7ff fc93 	bl	80007fc <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000ed6:	f000 fe3d 	bl	8001b54 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <main>:
// 要写入到FLASH的字符串
const uint8_t test_str[] = "Hello QSPI Flash!";
#define text_size sizeof(test_str)

int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
  uint8_t temp_data[text_size];
  uint32_t flash_size;
  uint16_t flash_id;

  MPU_Config();
 8000ee6:	f000 f925 	bl	8001134 <MPU_Config>
  HAL_Init();
 8000eea:	f000 ff2f 	bl	8001d4c <HAL_Init>
  SystemClock_Config();
 8000eee:	f000 f883 	bl	8000ff8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000ef2:	f000 f901 	bl	80010f8 <PeriphCommonClock_Config>
  bsp_init();
 8000ef6:	f7ff ffe6 	bl	8000ec6 <bsp_init>
  delay_init(480);
 8000efa:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000efe:	f7ff fc11 	bl	8000724 <delay_init>
  sys_qspi_enable_memmapmode(0); /* 使能QSPI内存映射模式, FLASH容量为普通类型 */
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 fb34 	bl	8001570 <sys_qspi_enable_memmapmode>

  flash_id = norflash_ex_read_id(); /* 读取QSPI FLASH ID */
 8000f08:	f7ff ffc4 	bl	8000e94 <norflash_ex_read_id>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	83fb      	strh	r3, [r7, #30]
  printf("QSPI Flash ID: 0x%X\r\n", flash_id);
 8000f10:	8bfb      	ldrh	r3, [r7, #30]
 8000f12:	4619      	mov	r1, r3
 8000f14:	482f      	ldr	r0, [pc, #188]	@ (8000fd4 <main+0xf4>)
 8000f16:	f007 fdaf 	bl	8008a78 <iprintf>

  while((flash_id == 0)||(flash_id == 0xFFFF)) // 检测不到flash芯片
 8000f1a:	e00a      	b.n	8000f32 <main+0x52>
  {
    printf("flash check failed!");
 8000f1c:	482e      	ldr	r0, [pc, #184]	@ (8000fd8 <main+0xf8>)
 8000f1e:	f007 fdab 	bl	8008a78 <iprintf>
    HAL_Delay(500);
 8000f22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f26:	f7ff fc5c 	bl	80007e2 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000f2a:	2140      	movs	r1, #64	@ 0x40
 8000f2c:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <main+0xfc>)
 8000f2e:	f002 f860 	bl	8002ff2 <HAL_GPIO_TogglePin>
  while((flash_id == 0)||(flash_id == 0xFFFF)) // 检测不到flash芯片
 8000f32:	8bfb      	ldrh	r3, [r7, #30]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f1      	beq.n	8000f1c <main+0x3c>
 8000f38:	8bfb      	ldrh	r3, [r7, #30]
 8000f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d0ec      	beq.n	8000f1c <main+0x3c>
  }
  printf("QSPI FLASH Ready!\r\n");
 8000f42:	4827      	ldr	r0, [pc, #156]	@ (8000fe0 <main+0x100>)
 8000f44:	f007 fe00 	bl	8008b48 <puts>
  flash_size = 16 * 1024 *1024;
 8000f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f4c:	61bb      	str	r3, [r7, #24]

  while (1)
  {
    printf("Start Write FLASH....\r\n");
 8000f4e:	4825      	ldr	r0, [pc, #148]	@ (8000fe4 <main+0x104>)
 8000f50:	f007 fdfa 	bl	8008b48 <puts>
    delay_ms(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f58:	f7ff fc32 	bl	80007c0 <delay_ms>
    norflash_ex_write((uint8_t*)temp_data, flash_size-100, text_size);
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2212      	movs	r2, #18
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff4e 	bl	8000e08 <norflash_ex_write>
    HAL_GPIO_WritePin(LED_GREEN_Port, LED_GREEN_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	481a      	ldr	r0, [pc, #104]	@ (8000fdc <main+0xfc>)
 8000f72:	f002 f825 	bl	8002fc0 <HAL_GPIO_WritePin>
    delay_ms(1000);
 8000f76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f7a:	f7ff fc21 	bl	80007c0 <delay_ms>
    printf("Write Finished!\r\n");
 8000f7e:	481a      	ldr	r0, [pc, #104]	@ (8000fe8 <main+0x108>)
 8000f80:	f007 fde2 	bl	8008b48 <puts>
    delay_ms(5000);
 8000f84:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f88:	f7ff fc1a 	bl	80007c0 <delay_ms>

	printf("Start Read FLASH....\r\n");
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <main+0x10c>)
 8000f8e:	f007 fddb 	bl	8008b48 <puts>
	delay_ms(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f96:	f7ff fc13 	bl	80007c0 <delay_ms>
	norflash_ex_read(temp_data, flash_size-100, text_size);
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2212      	movs	r2, #18
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff4c 	bl	8000e42 <norflash_ex_read>
	printf("Read Finished!\r\n");
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <main+0x110>)
 8000fac:	f007 fdcc 	bl	8008b48 <puts>
	printf("Data:");
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <main+0x114>)
 8000fb2:	f007 fd61 	bl	8008a78 <iprintf>
	printf((char*)temp_data);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 fd5d 	bl	8008a78 <iprintf>
	delay_ms(5000);
 8000fbe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000fc2:	f7ff fbfd 	bl	80007c0 <delay_ms>
	delay_ms(2000);
 8000fc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fca:	f7ff fbf9 	bl	80007c0 <delay_ms>
    printf("Start Write FLASH....\r\n");
 8000fce:	bf00      	nop
 8000fd0:	e7bd      	b.n	8000f4e <main+0x6e>
 8000fd2:	bf00      	nop
 8000fd4:	0800a960 	.word	0x0800a960
 8000fd8:	0800a978 	.word	0x0800a978
 8000fdc:	58021000 	.word	0x58021000
 8000fe0:	0800a98c 	.word	0x0800a98c
 8000fe4:	0800a9a0 	.word	0x0800a9a0
 8000fe8:	0800a9b8 	.word	0x0800a9b8
 8000fec:	0800a9cc 	.word	0x0800a9cc
 8000ff0:	0800a9e4 	.word	0x0800a9e4
 8000ff4:	0800a9f4 	.word	0x0800a9f4

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09c      	sub	sp, #112	@ 0x70
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	224c      	movs	r2, #76	@ 0x4c
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fe7e 	bl	8008d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2220      	movs	r2, #32
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f007 fe78 	bl	8008d08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001018:	2002      	movs	r0, #2
 800101a:	f002 f829 	bl	8003070 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <SystemClock_Config+0xf8>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a32      	ldr	r2, [pc, #200]	@ (80010f0 <SystemClock_Config+0xf8>)
 8001028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b30      	ldr	r3, [pc, #192]	@ (80010f0 <SystemClock_Config+0xf8>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <SystemClock_Config+0xfc>)
 800103a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103c:	4a2d      	ldr	r2, [pc, #180]	@ (80010f4 <SystemClock_Config+0xfc>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <SystemClock_Config+0xfc>)
 8001046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001050:	bf00      	nop
 8001052:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <SystemClock_Config+0xf8>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800105a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800105e:	d1f8      	bne.n	8001052 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001060:	230b      	movs	r3, #11
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001072:	2301      	movs	r3, #1
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107a:	2302      	movs	r3, #2
 800107c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001082:	23f0      	movs	r3, #240	@ 0xf0
 8001084:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001092:	2308      	movs	r3, #8
 8001094:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001096:	2300      	movs	r3, #0
 8001098:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fbfc 	bl	80038a0 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010ae:	f000 f86d 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	233f      	movs	r3, #63	@ 0x3f
 80010b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2303      	movs	r3, #3
 80010b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010be:	2308      	movs	r3, #8
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010c2:	2340      	movs	r3, #64	@ 0x40
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c6:	2340      	movs	r3, #64	@ 0x40
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010d0:	2340      	movs	r3, #64	@ 0x40
 80010d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2104      	movs	r1, #4
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 f83b 	bl	8004154 <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80010e4:	f000 f852 	bl	800118c <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3770      	adds	r7, #112	@ 0x70
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58024800 	.word	0x58024800
 80010f4:	58000400 	.word	0x58000400

080010f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0b0      	sub	sp, #192	@ 0xc0
 80010fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	22c0      	movs	r2, #192	@ 0xc0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f007 fdff 	bl	8008d08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800110a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001116:	2300      	movs	r3, #0
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fba5 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001128:	f000 f830 	bl	800118c <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	37c0      	adds	r7, #192	@ 0xc0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001146:	f000 ffaf 	bl	80020a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800114a:	2301      	movs	r3, #1
 800114c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800114e:	2300      	movs	r3, #0
 8001150:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001156:	231f      	movs	r3, #31
 8001158:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800115a:	2387      	movs	r3, #135	@ 0x87
 800115c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800115e:	2300      	movs	r3, #0
 8001160:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001162:	2300      	movs	r3, #0
 8001164:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001166:	2301      	movs	r3, #1
 8001168:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800116a:	2301      	movs	r3, #1
 800116c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f000 ffcd 	bl	8002118 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800117e:	2004      	movs	r0, #4
 8001180:	f000 ffaa 	bl	80020d8 <HAL_MPU_Enable>

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <Error_Handler+0x8>

08001198 <qspi_wait_flag>:
 * @param       sta  : 需要等待的状态
 * @param       wtime: 等待时间
 * @retval      0, 等待成功; 1, 等待失败.
 */
uint8_t qspi_wait_flag(uint32_t flag, uint8_t sta, uint32_t wtime)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	460b      	mov	r3, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	72fb      	strb	r3, [r7, #11]
    uint8_t flagsta = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]

    while (wtime)
 80011aa:	e010      	b.n	80011ce <qspi_wait_flag+0x36>
    {
        flagsta = (QUADSPI->SR & flag) ? 1 : 0; /* 获取状态标志 */
 80011ac:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <qspi_wait_flag+0x58>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	75fb      	strb	r3, [r7, #23]

        if (flagsta == sta)break;
 80011c0:	7dfa      	ldrb	r2, [r7, #23]
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d006      	beq.n	80011d6 <qspi_wait_flag+0x3e>

        wtime--;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
    while (wtime)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1eb      	bne.n	80011ac <qspi_wait_flag+0x14>
 80011d4:	e000      	b.n	80011d8 <qspi_wait_flag+0x40>
        if (flagsta == sta)break;
 80011d6:	bf00      	nop
    }

    if (wtime)return 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <qspi_wait_flag+0x4a>
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <qspi_wait_flag+0x4c>
    else return 1;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	52005000 	.word	0x52005000

080011f4 <qspi_init>:
 * @brief       初始化QSPI接口
 * @param       无
 * @retval      0, 成功; 1, 失败.
 */
uint8_t qspi_init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    g_qspi_handle.Instance = QUADSPI;                                  /* QSPI */
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <qspi_init+0x54>)
 80011fa:	4a14      	ldr	r2, [pc, #80]	@ (800124c <qspi_init+0x58>)
 80011fc:	601a      	str	r2, [r3, #0]
    g_qspi_handle.Init.ClockPrescaler = 2;                             /* QPSI分频比，BY25Q128最大频率为108M，
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <qspi_init+0x54>)
 8001200:	2202      	movs	r2, #2
 8001202:	605a      	str	r2, [r3, #4]
                                                                          所以此处应该为2，QSPI频率就为220/(1+1)=110MHZ
                                                                          稍微有点超频，可以正常就好，不行就只能降低频率 */
    g_qspi_handle.Init.FifoThreshold = 4;                              /* FIFO阈值为4个字节 */
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <qspi_init+0x54>)
 8001206:	2204      	movs	r2, #4
 8001208:	609a      	str	r2, [r3, #8]
    g_qspi_handle.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;/* 采样移位半个周期(DDR模式下,必须设置为0) */
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <qspi_init+0x54>)
 800120c:	2210      	movs	r2, #16
 800120e:	60da      	str	r2, [r3, #12]
    g_qspi_handle.Init.FlashSize = 25-1;                               /* SPI FLASH大小，BY25Q128大小为32M字节,2^25，所以取权值25-1=24 */
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <qspi_init+0x54>)
 8001212:	2218      	movs	r2, #24
 8001214:	611a      	str	r2, [r3, #16]
    g_qspi_handle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE; /* 片选高电平时间为3个时钟(9.1*3=27.3ns),即手册里面的tSHSL参数 */
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <qspi_init+0x54>)
 8001218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800121c:	615a      	str	r2, [r3, #20]
    g_qspi_handle.Init.ClockMode = QSPI_CLOCK_MODE_3;                  /* 模式3 */
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <qspi_init+0x54>)
 8001220:	2201      	movs	r2, #1
 8001222:	619a      	str	r2, [r3, #24]
    g_qspi_handle.Init.FlashID = QSPI_FLASH_ID_1;                      /* 第一片flash */
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <qspi_init+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
    g_qspi_handle.Init.DualFlash = QSPI_DUALFLASH_DISABLE;             /* 禁止双闪存模式 */
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <qspi_init+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]

    if(HAL_QSPI_Init(&g_qspi_handle) == HAL_OK)
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <qspi_init+0x54>)
 8001232:	f001 ff57 	bl	80030e4 <HAL_QSPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <qspi_init+0x4c>
    {
        return 0;      /* QSPI初始化成功 */
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <qspi_init+0x4e>
    }
    else
    {
        return 1;
 8001240:	2301      	movs	r3, #1
    }
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	240011fc 	.word	0x240011fc
 800124c:	52005000 	.word	0x52005000

08001250 <HAL_QSPI_MspInit>:
 * @param       hqspi:QSPI句柄
 * @note        此函数会被HAL_QSPI_Init()调用
 * @retval      0, 成功; 1, 失败.
 */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    __HAL_RCC_QSPI_CLK_ENABLE();      /* 使能QSPI时钟 */
 8001258:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 800125a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800125e:	4a40      	ldr	r2, [pc, #256]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001268:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 800126a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800126e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();     /* GPIOB时钟使能 */
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	4a38      	ldr	r2, [pc, #224]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001286:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();     /* GPIOD时钟使能 */
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	4a31      	ldr	r2, [pc, #196]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();     /* GPIOE时钟使能 */
 80012b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	4a29      	ldr	r2, [pc, #164]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c2:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <HAL_QSPI_MspInit+0x110>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

    gpio_init_struct.Pin = QSPI_BK1_NCS_GPIO_PIN;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	61fb      	str	r3, [r7, #28]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;                     /* 复用 */
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
    gpio_init_struct.Pull = GPIO_PULLUP;                         /* 上拉 */
 80012d8:	2301      	movs	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;          /* 高速 */
 80012dc:	2303      	movs	r3, #3
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_struct.Alternate = GPIO_AF10_QUADSPI;              /* 复用为QSPI */
 80012e0:	230a      	movs	r3, #10
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_PORT, &gpio_init_struct);    /* 初始化QSPI_BK1_NCS引脚 */
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	481e      	ldr	r0, [pc, #120]	@ (8001364 <HAL_QSPI_MspInit+0x114>)
 80012ec:	f001 fcb8 	bl	8002c60 <HAL_GPIO_Init>

    gpio_init_struct.Pin = QSPI_BK1_CLK_GPIO_PIN;
 80012f0:	2304      	movs	r3, #4
 80012f2:	61fb      	str	r3, [r7, #28]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;                     /* 复用 */
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    gpio_init_struct.Pull = GPIO_PULLUP;                         /* 上拉 */
 80012f8:	2301      	movs	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;          /* 高速 */
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_struct.Alternate = GPIO_AF9_QUADSPI;               /* 复用为QSPI */
 8001300:	2309      	movs	r3, #9
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_BK1_CLK_GPIO_PORT, &gpio_init_struct);    /* 初始化QSPI_BK1_CLK引脚 */
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4816      	ldr	r0, [pc, #88]	@ (8001364 <HAL_QSPI_MspInit+0x114>)
 800130c:	f001 fca8 	bl	8002c60 <HAL_GPIO_Init>

    gpio_init_struct.Pin = QSPI_BK1_IO0_GPIO_PIN;
 8001310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_PORT, &gpio_init_struct);    /* 初始化QSPI_BK1_IO0引脚 */
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4812      	ldr	r0, [pc, #72]	@ (8001368 <HAL_QSPI_MspInit+0x118>)
 800131e:	f001 fc9f 	bl	8002c60 <HAL_GPIO_Init>

    gpio_init_struct.Pin = QSPI_BK1_IO1_GPIO_PIN;
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_PORT, &gpio_init_struct);    /* 初始化QSPI_BK1_IO1引脚 */
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	480e      	ldr	r0, [pc, #56]	@ (8001368 <HAL_QSPI_MspInit+0x118>)
 8001330:	f001 fc96 	bl	8002c60 <HAL_GPIO_Init>

    gpio_init_struct.Pin = QSPI_BK1_IO2_GPIO_PIN;
 8001334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_PORT, &gpio_init_struct);    /* 初始化QSPI_BK1_IO2引脚 */
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	@ (8001368 <HAL_QSPI_MspInit+0x118>)
 8001342:	f001 fc8d 	bl	8002c60 <HAL_GPIO_Init>

    gpio_init_struct.Pin = QSPI_BK1_IO3_GPIO_PIN;
 8001346:	2304      	movs	r3, #4
 8001348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_PORT, &gpio_init_struct);    /* 初始化QSPI_BK1_IO3引脚 */
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4806      	ldr	r0, [pc, #24]	@ (800136c <HAL_QSPI_MspInit+0x11c>)
 8001352:	f001 fc85 	bl	8002c60 <HAL_GPIO_Init>
}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	@ 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	58024400 	.word	0x58024400
 8001364:	58020400 	.word	0x58020400
 8001368:	58020c00 	.word	0x58020c00
 800136c:	58021000 	.word	0x58021000

08001370 <qspi_send_cmd>:
 *   @arg       mode[7:6]: 数据模式; 00,无数据;  01,单线传输数据; 10,双线传输数据; 11,四线传输数据.
 * @param       dmcycle: 空指令周期数
 * @retval      无
 */
void qspi_send_cmd(uint8_t cmd, uint32_t addr, uint8_t mode, uint8_t dmcycle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	@ 0x40
 8001374:	af00      	add	r7, sp, #0
 8001376:	6039      	str	r1, [r7, #0]
 8001378:	4611      	mov	r1, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	460b      	mov	r3, r1
 8001382:	71bb      	strb	r3, [r7, #6]
 8001384:	4613      	mov	r3, r2
 8001386:	717b      	strb	r3, [r7, #5]
    QSPI_CommandTypeDef qspi_command_handle;

    qspi_command_handle.Instruction = cmd;                              /* 指令 */
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	60bb      	str	r3, [r7, #8]
    qspi_command_handle.Address = addr;                                 /* 地址 */
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	60fb      	str	r3, [r7, #12]
    qspi_command_handle.DummyCycles = dmcycle;                          /* 设置空指令周期数 */
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	61fb      	str	r3, [r7, #28]

    if(((mode >> 0) & 0x03) == 0)
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <qspi_send_cmd+0x34>
    qspi_command_handle.InstructionMode = QSPI_INSTRUCTION_NONE;        /* 指令模式 */
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	e019      	b.n	80013d8 <qspi_send_cmd+0x68>
    else if(((mode >> 0) & 0x03) == 1)
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d103      	bne.n	80013b6 <qspi_send_cmd+0x46>
    qspi_command_handle.InstructionMode = QSPI_INSTRUCTION_1_LINE;      /* 指令模式 */
 80013ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	e010      	b.n	80013d8 <qspi_send_cmd+0x68>
    else if(((mode >> 0) & 0x03) == 2)
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d103      	bne.n	80013c8 <qspi_send_cmd+0x58>
    qspi_command_handle.InstructionMode = QSPI_INSTRUCTION_2_LINES;     /* 指令模式 */
 80013c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	e007      	b.n	80013d8 <qspi_send_cmd+0x68>
    else if(((mode >> 0) & 0x03) == 3)
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d102      	bne.n	80013d8 <qspi_send_cmd+0x68>
    qspi_command_handle.InstructionMode = QSPI_INSTRUCTION_4_LINES;     /* 指令模式 */
 80013d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013d6:	623b      	str	r3, [r7, #32]

    if(((mode >> 2) & 0x03) == 0)
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <qspi_send_cmd+0x7c>
    qspi_command_handle.AddressMode = QSPI_ADDRESS_NONE;                /* 地址模式 */
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ea:	e01f      	b.n	800142c <qspi_send_cmd+0xbc>
    else if(((mode >> 2) & 0x03) == 1)
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d103      	bne.n	8001402 <qspi_send_cmd+0x92>
    qspi_command_handle.AddressMode = QSPI_ADDRESS_1_LINE;              /* 地址模式 */
 80013fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001400:	e014      	b.n	800142c <qspi_send_cmd+0xbc>
    else if(((mode >> 2) & 0x03) == 2)
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d103      	bne.n	8001418 <qspi_send_cmd+0xa8>
    qspi_command_handle.AddressMode = QSPI_ADDRESS_2_LINES;             /* 地址模式 */
 8001410:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
 8001416:	e009      	b.n	800142c <qspi_send_cmd+0xbc>
    else if(((mode >> 2) & 0x03) == 3)
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b03      	cmp	r3, #3
 8001424:	d102      	bne.n	800142c <qspi_send_cmd+0xbc>
    qspi_command_handle.AddressMode = QSPI_ADDRESS_4_LINES;             /* 地址模式 */
 8001426:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24

    if(((mode >> 4)&0x03) == 0)
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <qspi_send_cmd+0xd0>
    qspi_command_handle.AddressSize = QSPI_ADDRESS_8_BITS;              /* 地址长度 */
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e01f      	b.n	8001480 <qspi_send_cmd+0x110>
    else if(((mode >> 4) & 0x03) == 1)
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d103      	bne.n	8001456 <qspi_send_cmd+0xe6>
    qspi_command_handle.AddressSize = QSPI_ADDRESS_16_BITS;             /* 地址长度 */
 800144e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e014      	b.n	8001480 <qspi_send_cmd+0x110>
    else if(((mode >> 4) & 0x03) == 2)
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d103      	bne.n	800146c <qspi_send_cmd+0xfc>
    qspi_command_handle.AddressSize = QSPI_ADDRESS_24_BITS;             /* 地址长度 */
 8001464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e009      	b.n	8001480 <qspi_send_cmd+0x110>
    else if(((mode >> 4) & 0x03) == 3)
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b03      	cmp	r3, #3
 8001478:	d102      	bne.n	8001480 <qspi_send_cmd+0x110>
    qspi_command_handle.AddressSize = QSPI_ADDRESS_32_BITS;             /* 地址长度 */
 800147a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800147e:	617b      	str	r3, [r7, #20]

    if(((mode >> 6) & 0x03) == 0)
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	099b      	lsrs	r3, r3, #6
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <qspi_send_cmd+0x124>
    qspi_command_handle.DataMode=QSPI_DATA_NONE;                        /* 数据模式 */
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001492:	e01f      	b.n	80014d4 <qspi_send_cmd+0x164>
    else if(((mode >> 6) & 0x03) == 1)
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	099b      	lsrs	r3, r3, #6
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d103      	bne.n	80014aa <qspi_send_cmd+0x13a>
    qspi_command_handle.DataMode = QSPI_DATA_1_LINE;                    /* 数据模式 */
 80014a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014a8:	e014      	b.n	80014d4 <qspi_send_cmd+0x164>
    else if(((mode >> 6) & 0x03) == 2)
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d103      	bne.n	80014c0 <qspi_send_cmd+0x150>
    qspi_command_handle.DataMode = QSPI_DATA_2_LINES;                   /* 数据模式 */
 80014b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014be:	e009      	b.n	80014d4 <qspi_send_cmd+0x164>
    else if(((mode >> 6) & 0x03) == 3)
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d102      	bne.n	80014d4 <qspi_send_cmd+0x164>
    qspi_command_handle.DataMode = QSPI_DATA_4_LINES;                   /* 数据模式 */
 80014ce:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    qspi_command_handle.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;            /* 每次都发送指令 */
 80014d4:	2300      	movs	r3, #0
 80014d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    qspi_command_handle.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;  /* 无交替字节 */
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
    qspi_command_handle.DdrMode = QSPI_DDR_MODE_DISABLE;                /* 关闭DDR模式 */
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
    qspi_command_handle.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    HAL_QSPI_Command(&g_qspi_handle, &qspi_command_handle, 5000);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ec:	4619      	mov	r1, r3
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <qspi_send_cmd+0x18c>)
 80014f0:	f001 fe6c 	bl	80031cc <HAL_QSPI_Command>
}
 80014f4:	bf00      	nop
 80014f6:	3740      	adds	r7, #64	@ 0x40
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	240011fc 	.word	0x240011fc

08001500 <qspi_receive>:
 * @param       buf     : 接收数据缓冲区首地址
 * @param       datalen : 要传输的数据长度
 * @retval      0, 成功; 其他, 错误代码.
 */
uint8_t qspi_receive(uint8_t *buf, uint32_t datalen)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    g_qspi_handle.Instance->DLR = datalen - 1;   /* 配置数据长度 */
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <qspi_receive+0x34>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	3a01      	subs	r2, #1
 8001512:	611a      	str	r2, [r3, #16]
    if (HAL_QSPI_Receive(&g_qspi_handle, buf, 5000) == HAL_OK)
 8001514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <qspi_receive+0x34>)
 800151c:	f001 ff46 	bl	80033ac <HAL_QSPI_Receive>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <qspi_receive+0x2a>
    {
        return 0;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <qspi_receive+0x2c>
    }
    else
    {
        return 1;
 800152a:	2301      	movs	r3, #1
    }
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	240011fc 	.word	0x240011fc

08001538 <qspi_transmit>:
 * @param       buf     : 发送数据缓冲区首地址
 * @param       datalen : 要传输的数据长度
 * @retval      0, 成功; 其他, 错误代码.
 */
uint8_t qspi_transmit(uint8_t *buf, uint32_t datalen)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    g_qspi_handle.Instance->DLR = datalen - 1; /* 配置数据长度 */
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <qspi_transmit+0x34>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	3a01      	subs	r2, #1
 800154a:	611a      	str	r2, [r3, #16]
    if (HAL_QSPI_Transmit(&g_qspi_handle, buf, 5000) == HAL_OK)
 800154c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4806      	ldr	r0, [pc, #24]	@ (800156c <qspi_transmit+0x34>)
 8001554:	f001 fe98 	bl	8003288 <HAL_QSPI_Transmit>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <qspi_transmit+0x2a>
    {
        return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <qspi_transmit+0x2c>
    }
    else
    {
        return 1;
 8001562:	2301      	movs	r3, #1
    }
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	240011fc 	.word	0x240011fc

08001570 <sys_qspi_enable_memmapmode>:
 *   @arg           0, 普通FLASH, 容量在128Mbit及以内的
 *   @arg           1, 大容量FLASH, 容量在256Mbit及以上的.
 * @retval      无
 */
void sys_qspi_enable_memmapmode(uint8_t ftype)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
    uint32_t tempreg = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitTypeDef qspi_gpio;

    __HAL_RCC_GPIOB_CLK_ENABLE();                            /* 使能PORTB时钟 */
 800157e:	4b79      	ldr	r3, [pc, #484]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001584:	4a77      	ldr	r2, [pc, #476]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158e:	4b75      	ldr	r3, [pc, #468]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();                            /* 使能PORTD时钟 */
 800159c:	4b71      	ldr	r3, [pc, #452]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a2:	4a70      	ldr	r2, [pc, #448]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();                            /* 使能PORTE时钟 */
 80015ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c0:	4a68      	ldr	r2, [pc, #416]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ca:	4b66      	ldr	r3, [pc, #408]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_QSPI_CLK_ENABLE();                             /* QSPI时钟使能 */
 80015d8:	4b62      	ldr	r3, [pc, #392]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015de:	4a61      	ldr	r2, [pc, #388]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80015e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 80015ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]

    qspi_gpio.Pin = GPIO_PIN_6;                              /* PB6 AF10 */
 80015f6:	2340      	movs	r3, #64	@ 0x40
 80015f8:	61bb      	str	r3, [r7, #24]
    qspi_gpio.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
    qspi_gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    qspi_gpio.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
    qspi_gpio.Alternate = GPIO_AF10_QUADSPI;
 8001606:	230a      	movs	r3, #10
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &qspi_gpio);
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	4619      	mov	r1, r3
 8001610:	4855      	ldr	r0, [pc, #340]	@ (8001768 <sys_qspi_enable_memmapmode+0x1f8>)
 8001612:	f001 fb25 	bl	8002c60 <HAL_GPIO_Init>

    qspi_gpio.Pin = GPIO_PIN_2;                              /* PB2 AF9 */
 8001616:	2304      	movs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
    qspi_gpio.Alternate = GPIO_AF9_QUADSPI;
 800161a:	2309      	movs	r3, #9
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &qspi_gpio);
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	4619      	mov	r1, r3
 8001624:	4850      	ldr	r0, [pc, #320]	@ (8001768 <sys_qspi_enable_memmapmode+0x1f8>)
 8001626:	f001 fb1b 	bl	8002c60 <HAL_GPIO_Init>

    qspi_gpio.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13; /* PD11,12,13 AF9 */
 800162a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800162e:	61bb      	str	r3, [r7, #24]
    qspi_gpio.Alternate = GPIO_AF9_QUADSPI;
 8001630:	2309      	movs	r3, #9
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &qspi_gpio);
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4619      	mov	r1, r3
 800163a:	484c      	ldr	r0, [pc, #304]	@ (800176c <sys_qspi_enable_memmapmode+0x1fc>)
 800163c:	f001 fb10 	bl	8002c60 <HAL_GPIO_Init>

    qspi_gpio.Pin = GPIO_PIN_2;                              /* PE2 AF9 */
 8001640:	2304      	movs	r3, #4
 8001642:	61bb      	str	r3, [r7, #24]
    qspi_gpio.Alternate = GPIO_AF9_QUADSPI;
 8001644:	2309      	movs	r3, #9
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &qspi_gpio);
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	4619      	mov	r1, r3
 800164e:	4848      	ldr	r0, [pc, #288]	@ (8001770 <sys_qspi_enable_memmapmode+0x200>)
 8001650:	f001 fb06 	bl	8002c60 <HAL_GPIO_Init>

    /* QSPI设置，参考QSPI实验的QSPI_Init函数 */
    RCC->AHB3RSTR |= 1 << 14;       /* 复位QSPI */
 8001654:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 8001656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001658:	4a42      	ldr	r2, [pc, #264]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    RCC->AHB3RSTR &= ~(1 << 14);    /* 停止复位QSPI */
 8001660:	4b40      	ldr	r3, [pc, #256]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 8001662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001664:	4a3f      	ldr	r2, [pc, #252]	@ (8001764 <sys_qspi_enable_memmapmode+0x1f4>)
 8001666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800166a:	67d3      	str	r3, [r2, #124]	@ 0x7c

    while (QUADSPI->SR & (1 << 5)); /* 等待BUSY位清零 */
 800166c:	bf00      	nop
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f9      	bne.n	800166e <sys_qspi_enable_memmapmode+0xfe>

    /* QSPI时钟源已经在sys_stm32_clock_init()函数中设置 */
    QUADSPI->CR = 0X01000310;       /* 设置CR寄存器, 这些值怎么来的，请参考QSPI实验/看H750参考手册寄存器描述分析 */
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 800167c:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <sys_qspi_enable_memmapmode+0x208>)
 800167e:	601a      	str	r2, [r3, #0]
    QUADSPI->DCR = 0X00180201;      /* 设置DCR寄存器(FLASH容量32M(最大容量设置为32M, 默认用16M的), tSHSL = 3个时钟) */
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 8001682:	4a3e      	ldr	r2, [pc, #248]	@ (800177c <sys_qspi_enable_memmapmode+0x20c>)
 8001684:	605a      	str	r2, [r3, #4]
    QUADSPI->CR |= 1 << 0;          /* 使能QSPI */
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a3a      	ldr	r2, [pc, #232]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]
     *  我们在QSPI烧写算法里面已经设置了ADP=1(上电即32位地址模式),因此这里也
     *  不需要发送进入4字节地址模式指令/设置ADP=1了, 否则还需要设置ADP=1
     */

    /* BY/W25QXX 写使能（0X06指令）*/
    while (QUADSPI->SR & (1 << 5)); /* 等待BUSY位清零 */
 8001692:	bf00      	nop
 8001694:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f9      	bne.n	8001694 <sys_qspi_enable_memmapmode+0x124>

    QUADSPI->CCR = 0X00000106;      /* 发送0X06指令，BY/W25QXX写使能 */
 80016a0:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 80016a2:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80016a6:	615a      	str	r2, [r3, #20]

    while ((QUADSPI->SR & (1 << 1)) == 0);/* 等待指令发送完成 */
 80016a8:	bf00      	nop
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f9      	beq.n	80016aa <sys_qspi_enable_memmapmode+0x13a>

    QUADSPI->FCR |= 1 << 1;         /* 清除发送完成标志位 */
 80016b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	60d3      	str	r3, [r2, #12]

    /* MemroyMap 模式设置 */
    while (QUADSPI->SR & (1 << 5)); /* 等待BUSY位清零 */
 80016c2:	bf00      	nop
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <sys_qspi_enable_memmapmode+0x154>

    QUADSPI->ABR = 0;               /* 交替字节设置为0，实际上就是25QXX 0XEB指令的, M0~M7 = 0 */
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
    tempreg = 0XEB;                 /* INSTRUCTION[7:0] = 0XEB, 发送0XEB指令（Fast Read QUAD I/O） */
 80016d6:	23eb      	movs	r3, #235	@ 0xeb
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= 1 << 8;              /* IMODE[1:0] = 1, 单线传输指令 */
 80016da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= 3 << 10;             /* ADDRESS[1:0] = 3, 四线传输地址 */
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= (2 + ftype) << 12;   /* ADSIZE[1:0] = 2/3, 24位(ftype = 0) / 32位(ftype = 1)地址长度 */
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	3302      	adds	r3, #2
 80016ee:	031b      	lsls	r3, r3, #12
 80016f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f2:	4313      	orrs	r3, r2
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= 3 << 14;             /* ABMODE[1:0] = 3, 四线传输交替字节 */
 80016f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= 0 << 16;             /* ABSIZE[1:0] = 0, 8位交替字节(M0~M7) */
    tempreg |= 4 << 18;             /* DCYC[4:0] = 4, 4个dummy周期 */
 80016fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001700:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= 3 << 24;             /* DMODE[1:0] = 3, 四线传输数据 */
 8001706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001708:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempreg |= 3 << 26;             /* FMODE[1:0] = 3, 内存映射模式 */
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8001714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    QUADSPI->CCR = tempreg;         /* 设置CCR寄存器 */
 8001716:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <sys_qspi_enable_memmapmode+0x204>)
 8001718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171a:	6153      	str	r3, [r2, #20]

    /* 设置QSPI FLASH空间的MPU保护 */
    SCB->SHCSR &= ~(1 << 16);       /* 禁止MemManage */
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <sys_qspi_enable_memmapmode+0x210>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	4a17      	ldr	r2, [pc, #92]	@ (8001780 <sys_qspi_enable_memmapmode+0x210>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001726:	6253      	str	r3, [r2, #36]	@ 0x24
    MPU->CTRL &= ~(1 << 0);         /* 禁止MPU */
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <sys_qspi_enable_memmapmode+0x214>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <sys_qspi_enable_memmapmode+0x214>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6053      	str	r3, [r2, #4]
    MPU->RNR = 0;                   /* 设置保护区域编号为0(1~7可以给其他内存用) */
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <sys_qspi_enable_memmapmode+0x214>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
    MPU->RBAR = 0X90000000;         /* 基地址为0X9000 000, 即QSPI的起始地址 */
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <sys_qspi_enable_memmapmode+0x214>)
 800173c:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8001740:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0X0303002D;         /* 设置相关保护参数(禁止共用, 允许cache, 允许缓冲), 详见MPU实验的解析 */
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <sys_qspi_enable_memmapmode+0x214>)
 8001744:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <sys_qspi_enable_memmapmode+0x218>)
 8001746:	611a      	str	r2, [r3, #16]
    MPU->CTRL = (1 << 2) | (1 << 0);/* 使能PRIVDEFENA, 使能MPU */
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <sys_qspi_enable_memmapmode+0x214>)
 800174a:	2205      	movs	r2, #5
 800174c:	605a      	str	r2, [r3, #4]
    SCB->SHCSR |= 1 << 16;          /* 使能MemManage */
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <sys_qspi_enable_memmapmode+0x210>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <sys_qspi_enable_memmapmode+0x210>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001758:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	58024400 	.word	0x58024400
 8001768:	58020400 	.word	0x58020400
 800176c:	58020c00 	.word	0x58020c00
 8001770:	58021000 	.word	0x58021000
 8001774:	52005000 	.word	0x52005000
 8001778:	01000310 	.word	0x01000310
 800177c:	00180201 	.word	0x00180201
 8001780:	e000ed00 	.word	0xe000ed00
 8001784:	e000ed90 	.word	0xe000ed90
 8001788:	0303002d 	.word	0x0303002d

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_MspInit+0x30>)
 8001794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001798:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x30>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x30>)
 80017a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	58024400 	.word	0x58024400

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 fb0b 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <WWDG_IRQHandler+0x10>)
 8001826:	f006 fc07 	bl	8008038 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240012e0 	.word	0x240012e0

08001834 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8001838:	2002      	movs	r0, #2
 800183a:	f001 fbf4 	bl	8003026 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <USART1_IRQHandler+0x10>)
 800184a:	f004 ff19 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2400124c 	.word	0x2400124c

08001858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_kill>:

int _kill(int pid, int sig)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001872:	f007 fa9b 	bl	8008dac <__errno>
 8001876:	4603      	mov	r3, r0
 8001878:	2216      	movs	r2, #22
 800187a:	601a      	str	r2, [r3, #0]
  return -1;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_exit>:

void _exit (int status)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffe7 	bl	8001868 <_kill>
  while (1) {}    /* Make sure we hang here */
 800189a:	bf00      	nop
 800189c:	e7fd      	b.n	800189a <_exit+0x12>

0800189e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e00a      	b.n	80018c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b0:	f3af 8000 	nop.w
 80018b4:	4601      	mov	r1, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	60ba      	str	r2, [r7, #8]
 80018bc:	b2ca      	uxtb	r2, r1
 80018be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbf0      	blt.n	80018b0 <_read+0x12>
  }

  return len;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e009      	b.n	80018fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	60ba      	str	r2, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f9ec 	bl	8001cd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf1      	blt.n	80018ea <_write+0x12>
  }
  return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_close>:

int _close(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001938:	605a      	str	r2, [r3, #4]
  return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_isatty>:

int _isatty(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f007 fa00 	bl	8008dac <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	24080000 	.word	0x24080000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	24001248 	.word	0x24001248
 80019e0:	24001448 	.word	0x24001448

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e8:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <SystemInit+0x114>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a42      	ldr	r2, [pc, #264]	@ (8001af8 <SystemInit+0x114>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019f8:	4b40      	ldr	r3, [pc, #256]	@ (8001afc <SystemInit+0x118>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	2b06      	cmp	r3, #6
 8001a02:	d807      	bhi.n	8001a14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a04:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <SystemInit+0x118>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 030f 	bic.w	r3, r3, #15
 8001a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001afc <SystemInit+0x118>)
 8001a0e:	f043 0307 	orr.w	r3, r3, #7
 8001a12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a14:	4b3a      	ldr	r3, [pc, #232]	@ (8001b00 <SystemInit+0x11c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a39      	ldr	r2, [pc, #228]	@ (8001b00 <SystemInit+0x11c>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a20:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <SystemInit+0x11c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a26:	4b36      	ldr	r3, [pc, #216]	@ (8001b00 <SystemInit+0x11c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4935      	ldr	r1, [pc, #212]	@ (8001b00 <SystemInit+0x11c>)
 8001a2c:	4b35      	ldr	r3, [pc, #212]	@ (8001b04 <SystemInit+0x120>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <SystemInit+0x118>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <SystemInit+0x118>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 030f 	bic.w	r3, r3, #15
 8001a46:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <SystemInit+0x118>)
 8001a48:	f043 0307 	orr.w	r3, r3, #7
 8001a4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <SystemInit+0x11c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a54:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <SystemInit+0x11c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <SystemInit+0x11c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <SystemInit+0x11c>)
 8001a62:	4a29      	ldr	r2, [pc, #164]	@ (8001b08 <SystemInit+0x124>)
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <SystemInit+0x11c>)
 8001a68:	4a28      	ldr	r2, [pc, #160]	@ (8001b0c <SystemInit+0x128>)
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <SystemInit+0x11c>)
 8001a6e:	4a28      	ldr	r2, [pc, #160]	@ (8001b10 <SystemInit+0x12c>)
 8001a70:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a72:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <SystemInit+0x11c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <SystemInit+0x11c>)
 8001a7a:	4a25      	ldr	r2, [pc, #148]	@ (8001b10 <SystemInit+0x12c>)
 8001a7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <SystemInit+0x11c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <SystemInit+0x11c>)
 8001a86:	4a22      	ldr	r2, [pc, #136]	@ (8001b10 <SystemInit+0x12c>)
 8001a88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <SystemInit+0x11c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <SystemInit+0x11c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1a      	ldr	r2, [pc, #104]	@ (8001b00 <SystemInit+0x11c>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <SystemInit+0x11c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <SystemInit+0x130>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <SystemInit+0x134>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aae:	d202      	bcs.n	8001ab6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <SystemInit+0x138>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <SystemInit+0x11c>)
 8001ab8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d113      	bne.n	8001aec <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <SystemInit+0x11c>)
 8001ac6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001aca:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <SystemInit+0x11c>)
 8001acc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ad0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <SystemInit+0x13c>)
 8001ad6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ada:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <SystemInit+0x11c>)
 8001ade:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <SystemInit+0x11c>)
 8001ae4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ae8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	52002000 	.word	0x52002000
 8001b00:	58024400 	.word	0x58024400
 8001b04:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b08:	02020200 	.word	0x02020200
 8001b0c:	01ff0000 	.word	0x01ff0000
 8001b10:	01010280 	.word	0x01010280
 8001b14:	5c001000 	.word	0x5c001000
 8001b18:	ffff0000 	.word	0xffff0000
 8001b1c:	51008108 	.word	0x51008108
 8001b20:	52004000 	.word	0x52004000

08001b24 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <ExitRun0Mode+0x2c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <ExitRun0Mode+0x2c>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b34:	bf00      	nop
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <ExitRun0Mode+0x2c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f9      	beq.n	8001b36 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	58024800 	.word	0x58024800

08001b54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b58:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b5a:	4a23      	ldr	r2, [pc, #140]	@ (8001be8 <MX_USART1_UART_Init+0x94>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b9c:	4811      	ldr	r0, [pc, #68]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001b9e:	f004 fc91 	bl	80064c4 <HAL_UART_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ba8:	f7ff faf0 	bl	800118c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bac:	2100      	movs	r1, #0
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001bb0:	f006 f978 	bl	8007ea4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bba:	f7ff fae7 	bl	800118c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4808      	ldr	r0, [pc, #32]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001bc2:	f006 f9ad 	bl	8007f20 <HAL_UARTEx_SetRxFifoThreshold>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bcc:	f7ff fade 	bl	800118c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bd0:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <MX_USART1_UART_Init+0x90>)
 8001bd2:	f006 f92e 	bl	8007e32 <HAL_UARTEx_DisableFifoMode>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bdc:	f7ff fad6 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2400124c 	.word	0x2400124c
 8001be8:	40011000 	.word	0x40011000

08001bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ba      	sub	sp, #232	@ 0xe8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	22c0      	movs	r2, #192	@ 0xc0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 f87b 	bl	8008d08 <memset>
  if(uartHandle->Instance==USART1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <HAL_UART_MspInit+0xd8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d14e      	bne.n	8001cba <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c1c:	f04f 0201 	mov.w	r2, #1
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fe1a 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c3e:	f7ff faa5 	bl	800118c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <HAL_UART_MspInit+0xdc>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c48:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <HAL_UART_MspInit+0xdc>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_UART_MspInit+0xdc>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_UART_MspInit+0xdc>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c66:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_UART_MspInit+0xdc>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_UART_MspInit+0xdc>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4809      	ldr	r0, [pc, #36]	@ (8001ccc <HAL_UART_MspInit+0xe0>)
 8001ca6:	f000 ffdb 	bl	8002c60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2025      	movs	r0, #37	@ 0x25
 8001cb0:	f000 f9c5 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cb4:	2025      	movs	r0, #37	@ 0x25
 8001cb6:	f000 f9dc 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cba:	bf00      	nop
 8001cbc:	37e8      	adds	r7, #232	@ 0xe8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58020000 	.word	0x58020000

08001cd0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001cd8:	1d39      	adds	r1, r7, #4
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <__io_putchar+0x20>)
 8001ce2:	f004 fc3f 	bl	8006564 <HAL_UART_Transmit>
    return ch;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2400124c 	.word	0x2400124c

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d30 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001cf8:	f7ff ff14 	bl	8001b24 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cfc:	f7ff fe72 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	@ (8001d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f007 f847 	bl	8008db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff f8d9 	bl	8000ee0 <main>
  bx  lr
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d38:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001d3c:	0800adbc 	.word	0x0800adbc
  ldr r2, =_sbss
 8001d40:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001d44:	24001444 	.word	0x24001444

08001d48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC3_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d52:	2003      	movs	r0, #3
 8001d54:	f000 f968 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d58:	f002 fbb2 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_Init+0x68>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	4913      	ldr	r1, [pc, #76]	@ (8001db8 <HAL_Init+0x6c>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_Init+0x68>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_Init+0x6c>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_Init+0x70>)
 8001d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d90:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <HAL_Init+0x74>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d96:	200f      	movs	r0, #15
 8001d98:	f000 f814 	bl	8001dc4 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e002      	b.n	8001dac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001da6:	f7ff fcf1 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	58024400 	.word	0x58024400
 8001db8:	0800a9fc 	.word	0x0800a9fc
 8001dbc:	24000008 	.word	0x24000008
 8001dc0:	24000004 	.word	0x24000004

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dcc:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_InitTick+0x60>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e021      	b.n	8001e1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_InitTick+0x64>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_InitTick+0x60>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f94d 	bl	800208e <HAL_SYSTICK_Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d80a      	bhi.n	8001e1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f000 f917 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4a06      	ldr	r2, [pc, #24]	@ (8001e2c <HAL_InitTick+0x68>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	24000010 	.word	0x24000010
 8001e28:	24000004 	.word	0x24000004
 8001e2c:	2400000c 	.word	0x2400000c

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	24000010 	.word	0x24000010
 8001e54:	240012f4 	.word	0x240012f4

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	240012f4 	.word	0x240012f4

08001e70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_GetREVID+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0c1b      	lsrs	r3, r3, #16
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	5c001000 	.word	0x5c001000

08001e88 <__NVIC_SetPriorityGrouping>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	05fa0000 	.word	0x05fa0000

08001ed0 <__NVIC_GetPriorityGrouping>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4907      	ldr	r1, [pc, #28]	@ (8001f24 <__NVIC_EnableIRQ+0x38>)
 8001f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	@ (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff29 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff40 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff90 	bl	8001f7c <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5f 	bl	8001f28 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff33 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa4 	bl	8001fe4 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020ac:	f3bf 8f5f 	dmb	sy
}
 80020b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <HAL_MPU_Disable+0x28>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <HAL_MPU_Disable+0x28>)
 80020b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_MPU_Disable+0x2c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00
 80020d4:	e000ed90 	.word	0xe000ed90

080020d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002110 <HAL_MPU_Enable+0x38>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_MPU_Enable+0x3c>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_MPU_Enable+0x3c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020f6:	f3bf 8f4f 	dsb	sy
}
 80020fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020fc:	f3bf 8f6f 	isb	sy
}
 8002100:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed90 	.word	0xe000ed90
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	785a      	ldrb	r2, [r3, #1]
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_MPU_ConfigRegion+0x7c>)
 8002126:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_MPU_ConfigRegion+0x7c>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <HAL_MPU_ConfigRegion+0x7c>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002134:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <HAL_MPU_ConfigRegion+0x7c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7b1b      	ldrb	r3, [r3, #12]
 8002140:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7adb      	ldrb	r3, [r3, #11]
 8002146:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002148:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7a9b      	ldrb	r3, [r3, #10]
 800214e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b5b      	ldrb	r3, [r3, #13]
 8002156:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7b9b      	ldrb	r3, [r3, #14]
 800215e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7bdb      	ldrb	r3, [r3, #15]
 8002166:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002168:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7a5b      	ldrb	r3, [r3, #9]
 800216e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002170:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7a1b      	ldrb	r3, [r3, #8]
 8002176:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002178:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002182:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002184:	6113      	str	r3, [r2, #16]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed90 	.word	0xe000ed90

08002198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fe5a 	bl	8001e58 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e2dc      	b.n	800276a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e2cd      	b.n	800276a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a76      	ldr	r2, [pc, #472]	@ (80023ac <HAL_DMA_Abort+0x214>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d04a      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a74      	ldr	r2, [pc, #464]	@ (80023b0 <HAL_DMA_Abort+0x218>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d045      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a73      	ldr	r2, [pc, #460]	@ (80023b4 <HAL_DMA_Abort+0x21c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d040      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a71      	ldr	r2, [pc, #452]	@ (80023b8 <HAL_DMA_Abort+0x220>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d03b      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a70      	ldr	r2, [pc, #448]	@ (80023bc <HAL_DMA_Abort+0x224>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d036      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6e      	ldr	r2, [pc, #440]	@ (80023c0 <HAL_DMA_Abort+0x228>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6d      	ldr	r2, [pc, #436]	@ (80023c4 <HAL_DMA_Abort+0x22c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d02c      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6b      	ldr	r2, [pc, #428]	@ (80023c8 <HAL_DMA_Abort+0x230>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d027      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6a      	ldr	r2, [pc, #424]	@ (80023cc <HAL_DMA_Abort+0x234>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a68      	ldr	r2, [pc, #416]	@ (80023d0 <HAL_DMA_Abort+0x238>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01d      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a67      	ldr	r2, [pc, #412]	@ (80023d4 <HAL_DMA_Abort+0x23c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d018      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a65      	ldr	r2, [pc, #404]	@ (80023d8 <HAL_DMA_Abort+0x240>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a64      	ldr	r2, [pc, #400]	@ (80023dc <HAL_DMA_Abort+0x244>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a62      	ldr	r2, [pc, #392]	@ (80023e0 <HAL_DMA_Abort+0x248>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a61      	ldr	r2, [pc, #388]	@ (80023e4 <HAL_DMA_Abort+0x24c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort+0xd6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5f      	ldr	r2, [pc, #380]	@ (80023e8 <HAL_DMA_Abort+0x250>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_DMA_Abort+0xda>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_DMA_Abort+0xdc>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 021e 	bic.w	r2, r2, #30
 8002286:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002296:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e00a      	b.n	80022b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 020e 	bic.w	r2, r2, #14
 80022ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a3c      	ldr	r2, [pc, #240]	@ (80023ac <HAL_DMA_Abort+0x214>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d072      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	@ (80023b0 <HAL_DMA_Abort+0x218>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d06d      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a39      	ldr	r2, [pc, #228]	@ (80023b4 <HAL_DMA_Abort+0x21c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d068      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <HAL_DMA_Abort+0x220>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d063      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a36      	ldr	r2, [pc, #216]	@ (80023bc <HAL_DMA_Abort+0x224>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05e      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a34      	ldr	r2, [pc, #208]	@ (80023c0 <HAL_DMA_Abort+0x228>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d059      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a33      	ldr	r2, [pc, #204]	@ (80023c4 <HAL_DMA_Abort+0x22c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d054      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <HAL_DMA_Abort+0x230>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04f      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a30      	ldr	r2, [pc, #192]	@ (80023cc <HAL_DMA_Abort+0x234>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2e      	ldr	r2, [pc, #184]	@ (80023d0 <HAL_DMA_Abort+0x238>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2d      	ldr	r2, [pc, #180]	@ (80023d4 <HAL_DMA_Abort+0x23c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2b      	ldr	r2, [pc, #172]	@ (80023d8 <HAL_DMA_Abort+0x240>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2a      	ldr	r2, [pc, #168]	@ (80023dc <HAL_DMA_Abort+0x244>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a28      	ldr	r2, [pc, #160]	@ (80023e0 <HAL_DMA_Abort+0x248>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a27      	ldr	r2, [pc, #156]	@ (80023e4 <HAL_DMA_Abort+0x24c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a25      	ldr	r2, [pc, #148]	@ (80023e8 <HAL_DMA_Abort+0x250>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a24      	ldr	r2, [pc, #144]	@ (80023ec <HAL_DMA_Abort+0x254>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a22      	ldr	r2, [pc, #136]	@ (80023f0 <HAL_DMA_Abort+0x258>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a21      	ldr	r2, [pc, #132]	@ (80023f4 <HAL_DMA_Abort+0x25c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1f      	ldr	r2, [pc, #124]	@ (80023f8 <HAL_DMA_Abort+0x260>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1e      	ldr	r2, [pc, #120]	@ (80023fc <HAL_DMA_Abort+0x264>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <HAL_DMA_Abort+0x268>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1b      	ldr	r2, [pc, #108]	@ (8002404 <HAL_DMA_Abort+0x26c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Abort+0x20e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a19      	ldr	r2, [pc, #100]	@ (8002408 <HAL_DMA_Abort+0x270>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d132      	bne.n	800240c <HAL_DMA_Abort+0x274>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e031      	b.n	800240e <HAL_DMA_Abort+0x276>
 80023aa:	bf00      	nop
 80023ac:	40020010 	.word	0x40020010
 80023b0:	40020028 	.word	0x40020028
 80023b4:	40020040 	.word	0x40020040
 80023b8:	40020058 	.word	0x40020058
 80023bc:	40020070 	.word	0x40020070
 80023c0:	40020088 	.word	0x40020088
 80023c4:	400200a0 	.word	0x400200a0
 80023c8:	400200b8 	.word	0x400200b8
 80023cc:	40020410 	.word	0x40020410
 80023d0:	40020428 	.word	0x40020428
 80023d4:	40020440 	.word	0x40020440
 80023d8:	40020458 	.word	0x40020458
 80023dc:	40020470 	.word	0x40020470
 80023e0:	40020488 	.word	0x40020488
 80023e4:	400204a0 	.word	0x400204a0
 80023e8:	400204b8 	.word	0x400204b8
 80023ec:	58025408 	.word	0x58025408
 80023f0:	5802541c 	.word	0x5802541c
 80023f4:	58025430 	.word	0x58025430
 80023f8:	58025444 	.word	0x58025444
 80023fc:	58025458 	.word	0x58025458
 8002400:	5802546c 	.word	0x5802546c
 8002404:	58025480 	.word	0x58025480
 8002408:	58025494 	.word	0x58025494
 800240c:	2300      	movs	r3, #0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002420:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6d      	ldr	r2, [pc, #436]	@ (80025dc <HAL_DMA_Abort+0x444>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d04a      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6b      	ldr	r2, [pc, #428]	@ (80025e0 <HAL_DMA_Abort+0x448>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d045      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6a      	ldr	r2, [pc, #424]	@ (80025e4 <HAL_DMA_Abort+0x44c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d040      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a68      	ldr	r2, [pc, #416]	@ (80025e8 <HAL_DMA_Abort+0x450>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d03b      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a67      	ldr	r2, [pc, #412]	@ (80025ec <HAL_DMA_Abort+0x454>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d036      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a65      	ldr	r2, [pc, #404]	@ (80025f0 <HAL_DMA_Abort+0x458>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d031      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a64      	ldr	r2, [pc, #400]	@ (80025f4 <HAL_DMA_Abort+0x45c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d02c      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a62      	ldr	r2, [pc, #392]	@ (80025f8 <HAL_DMA_Abort+0x460>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d027      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a61      	ldr	r2, [pc, #388]	@ (80025fc <HAL_DMA_Abort+0x464>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5f      	ldr	r2, [pc, #380]	@ (8002600 <HAL_DMA_Abort+0x468>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01d      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a5e      	ldr	r2, [pc, #376]	@ (8002604 <HAL_DMA_Abort+0x46c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d018      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a5c      	ldr	r2, [pc, #368]	@ (8002608 <HAL_DMA_Abort+0x470>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5b      	ldr	r2, [pc, #364]	@ (800260c <HAL_DMA_Abort+0x474>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a59      	ldr	r2, [pc, #356]	@ (8002610 <HAL_DMA_Abort+0x478>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a58      	ldr	r2, [pc, #352]	@ (8002614 <HAL_DMA_Abort+0x47c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d004      	beq.n	80024c2 <HAL_DMA_Abort+0x32a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a56      	ldr	r2, [pc, #344]	@ (8002618 <HAL_DMA_Abort+0x480>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d108      	bne.n	80024d4 <HAL_DMA_Abort+0x33c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e007      	b.n	80024e4 <HAL_DMA_Abort+0x34c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80024e4:	e013      	b.n	800250e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e6:	f7ff fcb7 	bl	8001e58 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d90c      	bls.n	800250e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e12d      	b.n	800276a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e5      	bne.n	80024e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2f      	ldr	r2, [pc, #188]	@ (80025dc <HAL_DMA_Abort+0x444>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d04a      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2d      	ldr	r2, [pc, #180]	@ (80025e0 <HAL_DMA_Abort+0x448>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d045      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2c      	ldr	r2, [pc, #176]	@ (80025e4 <HAL_DMA_Abort+0x44c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d040      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <HAL_DMA_Abort+0x450>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d03b      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <HAL_DMA_Abort+0x454>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d036      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a27      	ldr	r2, [pc, #156]	@ (80025f0 <HAL_DMA_Abort+0x458>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d031      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <HAL_DMA_Abort+0x45c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d02c      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <HAL_DMA_Abort+0x460>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d027      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a23      	ldr	r2, [pc, #140]	@ (80025fc <HAL_DMA_Abort+0x464>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d022      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_DMA_Abort+0x468>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01d      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a20      	ldr	r2, [pc, #128]	@ (8002604 <HAL_DMA_Abort+0x46c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d018      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_DMA_Abort+0x470>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1d      	ldr	r2, [pc, #116]	@ (800260c <HAL_DMA_Abort+0x474>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <HAL_DMA_Abort+0x478>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002614 <HAL_DMA_Abort+0x47c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_DMA_Abort+0x422>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_DMA_Abort+0x480>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_DMA_Abort+0x426>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_DMA_Abort+0x428>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d02b      	beq.n	800261c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	223f      	movs	r2, #63	@ 0x3f
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	e02a      	b.n	8002632 <HAL_DMA_Abort+0x49a>
 80025dc:	40020010 	.word	0x40020010
 80025e0:	40020028 	.word	0x40020028
 80025e4:	40020040 	.word	0x40020040
 80025e8:	40020058 	.word	0x40020058
 80025ec:	40020070 	.word	0x40020070
 80025f0:	40020088 	.word	0x40020088
 80025f4:	400200a0 	.word	0x400200a0
 80025f8:	400200b8 	.word	0x400200b8
 80025fc:	40020410 	.word	0x40020410
 8002600:	40020428 	.word	0x40020428
 8002604:	40020440 	.word	0x40020440
 8002608:	40020458 	.word	0x40020458
 800260c:	40020470 	.word	0x40020470
 8002610:	40020488 	.word	0x40020488
 8002614:	400204a0 	.word	0x400204a0
 8002618:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4f      	ldr	r2, [pc, #316]	@ (8002774 <HAL_DMA_Abort+0x5dc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d072      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_DMA_Abort+0x5e0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d06d      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a4c      	ldr	r2, [pc, #304]	@ (800277c <HAL_DMA_Abort+0x5e4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d068      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a4a      	ldr	r2, [pc, #296]	@ (8002780 <HAL_DMA_Abort+0x5e8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d063      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a49      	ldr	r2, [pc, #292]	@ (8002784 <HAL_DMA_Abort+0x5ec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d05e      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a47      	ldr	r2, [pc, #284]	@ (8002788 <HAL_DMA_Abort+0x5f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d059      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a46      	ldr	r2, [pc, #280]	@ (800278c <HAL_DMA_Abort+0x5f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d054      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a44      	ldr	r2, [pc, #272]	@ (8002790 <HAL_DMA_Abort+0x5f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04f      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a43      	ldr	r2, [pc, #268]	@ (8002794 <HAL_DMA_Abort+0x5fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04a      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a41      	ldr	r2, [pc, #260]	@ (8002798 <HAL_DMA_Abort+0x600>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a40      	ldr	r2, [pc, #256]	@ (800279c <HAL_DMA_Abort+0x604>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d040      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3e      	ldr	r2, [pc, #248]	@ (80027a0 <HAL_DMA_Abort+0x608>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03b      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a3d      	ldr	r2, [pc, #244]	@ (80027a4 <HAL_DMA_Abort+0x60c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d036      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3b      	ldr	r2, [pc, #236]	@ (80027a8 <HAL_DMA_Abort+0x610>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3a      	ldr	r2, [pc, #232]	@ (80027ac <HAL_DMA_Abort+0x614>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d02c      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a38      	ldr	r2, [pc, #224]	@ (80027b0 <HAL_DMA_Abort+0x618>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <HAL_DMA_Abort+0x61c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a35      	ldr	r2, [pc, #212]	@ (80027b8 <HAL_DMA_Abort+0x620>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a34      	ldr	r2, [pc, #208]	@ (80027bc <HAL_DMA_Abort+0x624>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a32      	ldr	r2, [pc, #200]	@ (80027c0 <HAL_DMA_Abort+0x628>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_DMA_Abort+0x62c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2f      	ldr	r2, [pc, #188]	@ (80027c8 <HAL_DMA_Abort+0x630>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2e      	ldr	r2, [pc, #184]	@ (80027cc <HAL_DMA_Abort+0x634>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_Abort+0x58a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2c      	ldr	r2, [pc, #176]	@ (80027d0 <HAL_DMA_Abort+0x638>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Abort+0x58e>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_DMA_Abort+0x590>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002734:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800274c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002756:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020010 	.word	0x40020010
 8002778:	40020028 	.word	0x40020028
 800277c:	40020040 	.word	0x40020040
 8002780:	40020058 	.word	0x40020058
 8002784:	40020070 	.word	0x40020070
 8002788:	40020088 	.word	0x40020088
 800278c:	400200a0 	.word	0x400200a0
 8002790:	400200b8 	.word	0x400200b8
 8002794:	40020410 	.word	0x40020410
 8002798:	40020428 	.word	0x40020428
 800279c:	40020440 	.word	0x40020440
 80027a0:	40020458 	.word	0x40020458
 80027a4:	40020470 	.word	0x40020470
 80027a8:	40020488 	.word	0x40020488
 80027ac:	400204a0 	.word	0x400204a0
 80027b0:	400204b8 	.word	0x400204b8
 80027b4:	58025408 	.word	0x58025408
 80027b8:	5802541c 	.word	0x5802541c
 80027bc:	58025430 	.word	0x58025430
 80027c0:	58025444 	.word	0x58025444
 80027c4:	58025458 	.word	0x58025458
 80027c8:	5802546c 	.word	0x5802546c
 80027cc:	58025480 	.word	0x58025480
 80027d0:	58025494 	.word	0x58025494

080027d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e237      	b.n	8002c56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2280      	movs	r2, #128	@ 0x80
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e22c      	b.n	8002c56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5c      	ldr	r2, [pc, #368]	@ (8002974 <HAL_DMA_Abort_IT+0x1a0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5b      	ldr	r2, [pc, #364]	@ (8002978 <HAL_DMA_Abort_IT+0x1a4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a59      	ldr	r2, [pc, #356]	@ (800297c <HAL_DMA_Abort_IT+0x1a8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <HAL_DMA_Abort_IT+0x1ac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a56      	ldr	r2, [pc, #344]	@ (8002984 <HAL_DMA_Abort_IT+0x1b0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a55      	ldr	r2, [pc, #340]	@ (8002988 <HAL_DMA_Abort_IT+0x1b4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a53      	ldr	r2, [pc, #332]	@ (800298c <HAL_DMA_Abort_IT+0x1b8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a52      	ldr	r2, [pc, #328]	@ (8002990 <HAL_DMA_Abort_IT+0x1bc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a50      	ldr	r2, [pc, #320]	@ (8002994 <HAL_DMA_Abort_IT+0x1c0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a4f      	ldr	r2, [pc, #316]	@ (8002998 <HAL_DMA_Abort_IT+0x1c4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4d      	ldr	r2, [pc, #308]	@ (800299c <HAL_DMA_Abort_IT+0x1c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a4c      	ldr	r2, [pc, #304]	@ (80029a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a4a      	ldr	r2, [pc, #296]	@ (80029a4 <HAL_DMA_Abort_IT+0x1d0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a49      	ldr	r2, [pc, #292]	@ (80029a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a47      	ldr	r2, [pc, #284]	@ (80029ac <HAL_DMA_Abort_IT+0x1d8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Abort_IT+0xc8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a46      	ldr	r2, [pc, #280]	@ (80029b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_DMA_Abort_IT+0xcc>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_DMA_Abort_IT+0xce>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8086 	beq.w	80029b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002974 <HAL_DMA_Abort_IT+0x1a0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d04a      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a2e      	ldr	r2, [pc, #184]	@ (8002978 <HAL_DMA_Abort_IT+0x1a4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d045      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2c      	ldr	r2, [pc, #176]	@ (800297c <HAL_DMA_Abort_IT+0x1a8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d040      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002980 <HAL_DMA_Abort_IT+0x1ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d03b      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a29      	ldr	r2, [pc, #164]	@ (8002984 <HAL_DMA_Abort_IT+0x1b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d036      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <HAL_DMA_Abort_IT+0x1b4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d031      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a26      	ldr	r2, [pc, #152]	@ (800298c <HAL_DMA_Abort_IT+0x1b8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02c      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a25      	ldr	r2, [pc, #148]	@ (8002990 <HAL_DMA_Abort_IT+0x1bc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d027      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	@ (8002994 <HAL_DMA_Abort_IT+0x1c0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a22      	ldr	r2, [pc, #136]	@ (8002998 <HAL_DMA_Abort_IT+0x1c4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d01d      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a20      	ldr	r2, [pc, #128]	@ (800299c <HAL_DMA_Abort_IT+0x1c8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1f      	ldr	r2, [pc, #124]	@ (80029a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1d      	ldr	r2, [pc, #116]	@ (80029a4 <HAL_DMA_Abort_IT+0x1d0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_DMA_Abort_IT+0x1d8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_DMA_Abort_IT+0x17c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a19      	ldr	r2, [pc, #100]	@ (80029b0 <HAL_DMA_Abort_IT+0x1dc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <HAL_DMA_Abort_IT+0x18e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e178      	b.n	8002c54 <HAL_DMA_Abort_IT+0x480>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e16f      	b.n	8002c54 <HAL_DMA_Abort_IT+0x480>
 8002974:	40020010 	.word	0x40020010
 8002978:	40020028 	.word	0x40020028
 800297c:	40020040 	.word	0x40020040
 8002980:	40020058 	.word	0x40020058
 8002984:	40020070 	.word	0x40020070
 8002988:	40020088 	.word	0x40020088
 800298c:	400200a0 	.word	0x400200a0
 8002990:	400200b8 	.word	0x400200b8
 8002994:	40020410 	.word	0x40020410
 8002998:	40020428 	.word	0x40020428
 800299c:	40020440 	.word	0x40020440
 80029a0:	40020458 	.word	0x40020458
 80029a4:	40020470 	.word	0x40020470
 80029a8:	40020488 	.word	0x40020488
 80029ac:	400204a0 	.word	0x400204a0
 80029b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 020e 	bic.w	r2, r2, #14
 80029c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6c      	ldr	r2, [pc, #432]	@ (8002b7c <HAL_DMA_Abort_IT+0x3a8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d04a      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002b80 <HAL_DMA_Abort_IT+0x3ac>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d045      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a69      	ldr	r2, [pc, #420]	@ (8002b84 <HAL_DMA_Abort_IT+0x3b0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d040      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a68      	ldr	r2, [pc, #416]	@ (8002b88 <HAL_DMA_Abort_IT+0x3b4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d03b      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a66      	ldr	r2, [pc, #408]	@ (8002b8c <HAL_DMA_Abort_IT+0x3b8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d036      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a65      	ldr	r2, [pc, #404]	@ (8002b90 <HAL_DMA_Abort_IT+0x3bc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d031      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a63      	ldr	r2, [pc, #396]	@ (8002b94 <HAL_DMA_Abort_IT+0x3c0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02c      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a62      	ldr	r2, [pc, #392]	@ (8002b98 <HAL_DMA_Abort_IT+0x3c4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d027      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a60      	ldr	r2, [pc, #384]	@ (8002b9c <HAL_DMA_Abort_IT+0x3c8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d022      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d01d      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d018      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5a      	ldr	r2, [pc, #360]	@ (8002bac <HAL_DMA_Abort_IT+0x3d8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00e      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a59      	ldr	r2, [pc, #356]	@ (8002bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d009      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a57      	ldr	r2, [pc, #348]	@ (8002bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x290>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a56      	ldr	r2, [pc, #344]	@ (8002bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d108      	bne.n	8002a76 <HAL_DMA_Abort_IT+0x2a2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_DMA_Abort_IT+0x2b2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b7c <HAL_DMA_Abort_IT+0x3a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d072      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	@ (8002b80 <HAL_DMA_Abort_IT+0x3ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d06d      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a39      	ldr	r2, [pc, #228]	@ (8002b84 <HAL_DMA_Abort_IT+0x3b0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d068      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a37      	ldr	r2, [pc, #220]	@ (8002b88 <HAL_DMA_Abort_IT+0x3b4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d063      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a36      	ldr	r2, [pc, #216]	@ (8002b8c <HAL_DMA_Abort_IT+0x3b8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d05e      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a34      	ldr	r2, [pc, #208]	@ (8002b90 <HAL_DMA_Abort_IT+0x3bc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d059      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <HAL_DMA_Abort_IT+0x3c0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d054      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	@ (8002b98 <HAL_DMA_Abort_IT+0x3c4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d04f      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a30      	ldr	r2, [pc, #192]	@ (8002b9c <HAL_DMA_Abort_IT+0x3c8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d04a      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d045      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3d0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d040      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3d4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d03b      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <HAL_DMA_Abort_IT+0x3d8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d036      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <HAL_DMA_Abort_IT+0x3dc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d031      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <HAL_DMA_Abort_IT+0x3e0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d02c      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <HAL_DMA_Abort_IT+0x3e4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d027      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a24      	ldr	r2, [pc, #144]	@ (8002bbc <HAL_DMA_Abort_IT+0x3e8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_DMA_Abort_IT+0x3ec>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01d      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a21      	ldr	r2, [pc, #132]	@ (8002bc4 <HAL_DMA_Abort_IT+0x3f0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d018      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <HAL_DMA_Abort_IT+0x3f4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1e      	ldr	r2, [pc, #120]	@ (8002bcc <HAL_DMA_Abort_IT+0x3f8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00e      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <HAL_DMA_Abort_IT+0x3fc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd4 <HAL_DMA_Abort_IT+0x400>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x3a2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <HAL_DMA_Abort_IT+0x404>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d132      	bne.n	8002bdc <HAL_DMA_Abort_IT+0x408>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e031      	b.n	8002bde <HAL_DMA_Abort_IT+0x40a>
 8002b7a:	bf00      	nop
 8002b7c:	40020010 	.word	0x40020010
 8002b80:	40020028 	.word	0x40020028
 8002b84:	40020040 	.word	0x40020040
 8002b88:	40020058 	.word	0x40020058
 8002b8c:	40020070 	.word	0x40020070
 8002b90:	40020088 	.word	0x40020088
 8002b94:	400200a0 	.word	0x400200a0
 8002b98:	400200b8 	.word	0x400200b8
 8002b9c:	40020410 	.word	0x40020410
 8002ba0:	40020428 	.word	0x40020428
 8002ba4:	40020440 	.word	0x40020440
 8002ba8:	40020458 	.word	0x40020458
 8002bac:	40020470 	.word	0x40020470
 8002bb0:	40020488 	.word	0x40020488
 8002bb4:	400204a0 	.word	0x400204a0
 8002bb8:	400204b8 	.word	0x400204b8
 8002bbc:	58025408 	.word	0x58025408
 8002bc0:	5802541c 	.word	0x5802541c
 8002bc4:	58025430 	.word	0x58025430
 8002bc8:	58025444 	.word	0x58025444
 8002bcc:	58025458 	.word	0x58025458
 8002bd0:	5802546c 	.word	0x5802546c
 8002bd4:	58025480 	.word	0x58025480
 8002bd8:	58025494 	.word	0x58025494
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d028      	beq.n	8002c34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2201      	movs	r2, #1
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	@ 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c6e:	4b89      	ldr	r3, [pc, #548]	@ (8002e94 <HAL_GPIO_Init+0x234>)
 8002c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c72:	e194      	b.n	8002f9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8186 	beq.w	8002f98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d005      	beq.n	8002ca4 <HAL_GPIO_Init+0x44>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d130      	bne.n	8002d06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cda:	2201      	movs	r2, #1
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 0201 	and.w	r2, r3, #1
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d017      	beq.n	8002d42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d123      	bne.n	8002d96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0203 	and.w	r2, r3, #3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80e0 	beq.w	8002f98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e98 <HAL_GPIO_Init+0x238>)
 8002dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dde:	4a2e      	ldr	r2, [pc, #184]	@ (8002e98 <HAL_GPIO_Init+0x238>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002de8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <HAL_GPIO_Init+0x238>)
 8002dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a29      	ldr	r2, [pc, #164]	@ (8002e9c <HAL_GPIO_Init+0x23c>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	@ (8002ea0 <HAL_GPIO_Init+0x240>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d052      	beq.n	8002ec8 <HAL_GPIO_Init+0x268>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_GPIO_Init+0x244>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_GPIO_Init+0x22e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_GPIO_Init+0x248>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <HAL_GPIO_Init+0x22a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	@ (8002eac <HAL_GPIO_Init+0x24c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_Init+0x226>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <HAL_GPIO_Init+0x250>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_Init+0x222>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <HAL_GPIO_Init+0x254>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x21e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <HAL_GPIO_Init+0x258>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x21a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <HAL_GPIO_Init+0x25c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x216>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_GPIO_Init+0x260>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x212>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a17      	ldr	r2, [pc, #92]	@ (8002ec4 <HAL_GPIO_Init+0x264>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e6a:	2309      	movs	r3, #9
 8002e6c:	e02d      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e6e:	230a      	movs	r3, #10
 8002e70:	e02b      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e029      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e027      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	e025      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e7e:	2305      	movs	r3, #5
 8002e80:	e023      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e82:	2304      	movs	r3, #4
 8002e84:	e021      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e01f      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e01d      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e01b      	b.n	8002eca <HAL_GPIO_Init+0x26a>
 8002e92:	bf00      	nop
 8002e94:	58000080 	.word	0x58000080
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58000400 	.word	0x58000400
 8002ea0:	58020000 	.word	0x58020000
 8002ea4:	58020400 	.word	0x58020400
 8002ea8:	58020800 	.word	0x58020800
 8002eac:	58020c00 	.word	0x58020c00
 8002eb0:	58021000 	.word	0x58021000
 8002eb4:	58021400 	.word	0x58021400
 8002eb8:	58021800 	.word	0x58021800
 8002ebc:	58021c00 	.word	0x58021c00
 8002ec0:	58022000 	.word	0x58022000
 8002ec4:	58022400 	.word	0x58022400
 8002ec8:	2300      	movs	r3, #0
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	f002 0203 	and.w	r2, r2, #3
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	4093      	lsls	r3, r2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eda:	4938      	ldr	r1, [pc, #224]	@ (8002fbc <HAL_GPIO_Init+0x35c>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f ae63 	bne.w	8002c74 <HAL_GPIO_Init+0x14>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	3724      	adds	r7, #36	@ 0x24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	58000400 	.word	0x58000400

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	041a      	lsls	r2, r3, #16
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43d9      	mvns	r1, r3
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	400b      	ands	r3, r1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003034:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f804 	bl	800305a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_PWREx_ConfigSupply+0x70>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b04      	cmp	r3, #4
 8003082:	d00a      	beq.n	800309a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003084:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <HAL_PWREx_ConfigSupply+0x70>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e01f      	b.n	80030d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e01d      	b.n	80030d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800309a:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <HAL_PWREx_ConfigSupply+0x70>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	490f      	ldr	r1, [pc, #60]	@ (80030e0 <HAL_PWREx_ConfigSupply+0x70>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030aa:	f7fe fed5 	bl	8001e58 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030b0:	e009      	b.n	80030c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030b2:	f7fe fed1 	bl	8001e58 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030c0:	d901      	bls.n	80030c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_PWREx_ConfigSupply+0x70>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d2:	d1ee      	bne.n	80030b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	58024800 	.word	0x58024800

080030e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7fe feb4 	bl	8001e58 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e05f      	b.n	80031bc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fe f8a1 	bl	8001250 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800310e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9e7 	bl	80034e6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	2120      	movs	r1, #32
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9df 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d135      	bne.n	80031ba <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_QSPI_Init+0xe0>)
 8003156:	4013      	ands	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6852      	ldr	r2, [r2, #4]
 800315c:	0611      	lsls	r1, r2, #24
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	4311      	orrs	r1, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	69d2      	ldr	r2, [r2, #28]
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a12      	ldr	r2, [r2, #32]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_QSPI_Init+0xe4>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6912      	ldr	r2, [r2, #16]
 8003186:	0411      	lsls	r1, r2, #16
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6952      	ldr	r2, [r2, #20]
 800318c:	4311      	orrs	r1, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6992      	ldr	r2, [r2, #24]
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	430b      	orrs	r3, r1
 800319a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80031ba:	7afb      	ldrb	r3, [r7, #11]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00ffff2f 	.word	0x00ffff2f
 80031c8:	ffe0f8fe 	.word	0xffe0f8fe

080031cc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7fe fe3e 	bl	8001e58 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_QSPI_Command+0x22>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e048      	b.n	8003280 <HAL_QSPI_Command+0xb4>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d137      	bne.n	8003272 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2200      	movs	r2, #0
 8003218:	2120      	movs	r1, #32
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f971 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d125      	bne.n	8003276 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800322a:	2200      	movs	r2, #0
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f99e 	bl	8003570 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2201      	movs	r2, #1
 8003244:	2102      	movs	r1, #2
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f95b 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2202      	movs	r2, #2
 800325c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003266:	e006      	b.n	8003276 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003270:	e001      	b.n	8003276 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7fe fdde 	bl	8001e58 <HAL_GetTick>
 800329c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3320      	adds	r3, #32
 80032a4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_QSPI_Transmit+0x2e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e076      	b.n	80033a4 <HAL_QSPI_Transmit+0x11c>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d165      	bne.n	8003396 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d056      	beq.n	8003384 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2212      	movs	r2, #18
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800330a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800330c:	e01b      	b.n	8003346 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2201      	movs	r2, #1
 8003316:	2104      	movs	r1, #4
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f8f2 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d113      	bne.n	8003350 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1df      	bne.n	800330e <HAL_QSPI_Transmit+0x86>
 800334e:	e000      	b.n	8003352 <HAL_QSPI_Transmit+0xca>
          break;
 8003350:	bf00      	nop
      }

      if (status == HAL_OK)
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d110      	bne.n	800337a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2201      	movs	r2, #1
 8003360:	2102      	movs	r1, #2
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f8cd 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800336c:	7ffb      	ldrb	r3, [r7, #31]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2202      	movs	r2, #2
 8003378:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003382:	e00a      	b.n	800339a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003388:	f043 0208 	orr.w	r2, r3, #8
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e001      	b.n	800339a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7fe fd4c 	bl	8001e58 <HAL_GetTick>
 80033c0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3320      	adds	r3, #32
 80033d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_QSPI_Receive+0x36>
 80033de:	2302      	movs	r3, #2
 80033e0:	e07d      	b.n	80034de <HAL_QSPI_Receive+0x132>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d16c      	bne.n	80034d0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d05d      	beq.n	80034be <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2222      	movs	r2, #34	@ 0x22
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800343a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003444:	e01c      	b.n	8003480 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2201      	movs	r2, #1
 800344e:	2106      	movs	r1, #6
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f856 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d114      	bne.n	800348a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1de      	bne.n	8003446 <HAL_QSPI_Receive+0x9a>
 8003488:	e000      	b.n	800348c <HAL_QSPI_Receive+0xe0>
          break;
 800348a:	bf00      	nop
      }

      if (status == HAL_OK)
 800348c:	7ffb      	ldrb	r3, [r7, #31]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d110      	bne.n	80034b4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2201      	movs	r2, #1
 800349a:	2102      	movs	r1, #2
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f830 	bl	8003502 <QSPI_WaitFlagStateUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80034a6:	7ffb      	ldrb	r3, [r7, #31]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2202      	movs	r2, #2
 80034b2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034bc:	e00a      	b.n	80034d4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f043 0208 	orr.w	r2, r3, #8
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e001      	b.n	80034d4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
 80034d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80034dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003512:	e01a      	b.n	800354a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d016      	beq.n	800354a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fe fc9c 	bl	8001e58 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2204      	movs	r2, #4
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e00e      	b.n	8003568 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	429a      	cmp	r2, r3
 8003564:	d1d6      	bne.n	8003514 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <QSPI_Config+0x28>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800358a:	d005      	beq.n	8003598 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3a01      	subs	r2, #1
 8003596:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80c1 	beq.w	8003724 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d063      	beq.n	8003672 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d031      	beq.n	8003620 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	049b      	lsls	r3, r3, #18
 80035d8:	431a      	orrs	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	431a      	orrs	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	430a      	orrs	r2, r1
 8003608:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003610:	f000 813f 	beq.w	8003892 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	6852      	ldr	r2, [r2, #4]
 800361c:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800361e:	e138      	b.n	8003892 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	431a      	orrs	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362e:	431a      	orrs	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	431a      	orrs	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	049b      	lsls	r3, r3, #18
 800363c:	431a      	orrs	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	431a      	orrs	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	431a      	orrs	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	431a      	orrs	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	431a      	orrs	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	ea42 0103 	orr.w	r1, r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	430a      	orrs	r2, r1
 8003666:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
}
 8003670:	e10f      	b.n	8003892 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02e      	beq.n	80036d8 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	431a      	orrs	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	431a      	orrs	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	431a      	orrs	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	049b      	lsls	r3, r3, #18
 8003696:	431a      	orrs	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	431a      	orrs	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	ea42 0103 	orr.w	r1, r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	430a      	orrs	r2, r1
 80036c0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036c8:	f000 80e3 	beq.w	8003892 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	6852      	ldr	r2, [r2, #4]
 80036d4:	619a      	str	r2, [r3, #24]
}
 80036d6:	e0dc      	b.n	8003892 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e6:	431a      	orrs	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	049b      	lsls	r3, r3, #18
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	431a      	orrs	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	431a      	orrs	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	ea42 0103 	orr.w	r1, r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	430a      	orrs	r2, r1
 8003718:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	e0b6      	b.n	8003892 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05d      	beq.n	80037e8 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	6892      	ldr	r2, [r2, #8]
 8003734:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d02e      	beq.n	800379c <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	431a      	orrs	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	431a      	orrs	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	049b      	lsls	r3, r3, #18
 800375a:	431a      	orrs	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	431a      	orrs	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	431a      	orrs	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	ea42 0103 	orr.w	r1, r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	430a      	orrs	r2, r1
 8003784:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800378c:	f000 8081 	beq.w	8003892 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	6852      	ldr	r2, [r2, #4]
 8003798:	619a      	str	r2, [r3, #24]
}
 800379a:	e07a      	b.n	8003892 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037aa:	431a      	orrs	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	049b      	lsls	r3, r3, #18
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	431a      	orrs	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	ea42 0103 	orr.w	r1, r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	430a      	orrs	r2, r1
 80037dc:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
}
 80037e6:	e054      	b.n	8003892 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02a      	beq.n	8003846 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fe:	431a      	orrs	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	431a      	orrs	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	049b      	lsls	r3, r3, #18
 800380c:	431a      	orrs	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	431a      	orrs	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	431a      	orrs	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	ea42 0103 	orr.w	r1, r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	430a      	orrs	r2, r1
 8003830:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003838:	d02b      	beq.n	8003892 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	6852      	ldr	r2, [r2, #4]
 8003842:	619a      	str	r2, [r3, #24]
}
 8003844:	e025      	b.n	8003892 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d021      	beq.n	8003892 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	431a      	orrs	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385c:	431a      	orrs	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	431a      	orrs	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	049b      	lsls	r3, r3, #18
 800386a:	431a      	orrs	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	431a      	orrs	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	431a      	orrs	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	ea42 0103 	orr.w	r1, r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	430a      	orrs	r2, r1
 8003888:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	619a      	str	r2, [r3, #24]
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	@ 0x30
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f000 bc48 	b.w	8004144 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8088 	beq.w	80039d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b99      	ldr	r3, [pc, #612]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038cc:	4b96      	ldr	r3, [pc, #600]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d007      	beq.n	80038e8 <HAL_RCC_OscConfig+0x48>
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	2b18      	cmp	r3, #24
 80038dc:	d111      	bne.n	8003902 <HAL_RCC_OscConfig+0x62>
 80038de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d10c      	bne.n	8003902 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d06d      	beq.n	80039d0 <HAL_RCC_OscConfig+0x130>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d169      	bne.n	80039d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f000 bc21 	b.w	8004144 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x7a>
 800390c:	4b86      	ldr	r3, [pc, #536]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a85      	ldr	r2, [pc, #532]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e02e      	b.n	8003978 <HAL_RCC_OscConfig+0xd8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x9c>
 8003922:	4b81      	ldr	r3, [pc, #516]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a80      	ldr	r2, [pc, #512]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7d      	ldr	r2, [pc, #500]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003934:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xd8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0xc0>
 8003946:	4b78      	ldr	r3, [pc, #480]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a77      	ldr	r2, [pc, #476]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b75      	ldr	r3, [pc, #468]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a74      	ldr	r2, [pc, #464]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xd8>
 8003960:	4b71      	ldr	r3, [pc, #452]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a70      	ldr	r2, [pc, #448]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b6e      	ldr	r3, [pc, #440]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6d      	ldr	r2, [pc, #436]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fe fa6a 	bl	8001e58 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003988:	f7fe fa66 	bl	8001e58 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	@ 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e3d4      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800399a:	4b63      	ldr	r3, [pc, #396]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xe8>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fa56 	bl	8001e58 <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fe fa52 	bl	8001e58 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	@ 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e3c0      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039c2:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x110>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80ca 	beq.w	8003b74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e0:	4b51      	ldr	r3, [pc, #324]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_RCC_OscConfig+0x166>
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b18      	cmp	r3, #24
 80039fa:	d156      	bne.n	8003aaa <HAL_RCC_OscConfig+0x20a>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d151      	bne.n	8003aaa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a06:	4b48      	ldr	r3, [pc, #288]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x17e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e392      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a1e:	4b42      	ldr	r3, [pc, #264]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0219 	bic.w	r2, r3, #25
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	493f      	ldr	r1, [pc, #252]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fe fa12 	bl	8001e58 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fe fa0e 	bl	8001e58 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e37c      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	f7fe fa0b 	bl	8001e70 <HAL_GetREVID>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d817      	bhi.n	8003a94 <HAL_RCC_OscConfig+0x1f4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d108      	bne.n	8003a7e <HAL_RCC_OscConfig+0x1de>
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a74:	4a2c      	ldr	r2, [pc, #176]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7c:	e07a      	b.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	4926      	ldr	r1, [pc, #152]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a92:	e06f      	b.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	4921      	ldr	r1, [pc, #132]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	e064      	b.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d047      	beq.n	8003b42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 0219 	bic.w	r2, r3, #25
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	491a      	ldr	r1, [pc, #104]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe f9c8 	bl	8001e58 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fe f9c4 	bl	8001e58 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e332      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ade:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aea:	f7fe f9c1 	bl	8001e70 <HAL_GetREVID>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d819      	bhi.n	8003b2c <HAL_RCC_OscConfig+0x28c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b40      	cmp	r3, #64	@ 0x40
 8003afe:	d108      	bne.n	8003b12 <HAL_RCC_OscConfig+0x272>
 8003b00:	4b09      	ldr	r3, [pc, #36]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b08:	4a07      	ldr	r2, [pc, #28]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	6053      	str	r3, [r2, #4]
 8003b10:	e030      	b.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
 8003b12:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	4901      	ldr	r1, [pc, #4]	@ (8003b28 <HAL_RCC_OscConfig+0x288>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 8003b26:	e025      	b.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	4997      	ldr	r1, [pc, #604]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	e018      	b.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b42:	4b95      	ldr	r3, [pc, #596]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a94      	ldr	r2, [pc, #592]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fe f983 	bl	8001e58 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fe f97f 	bl	8001e58 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e2ed      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b68:	4b8b      	ldr	r3, [pc, #556]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a9 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b82:	4b85      	ldr	r3, [pc, #532]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b8c:	4b82      	ldr	r3, [pc, #520]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d007      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x308>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b18      	cmp	r3, #24
 8003b9c:	d13a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x374>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d135      	bne.n	8003c14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x320>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	2b80      	cmp	r3, #128	@ 0x80
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e2c1      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bc0:	f7fe f956 	bl	8001e70 <HAL_GetREVID>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d817      	bhi.n	8003bfe <HAL_RCC_OscConfig+0x35e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d108      	bne.n	8003be8 <HAL_RCC_OscConfig+0x348>
 8003bd6:	4b70      	ldr	r3, [pc, #448]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003bde:	4a6e      	ldr	r2, [pc, #440]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003be4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be6:	e075      	b.n	8003cd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	069b      	lsls	r3, r3, #26
 8003bf6:	4968      	ldr	r1, [pc, #416]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bfc:	e06a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bfe:	4b66      	ldr	r3, [pc, #408]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	061b      	lsls	r3, r3, #24
 8003c0c:	4962      	ldr	r1, [pc, #392]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c12:	e05f      	b.n	8003cd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d042      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5d      	ldr	r2, [pc, #372]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe f916 	bl	8001e58 <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c30:	f7fe f912 	bl	8001e58 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e280      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c42:	4b55      	ldr	r3, [pc, #340]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c4e:	f7fe f90f 	bl	8001e70 <HAL_GetREVID>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d817      	bhi.n	8003c8c <HAL_RCC_OscConfig+0x3ec>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d108      	bne.n	8003c76 <HAL_RCC_OscConfig+0x3d6>
 8003c64:	4b4c      	ldr	r3, [pc, #304]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x434>
 8003c76:	4b48      	ldr	r3, [pc, #288]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	069b      	lsls	r3, r3, #26
 8003c84:	4944      	ldr	r1, [pc, #272]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
 8003c8a:	e023      	b.n	8003cd4 <HAL_RCC_OscConfig+0x434>
 8003c8c:	4b42      	ldr	r3, [pc, #264]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	493f      	ldr	r1, [pc, #252]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60cb      	str	r3, [r1, #12]
 8003ca0:	e018      	b.n	8003cd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003ca8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe f8d3 	bl	8001e58 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cb6:	f7fe f8cf 	bl	8001e58 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e23d      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cc8:	4b33      	ldr	r3, [pc, #204]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d036      	beq.n	8003d4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d019      	beq.n	8003d1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cec:	4a2a      	ldr	r2, [pc, #168]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fe f8b0 	bl	8001e58 <HAL_GetTick>
 8003cf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fe f8ac 	bl	8001e58 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e21a      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d0e:	4b22      	ldr	r3, [pc, #136]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x45c>
 8003d1a:	e018      	b.n	8003d4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d20:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fe f896 	bl	8001e58 <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe f892 	bl	8001e58 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e200      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d42:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d039      	beq.n	8003dce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01c      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a0c      	ldr	r2, [pc, #48]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe f873 	bl	8001e58 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d76:	f7fe f86f 	bl	8001e58 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1dd      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d88:	4b03      	ldr	r3, [pc, #12]	@ (8003d98 <HAL_RCC_OscConfig+0x4f8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x4d6>
 8003d94:	e01b      	b.n	8003dce <HAL_RCC_OscConfig+0x52e>
 8003d96:	bf00      	nop
 8003d98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d9c:	4b9b      	ldr	r3, [pc, #620]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a9a      	ldr	r2, [pc, #616]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003da8:	f7fe f856 	bl	8001e58 <HAL_GetTick>
 8003dac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db0:	f7fe f852 	bl	8001e58 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1c0      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dc2:	4b92      	ldr	r3, [pc, #584]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8081 	beq.w	8003ede <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8004010 <HAL_RCC_OscConfig+0x770>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a8b      	ldr	r2, [pc, #556]	@ (8004010 <HAL_RCC_OscConfig+0x770>)
 8003de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de8:	f7fe f836 	bl	8001e58 <HAL_GetTick>
 8003dec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fe f832 	bl	8001e58 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	@ 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1a0      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e02:	4b83      	ldr	r3, [pc, #524]	@ (8004010 <HAL_RCC_OscConfig+0x770>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x584>
 8003e16:	4b7d      	ldr	r3, [pc, #500]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e22:	e02d      	b.n	8003e80 <HAL_RCC_OscConfig+0x5e0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCC_OscConfig+0x5a6>
 8003e2c:	4b77      	ldr	r3, [pc, #476]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a76      	ldr	r2, [pc, #472]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	4b74      	ldr	r3, [pc, #464]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3c:	4a73      	ldr	r2, [pc, #460]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e44:	e01c      	b.n	8003e80 <HAL_RCC_OscConfig+0x5e0>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c8>
 8003e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	4a6e      	ldr	r2, [pc, #440]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	4a6b      	ldr	r2, [pc, #428]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0x5e0>
 8003e68:	4b68      	ldr	r3, [pc, #416]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a67      	ldr	r2, [pc, #412]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	4b65      	ldr	r3, [pc, #404]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e78:	4a64      	ldr	r2, [pc, #400]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003e7a:	f023 0304 	bic.w	r3, r3, #4
 8003e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd ffe6 	bl	8001e58 <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7fd ffe2 	bl	8001e58 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e14e      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea6:	4b59      	ldr	r3, [pc, #356]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ee      	beq.n	8003e90 <HAL_RCC_OscConfig+0x5f0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd ffd0 	bl	8001e58 <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fd ffcc 	bl	8001e58 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e138      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ee      	bne.n	8003ebc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 812d 	beq.w	8004142 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ee8:	4b48      	ldr	r3, [pc, #288]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ef0:	2b18      	cmp	r3, #24
 8003ef2:	f000 80bd 	beq.w	8004070 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	f040 809e 	bne.w	800403c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b42      	ldr	r3, [pc, #264]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a41      	ldr	r2, [pc, #260]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd ffa4 	bl	8001e58 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd ffa0 	bl	8001e58 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e10e      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f26:	4b39      	ldr	r3, [pc, #228]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f36:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <HAL_RCC_OscConfig+0x774>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	430a      	orrs	r2, r1
 8003f46:	4931      	ldr	r1, [pc, #196]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	3b01      	subs	r3, #1
 8003f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	025b      	lsls	r3, r3, #9
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	3b01      	subs	r3, #1
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	3b01      	subs	r3, #1
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f7c:	4923      	ldr	r1, [pc, #140]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f82:	4b22      	ldr	r3, [pc, #136]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	4a21      	ldr	r2, [pc, #132]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f92:	4b21      	ldr	r3, [pc, #132]	@ (8004018 <HAL_RCC_OscConfig+0x778>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f9a:	00d2      	lsls	r2, r2, #3
 8003f9c:	491b      	ldr	r1, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	f023 020c 	bic.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	4917      	ldr	r1, [pc, #92]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fb4:	4b15      	ldr	r3, [pc, #84]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	f023 0202 	bic.w	r2, r3, #2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	4912      	ldr	r1, [pc, #72]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fc6:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	4a10      	ldr	r2, [pc, #64]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fea:	4b08      	ldr	r3, [pc, #32]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	4a07      	ldr	r2, [pc, #28]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a04      	ldr	r2, [pc, #16]	@ (800400c <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd ff29 	bl	8001e58 <HAL_GetTick>
 8004006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004008:	e011      	b.n	800402e <HAL_RCC_OscConfig+0x78e>
 800400a:	bf00      	nop
 800400c:	58024400 	.word	0x58024400
 8004010:	58024800 	.word	0x58024800
 8004014:	fffffc0c 	.word	0xfffffc0c
 8004018:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401c:	f7fd ff1c 	bl	8001e58 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e08a      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800402e:	4b47      	ldr	r3, [pc, #284]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x77c>
 800403a:	e082      	b.n	8004142 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403c:	4b43      	ldr	r3, [pc, #268]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a42      	ldr	r2, [pc, #264]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd ff06 	bl	8001e58 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd ff02 	bl	8001e58 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e070      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004062:	4b3a      	ldr	r3, [pc, #232]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x7b0>
 800406e:	e068      	b.n	8004142 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004070:	4b36      	ldr	r3, [pc, #216]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004076:	4b35      	ldr	r3, [pc, #212]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	d031      	beq.n	80040e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0203 	and.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d12a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d122      	bne.n	80040e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0a5b      	lsrs	r3, r3, #9
 80040b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d111      	bne.n	80040e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	0e1b      	lsrs	r3, r3, #24
 80040da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e02b      	b.n	8004144 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040ec:	4b17      	ldr	r3, [pc, #92]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	08db      	lsrs	r3, r3, #3
 80040f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d01f      	beq.n	8004142 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004102:	4b12      	ldr	r3, [pc, #72]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	4a11      	ldr	r2, [pc, #68]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800410e:	f7fd fea3 	bl	8001e58 <HAL_GetTick>
 8004112:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004114:	bf00      	nop
 8004116:	f7fd fe9f 	bl	8001e58 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	4293      	cmp	r3, r2
 8004120:	d0f9      	beq.n	8004116 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <HAL_RCC_OscConfig+0x8b0>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800412e:	00d2      	lsls	r2, r2, #3
 8004130:	4906      	ldr	r1, [pc, #24]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004132:	4313      	orrs	r3, r2
 8004134:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004136:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	4a04      	ldr	r2, [pc, #16]	@ (800414c <HAL_RCC_OscConfig+0x8ac>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3730      	adds	r7, #48	@ 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	58024400 	.word	0x58024400
 8004150:	ffff0007 	.word	0xffff0007

08004154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e19c      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004168:	4b8a      	ldr	r3, [pc, #552]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d910      	bls.n	8004198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b87      	ldr	r3, [pc, #540]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 020f 	bic.w	r2, r3, #15
 800417e:	4985      	ldr	r1, [pc, #532]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b83      	ldr	r3, [pc, #524]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e184      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d010      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d908      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041b4:	4b78      	ldr	r3, [pc, #480]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4975      	ldr	r1, [pc, #468]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	4b70      	ldr	r3, [pc, #448]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041de:	429a      	cmp	r2, r3
 80041e0:	d908      	bls.n	80041f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	496a      	ldr	r1, [pc, #424]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d010      	beq.n	8004222 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	4b64      	ldr	r3, [pc, #400]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800420c:	429a      	cmp	r2, r3
 800420e:	d908      	bls.n	8004222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004210:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	495e      	ldr	r1, [pc, #376]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800421e:	4313      	orrs	r3, r2
 8004220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d010      	beq.n	8004250 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	4b59      	ldr	r3, [pc, #356]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800423a:	429a      	cmp	r2, r3
 800423c:	d908      	bls.n	8004250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800423e:	4b56      	ldr	r3, [pc, #344]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4953      	ldr	r1, [pc, #332]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800424c:	4313      	orrs	r3, r2
 800424e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	4b4d      	ldr	r3, [pc, #308]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	429a      	cmp	r2, r3
 800426a:	d908      	bls.n	800427e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b4a      	ldr	r3, [pc, #296]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f023 020f 	bic.w	r2, r3, #15
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4947      	ldr	r1, [pc, #284]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800427a:	4313      	orrs	r3, r2
 800427c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d055      	beq.n	8004336 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800428a:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4940      	ldr	r1, [pc, #256]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004298:	4313      	orrs	r3, r2
 800429a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d121      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0f6      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042bc:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d115      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0ea      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d4:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0de      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0d6      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f4:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f023 0207 	bic.w	r2, r3, #7
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4925      	ldr	r1, [pc, #148]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004302:	4313      	orrs	r3, r2
 8004304:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004306:	f7fd fda7 	bl	8001e58 <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430c:	e00a      	b.n	8004324 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430e:	f7fd fda3 	bl	8001e58 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0be      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004324:	4b1c      	ldr	r3, [pc, #112]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	429a      	cmp	r2, r3
 8004334:	d1eb      	bne.n	800430e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d010      	beq.n	8004364 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	4b14      	ldr	r3, [pc, #80]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	429a      	cmp	r2, r3
 8004350:	d208      	bcs.n	8004364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004352:	4b11      	ldr	r3, [pc, #68]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	490e      	ldr	r1, [pc, #56]	@ (8004398 <HAL_RCC_ClockConfig+0x244>)
 8004360:	4313      	orrs	r3, r2
 8004362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d214      	bcs.n	800439c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 020f 	bic.w	r2, r3, #15
 800437a:	4906      	ldr	r1, [pc, #24]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <HAL_RCC_ClockConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e086      	b.n	80044a2 <HAL_RCC_ClockConfig+0x34e>
 8004394:	52002000 	.word	0x52002000
 8004398:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	4b3f      	ldr	r3, [pc, #252]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d208      	bcs.n	80043ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043b8:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4939      	ldr	r1, [pc, #228]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d010      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d208      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	492e      	ldr	r1, [pc, #184]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004410:	429a      	cmp	r2, r3
 8004412:	d208      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004414:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4922      	ldr	r1, [pc, #136]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004422:	4313      	orrs	r3, r2
 8004424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800443e:	429a      	cmp	r2, r3
 8004440:	d208      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004442:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4917      	ldr	r1, [pc, #92]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004450:	4313      	orrs	r3, r2
 8004452:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004454:	f000 f834 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b14      	ldr	r3, [pc, #80]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	4912      	ldr	r1, [pc, #72]	@ (80044b0 <HAL_RCC_ClockConfig+0x35c>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004472:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x358>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <HAL_RCC_ClockConfig+0x35c>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <HAL_RCC_ClockConfig+0x360>)
 800448a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800448c:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x364>)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x368>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fc94 	bl	8001dc4 <HAL_InitTick>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	0800a9fc 	.word	0x0800a9fc
 80044b4:	24000008 	.word	0x24000008
 80044b8:	24000004 	.word	0x24000004
 80044bc:	2400000c 	.word	0x2400000c

080044c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	@ 0x24
 80044c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c6:	4bb3      	ldr	r3, [pc, #716]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ce:	2b18      	cmp	r3, #24
 80044d0:	f200 8155 	bhi.w	800477e <HAL_RCC_GetSysClockFreq+0x2be>
 80044d4:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	08004541 	.word	0x08004541
 80044e0:	0800477f 	.word	0x0800477f
 80044e4:	0800477f 	.word	0x0800477f
 80044e8:	0800477f 	.word	0x0800477f
 80044ec:	0800477f 	.word	0x0800477f
 80044f0:	0800477f 	.word	0x0800477f
 80044f4:	0800477f 	.word	0x0800477f
 80044f8:	0800477f 	.word	0x0800477f
 80044fc:	08004567 	.word	0x08004567
 8004500:	0800477f 	.word	0x0800477f
 8004504:	0800477f 	.word	0x0800477f
 8004508:	0800477f 	.word	0x0800477f
 800450c:	0800477f 	.word	0x0800477f
 8004510:	0800477f 	.word	0x0800477f
 8004514:	0800477f 	.word	0x0800477f
 8004518:	0800477f 	.word	0x0800477f
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800477f 	.word	0x0800477f
 8004524:	0800477f 	.word	0x0800477f
 8004528:	0800477f 	.word	0x0800477f
 800452c:	0800477f 	.word	0x0800477f
 8004530:	0800477f 	.word	0x0800477f
 8004534:	0800477f 	.word	0x0800477f
 8004538:	0800477f 	.word	0x0800477f
 800453c:	08004573 	.word	0x08004573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004540:	4b94      	ldr	r3, [pc, #592]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800454c:	4b91      	ldr	r3, [pc, #580]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	08db      	lsrs	r3, r3, #3
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	4a90      	ldr	r2, [pc, #576]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
 800455c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800455e:	e111      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004560:	4b8d      	ldr	r3, [pc, #564]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004562:	61bb      	str	r3, [r7, #24]
      break;
 8004564:	e10e      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004566:	4b8d      	ldr	r3, [pc, #564]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004568:	61bb      	str	r3, [r7, #24]
      break;
 800456a:	e10b      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800456c:	4b8c      	ldr	r3, [pc, #560]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800456e:	61bb      	str	r3, [r7, #24]
      break;
 8004570:	e108      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004572:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800457c:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004586:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004588:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004592:	4b80      	ldr	r3, [pc, #512]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80e1 	beq.w	8004778 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f000 8083 	beq.w	80046c4 <HAL_RCC_GetSysClockFreq+0x204>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x248>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x114>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d056      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045d2:	e099      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02d      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	4a6b      	ldr	r2, [pc, #428]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b62      	ldr	r3, [pc, #392]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a02 	vldr	s12, [r7, #8]
 800461e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800463a:	e087      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004662:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467e:	e065      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b40      	ldr	r3, [pc, #256]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046c2:	e043      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004706:	e021      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a02 	vldr	s12, [r7, #8]
 800472e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800474a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800474c:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	3301      	adds	r3, #1
 8004758:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004764:	edd7 6a07 	vldr	s13, [r7, #28]
 8004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004770:	ee17 3a90 	vmov	r3, s15
 8004774:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004776:	e005      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
      break;
 800477c:	e002      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004780:	61bb      	str	r3, [r7, #24]
      break;
 8004782:	bf00      	nop
  }

  return sysclockfreq;
 8004784:	69bb      	ldr	r3, [r7, #24]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3724      	adds	r7, #36	@ 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
 8004798:	03d09000 	.word	0x03d09000
 800479c:	003d0900 	.word	0x003d0900
 80047a0:	007a1200 	.word	0x007a1200
 80047a4:	46000000 	.word	0x46000000
 80047a8:	4c742400 	.word	0x4c742400
 80047ac:	4a742400 	.word	0x4a742400
 80047b0:	4af42400 	.word	0x4af42400

080047b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047ba:	f7ff fe81 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x50>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	490f      	ldr	r1, [pc, #60]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x54>)
 80047cc:	5ccb      	ldrb	r3, [r1, r3]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x50>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	4a09      	ldr	r2, [pc, #36]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x54>)
 80047e2:	5cd3      	ldrb	r3, [r2, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	fa22 f303 	lsr.w	r3, r2, r3
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <HAL_RCC_GetHCLKFreq+0x58>)
 80047f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047f2:	4a07      	ldr	r2, [pc, #28]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047f8:	4b04      	ldr	r3, [pc, #16]	@ (800480c <HAL_RCC_GetHCLKFreq+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	58024400 	.word	0x58024400
 8004808:	0800a9fc 	.word	0x0800a9fc
 800480c:	24000008 	.word	0x24000008
 8004810:	24000004 	.word	0x24000004

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004818:	f7ff ffcc 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	@ (800483c <HAL_RCC_GetPCLK1Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58024400 	.word	0x58024400
 800483c:	0800a9fc 	.word	0x0800a9fc

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004844:	f7ff ffb6 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4904      	ldr	r1, [pc, #16]	@ (8004868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	58024400 	.word	0x58024400
 8004868:	0800a9fc 	.word	0x0800a9fc

0800486c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800486c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004870:	b0ca      	sub	sp, #296	@ 0x128
 8004872:	af00      	add	r7, sp, #0
 8004874:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004878:	2300      	movs	r3, #0
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004890:	2500      	movs	r5, #0
 8004892:	ea54 0305 	orrs.w	r3, r4, r5
 8004896:	d049      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800489e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a2:	d02f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a8:	d828      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ae:	d01a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b4:	d822      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048be:	d007      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048c0:	e01c      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c2:	4bb8      	ldr	r3, [pc, #736]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4ab7      	ldr	r2, [pc, #732]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ce:	e01a      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	3308      	adds	r3, #8
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 fc8f 	bl	80061fc <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048e4:	e00f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 fd36 	bl	8006360 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800490e:	4ba5      	ldr	r3, [pc, #660]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004912:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800491c:	4aa1      	ldr	r2, [pc, #644]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491e:	430b      	orrs	r3, r1
 8004920:	6513      	str	r3, [r2, #80]	@ 0x50
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004938:	f04f 0900 	mov.w	r9, #0
 800493c:	ea58 0309 	orrs.w	r3, r8, r9
 8004940:	d047      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	2b04      	cmp	r3, #4
 800494a:	d82a      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004969 	.word	0x08004969
 8004958:	08004977 	.word	0x08004977
 800495c:	0800498d 	.word	0x0800498d
 8004960:	080049ab 	.word	0x080049ab
 8004964:	080049ab 	.word	0x080049ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b8e      	ldr	r3, [pc, #568]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a8d      	ldr	r2, [pc, #564]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004974:	e01a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	3308      	adds	r3, #8
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fc3c 	bl	80061fc <RCCEx_PLL2_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800498a:	e00f      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	3328      	adds	r3, #40	@ 0x28
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fce3 	bl	8006360 <RCCEx_PLL3_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a0:	e004      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	f023 0107 	bic.w	r1, r3, #7
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	4a78      	ldr	r2, [pc, #480]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049de:	f04f 0b00 	mov.w	fp, #0
 80049e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049e6:	d04c      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f2:	d030      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f8:	d829      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80049fc:	d02d      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a00:	d825      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d018      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a06:	2b80      	cmp	r3, #128	@ 0x80
 8004a08:	d821      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a0e:	2b40      	cmp	r3, #64	@ 0x40
 8004a10:	d007      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a12:	e01c      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b63      	ldr	r3, [pc, #396]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	4a62      	ldr	r2, [pc, #392]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a20:	e01c      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	3308      	adds	r3, #8
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fbe6 	bl	80061fc <RCCEx_PLL2_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3c:	3328      	adds	r3, #40	@ 0x28
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fc8d 	bl	8006360 <RCCEx_PLL3_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a64:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a72:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004a98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d053      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004aae:	d035      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ab4:	d82e      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ab6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004aba:	d031      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004abc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ac0:	d828      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ac6:	d01a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004acc:	d822      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ada:	4b32      	ldr	r3, [pc, #200]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	4a31      	ldr	r2, [pc, #196]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e01c      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	3308      	adds	r3, #8
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fb83 	bl	80061fc <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004afc:	e011      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fc2a 	bl	8006360 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b12:	e006      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d056      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b76:	d038      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b7c:	d831      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b82:	d034      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b88:	d82b      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b8e:	d01d      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b94:	d825      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ba0:	e01f      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4ba2      	ldr	r3, [pc, #648]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4aa1      	ldr	r2, [pc, #644]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bb4:	e01c      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bba:	3308      	adds	r3, #8
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 fb1c 	bl	80061fc <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bca:	e011      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	3328      	adds	r3, #40	@ 0x28
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 fbc3 	bl	8006360 <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bf8:	4b8e      	ldr	r3, [pc, #568]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c08:	4a8a      	ldr	r2, [pc, #552]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d03a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3e:	2b30      	cmp	r3, #48	@ 0x30
 8004c40:	d01f      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c42:	2b30      	cmp	r3, #48	@ 0x30
 8004c44:	d819      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d00c      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d815      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d111      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c56:	4b77      	ldr	r3, [pc, #476]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	4a76      	ldr	r2, [pc, #472]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c62:	e011      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	3308      	adds	r3, #8
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fac5 	bl	80061fc <RCCEx_PLL2_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c78:	e006      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c90:	4b68      	ldr	r3, [pc, #416]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	4a65      	ldr	r2, [pc, #404]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004cba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d051      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd8:	d035      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cde:	d82e      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ce0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ce4:	d031      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cea:	d828      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf0:	d01a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d822      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d00:	d007      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d02:	e01c      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d04:	4b4b      	ldr	r3, [pc, #300]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4a4a      	ldr	r2, [pc, #296]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d10:	e01c      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	3308      	adds	r3, #8
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 fa6e 	bl	80061fc <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d26:	e011      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	3328      	adds	r3, #40	@ 0x28
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 fb15 	bl	8006360 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e006      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d44:	e002      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d54:	4b37      	ldr	r3, [pc, #220]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d62:	4a34      	ldr	r2, [pc, #208]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d68:	e003      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	d056      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d9c:	d033      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004da2:	d82c      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da8:	d02f      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004daa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dae:	d826      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004db4:	d02b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dba:	d820      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc0:	d012      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc6:	d81a      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d022      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd0:	d115      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fa0e 	bl	80061fc <RCCEx_PLL2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004de6:	e015      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	3328      	adds	r3, #40	@ 0x28
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fab5 	bl	8006360 <RCCEx_PLL3_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e2a:	4a02      	ldr	r2, [pc, #8]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d055      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e6c:	d033      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e72:	d82c      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e78:	d02f      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d826      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e84:	d02b      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e8a:	d820      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d012      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e96:	d81a      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ea0:	d115      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 f9a6 	bl	80061fc <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e015      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebc:	3328      	adds	r3, #40	@ 0x28
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fa4d 	bl	8006360 <RCCEx_PLL3_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e004      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eda:	bf00      	nop
 8004edc:	e002      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004eec:	4ba3      	ldr	r3, [pc, #652]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004efc:	4a9f      	ldr	r2, [pc, #636]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efe:	430b      	orrs	r3, r1
 8004f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f02:	e003      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d037      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f36:	d00e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3c:	d816      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f46:	d111      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f48:	4b8c      	ldr	r3, [pc, #560]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	4a8b      	ldr	r2, [pc, #556]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f54:	e00f      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 f94c 	bl	80061fc <RCCEx_PLL2_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f6a:	e004      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a7b      	ldr	r2, [pc, #492]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d039      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d81c      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005009 	.word	0x08005009
 8004fd0:	08004fdd 	.word	0x08004fdd
 8004fd4:	08004feb 	.word	0x08004feb
 8004fd8:	08005009 	.word	0x08005009
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fdc:	4b67      	ldr	r3, [pc, #412]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	4a66      	ldr	r2, [pc, #408]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00f      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	3308      	adds	r3, #8
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f902 	bl	80061fc <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ffe:	e004      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005006:	e000      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005012:	4b5a      	ldr	r3, [pc, #360]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005016:	f023 0103 	bic.w	r1, r3, #3
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005020:	4a56      	ldr	r2, [pc, #344]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005022:	430b      	orrs	r3, r1
 8005024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005026:	e003      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800502c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800503c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005046:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	f000 809f 	beq.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005052:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4a      	ldr	r2, [pc, #296]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800505e:	f7fc fefb 	bl	8001e58 <HAL_GetTick>
 8005062:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005066:	e00b      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005068:	f7fc fef6 	bl	8001e58 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b64      	cmp	r3, #100	@ 0x64
 8005076:	d903      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507e:	e005      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005080:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ed      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	2b00      	cmp	r3, #0
 8005092:	d179      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005094:	4b39      	ldr	r3, [pc, #228]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005096:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050a0:	4053      	eors	r3, r2
 80050a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d015      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050aa:	4b34      	ldr	r3, [pc, #208]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050b6:	4b31      	ldr	r3, [pc, #196]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	4a30      	ldr	r2, [pc, #192]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050c2:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	4a2d      	ldr	r2, [pc, #180]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050ce:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	d118      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc feb8 	bl	8001e58 <HAL_GetTick>
 80050e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ec:	e00d      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fc feb3 	bl	8001e58 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005108:	e005      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0eb      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511a:	2b00      	cmp	r3, #0
 800511c:	d129      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800512e:	d10e      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005130:	4b12      	ldr	r3, [pc, #72]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005140:	091a      	lsrs	r2, r3, #4
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005144:	4013      	ands	r3, r2
 8005146:	4a0d      	ldr	r2, [pc, #52]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005148:	430b      	orrs	r3, r1
 800514a:	6113      	str	r3, [r2, #16]
 800514c:	e005      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800514e:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005154:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005158:	6113      	str	r3, [r2, #16]
 800515a:	4b08      	ldr	r3, [pc, #32]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	4a04      	ldr	r2, [pc, #16]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	e00e      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800517a:	e009      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800517c:	58024400 	.word	0x58024400
 8005180:	58024800 	.word	0x58024800
 8005184:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f002 0301 	and.w	r3, r2, #1
 800519c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f000 8089 	beq.w	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b8:	2b28      	cmp	r3, #40	@ 0x28
 80051ba:	d86b      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	0800529d 	.word	0x0800529d
 80051c8:	08005295 	.word	0x08005295
 80051cc:	08005295 	.word	0x08005295
 80051d0:	08005295 	.word	0x08005295
 80051d4:	08005295 	.word	0x08005295
 80051d8:	08005295 	.word	0x08005295
 80051dc:	08005295 	.word	0x08005295
 80051e0:	08005295 	.word	0x08005295
 80051e4:	08005269 	.word	0x08005269
 80051e8:	08005295 	.word	0x08005295
 80051ec:	08005295 	.word	0x08005295
 80051f0:	08005295 	.word	0x08005295
 80051f4:	08005295 	.word	0x08005295
 80051f8:	08005295 	.word	0x08005295
 80051fc:	08005295 	.word	0x08005295
 8005200:	08005295 	.word	0x08005295
 8005204:	0800527f 	.word	0x0800527f
 8005208:	08005295 	.word	0x08005295
 800520c:	08005295 	.word	0x08005295
 8005210:	08005295 	.word	0x08005295
 8005214:	08005295 	.word	0x08005295
 8005218:	08005295 	.word	0x08005295
 800521c:	08005295 	.word	0x08005295
 8005220:	08005295 	.word	0x08005295
 8005224:	0800529d 	.word	0x0800529d
 8005228:	08005295 	.word	0x08005295
 800522c:	08005295 	.word	0x08005295
 8005230:	08005295 	.word	0x08005295
 8005234:	08005295 	.word	0x08005295
 8005238:	08005295 	.word	0x08005295
 800523c:	08005295 	.word	0x08005295
 8005240:	08005295 	.word	0x08005295
 8005244:	0800529d 	.word	0x0800529d
 8005248:	08005295 	.word	0x08005295
 800524c:	08005295 	.word	0x08005295
 8005250:	08005295 	.word	0x08005295
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
 800525c:	08005295 	.word	0x08005295
 8005260:	08005295 	.word	0x08005295
 8005264:	0800529d 	.word	0x0800529d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	3308      	adds	r3, #8
 800526e:	2101      	movs	r1, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f000 ffc3 	bl	80061fc <RCCEx_PLL2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800527c:	e00f      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005282:	3328      	adds	r3, #40	@ 0x28
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f86a 	bl	8006360 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005292:	e004      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800529c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052a6:	4bbf      	ldr	r3, [pc, #764]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052b4:	4abb      	ldr	r2, [pc, #748]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f002 0302 	and.w	r3, r2, #2
 80052d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80052da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80052de:	460b      	mov	r3, r1
 80052e0:	4313      	orrs	r3, r2
 80052e2:	d041      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d824      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005341 	.word	0x08005341
 80052f8:	0800530d 	.word	0x0800530d
 80052fc:	08005323 	.word	0x08005323
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
 8005308:	08005341 	.word	0x08005341
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	3308      	adds	r3, #8
 8005312:	2101      	movs	r1, #1
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ff71 	bl	80061fc <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005320:	e00f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005326:	3328      	adds	r3, #40	@ 0x28
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f818 	bl	8006360 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800534a:	4b96      	ldr	r3, [pc, #600]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f023 0107 	bic.w	r1, r3, #7
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005358:	4a92      	ldr	r2, [pc, #584]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800535a:	430b      	orrs	r3, r1
 800535c:	6553      	str	r3, [r2, #84]	@ 0x54
 800535e:	e003      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f002 0304 	and.w	r3, r2, #4
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800537e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d044      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005390:	2b05      	cmp	r3, #5
 8005392:	d825      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053e9 	.word	0x080053e9
 80053a0:	080053b5 	.word	0x080053b5
 80053a4:	080053cb 	.word	0x080053cb
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053e9 	.word	0x080053e9
 80053b0:	080053e9 	.word	0x080053e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	3308      	adds	r3, #8
 80053ba:	2101      	movs	r1, #1
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 ff1d 	bl	80061fc <RCCEx_PLL2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053c8:	e00f      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ce:	3328      	adds	r3, #40	@ 0x28
 80053d0:	2101      	movs	r1, #1
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ffc4 	bl	8006360 <RCCEx_PLL3_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053de:	e004      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053e6:	e000      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80053e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f2:	4b6c      	ldr	r3, [pc, #432]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f6:	f023 0107 	bic.w	r1, r3, #7
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	4a68      	ldr	r2, [pc, #416]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005404:	430b      	orrs	r3, r1
 8005406:	6593      	str	r3, [r2, #88]	@ 0x58
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f002 0320 	and.w	r3, r2, #32
 800541e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005422:	2300      	movs	r3, #0
 8005424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d055      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800543e:	d033      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005444:	d82c      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544a:	d02f      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005450:	d826      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005452:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005456:	d02b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005458:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800545c:	d820      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800545e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005462:	d012      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005468:	d81a      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d022      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800546e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005472:	d115      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	3308      	adds	r3, #8
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f000 febd 	bl	80061fc <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005488:	e015      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ff64 	bl	8006360 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800549e:	e00a      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a6:	e006      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054a8:	bf00      	nop
 80054aa:	e004      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054be:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ce:	4a35      	ldr	r2, [pc, #212]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4313      	orrs	r3, r2
 80054fc:	d058      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005506:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800550a:	d033      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800550c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005510:	d82c      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005516:	d02f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d826      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800551e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005522:	d02b      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005524:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005528:	d820      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800552a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552e:	d012      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005534:	d81a      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d022      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553e:	d115      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005544:	3308      	adds	r3, #8
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fe57 	bl	80061fc <RCCEx_PLL2_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005554:	e015      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	3328      	adds	r3, #40	@ 0x28
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fefe 	bl	8006360 <RCCEx_PLL3_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800556a:	e00a      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005572:	e006      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005574:	bf00      	nop
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005578:	bf00      	nop
 800557a:	e002      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10e      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559a:	4a02      	ldr	r2, [pc, #8]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a0:	e006      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d055      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055dc:	d033      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80055de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055e2:	d82c      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e8:	d02f      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80055ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ee:	d826      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055f4:	d02b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055fa:	d820      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005600:	d012      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005606:	d81a      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d022      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005610:	d115      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	3308      	adds	r3, #8
 8005618:	2100      	movs	r1, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fdee 	bl	80061fc <RCCEx_PLL2_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005626:	e015      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562c:	3328      	adds	r3, #40	@ 0x28
 800562e:	2102      	movs	r1, #2
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fe95 	bl	8006360 <RCCEx_PLL3_Config>
 8005636:	4603      	mov	r3, r0
 8005638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800563c:	e00a      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800565c:	4ba1      	ldr	r3, [pc, #644]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800566c:	4a9d      	ldr	r2, [pc, #628]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566e:	430b      	orrs	r3, r1
 8005670:	6593      	str	r3, [r2, #88]	@ 0x58
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f002 0308 	and.w	r3, r2, #8
 8005688:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005692:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005696:	460b      	mov	r3, r1
 8005698:	4313      	orrs	r3, r2
 800569a:	d01e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	3328      	adds	r3, #40	@ 0x28
 80056b0:	2102      	movs	r1, #2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fe54 	bl	8006360 <RCCEx_PLL3_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056c4:	4b87      	ldr	r3, [pc, #540]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d4:	4a83      	ldr	r2, [pc, #524]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f002 0310 	and.w	r3, r2, #16
 80056e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d01e      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005706:	d10c      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	3328      	adds	r3, #40	@ 0x28
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fe25 	bl	8006360 <RCCEx_PLL3_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005722:	4b70      	ldr	r3, [pc, #448]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005732:	4a6c      	ldr	r2, [pc, #432]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005734:	430b      	orrs	r3, r1
 8005736:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800574e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d03e      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005764:	d022      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576a:	d81b      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d00b      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005776:	e015      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	3308      	adds	r3, #8
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fd3b 	bl	80061fc <RCCEx_PLL2_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800578c:	e00f      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	3328      	adds	r3, #40	@ 0x28
 8005794:	2102      	movs	r1, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fde2 	bl	8006360 <RCCEx_PLL3_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057a2:	e004      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057aa:	e000      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057b6:	4b4b      	ldr	r3, [pc, #300]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057c6:	4a47      	ldr	r2, [pc, #284]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057e4:	2300      	movs	r3, #0
 80057e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d03b      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057fe:	d01f      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005804:	d818      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580a:	d003      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800580c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005810:	d007      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005812:	e011      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005814:	4b33      	ldr	r3, [pc, #204]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	4a32      	ldr	r2, [pc, #200]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800581a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800581e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005820:	e00f      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	3328      	adds	r3, #40	@ 0x28
 8005828:	2101      	movs	r1, #1
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fd98 	bl	8006360 <RCCEx_PLL3_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005836:	e004      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800583e:	e000      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800584a:	4b26      	ldr	r3, [pc, #152]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	4a22      	ldr	r2, [pc, #136]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585c:	430b      	orrs	r3, r1
 800585e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005876:	673b      	str	r3, [r7, #112]	@ 0x70
 8005878:	2300      	movs	r3, #0
 800587a:	677b      	str	r3, [r7, #116]	@ 0x74
 800587c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d034      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005894:	d007      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005898:	4b12      	ldr	r3, [pc, #72]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	4a11      	ldr	r2, [pc, #68]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800589e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058a4:	e00e      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3308      	adds	r3, #8
 80058ac:	2102      	movs	r1, #2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fca4 	bl	80061fc <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10d      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058da:	4a02      	ldr	r2, [pc, #8]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058dc:	430b      	orrs	r3, r1
 80058de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e0:	e006      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058e2:	bf00      	nop
 80058e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058fe:	2300      	movs	r3, #0
 8005900:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005902:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d00c      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	3328      	adds	r3, #40	@ 0x28
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fd23 	bl	8006360 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005932:	663b      	str	r3, [r7, #96]	@ 0x60
 8005934:	2300      	movs	r3, #0
 8005936:	667b      	str	r3, [r7, #100]	@ 0x64
 8005938:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d038      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594e:	d018      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005954:	d811      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800595a:	d014      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800595c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005960:	d80b      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596c:	4bc3      	ldr	r3, [pc, #780]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	4ac2      	ldr	r2, [pc, #776]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005994:	4bb9      	ldr	r3, [pc, #740]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005998:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a4:	4ab5      	ldr	r2, [pc, #724]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059c2:	2300      	movs	r3, #0
 80059c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059ca:	460b      	mov	r3, r1
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059d0:	4baa      	ldr	r3, [pc, #680]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	4aa7      	ldr	r2, [pc, #668]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80059f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80059f2:	2300      	movs	r3, #0
 80059f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a00:	4b9e      	ldr	r3, [pc, #632]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a10:	4a9a      	ldr	r2, [pc, #616]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a24:	2300      	movs	r3, #0
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a32:	4b92      	ldr	r3, [pc, #584]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a40:	4a8e      	ldr	r2, [pc, #568]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a42:	430b      	orrs	r3, r1
 8005a44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a54:	2300      	movs	r3, #0
 8005a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a62:	4b86      	ldr	r3, [pc, #536]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	4a85      	ldr	r2, [pc, #532]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a6c:	6113      	str	r3, [r2, #16]
 8005a6e:	4b83      	ldr	r3, [pc, #524]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a7a:	4a80      	ldr	r2, [pc, #512]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a8e:	2300      	movs	r3, #0
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a96:	460b      	mov	r3, r1
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a9c:	4b77      	ldr	r3, [pc, #476]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aaa:	4a74      	ldr	r2, [pc, #464]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aac:	430b      	orrs	r3, r1
 8005aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005acc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005adc:	4a67      	ldr	r2, [pc, #412]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	2100      	movs	r1, #0
 8005aec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d011      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3308      	adds	r3, #8
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fb78 	bl	80061fc <RCCEx_PLL2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	6239      	str	r1, [r7, #32]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d011      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	3308      	adds	r3, #8
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb58 	bl	80061fc <RCCEx_PLL2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	61b9      	str	r1, [r7, #24]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	3308      	adds	r3, #8
 8005b84:	2102      	movs	r1, #2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb38 	bl	80061fc <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	2100      	movs	r1, #0
 8005bac:	6139      	str	r1, [r7, #16]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	d011      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	3328      	adds	r3, #40	@ 0x28
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fbca 	bl	8006360 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	2100      	movs	r1, #0
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	d011      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	3328      	adds	r3, #40	@ 0x28
 8005c04:	2101      	movs	r1, #1
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fbaa 	bl	8006360 <RCCEx_PLL3_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	d011      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	3328      	adds	r3, #40	@ 0x28
 8005c44:	2102      	movs	r1, #2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fb8a 	bl	8006360 <RCCEx_PLL3_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005c62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7c:	58024400 	.word	0x58024400

08005c80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c84:	f7fe fd96 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	4904      	ldr	r1, [pc, #16]	@ (8005ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c96:	5ccb      	ldrb	r3, [r1, r3]
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	0800a9fc 	.word	0x0800a9fc

08005cac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cbe:	4b9f      	ldr	r3, [pc, #636]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	0b1b      	lsrs	r3, r3, #12
 8005cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cca:	4b9c      	ldr	r3, [pc, #624]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cd6:	4b99      	ldr	r3, [pc, #612]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8111 	beq.w	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	f000 8083 	beq.w	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	f200 80a1 	bhi.w	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d056      	beq.n	8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d16:	e099      	b.n	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d18:	4b88      	ldr	r3, [pc, #544]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02d      	beq.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d24:	4b85      	ldr	r3, [pc, #532]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	4a84      	ldr	r2, [pc, #528]	@ (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d7e:	e087      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b6a      	ldr	r3, [pc, #424]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc2:	e065      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b59      	ldr	r3, [pc, #356]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e06:	e043      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b48      	ldr	r3, [pc, #288]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4a:	e021      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b37      	ldr	r3, [pc, #220]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e90:	4b2a      	ldr	r3, [pc, #168]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	0a5b      	lsrs	r3, r3, #9
 8005e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb6:	ee17 2a90 	vmov	r2, s15
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee4:	ee17 2a90 	vmov	r2, s15
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	0e1b      	lsrs	r3, r3, #24
 8005ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f1a:	e008      	b.n	8005f2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	@ 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	03d09000 	.word	0x03d09000
 8005f44:	46000000 	.word	0x46000000
 8005f48:	4c742400 	.word	0x4c742400
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4af42400 	.word	0x4af42400

08005f54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	@ 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f66:	4b9f      	ldr	r3, [pc, #636]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f72:	4b9c      	ldr	r3, [pc, #624]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f7e:	4b99      	ldr	r3, [pc, #612]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8111 	beq.w	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f000 8083 	beq.w	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	f200 80a1 	bhi.w	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d056      	beq.n	800606c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fbe:	e099      	b.n	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc0:	4b88      	ldr	r3, [pc, #544]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02d      	beq.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fcc:	4b85      	ldr	r3, [pc, #532]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	4a84      	ldr	r2, [pc, #528]	@ (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a03 	vldr	s12, [r7, #12]
 800600a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006026:	e087      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b6a      	ldr	r3, [pc, #424]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a03 	vldr	s12, [r7, #12]
 800604e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	e065      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b59      	ldr	r3, [pc, #356]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	e043      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b48      	ldr	r3, [pc, #288]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	e021      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b37      	ldr	r3, [pc, #220]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006138:	4b2a      	ldr	r3, [pc, #168]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	0a5b      	lsrs	r3, r3, #9
 800613e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800614e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006152:	edd7 6a07 	vldr	s13, [r7, #28]
 8006156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615e:	ee17 2a90 	vmov	r2, s15
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006166:	4b1f      	ldr	r3, [pc, #124]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800617c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006180:	edd7 6a07 	vldr	s13, [r7, #28]
 8006184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618c:	ee17 2a90 	vmov	r2, s15
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006194:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ba:	ee17 2a90 	vmov	r2, s15
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061c2:	e008      	b.n	80061d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
}
 80061d6:	bf00      	nop
 80061d8:	3724      	adds	r7, #36	@ 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	46000000 	.word	0x46000000
 80061f0:	4c742400 	.word	0x4c742400
 80061f4:	4a742400 	.word	0x4a742400
 80061f8:	4af42400 	.word	0x4af42400

080061fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800620a:	4b53      	ldr	r3, [pc, #332]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b03      	cmp	r3, #3
 8006214:	d101      	bne.n	800621a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e099      	b.n	800634e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800621a:	4b4f      	ldr	r3, [pc, #316]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4e      	ldr	r2, [pc, #312]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006226:	f7fb fe17 	bl	8001e58 <HAL_GetTick>
 800622a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800622c:	e008      	b.n	8006240 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800622e:	f7fb fe13 	bl	8001e58 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e086      	b.n	800634e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006240:	4b45      	ldr	r3, [pc, #276]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f0      	bne.n	800622e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800624c:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	493f      	ldr	r1, [pc, #252]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	3b01      	subs	r3, #1
 8006266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	3b01      	subs	r3, #1
 8006270:	025b      	lsls	r3, r3, #9
 8006272:	b29b      	uxth	r3, r3
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	3b01      	subs	r3, #1
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	3b01      	subs	r3, #1
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006290:	4931      	ldr	r1, [pc, #196]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006296:	4b30      	ldr	r3, [pc, #192]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	492d      	ldr	r1, [pc, #180]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	f023 0220 	bic.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	4928      	ldr	r1, [pc, #160]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062ba:	4b27      	ldr	r3, [pc, #156]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	4a26      	ldr	r2, [pc, #152]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f023 0310 	bic.w	r3, r3, #16
 80062c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062c6:	4b24      	ldr	r3, [pc, #144]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062ca:	4b24      	ldr	r3, [pc, #144]	@ (800635c <RCCEx_PLL2_Config+0x160>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	69d2      	ldr	r2, [r2, #28]
 80062d2:	00d2      	lsls	r2, r2, #3
 80062d4:	4920      	ldr	r1, [pc, #128]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062da:	4b1f      	ldr	r3, [pc, #124]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	4a1e      	ldr	r2, [pc, #120]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062e0:	f043 0310 	orr.w	r3, r3, #16
 80062e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062f8:	e00f      	b.n	800631a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d106      	bne.n	800630e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006300:	4b15      	ldr	r3, [pc, #84]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	4a14      	ldr	r2, [pc, #80]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800630a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800630c:	e005      	b.n	800631a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800630e:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	4a11      	ldr	r2, [pc, #68]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006318:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800631a:	4b0f      	ldr	r3, [pc, #60]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a0e      	ldr	r2, [pc, #56]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006320:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006326:	f7fb fd97 	bl	8001e58 <HAL_GetTick>
 800632a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800632c:	e008      	b.n	8006340 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800632e:	f7fb fd93 	bl	8001e58 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e006      	b.n	800634e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	58024400 	.word	0x58024400
 800635c:	ffff0007 	.word	0xffff0007

08006360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800636e:	4b53      	ldr	r3, [pc, #332]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d101      	bne.n	800637e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e099      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800637e:	4b4f      	ldr	r3, [pc, #316]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a4e      	ldr	r2, [pc, #312]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638a:	f7fb fd65 	bl	8001e58 <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006390:	e008      	b.n	80063a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006392:	f7fb fd61 	bl	8001e58 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e086      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063a4:	4b45      	ldr	r3, [pc, #276]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063b0:	4b42      	ldr	r3, [pc, #264]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	051b      	lsls	r3, r3, #20
 80063be:	493f      	ldr	r1, [pc, #252]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063f4:	4931      	ldr	r1, [pc, #196]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063fa:	4b30      	ldr	r3, [pc, #192]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	492d      	ldr	r1, [pc, #180]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800640c:	4b2b      	ldr	r3, [pc, #172]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	4928      	ldr	r1, [pc, #160]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800641e:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006428:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800642a:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800642c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800642e:	4b24      	ldr	r3, [pc, #144]	@ (80064c0 <RCCEx_PLL3_Config+0x160>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	69d2      	ldr	r2, [r2, #28]
 8006436:	00d2      	lsls	r2, r2, #3
 8006438:	4920      	ldr	r1, [pc, #128]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800643e:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	4a1e      	ldr	r2, [pc, #120]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006450:	4b1a      	ldr	r3, [pc, #104]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006456:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800645a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800645c:	e00f      	b.n	800647e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006464:	4b15      	ldr	r3, [pc, #84]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a14      	ldr	r2, [pc, #80]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800646a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006470:	e005      	b.n	800647e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	4a11      	ldr	r2, [pc, #68]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800647c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800647e:	4b0f      	ldr	r3, [pc, #60]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a0e      	ldr	r2, [pc, #56]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648a:	f7fb fce5 	bl	8001e58 <HAL_GetTick>
 800648e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006490:	e008      	b.n	80064a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006492:	f7fb fce1 	bl	8001e58 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e006      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	58024400 	.word	0x58024400
 80064c0:	ffff0007 	.word	0xffff0007

080064c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e042      	b.n	800655c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fb fb7f 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2224      	movs	r2, #36	@ 0x24
 80064f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fa14 	bl	800793c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fca9 	bl	8006e6c <UART_SetConfig>
 800651a:	4603      	mov	r3, r0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e01b      	b.n	800655c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 fa93 	bl	8007a80 <UART_CheckIdleState>
 800655a:	4603      	mov	r3, r0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657a:	2b20      	cmp	r3, #32
 800657c:	d17b      	bne.n	8006676 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_UART_Transmit+0x26>
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e074      	b.n	8006678 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2221      	movs	r2, #33	@ 0x21
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800659e:	f7fb fc5b 	bl	8001e58 <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065bc:	d108      	bne.n	80065d0 <HAL_UART_Transmit+0x6c>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e003      	b.n	80065d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065d8:	e030      	b.n	800663c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	2180      	movs	r1, #128	@ 0x80
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f001 faf5 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e03d      	b.n	8006678 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006610:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	3302      	adds	r3, #2
 8006616:	61bb      	str	r3, [r7, #24]
 8006618:	e007      	b.n	800662a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	3301      	adds	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1c8      	bne.n	80065da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2200      	movs	r2, #0
 8006650:	2140      	movs	r1, #64	@ 0x40
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 fabe 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e006      	b.n	8006678 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0ba      	sub	sp, #232	@ 0xe8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066ae:	4013      	ands	r3, r2
 80066b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11b      	bne.n	80066f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8393 	beq.w	8006e10 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
      }
      return;
 80066f2:	e38d      	b.n	8006e10 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8123 	beq.w	8006944 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006702:	4b8d      	ldr	r3, [pc, #564]	@ (8006938 <HAL_UART_IRQHandler+0x2b8>)
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800670a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800670e:	4b8b      	ldr	r3, [pc, #556]	@ (800693c <HAL_UART_IRQHandler+0x2bc>)
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8116 	beq.w	8006944 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <HAL_UART_IRQHandler+0xc8>
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d011      	beq.n	8006778 <HAL_UART_IRQHandler+0xf8>
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2202      	movs	r2, #2
 8006766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_UART_IRQHandler+0x128>
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2204      	movs	r2, #4
 8006796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679e:	f043 0202 	orr.w	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006938 <HAL_UART_IRQHandler+0x2b8>)
 80067c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2208      	movs	r2, #8
 80067d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	f043 0208 	orr.w	r2, r3, #8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <HAL_UART_IRQHandler+0x196>
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 82f9 	beq.w	8006e14 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800686e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d054      	beq.n	8006924 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fa18 	bl	8007cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688a:	2b40      	cmp	r3, #64	@ 0x40
 800688c:	d146      	bne.n	800691c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d9      	bne.n	800688e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d017      	beq.n	8006914 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ea:	4a15      	ldr	r2, [pc, #84]	@ (8006940 <HAL_UART_IRQHandler+0x2c0>)
 80068ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fb ff6d 	bl	80027d4 <HAL_DMA_Abort_IT>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006912:	e00f      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa93 	bl	8006e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	e00b      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa8f 	bl	8006e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006922:	e007      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa8b 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006932:	e26f      	b.n	8006e14 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	bf00      	nop
    return;
 8006936:	e26d      	b.n	8006e14 <HAL_UART_IRQHandler+0x794>
 8006938:	10000001 	.word	0x10000001
 800693c:	04000120 	.word	0x04000120
 8006940:	08007d7d 	.word	0x08007d7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 8203 	bne.w	8006d54 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 81fc 	beq.w	8006d54 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 81f5 	beq.w	8006d54 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b40      	cmp	r3, #64	@ 0x40
 800697e:	f040 816d 	bne.w	8006c5c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4aa4      	ldr	r2, [pc, #656]	@ (8006c1c <HAL_UART_IRQHandler+0x59c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d068      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4aa1      	ldr	r2, [pc, #644]	@ (8006c20 <HAL_UART_IRQHandler+0x5a0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d061      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a9f      	ldr	r2, [pc, #636]	@ (8006c24 <HAL_UART_IRQHandler+0x5a4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d05a      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a9c      	ldr	r2, [pc, #624]	@ (8006c28 <HAL_UART_IRQHandler+0x5a8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d053      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a9a      	ldr	r2, [pc, #616]	@ (8006c2c <HAL_UART_IRQHandler+0x5ac>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d04c      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a97      	ldr	r2, [pc, #604]	@ (8006c30 <HAL_UART_IRQHandler+0x5b0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d045      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a95      	ldr	r2, [pc, #596]	@ (8006c34 <HAL_UART_IRQHandler+0x5b4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d03e      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a92      	ldr	r2, [pc, #584]	@ (8006c38 <HAL_UART_IRQHandler+0x5b8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d037      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a90      	ldr	r2, [pc, #576]	@ (8006c3c <HAL_UART_IRQHandler+0x5bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d030      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a8d      	ldr	r2, [pc, #564]	@ (8006c40 <HAL_UART_IRQHandler+0x5c0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d029      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a8b      	ldr	r2, [pc, #556]	@ (8006c44 <HAL_UART_IRQHandler+0x5c4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a88      	ldr	r2, [pc, #544]	@ (8006c48 <HAL_UART_IRQHandler+0x5c8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01b      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a86      	ldr	r2, [pc, #536]	@ (8006c4c <HAL_UART_IRQHandler+0x5cc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d014      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a83      	ldr	r2, [pc, #524]	@ (8006c50 <HAL_UART_IRQHandler+0x5d0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00d      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a81      	ldr	r2, [pc, #516]	@ (8006c54 <HAL_UART_IRQHandler+0x5d4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d006      	beq.n	8006a62 <HAL_UART_IRQHandler+0x3e2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7e      	ldr	r2, [pc, #504]	@ (8006c58 <HAL_UART_IRQHandler+0x5d8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d106      	bne.n	8006a70 <HAL_UART_IRQHandler+0x3f0>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	e005      	b.n	8006a7c <HAL_UART_IRQHandler+0x3fc>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80ad 	beq.w	8006be4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a94:	429a      	cmp	r2, r3
 8006a96:	f080 80a5 	bcs.w	8006be4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab0:	f000 8087 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ae2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1da      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b90:	f023 0310 	bic.w	r3, r3, #16
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ba4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e4      	bne.n	8006b80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fb faeb 	bl	8002198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f939 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006be2:	e119      	b.n	8006e18 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	f040 8112 	bne.w	8006e18 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c00:	f040 810a 	bne.w	8006e18 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f91e 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
      return;
 8006c18:	e0fe      	b.n	8006e18 <HAL_UART_IRQHandler+0x798>
 8006c1a:	bf00      	nop
 8006c1c:	40020010 	.word	0x40020010
 8006c20:	40020028 	.word	0x40020028
 8006c24:	40020040 	.word	0x40020040
 8006c28:	40020058 	.word	0x40020058
 8006c2c:	40020070 	.word	0x40020070
 8006c30:	40020088 	.word	0x40020088
 8006c34:	400200a0 	.word	0x400200a0
 8006c38:	400200b8 	.word	0x400200b8
 8006c3c:	40020410 	.word	0x40020410
 8006c40:	40020428 	.word	0x40020428
 8006c44:	40020440 	.word	0x40020440
 8006c48:	40020458 	.word	0x40020458
 8006c4c:	40020470 	.word	0x40020470
 8006c50:	40020488 	.word	0x40020488
 8006c54:	400204a0 	.word	0x400204a0
 8006c58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80cf 	beq.w	8006e1c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80ca 	beq.w	8006e1c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e4      	bne.n	8006c88 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	4b55      	ldr	r3, [pc, #340]	@ (8006e28 <HAL_UART_IRQHandler+0x7a8>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ce2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e3      	bne.n	8006cbe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0310 	bic.w	r3, r3, #16
 8006d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e4      	bne.n	8006d0a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f881 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d52:	e063      	b.n	8006e1c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <HAL_UART_IRQHandler+0x6fe>
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f83d 	bl	8007df6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7c:	e051      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d105      	bne.n	8006da2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03a      	beq.n	8006e20 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
    }
    return;
 8006db2:	e035      	b.n	8006e20 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x754>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ffe7 	bl	8007da0 <UART_EndTransmit_IT>
    return;
 8006dd2:	e026      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <HAL_UART_IRQHandler+0x774>
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f816 	bl	8007e1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006df2:	e016      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da0c      	bge.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fffe 	bl	8007e0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e0e:	e008      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e10:	bf00      	nop
 8006e12:	e006      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006e14:	bf00      	nop
 8006e16:	e004      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <HAL_UART_IRQHandler+0x7a2>
    return;
 8006e20:	bf00      	nop
  }
}
 8006e22:	37e8      	adds	r7, #232	@ 0xe8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	effffffe 	.word	0xeffffffe

08006e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e70:	b092      	sub	sp, #72	@ 0x48
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4bbe      	ldr	r3, [pc, #760]	@ (8007194 <UART_SetConfig+0x328>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4ab3      	ldr	r2, [pc, #716]	@ (8007198 <UART_SetConfig+0x32c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	4baf      	ldr	r3, [pc, #700]	@ (800719c <UART_SetConfig+0x330>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	f023 010f 	bic.w	r1, r3, #15
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4aa6      	ldr	r2, [pc, #664]	@ (80071a0 <UART_SetConfig+0x334>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d177      	bne.n	8006ffc <UART_SetConfig+0x190>
 8006f0c:	4ba5      	ldr	r3, [pc, #660]	@ (80071a4 <UART_SetConfig+0x338>)
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f14:	2b28      	cmp	r3, #40	@ 0x28
 8006f16:	d86d      	bhi.n	8006ff4 <UART_SetConfig+0x188>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <UART_SetConfig+0xb4>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006fc5 	.word	0x08006fc5
 8006f24:	08006ff5 	.word	0x08006ff5
 8006f28:	08006ff5 	.word	0x08006ff5
 8006f2c:	08006ff5 	.word	0x08006ff5
 8006f30:	08006ff5 	.word	0x08006ff5
 8006f34:	08006ff5 	.word	0x08006ff5
 8006f38:	08006ff5 	.word	0x08006ff5
 8006f3c:	08006ff5 	.word	0x08006ff5
 8006f40:	08006fcd 	.word	0x08006fcd
 8006f44:	08006ff5 	.word	0x08006ff5
 8006f48:	08006ff5 	.word	0x08006ff5
 8006f4c:	08006ff5 	.word	0x08006ff5
 8006f50:	08006ff5 	.word	0x08006ff5
 8006f54:	08006ff5 	.word	0x08006ff5
 8006f58:	08006ff5 	.word	0x08006ff5
 8006f5c:	08006ff5 	.word	0x08006ff5
 8006f60:	08006fd5 	.word	0x08006fd5
 8006f64:	08006ff5 	.word	0x08006ff5
 8006f68:	08006ff5 	.word	0x08006ff5
 8006f6c:	08006ff5 	.word	0x08006ff5
 8006f70:	08006ff5 	.word	0x08006ff5
 8006f74:	08006ff5 	.word	0x08006ff5
 8006f78:	08006ff5 	.word	0x08006ff5
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08006fdd 	.word	0x08006fdd
 8006f84:	08006ff5 	.word	0x08006ff5
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006ff5 	.word	0x08006ff5
 8006f98:	08006ff5 	.word	0x08006ff5
 8006f9c:	08006ff5 	.word	0x08006ff5
 8006fa0:	08006fe5 	.word	0x08006fe5
 8006fa4:	08006ff5 	.word	0x08006ff5
 8006fa8:	08006ff5 	.word	0x08006ff5
 8006fac:	08006ff5 	.word	0x08006ff5
 8006fb0:	08006ff5 	.word	0x08006ff5
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006ff5 	.word	0x08006ff5
 8006fbc:	08006ff5 	.word	0x08006ff5
 8006fc0:	08006fed 	.word	0x08006fed
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e222      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e21e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e21a      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e216      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fe4:	2320      	movs	r3, #32
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fea:	e212      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006fec:	2340      	movs	r3, #64	@ 0x40
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff2:	e20e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006ff4:	2380      	movs	r3, #128	@ 0x80
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffa:	e20a      	b.n	8007412 <UART_SetConfig+0x5a6>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a69      	ldr	r2, [pc, #420]	@ (80071a8 <UART_SetConfig+0x33c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d130      	bne.n	8007068 <UART_SetConfig+0x1fc>
 8007006:	4b67      	ldr	r3, [pc, #412]	@ (80071a4 <UART_SetConfig+0x338>)
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b05      	cmp	r3, #5
 8007010:	d826      	bhi.n	8007060 <UART_SetConfig+0x1f4>
 8007012:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <UART_SetConfig+0x1ac>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	08007031 	.word	0x08007031
 800701c:	08007039 	.word	0x08007039
 8007020:	08007041 	.word	0x08007041
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	2300      	movs	r3, #0
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e1ec      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e1e8      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e1e4      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e1e0      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007050:	2320      	movs	r3, #32
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e1dc      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007058:	2340      	movs	r3, #64	@ 0x40
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e1d8      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e1d4      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a4f      	ldr	r2, [pc, #316]	@ (80071ac <UART_SetConfig+0x340>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d130      	bne.n	80070d4 <UART_SetConfig+0x268>
 8007072:	4b4c      	ldr	r3, [pc, #304]	@ (80071a4 <UART_SetConfig+0x338>)
 8007074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b05      	cmp	r3, #5
 800707c:	d826      	bhi.n	80070cc <UART_SetConfig+0x260>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <UART_SetConfig+0x218>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	0800709d 	.word	0x0800709d
 8007088:	080070a5 	.word	0x080070a5
 800708c:	080070ad 	.word	0x080070ad
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	2300      	movs	r3, #0
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e1b6      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070a4:	2304      	movs	r3, #4
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e1b2      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070ac:	2308      	movs	r3, #8
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e1ae      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070b4:	2310      	movs	r3, #16
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e1aa      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070bc:	2320      	movs	r3, #32
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e1a6      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070c4:	2340      	movs	r3, #64	@ 0x40
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e1a2      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e19e      	b.n	8007412 <UART_SetConfig+0x5a6>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a35      	ldr	r2, [pc, #212]	@ (80071b0 <UART_SetConfig+0x344>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d130      	bne.n	8007140 <UART_SetConfig+0x2d4>
 80070de:	4b31      	ldr	r3, [pc, #196]	@ (80071a4 <UART_SetConfig+0x338>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d826      	bhi.n	8007138 <UART_SetConfig+0x2cc>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <UART_SetConfig+0x284>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007109 	.word	0x08007109
 80070f4:	08007111 	.word	0x08007111
 80070f8:	08007119 	.word	0x08007119
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e180      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e17c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e178      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e174      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007128:	2320      	movs	r3, #32
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e170      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007130:	2340      	movs	r3, #64	@ 0x40
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e16c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e168      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1b      	ldr	r2, [pc, #108]	@ (80071b4 <UART_SetConfig+0x348>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d142      	bne.n	80071d0 <UART_SetConfig+0x364>
 800714a:	4b16      	ldr	r3, [pc, #88]	@ (80071a4 <UART_SetConfig+0x338>)
 800714c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b05      	cmp	r3, #5
 8007154:	d838      	bhi.n	80071c8 <UART_SetConfig+0x35c>
 8007156:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <UART_SetConfig+0x2f0>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007175 	.word	0x08007175
 8007160:	0800717d 	.word	0x0800717d
 8007164:	08007185 	.word	0x08007185
 8007168:	0800718d 	.word	0x0800718d
 800716c:	080071b9 	.word	0x080071b9
 8007170:	080071c1 	.word	0x080071c1
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e14a      	b.n	8007412 <UART_SetConfig+0x5a6>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e146      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e142      	b.n	8007412 <UART_SetConfig+0x5a6>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e13e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007194:	cfff69f3 	.word	0xcfff69f3
 8007198:	58000c00 	.word	0x58000c00
 800719c:	11fff4ff 	.word	0x11fff4ff
 80071a0:	40011000 	.word	0x40011000
 80071a4:	58024400 	.word	0x58024400
 80071a8:	40004400 	.word	0x40004400
 80071ac:	40004800 	.word	0x40004800
 80071b0:	40004c00 	.word	0x40004c00
 80071b4:	40005000 	.word	0x40005000
 80071b8:	2320      	movs	r3, #32
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071be:	e128      	b.n	8007412 <UART_SetConfig+0x5a6>
 80071c0:	2340      	movs	r3, #64	@ 0x40
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c6:	e124      	b.n	8007412 <UART_SetConfig+0x5a6>
 80071c8:	2380      	movs	r3, #128	@ 0x80
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e120      	b.n	8007412 <UART_SetConfig+0x5a6>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4acb      	ldr	r2, [pc, #812]	@ (8007504 <UART_SetConfig+0x698>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d176      	bne.n	80072c8 <UART_SetConfig+0x45c>
 80071da:	4bcb      	ldr	r3, [pc, #812]	@ (8007508 <UART_SetConfig+0x69c>)
 80071dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071e2:	2b28      	cmp	r3, #40	@ 0x28
 80071e4:	d86c      	bhi.n	80072c0 <UART_SetConfig+0x454>
 80071e6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <UART_SetConfig+0x380>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007291 	.word	0x08007291
 80071f0:	080072c1 	.word	0x080072c1
 80071f4:	080072c1 	.word	0x080072c1
 80071f8:	080072c1 	.word	0x080072c1
 80071fc:	080072c1 	.word	0x080072c1
 8007200:	080072c1 	.word	0x080072c1
 8007204:	080072c1 	.word	0x080072c1
 8007208:	080072c1 	.word	0x080072c1
 800720c:	08007299 	.word	0x08007299
 8007210:	080072c1 	.word	0x080072c1
 8007214:	080072c1 	.word	0x080072c1
 8007218:	080072c1 	.word	0x080072c1
 800721c:	080072c1 	.word	0x080072c1
 8007220:	080072c1 	.word	0x080072c1
 8007224:	080072c1 	.word	0x080072c1
 8007228:	080072c1 	.word	0x080072c1
 800722c:	080072a1 	.word	0x080072a1
 8007230:	080072c1 	.word	0x080072c1
 8007234:	080072c1 	.word	0x080072c1
 8007238:	080072c1 	.word	0x080072c1
 800723c:	080072c1 	.word	0x080072c1
 8007240:	080072c1 	.word	0x080072c1
 8007244:	080072c1 	.word	0x080072c1
 8007248:	080072c1 	.word	0x080072c1
 800724c:	080072a9 	.word	0x080072a9
 8007250:	080072c1 	.word	0x080072c1
 8007254:	080072c1 	.word	0x080072c1
 8007258:	080072c1 	.word	0x080072c1
 800725c:	080072c1 	.word	0x080072c1
 8007260:	080072c1 	.word	0x080072c1
 8007264:	080072c1 	.word	0x080072c1
 8007268:	080072c1 	.word	0x080072c1
 800726c:	080072b1 	.word	0x080072b1
 8007270:	080072c1 	.word	0x080072c1
 8007274:	080072c1 	.word	0x080072c1
 8007278:	080072c1 	.word	0x080072c1
 800727c:	080072c1 	.word	0x080072c1
 8007280:	080072c1 	.word	0x080072c1
 8007284:	080072c1 	.word	0x080072c1
 8007288:	080072c1 	.word	0x080072c1
 800728c:	080072b9 	.word	0x080072b9
 8007290:	2301      	movs	r3, #1
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007296:	e0bc      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007298:	2304      	movs	r3, #4
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729e:	e0b8      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072a0:	2308      	movs	r3, #8
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a6:	e0b4      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072a8:	2310      	movs	r3, #16
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ae:	e0b0      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072b0:	2320      	movs	r3, #32
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b6:	e0ac      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072b8:	2340      	movs	r3, #64	@ 0x40
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072be:	e0a8      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072c0:	2380      	movs	r3, #128	@ 0x80
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c6:	e0a4      	b.n	8007412 <UART_SetConfig+0x5a6>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a8f      	ldr	r2, [pc, #572]	@ (800750c <UART_SetConfig+0x6a0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d130      	bne.n	8007334 <UART_SetConfig+0x4c8>
 80072d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007508 <UART_SetConfig+0x69c>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	2b05      	cmp	r3, #5
 80072dc:	d826      	bhi.n	800732c <UART_SetConfig+0x4c0>
 80072de:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <UART_SetConfig+0x478>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072fd 	.word	0x080072fd
 80072e8:	08007305 	.word	0x08007305
 80072ec:	0800730d 	.word	0x0800730d
 80072f0:	08007315 	.word	0x08007315
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	08007325 	.word	0x08007325
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007302:	e086      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007304:	2304      	movs	r3, #4
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e082      	b.n	8007412 <UART_SetConfig+0x5a6>
 800730c:	2308      	movs	r3, #8
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007312:	e07e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007314:	2310      	movs	r3, #16
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e07a      	b.n	8007412 <UART_SetConfig+0x5a6>
 800731c:	2320      	movs	r3, #32
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e076      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007324:	2340      	movs	r3, #64	@ 0x40
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e072      	b.n	8007412 <UART_SetConfig+0x5a6>
 800732c:	2380      	movs	r3, #128	@ 0x80
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007332:	e06e      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a75      	ldr	r2, [pc, #468]	@ (8007510 <UART_SetConfig+0x6a4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d130      	bne.n	80073a0 <UART_SetConfig+0x534>
 800733e:	4b72      	ldr	r3, [pc, #456]	@ (8007508 <UART_SetConfig+0x69c>)
 8007340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b05      	cmp	r3, #5
 8007348:	d826      	bhi.n	8007398 <UART_SetConfig+0x52c>
 800734a:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x4e4>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007369 	.word	0x08007369
 8007354:	08007371 	.word	0x08007371
 8007358:	08007379 	.word	0x08007379
 800735c:	08007381 	.word	0x08007381
 8007360:	08007389 	.word	0x08007389
 8007364:	08007391 	.word	0x08007391
 8007368:	2300      	movs	r3, #0
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e050      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007370:	2304      	movs	r3, #4
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e04c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007378:	2308      	movs	r3, #8
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e048      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007380:	2310      	movs	r3, #16
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e044      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007388:	2320      	movs	r3, #32
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e040      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007390:	2340      	movs	r3, #64	@ 0x40
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e03c      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007398:	2380      	movs	r3, #128	@ 0x80
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e038      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5b      	ldr	r2, [pc, #364]	@ (8007514 <UART_SetConfig+0x6a8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d130      	bne.n	800740c <UART_SetConfig+0x5a0>
 80073aa:	4b57      	ldr	r3, [pc, #348]	@ (8007508 <UART_SetConfig+0x69c>)
 80073ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	2b05      	cmp	r3, #5
 80073b4:	d826      	bhi.n	8007404 <UART_SetConfig+0x598>
 80073b6:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <UART_SetConfig+0x550>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073d5 	.word	0x080073d5
 80073c0:	080073dd 	.word	0x080073dd
 80073c4:	080073e5 	.word	0x080073e5
 80073c8:	080073ed 	.word	0x080073ed
 80073cc:	080073f5 	.word	0x080073f5
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e01a      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e016      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e012      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e00e      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073f4:	2320      	movs	r3, #32
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e00a      	b.n	8007412 <UART_SetConfig+0x5a6>
 80073fc:	2340      	movs	r3, #64	@ 0x40
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e006      	b.n	8007412 <UART_SetConfig+0x5a6>
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e002      	b.n	8007412 <UART_SetConfig+0x5a6>
 800740c:	2380      	movs	r3, #128	@ 0x80
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a3f      	ldr	r2, [pc, #252]	@ (8007514 <UART_SetConfig+0x6a8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	f040 80f8 	bne.w	800760e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800741e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007422:	2b20      	cmp	r3, #32
 8007424:	dc46      	bgt.n	80074b4 <UART_SetConfig+0x648>
 8007426:	2b02      	cmp	r3, #2
 8007428:	f2c0 8082 	blt.w	8007530 <UART_SetConfig+0x6c4>
 800742c:	3b02      	subs	r3, #2
 800742e:	2b1e      	cmp	r3, #30
 8007430:	d87e      	bhi.n	8007530 <UART_SetConfig+0x6c4>
 8007432:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <UART_SetConfig+0x5cc>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	080074bb 	.word	0x080074bb
 800743c:	08007531 	.word	0x08007531
 8007440:	080074c3 	.word	0x080074c3
 8007444:	08007531 	.word	0x08007531
 8007448:	08007531 	.word	0x08007531
 800744c:	08007531 	.word	0x08007531
 8007450:	080074d3 	.word	0x080074d3
 8007454:	08007531 	.word	0x08007531
 8007458:	08007531 	.word	0x08007531
 800745c:	08007531 	.word	0x08007531
 8007460:	08007531 	.word	0x08007531
 8007464:	08007531 	.word	0x08007531
 8007468:	08007531 	.word	0x08007531
 800746c:	08007531 	.word	0x08007531
 8007470:	080074e3 	.word	0x080074e3
 8007474:	08007531 	.word	0x08007531
 8007478:	08007531 	.word	0x08007531
 800747c:	08007531 	.word	0x08007531
 8007480:	08007531 	.word	0x08007531
 8007484:	08007531 	.word	0x08007531
 8007488:	08007531 	.word	0x08007531
 800748c:	08007531 	.word	0x08007531
 8007490:	08007531 	.word	0x08007531
 8007494:	08007531 	.word	0x08007531
 8007498:	08007531 	.word	0x08007531
 800749c:	08007531 	.word	0x08007531
 80074a0:	08007531 	.word	0x08007531
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007531 	.word	0x08007531
 80074ac:	08007531 	.word	0x08007531
 80074b0:	08007523 	.word	0x08007523
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d037      	beq.n	8007528 <UART_SetConfig+0x6bc>
 80074b8:	e03a      	b.n	8007530 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074ba:	f7fe fbe1 	bl	8005c80 <HAL_RCCEx_GetD3PCLK1Freq>
 80074be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074c0:	e03c      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fbf0 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d0:	e034      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d2:	f107 0318 	add.w	r3, r7, #24
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fd3c 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e0:	e02c      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <UART_SetConfig+0x69c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ee:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <UART_SetConfig+0x69c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	08db      	lsrs	r3, r3, #3
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	4a07      	ldr	r2, [pc, #28]	@ (8007518 <UART_SetConfig+0x6ac>)
 80074fa:	fa22 f303 	lsr.w	r3, r2, r3
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007500:	e01c      	b.n	800753c <UART_SetConfig+0x6d0>
 8007502:	bf00      	nop
 8007504:	40011400 	.word	0x40011400
 8007508:	58024400 	.word	0x58024400
 800750c:	40007800 	.word	0x40007800
 8007510:	40007c00 	.word	0x40007c00
 8007514:	58000c00 	.word	0x58000c00
 8007518:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800751c:	4b9d      	ldr	r3, [pc, #628]	@ (8007794 <UART_SetConfig+0x928>)
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007520:	e00c      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007522:	4b9d      	ldr	r3, [pc, #628]	@ (8007798 <UART_SetConfig+0x92c>)
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007526:	e009      	b.n	800753c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752e:	e005      	b.n	800753c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800753a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800753c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 81de 	beq.w	8007900 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007548:	4a94      	ldr	r2, [pc, #592]	@ (800779c <UART_SetConfig+0x930>)
 800754a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800754e:	461a      	mov	r2, r3
 8007550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007552:	fbb3 f3f2 	udiv	r3, r3, r2
 8007556:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4413      	add	r3, r2
 8007562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007564:	429a      	cmp	r2, r3
 8007566:	d305      	bcc.n	8007574 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800756e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007570:	429a      	cmp	r2, r3
 8007572:	d903      	bls.n	800757c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800757a:	e1c1      	b.n	8007900 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757e:	2200      	movs	r2, #0
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	60fa      	str	r2, [r7, #12]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	4a84      	ldr	r2, [pc, #528]	@ (800779c <UART_SetConfig+0x930>)
 800758a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800758e:	b29b      	uxth	r3, r3
 8007590:	2200      	movs	r2, #0
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800759e:	f7f8 fef7 	bl	8000390 <__aeabi_uldivmod>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	020b      	lsls	r3, r1, #8
 80075b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075b8:	0202      	lsls	r2, r0, #8
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	6849      	ldr	r1, [r1, #4]
 80075be:	0849      	lsrs	r1, r1, #1
 80075c0:	2000      	movs	r0, #0
 80075c2:	460c      	mov	r4, r1
 80075c4:	4605      	mov	r5, r0
 80075c6:	eb12 0804 	adds.w	r8, r2, r4
 80075ca:	eb43 0905 	adc.w	r9, r3, r5
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	469a      	mov	sl, r3
 80075d6:	4693      	mov	fp, r2
 80075d8:	4652      	mov	r2, sl
 80075da:	465b      	mov	r3, fp
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f8 fed6 	bl	8000390 <__aeabi_uldivmod>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4613      	mov	r3, r2
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f2:	d308      	bcc.n	8007606 <UART_SetConfig+0x79a>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075fa:	d204      	bcs.n	8007606 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007602:	60da      	str	r2, [r3, #12]
 8007604:	e17c      	b.n	8007900 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800760c:	e178      	b.n	8007900 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007616:	f040 80c5 	bne.w	80077a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800761a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800761e:	2b20      	cmp	r3, #32
 8007620:	dc48      	bgt.n	80076b4 <UART_SetConfig+0x848>
 8007622:	2b00      	cmp	r3, #0
 8007624:	db7b      	blt.n	800771e <UART_SetConfig+0x8b2>
 8007626:	2b20      	cmp	r3, #32
 8007628:	d879      	bhi.n	800771e <UART_SetConfig+0x8b2>
 800762a:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <UART_SetConfig+0x7c4>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076bb 	.word	0x080076bb
 8007634:	080076c3 	.word	0x080076c3
 8007638:	0800771f 	.word	0x0800771f
 800763c:	0800771f 	.word	0x0800771f
 8007640:	080076cb 	.word	0x080076cb
 8007644:	0800771f 	.word	0x0800771f
 8007648:	0800771f 	.word	0x0800771f
 800764c:	0800771f 	.word	0x0800771f
 8007650:	080076db 	.word	0x080076db
 8007654:	0800771f 	.word	0x0800771f
 8007658:	0800771f 	.word	0x0800771f
 800765c:	0800771f 	.word	0x0800771f
 8007660:	0800771f 	.word	0x0800771f
 8007664:	0800771f 	.word	0x0800771f
 8007668:	0800771f 	.word	0x0800771f
 800766c:	0800771f 	.word	0x0800771f
 8007670:	080076eb 	.word	0x080076eb
 8007674:	0800771f 	.word	0x0800771f
 8007678:	0800771f 	.word	0x0800771f
 800767c:	0800771f 	.word	0x0800771f
 8007680:	0800771f 	.word	0x0800771f
 8007684:	0800771f 	.word	0x0800771f
 8007688:	0800771f 	.word	0x0800771f
 800768c:	0800771f 	.word	0x0800771f
 8007690:	0800771f 	.word	0x0800771f
 8007694:	0800771f 	.word	0x0800771f
 8007698:	0800771f 	.word	0x0800771f
 800769c:	0800771f 	.word	0x0800771f
 80076a0:	0800771f 	.word	0x0800771f
 80076a4:	0800771f 	.word	0x0800771f
 80076a8:	0800771f 	.word	0x0800771f
 80076ac:	0800771f 	.word	0x0800771f
 80076b0:	08007711 	.word	0x08007711
 80076b4:	2b40      	cmp	r3, #64	@ 0x40
 80076b6:	d02e      	beq.n	8007716 <UART_SetConfig+0x8aa>
 80076b8:	e031      	b.n	800771e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ba:	f7fd f8ab 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 80076be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076c0:	e033      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c2:	f7fd f8bd 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 80076c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076c8:	e02f      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe faec 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d8:	e027      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076da:	f107 0318 	add.w	r3, r7, #24
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fc38 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e8:	e01f      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ea:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <UART_SetConfig+0x934>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076f6:	4b2a      	ldr	r3, [pc, #168]	@ (80077a0 <UART_SetConfig+0x934>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	4a24      	ldr	r2, [pc, #144]	@ (8007794 <UART_SetConfig+0x928>)
 8007702:	fa22 f303 	lsr.w	r3, r2, r3
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007708:	e00f      	b.n	800772a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800770a:	4b22      	ldr	r3, [pc, #136]	@ (8007794 <UART_SetConfig+0x928>)
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770e:	e00c      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007710:	4b21      	ldr	r3, [pc, #132]	@ (8007798 <UART_SetConfig+0x92c>)
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007714:	e009      	b.n	800772a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771c:	e005      	b.n	800772a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800772a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80e7 	beq.w	8007900 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007736:	4a19      	ldr	r2, [pc, #100]	@ (800779c <UART_SetConfig+0x930>)
 8007738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773c:	461a      	mov	r2, r3
 800773e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007740:	fbb3 f3f2 	udiv	r3, r3, r2
 8007744:	005a      	lsls	r2, r3, #1
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	441a      	add	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	2b0f      	cmp	r3, #15
 800775c:	d916      	bls.n	800778c <UART_SetConfig+0x920>
 800775e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007764:	d212      	bcs.n	800778c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	b29b      	uxth	r3, r3
 800776a:	f023 030f 	bic.w	r3, r3, #15
 800776e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	b29b      	uxth	r3, r3
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	b29a      	uxth	r2, r3
 800777c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800777e:	4313      	orrs	r3, r2
 8007780:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	e0b9      	b.n	8007900 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007792:	e0b5      	b.n	8007900 <UART_SetConfig+0xa94>
 8007794:	03d09000 	.word	0x03d09000
 8007798:	003d0900 	.word	0x003d0900
 800779c:	0800aa0c 	.word	0x0800aa0c
 80077a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80077a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	dc49      	bgt.n	8007840 <UART_SetConfig+0x9d4>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	db7c      	blt.n	80078aa <UART_SetConfig+0xa3e>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d87a      	bhi.n	80078aa <UART_SetConfig+0xa3e>
 80077b4:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <UART_SetConfig+0x950>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	08007847 	.word	0x08007847
 80077c0:	0800784f 	.word	0x0800784f
 80077c4:	080078ab 	.word	0x080078ab
 80077c8:	080078ab 	.word	0x080078ab
 80077cc:	08007857 	.word	0x08007857
 80077d0:	080078ab 	.word	0x080078ab
 80077d4:	080078ab 	.word	0x080078ab
 80077d8:	080078ab 	.word	0x080078ab
 80077dc:	08007867 	.word	0x08007867
 80077e0:	080078ab 	.word	0x080078ab
 80077e4:	080078ab 	.word	0x080078ab
 80077e8:	080078ab 	.word	0x080078ab
 80077ec:	080078ab 	.word	0x080078ab
 80077f0:	080078ab 	.word	0x080078ab
 80077f4:	080078ab 	.word	0x080078ab
 80077f8:	080078ab 	.word	0x080078ab
 80077fc:	08007877 	.word	0x08007877
 8007800:	080078ab 	.word	0x080078ab
 8007804:	080078ab 	.word	0x080078ab
 8007808:	080078ab 	.word	0x080078ab
 800780c:	080078ab 	.word	0x080078ab
 8007810:	080078ab 	.word	0x080078ab
 8007814:	080078ab 	.word	0x080078ab
 8007818:	080078ab 	.word	0x080078ab
 800781c:	080078ab 	.word	0x080078ab
 8007820:	080078ab 	.word	0x080078ab
 8007824:	080078ab 	.word	0x080078ab
 8007828:	080078ab 	.word	0x080078ab
 800782c:	080078ab 	.word	0x080078ab
 8007830:	080078ab 	.word	0x080078ab
 8007834:	080078ab 	.word	0x080078ab
 8007838:	080078ab 	.word	0x080078ab
 800783c:	0800789d 	.word	0x0800789d
 8007840:	2b40      	cmp	r3, #64	@ 0x40
 8007842:	d02e      	beq.n	80078a2 <UART_SetConfig+0xa36>
 8007844:	e031      	b.n	80078aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007846:	f7fc ffe5 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 800784a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800784c:	e033      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784e:	f7fc fff7 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8007852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007854:	e02f      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fa26 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007864:	e027      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007866:	f107 0318 	add.w	r3, r7, #24
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fb72 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e01f      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007876:	4b2d      	ldr	r3, [pc, #180]	@ (800792c <UART_SetConfig+0xac0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007882:	4b2a      	ldr	r3, [pc, #168]	@ (800792c <UART_SetConfig+0xac0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	4a28      	ldr	r2, [pc, #160]	@ (8007930 <UART_SetConfig+0xac4>)
 800788e:	fa22 f303 	lsr.w	r3, r2, r3
 8007892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007894:	e00f      	b.n	80078b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007896:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <UART_SetConfig+0xac4>)
 8007898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789a:	e00c      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <UART_SetConfig+0xac8>)
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a0:	e009      	b.n	80078b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a8:	e005      	b.n	80078b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078b4:	bf00      	nop
    }

    if (pclk != 0U)
 80078b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d021      	beq.n	8007900 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007938 <UART_SetConfig+0xacc>)
 80078c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c6:	461a      	mov	r2, r3
 80078c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	441a      	add	r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	d909      	bls.n	80078fa <UART_SetConfig+0xa8e>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ec:	d205      	bcs.n	80078fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60da      	str	r2, [r3, #12]
 80078f8:	e002      	b.n	8007900 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2201      	movs	r2, #1
 8007904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2201      	movs	r2, #1
 800790c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2200      	movs	r2, #0
 8007914:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2200      	movs	r2, #0
 800791a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800791c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007920:	4618      	mov	r0, r3
 8007922:	3748      	adds	r7, #72	@ 0x48
 8007924:	46bd      	mov	sp, r7
 8007926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	03d09000 	.word	0x03d09000
 8007934:	003d0900 	.word	0x003d0900
 8007938:	0800aa0c 	.word	0x0800aa0c

0800793c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01a      	beq.n	8007a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a3a:	d10a      	bne.n	8007a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b098      	sub	sp, #96	@ 0x60
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a90:	f7fa f9e2 	bl	8001e58 <HAL_GetTick>
 8007a94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d12f      	bne.n	8007b04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aac:	2200      	movs	r2, #0
 8007aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f88e 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d022      	beq.n	8007b04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ade:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e063      	b.n	8007bcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d149      	bne.n	8007ba6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f857 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d03c      	beq.n	8007ba6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	623b      	str	r3, [r7, #32]
   return(result);
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e6      	bne.n	8007b2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b7e:	61fa      	str	r2, [r7, #28]
 8007b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e012      	b.n	8007bcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3758      	adds	r7, #88	@ 0x58
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be4:	e04f      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d04b      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7fa f933 	bl	8001e58 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e04e      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d037      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b80      	cmp	r3, #128	@ 0x80
 8007c1a:	d034      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d031      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d110      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2208      	movs	r2, #8
 8007c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f839 	bl	8007cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2208      	movs	r2, #8
 8007c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e029      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c60:	d111      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f81f 	bl	8007cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e00f      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d0a0      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b095      	sub	sp, #84	@ 0x54
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8007d78 <UART_EndRxTransfer+0xc8>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d118      	bne.n	8007d58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f023 0310 	bic.w	r3, r3, #16
 8007d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6979      	ldr	r1, [r7, #20]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	613b      	str	r3, [r7, #16]
   return(result);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d6c:	bf00      	nop
 8007d6e:	3754      	adds	r7, #84	@ 0x54
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	effffffe 	.word	0xeffffffe

08007d7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff f854 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f81f 	bl	8006e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dee:	bf00      	nop
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e027      	b.n	8007e98 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2224      	movs	r2, #36	@ 0x24
 8007e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e02d      	b.n	8007f18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2224      	movs	r2, #36	@ 0x24
 8007ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f84f 	bl	8007f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e02d      	b.n	8007f94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2224      	movs	r2, #36	@ 0x24
 8007f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f811 	bl	8007f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fbc:	e031      	b.n	8008022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fc2:	2310      	movs	r3, #16
 8007fc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	0e5b      	lsrs	r3, r3, #25
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	0f5b      	lsrs	r3, r3, #29
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	7b3a      	ldrb	r2, [r7, #12]
 8007fea:	4911      	ldr	r1, [pc, #68]	@ (8008030 <UARTEx_SetNbDataToProcess+0x94>)
 8007fec:	5c8a      	ldrb	r2, [r1, r2]
 8007fee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ff2:	7b3a      	ldrb	r2, [r7, #12]
 8007ff4:	490f      	ldr	r1, [pc, #60]	@ (8008034 <UARTEx_SetNbDataToProcess+0x98>)
 8007ff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	7b7a      	ldrb	r2, [r7, #13]
 8008008:	4909      	ldr	r1, [pc, #36]	@ (8008030 <UARTEx_SetNbDataToProcess+0x94>)
 800800a:	5c8a      	ldrb	r2, [r1, r2]
 800800c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008010:	7b7a      	ldrb	r2, [r7, #13]
 8008012:	4908      	ldr	r1, [pc, #32]	@ (8008034 <UARTEx_SetNbDataToProcess+0x98>)
 8008014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008016:	fb93 f3f2 	sdiv	r3, r3, r2
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	0800aa24 	.word	0x0800aa24
 8008034:	0800aa2c 	.word	0x0800aa2c

08008038 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800804a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804e:	d10e      	bne.n	800806e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d107      	bne.n	800806e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0201 	mvn.w	r2, #1
 8008066:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f804 	bl	8008076 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <__cvt>:
 800808a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800808c:	ed2d 8b02 	vpush	{d8}
 8008090:	eeb0 8b40 	vmov.f64	d8, d0
 8008094:	b085      	sub	sp, #20
 8008096:	4617      	mov	r7, r2
 8008098:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800809a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800809c:	ee18 2a90 	vmov	r2, s17
 80080a0:	f025 0520 	bic.w	r5, r5, #32
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	bfb6      	itet	lt
 80080a8:	222d      	movlt	r2, #45	@ 0x2d
 80080aa:	2200      	movge	r2, #0
 80080ac:	eeb1 8b40 	vneglt.f64	d8, d0
 80080b0:	2d46      	cmp	r5, #70	@ 0x46
 80080b2:	460c      	mov	r4, r1
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	d004      	beq.n	80080c2 <__cvt+0x38>
 80080b8:	2d45      	cmp	r5, #69	@ 0x45
 80080ba:	d100      	bne.n	80080be <__cvt+0x34>
 80080bc:	3401      	adds	r4, #1
 80080be:	2102      	movs	r1, #2
 80080c0:	e000      	b.n	80080c4 <__cvt+0x3a>
 80080c2:	2103      	movs	r1, #3
 80080c4:	ab03      	add	r3, sp, #12
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	ab02      	add	r3, sp, #8
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4622      	mov	r2, r4
 80080ce:	4633      	mov	r3, r6
 80080d0:	eeb0 0b48 	vmov.f64	d0, d8
 80080d4:	f000 ff20 	bl	8008f18 <_dtoa_r>
 80080d8:	2d47      	cmp	r5, #71	@ 0x47
 80080da:	d114      	bne.n	8008106 <__cvt+0x7c>
 80080dc:	07fb      	lsls	r3, r7, #31
 80080de:	d50a      	bpl.n	80080f6 <__cvt+0x6c>
 80080e0:	1902      	adds	r2, r0, r4
 80080e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ea:	bf08      	it	eq
 80080ec:	9203      	streq	r2, [sp, #12]
 80080ee:	2130      	movs	r1, #48	@ 0x30
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d319      	bcc.n	800812a <__cvt+0xa0>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080fa:	1a1b      	subs	r3, r3, r0
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	b005      	add	sp, #20
 8008100:	ecbd 8b02 	vpop	{d8}
 8008104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008106:	2d46      	cmp	r5, #70	@ 0x46
 8008108:	eb00 0204 	add.w	r2, r0, r4
 800810c:	d1e9      	bne.n	80080e2 <__cvt+0x58>
 800810e:	7803      	ldrb	r3, [r0, #0]
 8008110:	2b30      	cmp	r3, #48	@ 0x30
 8008112:	d107      	bne.n	8008124 <__cvt+0x9a>
 8008114:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811c:	bf1c      	itt	ne
 800811e:	f1c4 0401 	rsbne	r4, r4, #1
 8008122:	6034      	strne	r4, [r6, #0]
 8008124:	6833      	ldr	r3, [r6, #0]
 8008126:	441a      	add	r2, r3
 8008128:	e7db      	b.n	80080e2 <__cvt+0x58>
 800812a:	1c5c      	adds	r4, r3, #1
 800812c:	9403      	str	r4, [sp, #12]
 800812e:	7019      	strb	r1, [r3, #0]
 8008130:	e7de      	b.n	80080f0 <__cvt+0x66>

08008132 <__exponent>:
 8008132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008134:	2900      	cmp	r1, #0
 8008136:	bfba      	itte	lt
 8008138:	4249      	neglt	r1, r1
 800813a:	232d      	movlt	r3, #45	@ 0x2d
 800813c:	232b      	movge	r3, #43	@ 0x2b
 800813e:	2909      	cmp	r1, #9
 8008140:	7002      	strb	r2, [r0, #0]
 8008142:	7043      	strb	r3, [r0, #1]
 8008144:	dd29      	ble.n	800819a <__exponent+0x68>
 8008146:	f10d 0307 	add.w	r3, sp, #7
 800814a:	461d      	mov	r5, r3
 800814c:	270a      	movs	r7, #10
 800814e:	461a      	mov	r2, r3
 8008150:	fbb1 f6f7 	udiv	r6, r1, r7
 8008154:	fb07 1416 	mls	r4, r7, r6, r1
 8008158:	3430      	adds	r4, #48	@ 0x30
 800815a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800815e:	460c      	mov	r4, r1
 8008160:	2c63      	cmp	r4, #99	@ 0x63
 8008162:	f103 33ff 	add.w	r3, r3, #4294967295
 8008166:	4631      	mov	r1, r6
 8008168:	dcf1      	bgt.n	800814e <__exponent+0x1c>
 800816a:	3130      	adds	r1, #48	@ 0x30
 800816c:	1e94      	subs	r4, r2, #2
 800816e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008172:	1c41      	adds	r1, r0, #1
 8008174:	4623      	mov	r3, r4
 8008176:	42ab      	cmp	r3, r5
 8008178:	d30a      	bcc.n	8008190 <__exponent+0x5e>
 800817a:	f10d 0309 	add.w	r3, sp, #9
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	42ac      	cmp	r4, r5
 8008182:	bf88      	it	hi
 8008184:	2300      	movhi	r3, #0
 8008186:	3302      	adds	r3, #2
 8008188:	4403      	add	r3, r0
 800818a:	1a18      	subs	r0, r3, r0
 800818c:	b003      	add	sp, #12
 800818e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008190:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008194:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008198:	e7ed      	b.n	8008176 <__exponent+0x44>
 800819a:	2330      	movs	r3, #48	@ 0x30
 800819c:	3130      	adds	r1, #48	@ 0x30
 800819e:	7083      	strb	r3, [r0, #2]
 80081a0:	70c1      	strb	r1, [r0, #3]
 80081a2:	1d03      	adds	r3, r0, #4
 80081a4:	e7f1      	b.n	800818a <__exponent+0x58>
	...

080081a8 <_printf_float>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	b08d      	sub	sp, #52	@ 0x34
 80081ae:	460c      	mov	r4, r1
 80081b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80081b4:	4616      	mov	r6, r2
 80081b6:	461f      	mov	r7, r3
 80081b8:	4605      	mov	r5, r0
 80081ba:	f000 fdad 	bl	8008d18 <_localeconv_r>
 80081be:	f8d0 b000 	ldr.w	fp, [r0]
 80081c2:	4658      	mov	r0, fp
 80081c4:	f7f8 f8dc 	bl	8000380 <strlen>
 80081c8:	2300      	movs	r3, #0
 80081ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80081cc:	f8d8 3000 	ldr.w	r3, [r8]
 80081d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	9005      	str	r0, [sp, #20]
 80081d8:	3307      	adds	r3, #7
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	f103 0108 	add.w	r1, r3, #8
 80081e2:	f8c8 1000 	str.w	r1, [r8]
 80081e6:	ed93 0b00 	vldr	d0, [r3]
 80081ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008448 <_printf_float+0x2a0>
 80081ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80081f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80081f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80081fe:	dd24      	ble.n	800824a <_printf_float+0xa2>
 8008200:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008208:	d502      	bpl.n	8008210 <_printf_float+0x68>
 800820a:	232d      	movs	r3, #45	@ 0x2d
 800820c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008210:	498f      	ldr	r1, [pc, #572]	@ (8008450 <_printf_float+0x2a8>)
 8008212:	4b90      	ldr	r3, [pc, #576]	@ (8008454 <_printf_float+0x2ac>)
 8008214:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008218:	bf8c      	ite	hi
 800821a:	4688      	movhi	r8, r1
 800821c:	4698      	movls	r8, r3
 800821e:	f022 0204 	bic.w	r2, r2, #4
 8008222:	2303      	movs	r3, #3
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	6022      	str	r2, [r4, #0]
 8008228:	f04f 0a00 	mov.w	sl, #0
 800822c:	9700      	str	r7, [sp, #0]
 800822e:	4633      	mov	r3, r6
 8008230:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008232:	4621      	mov	r1, r4
 8008234:	4628      	mov	r0, r5
 8008236:	f000 f9d1 	bl	80085dc <_printf_common>
 800823a:	3001      	adds	r0, #1
 800823c:	f040 8089 	bne.w	8008352 <_printf_float+0x1aa>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	b00d      	add	sp, #52	@ 0x34
 8008246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824a:	eeb4 0b40 	vcmp.f64	d0, d0
 800824e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008252:	d709      	bvc.n	8008268 <_printf_float+0xc0>
 8008254:	ee10 3a90 	vmov	r3, s1
 8008258:	2b00      	cmp	r3, #0
 800825a:	bfbc      	itt	lt
 800825c:	232d      	movlt	r3, #45	@ 0x2d
 800825e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008262:	497d      	ldr	r1, [pc, #500]	@ (8008458 <_printf_float+0x2b0>)
 8008264:	4b7d      	ldr	r3, [pc, #500]	@ (800845c <_printf_float+0x2b4>)
 8008266:	e7d5      	b.n	8008214 <_printf_float+0x6c>
 8008268:	6863      	ldr	r3, [r4, #4]
 800826a:	1c59      	adds	r1, r3, #1
 800826c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008270:	d139      	bne.n	80082e6 <_printf_float+0x13e>
 8008272:	2306      	movs	r3, #6
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800827a:	2300      	movs	r3, #0
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	ab0a      	add	r3, sp, #40	@ 0x28
 8008282:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008286:	ab09      	add	r3, sp, #36	@ 0x24
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	6861      	ldr	r1, [r4, #4]
 800828c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008290:	4628      	mov	r0, r5
 8008292:	f7ff fefa 	bl	800808a <__cvt>
 8008296:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800829a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800829c:	4680      	mov	r8, r0
 800829e:	d129      	bne.n	80082f4 <_printf_float+0x14c>
 80082a0:	1cc8      	adds	r0, r1, #3
 80082a2:	db02      	blt.n	80082aa <_printf_float+0x102>
 80082a4:	6863      	ldr	r3, [r4, #4]
 80082a6:	4299      	cmp	r1, r3
 80082a8:	dd41      	ble.n	800832e <_printf_float+0x186>
 80082aa:	f1a9 0902 	sub.w	r9, r9, #2
 80082ae:	fa5f f989 	uxtb.w	r9, r9
 80082b2:	3901      	subs	r1, #1
 80082b4:	464a      	mov	r2, r9
 80082b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80082ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80082bc:	f7ff ff39 	bl	8008132 <__exponent>
 80082c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082c2:	1813      	adds	r3, r2, r0
 80082c4:	2a01      	cmp	r2, #1
 80082c6:	4682      	mov	sl, r0
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	dc02      	bgt.n	80082d2 <_printf_float+0x12a>
 80082cc:	6822      	ldr	r2, [r4, #0]
 80082ce:	07d2      	lsls	r2, r2, #31
 80082d0:	d501      	bpl.n	80082d6 <_printf_float+0x12e>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6123      	str	r3, [r4, #16]
 80082d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0a6      	beq.n	800822c <_printf_float+0x84>
 80082de:	232d      	movs	r3, #45	@ 0x2d
 80082e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082e4:	e7a2      	b.n	800822c <_printf_float+0x84>
 80082e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082ea:	d1c4      	bne.n	8008276 <_printf_float+0xce>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1c2      	bne.n	8008276 <_printf_float+0xce>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7bf      	b.n	8008274 <_printf_float+0xcc>
 80082f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80082f8:	d9db      	bls.n	80082b2 <_printf_float+0x10a>
 80082fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80082fe:	d118      	bne.n	8008332 <_printf_float+0x18a>
 8008300:	2900      	cmp	r1, #0
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	dd0b      	ble.n	800831e <_printf_float+0x176>
 8008306:	6121      	str	r1, [r4, #16]
 8008308:	b913      	cbnz	r3, 8008310 <_printf_float+0x168>
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	07d0      	lsls	r0, r2, #31
 800830e:	d502      	bpl.n	8008316 <_printf_float+0x16e>
 8008310:	3301      	adds	r3, #1
 8008312:	440b      	add	r3, r1
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008318:	f04f 0a00 	mov.w	sl, #0
 800831c:	e7db      	b.n	80082d6 <_printf_float+0x12e>
 800831e:	b913      	cbnz	r3, 8008326 <_printf_float+0x17e>
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	07d2      	lsls	r2, r2, #31
 8008324:	d501      	bpl.n	800832a <_printf_float+0x182>
 8008326:	3302      	adds	r3, #2
 8008328:	e7f4      	b.n	8008314 <_printf_float+0x16c>
 800832a:	2301      	movs	r3, #1
 800832c:	e7f2      	b.n	8008314 <_printf_float+0x16c>
 800832e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008334:	4299      	cmp	r1, r3
 8008336:	db05      	blt.n	8008344 <_printf_float+0x19c>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	6121      	str	r1, [r4, #16]
 800833c:	07d8      	lsls	r0, r3, #31
 800833e:	d5ea      	bpl.n	8008316 <_printf_float+0x16e>
 8008340:	1c4b      	adds	r3, r1, #1
 8008342:	e7e7      	b.n	8008314 <_printf_float+0x16c>
 8008344:	2900      	cmp	r1, #0
 8008346:	bfd4      	ite	le
 8008348:	f1c1 0202 	rsble	r2, r1, #2
 800834c:	2201      	movgt	r2, #1
 800834e:	4413      	add	r3, r2
 8008350:	e7e0      	b.n	8008314 <_printf_float+0x16c>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	055a      	lsls	r2, r3, #21
 8008356:	d407      	bmi.n	8008368 <_printf_float+0x1c0>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	4642      	mov	r2, r8
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	d12a      	bne.n	80083bc <_printf_float+0x214>
 8008366:	e76b      	b.n	8008240 <_printf_float+0x98>
 8008368:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800836c:	f240 80e0 	bls.w	8008530 <_printf_float+0x388>
 8008370:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008374:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837c:	d133      	bne.n	80083e6 <_printf_float+0x23e>
 800837e:	4a38      	ldr	r2, [pc, #224]	@ (8008460 <_printf_float+0x2b8>)
 8008380:	2301      	movs	r3, #1
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f af59 	beq.w	8008240 <_printf_float+0x98>
 800838e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008392:	4543      	cmp	r3, r8
 8008394:	db02      	blt.n	800839c <_printf_float+0x1f4>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	07d8      	lsls	r0, r3, #31
 800839a:	d50f      	bpl.n	80083bc <_printf_float+0x214>
 800839c:	9b05      	ldr	r3, [sp, #20]
 800839e:	465a      	mov	r2, fp
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f af4a 	beq.w	8008240 <_printf_float+0x98>
 80083ac:	f04f 0900 	mov.w	r9, #0
 80083b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80083b4:	f104 0a1a 	add.w	sl, r4, #26
 80083b8:	45c8      	cmp	r8, r9
 80083ba:	dc09      	bgt.n	80083d0 <_printf_float+0x228>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	079b      	lsls	r3, r3, #30
 80083c0:	f100 8107 	bmi.w	80085d2 <_printf_float+0x42a>
 80083c4:	68e0      	ldr	r0, [r4, #12]
 80083c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c8:	4298      	cmp	r0, r3
 80083ca:	bfb8      	it	lt
 80083cc:	4618      	movlt	r0, r3
 80083ce:	e739      	b.n	8008244 <_printf_float+0x9c>
 80083d0:	2301      	movs	r3, #1
 80083d2:	4652      	mov	r2, sl
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	f43f af30 	beq.w	8008240 <_printf_float+0x98>
 80083e0:	f109 0901 	add.w	r9, r9, #1
 80083e4:	e7e8      	b.n	80083b8 <_printf_float+0x210>
 80083e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc3b      	bgt.n	8008464 <_printf_float+0x2bc>
 80083ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008460 <_printf_float+0x2b8>)
 80083ee:	2301      	movs	r3, #1
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f af22 	beq.w	8008240 <_printf_float+0x98>
 80083fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008400:	ea59 0303 	orrs.w	r3, r9, r3
 8008404:	d102      	bne.n	800840c <_printf_float+0x264>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	07d9      	lsls	r1, r3, #31
 800840a:	d5d7      	bpl.n	80083bc <_printf_float+0x214>
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	465a      	mov	r2, fp
 8008410:	4631      	mov	r1, r6
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f af12 	beq.w	8008240 <_printf_float+0x98>
 800841c:	f04f 0a00 	mov.w	sl, #0
 8008420:	f104 0b1a 	add.w	fp, r4, #26
 8008424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008426:	425b      	negs	r3, r3
 8008428:	4553      	cmp	r3, sl
 800842a:	dc01      	bgt.n	8008430 <_printf_float+0x288>
 800842c:	464b      	mov	r3, r9
 800842e:	e794      	b.n	800835a <_printf_float+0x1b2>
 8008430:	2301      	movs	r3, #1
 8008432:	465a      	mov	r2, fp
 8008434:	4631      	mov	r1, r6
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	f43f af00 	beq.w	8008240 <_printf_float+0x98>
 8008440:	f10a 0a01 	add.w	sl, sl, #1
 8008444:	e7ee      	b.n	8008424 <_printf_float+0x27c>
 8008446:	bf00      	nop
 8008448:	ffffffff 	.word	0xffffffff
 800844c:	7fefffff 	.word	0x7fefffff
 8008450:	0800aa38 	.word	0x0800aa38
 8008454:	0800aa34 	.word	0x0800aa34
 8008458:	0800aa40 	.word	0x0800aa40
 800845c:	0800aa3c 	.word	0x0800aa3c
 8008460:	0800aa44 	.word	0x0800aa44
 8008464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008466:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800846a:	4553      	cmp	r3, sl
 800846c:	bfa8      	it	ge
 800846e:	4653      	movge	r3, sl
 8008470:	2b00      	cmp	r3, #0
 8008472:	4699      	mov	r9, r3
 8008474:	dc37      	bgt.n	80084e6 <_printf_float+0x33e>
 8008476:	2300      	movs	r3, #0
 8008478:	9307      	str	r3, [sp, #28]
 800847a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800847e:	f104 021a 	add.w	r2, r4, #26
 8008482:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008484:	9907      	ldr	r1, [sp, #28]
 8008486:	9306      	str	r3, [sp, #24]
 8008488:	eba3 0309 	sub.w	r3, r3, r9
 800848c:	428b      	cmp	r3, r1
 800848e:	dc31      	bgt.n	80084f4 <_printf_float+0x34c>
 8008490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008492:	459a      	cmp	sl, r3
 8008494:	dc3b      	bgt.n	800850e <_printf_float+0x366>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	07da      	lsls	r2, r3, #31
 800849a:	d438      	bmi.n	800850e <_printf_float+0x366>
 800849c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849e:	ebaa 0903 	sub.w	r9, sl, r3
 80084a2:	9b06      	ldr	r3, [sp, #24]
 80084a4:	ebaa 0303 	sub.w	r3, sl, r3
 80084a8:	4599      	cmp	r9, r3
 80084aa:	bfa8      	it	ge
 80084ac:	4699      	movge	r9, r3
 80084ae:	f1b9 0f00 	cmp.w	r9, #0
 80084b2:	dc34      	bgt.n	800851e <_printf_float+0x376>
 80084b4:	f04f 0800 	mov.w	r8, #0
 80084b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084bc:	f104 0b1a 	add.w	fp, r4, #26
 80084c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c2:	ebaa 0303 	sub.w	r3, sl, r3
 80084c6:	eba3 0309 	sub.w	r3, r3, r9
 80084ca:	4543      	cmp	r3, r8
 80084cc:	f77f af76 	ble.w	80083bc <_printf_float+0x214>
 80084d0:	2301      	movs	r3, #1
 80084d2:	465a      	mov	r2, fp
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f aeb0 	beq.w	8008240 <_printf_float+0x98>
 80084e0:	f108 0801 	add.w	r8, r8, #1
 80084e4:	e7ec      	b.n	80084c0 <_printf_float+0x318>
 80084e6:	4642      	mov	r2, r8
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	d1c1      	bne.n	8008476 <_printf_float+0x2ce>
 80084f2:	e6a5      	b.n	8008240 <_printf_float+0x98>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	9206      	str	r2, [sp, #24]
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f ae9e 	beq.w	8008240 <_printf_float+0x98>
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	9a06      	ldr	r2, [sp, #24]
 8008508:	3301      	adds	r3, #1
 800850a:	9307      	str	r3, [sp, #28]
 800850c:	e7b9      	b.n	8008482 <_printf_float+0x2da>
 800850e:	9b05      	ldr	r3, [sp, #20]
 8008510:	465a      	mov	r2, fp
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	d1bf      	bne.n	800849c <_printf_float+0x2f4>
 800851c:	e690      	b.n	8008240 <_printf_float+0x98>
 800851e:	9a06      	ldr	r2, [sp, #24]
 8008520:	464b      	mov	r3, r9
 8008522:	4442      	add	r2, r8
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	d1c2      	bne.n	80084b4 <_printf_float+0x30c>
 800852e:	e687      	b.n	8008240 <_printf_float+0x98>
 8008530:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008534:	f1b9 0f01 	cmp.w	r9, #1
 8008538:	dc01      	bgt.n	800853e <_printf_float+0x396>
 800853a:	07db      	lsls	r3, r3, #31
 800853c:	d536      	bpl.n	80085ac <_printf_float+0x404>
 800853e:	2301      	movs	r3, #1
 8008540:	4642      	mov	r2, r8
 8008542:	4631      	mov	r1, r6
 8008544:	4628      	mov	r0, r5
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	f43f ae79 	beq.w	8008240 <_printf_float+0x98>
 800854e:	9b05      	ldr	r3, [sp, #20]
 8008550:	465a      	mov	r2, fp
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	f43f ae71 	beq.w	8008240 <_printf_float+0x98>
 800855e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856a:	f109 39ff 	add.w	r9, r9, #4294967295
 800856e:	d018      	beq.n	80085a2 <_printf_float+0x3fa>
 8008570:	464b      	mov	r3, r9
 8008572:	f108 0201 	add.w	r2, r8, #1
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	d10c      	bne.n	800859a <_printf_float+0x3f2>
 8008580:	e65e      	b.n	8008240 <_printf_float+0x98>
 8008582:	2301      	movs	r3, #1
 8008584:	465a      	mov	r2, fp
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	f43f ae57 	beq.w	8008240 <_printf_float+0x98>
 8008592:	f108 0801 	add.w	r8, r8, #1
 8008596:	45c8      	cmp	r8, r9
 8008598:	dbf3      	blt.n	8008582 <_printf_float+0x3da>
 800859a:	4653      	mov	r3, sl
 800859c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80085a0:	e6dc      	b.n	800835c <_printf_float+0x1b4>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	f104 0b1a 	add.w	fp, r4, #26
 80085aa:	e7f4      	b.n	8008596 <_printf_float+0x3ee>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4642      	mov	r2, r8
 80085b0:	e7e1      	b.n	8008576 <_printf_float+0x3ce>
 80085b2:	2301      	movs	r3, #1
 80085b4:	464a      	mov	r2, r9
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f ae3f 	beq.w	8008240 <_printf_float+0x98>
 80085c2:	f108 0801 	add.w	r8, r8, #1
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	4543      	cmp	r3, r8
 80085ce:	dcf0      	bgt.n	80085b2 <_printf_float+0x40a>
 80085d0:	e6f8      	b.n	80083c4 <_printf_float+0x21c>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	f104 0919 	add.w	r9, r4, #25
 80085da:	e7f4      	b.n	80085c6 <_printf_float+0x41e>

080085dc <_printf_common>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	4616      	mov	r6, r2
 80085e2:	4698      	mov	r8, r3
 80085e4:	688a      	ldr	r2, [r1, #8]
 80085e6:	690b      	ldr	r3, [r1, #16]
 80085e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	bfb8      	it	lt
 80085f0:	4613      	movlt	r3, r2
 80085f2:	6033      	str	r3, [r6, #0]
 80085f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085f8:	4607      	mov	r7, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	b10a      	cbz	r2, 8008602 <_printf_common+0x26>
 80085fe:	3301      	adds	r3, #1
 8008600:	6033      	str	r3, [r6, #0]
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	0699      	lsls	r1, r3, #26
 8008606:	bf42      	ittt	mi
 8008608:	6833      	ldrmi	r3, [r6, #0]
 800860a:	3302      	addmi	r3, #2
 800860c:	6033      	strmi	r3, [r6, #0]
 800860e:	6825      	ldr	r5, [r4, #0]
 8008610:	f015 0506 	ands.w	r5, r5, #6
 8008614:	d106      	bne.n	8008624 <_printf_common+0x48>
 8008616:	f104 0a19 	add.w	sl, r4, #25
 800861a:	68e3      	ldr	r3, [r4, #12]
 800861c:	6832      	ldr	r2, [r6, #0]
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	42ab      	cmp	r3, r5
 8008622:	dc26      	bgt.n	8008672 <_printf_common+0x96>
 8008624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008628:	6822      	ldr	r2, [r4, #0]
 800862a:	3b00      	subs	r3, #0
 800862c:	bf18      	it	ne
 800862e:	2301      	movne	r3, #1
 8008630:	0692      	lsls	r2, r2, #26
 8008632:	d42b      	bmi.n	800868c <_printf_common+0xb0>
 8008634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008638:	4641      	mov	r1, r8
 800863a:	4638      	mov	r0, r7
 800863c:	47c8      	blx	r9
 800863e:	3001      	adds	r0, #1
 8008640:	d01e      	beq.n	8008680 <_printf_common+0xa4>
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	f003 0306 	and.w	r3, r3, #6
 800864a:	2b04      	cmp	r3, #4
 800864c:	bf02      	ittt	eq
 800864e:	68e5      	ldreq	r5, [r4, #12]
 8008650:	6833      	ldreq	r3, [r6, #0]
 8008652:	1aed      	subeq	r5, r5, r3
 8008654:	68a3      	ldr	r3, [r4, #8]
 8008656:	bf0c      	ite	eq
 8008658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800865c:	2500      	movne	r5, #0
 800865e:	4293      	cmp	r3, r2
 8008660:	bfc4      	itt	gt
 8008662:	1a9b      	subgt	r3, r3, r2
 8008664:	18ed      	addgt	r5, r5, r3
 8008666:	2600      	movs	r6, #0
 8008668:	341a      	adds	r4, #26
 800866a:	42b5      	cmp	r5, r6
 800866c:	d11a      	bne.n	80086a4 <_printf_common+0xc8>
 800866e:	2000      	movs	r0, #0
 8008670:	e008      	b.n	8008684 <_printf_common+0xa8>
 8008672:	2301      	movs	r3, #1
 8008674:	4652      	mov	r2, sl
 8008676:	4641      	mov	r1, r8
 8008678:	4638      	mov	r0, r7
 800867a:	47c8      	blx	r9
 800867c:	3001      	adds	r0, #1
 800867e:	d103      	bne.n	8008688 <_printf_common+0xac>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008688:	3501      	adds	r5, #1
 800868a:	e7c6      	b.n	800861a <_printf_common+0x3e>
 800868c:	18e1      	adds	r1, r4, r3
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	2030      	movs	r0, #48	@ 0x30
 8008692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008696:	4422      	add	r2, r4
 8008698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800869c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086a0:	3302      	adds	r3, #2
 80086a2:	e7c7      	b.n	8008634 <_printf_common+0x58>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4622      	mov	r2, r4
 80086a8:	4641      	mov	r1, r8
 80086aa:	4638      	mov	r0, r7
 80086ac:	47c8      	blx	r9
 80086ae:	3001      	adds	r0, #1
 80086b0:	d0e6      	beq.n	8008680 <_printf_common+0xa4>
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7d9      	b.n	800866a <_printf_common+0x8e>
	...

080086b8 <_printf_i>:
 80086b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086bc:	7e0f      	ldrb	r7, [r1, #24]
 80086be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086c0:	2f78      	cmp	r7, #120	@ 0x78
 80086c2:	4691      	mov	r9, r2
 80086c4:	4680      	mov	r8, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	469a      	mov	sl, r3
 80086ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ce:	d807      	bhi.n	80086e0 <_printf_i+0x28>
 80086d0:	2f62      	cmp	r7, #98	@ 0x62
 80086d2:	d80a      	bhi.n	80086ea <_printf_i+0x32>
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	f000 80d1 	beq.w	800887c <_printf_i+0x1c4>
 80086da:	2f58      	cmp	r7, #88	@ 0x58
 80086dc:	f000 80b8 	beq.w	8008850 <_printf_i+0x198>
 80086e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086e8:	e03a      	b.n	8008760 <_printf_i+0xa8>
 80086ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086ee:	2b15      	cmp	r3, #21
 80086f0:	d8f6      	bhi.n	80086e0 <_printf_i+0x28>
 80086f2:	a101      	add	r1, pc, #4	@ (adr r1, 80086f8 <_printf_i+0x40>)
 80086f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086f8:	08008751 	.word	0x08008751
 80086fc:	08008765 	.word	0x08008765
 8008700:	080086e1 	.word	0x080086e1
 8008704:	080086e1 	.word	0x080086e1
 8008708:	080086e1 	.word	0x080086e1
 800870c:	080086e1 	.word	0x080086e1
 8008710:	08008765 	.word	0x08008765
 8008714:	080086e1 	.word	0x080086e1
 8008718:	080086e1 	.word	0x080086e1
 800871c:	080086e1 	.word	0x080086e1
 8008720:	080086e1 	.word	0x080086e1
 8008724:	08008863 	.word	0x08008863
 8008728:	0800878f 	.word	0x0800878f
 800872c:	0800881d 	.word	0x0800881d
 8008730:	080086e1 	.word	0x080086e1
 8008734:	080086e1 	.word	0x080086e1
 8008738:	08008885 	.word	0x08008885
 800873c:	080086e1 	.word	0x080086e1
 8008740:	0800878f 	.word	0x0800878f
 8008744:	080086e1 	.word	0x080086e1
 8008748:	080086e1 	.word	0x080086e1
 800874c:	08008825 	.word	0x08008825
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	1d1a      	adds	r2, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6032      	str	r2, [r6, #0]
 8008758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800875c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008760:	2301      	movs	r3, #1
 8008762:	e09c      	b.n	800889e <_printf_i+0x1e6>
 8008764:	6833      	ldr	r3, [r6, #0]
 8008766:	6820      	ldr	r0, [r4, #0]
 8008768:	1d19      	adds	r1, r3, #4
 800876a:	6031      	str	r1, [r6, #0]
 800876c:	0606      	lsls	r6, r0, #24
 800876e:	d501      	bpl.n	8008774 <_printf_i+0xbc>
 8008770:	681d      	ldr	r5, [r3, #0]
 8008772:	e003      	b.n	800877c <_printf_i+0xc4>
 8008774:	0645      	lsls	r5, r0, #25
 8008776:	d5fb      	bpl.n	8008770 <_printf_i+0xb8>
 8008778:	f9b3 5000 	ldrsh.w	r5, [r3]
 800877c:	2d00      	cmp	r5, #0
 800877e:	da03      	bge.n	8008788 <_printf_i+0xd0>
 8008780:	232d      	movs	r3, #45	@ 0x2d
 8008782:	426d      	negs	r5, r5
 8008784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008788:	4858      	ldr	r0, [pc, #352]	@ (80088ec <_printf_i+0x234>)
 800878a:	230a      	movs	r3, #10
 800878c:	e011      	b.n	80087b2 <_printf_i+0xfa>
 800878e:	6821      	ldr	r1, [r4, #0]
 8008790:	6833      	ldr	r3, [r6, #0]
 8008792:	0608      	lsls	r0, r1, #24
 8008794:	f853 5b04 	ldr.w	r5, [r3], #4
 8008798:	d402      	bmi.n	80087a0 <_printf_i+0xe8>
 800879a:	0649      	lsls	r1, r1, #25
 800879c:	bf48      	it	mi
 800879e:	b2ad      	uxthmi	r5, r5
 80087a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80087a2:	4852      	ldr	r0, [pc, #328]	@ (80088ec <_printf_i+0x234>)
 80087a4:	6033      	str	r3, [r6, #0]
 80087a6:	bf14      	ite	ne
 80087a8:	230a      	movne	r3, #10
 80087aa:	2308      	moveq	r3, #8
 80087ac:	2100      	movs	r1, #0
 80087ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087b2:	6866      	ldr	r6, [r4, #4]
 80087b4:	60a6      	str	r6, [r4, #8]
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	db05      	blt.n	80087c6 <_printf_i+0x10e>
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	432e      	orrs	r6, r5
 80087be:	f021 0104 	bic.w	r1, r1, #4
 80087c2:	6021      	str	r1, [r4, #0]
 80087c4:	d04b      	beq.n	800885e <_printf_i+0x1a6>
 80087c6:	4616      	mov	r6, r2
 80087c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80087cc:	fb03 5711 	mls	r7, r3, r1, r5
 80087d0:	5dc7      	ldrb	r7, [r0, r7]
 80087d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087d6:	462f      	mov	r7, r5
 80087d8:	42bb      	cmp	r3, r7
 80087da:	460d      	mov	r5, r1
 80087dc:	d9f4      	bls.n	80087c8 <_printf_i+0x110>
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d10b      	bne.n	80087fa <_printf_i+0x142>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	07df      	lsls	r7, r3, #31
 80087e6:	d508      	bpl.n	80087fa <_printf_i+0x142>
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	6861      	ldr	r1, [r4, #4]
 80087ec:	4299      	cmp	r1, r3
 80087ee:	bfde      	ittt	le
 80087f0:	2330      	movle	r3, #48	@ 0x30
 80087f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087fa:	1b92      	subs	r2, r2, r6
 80087fc:	6122      	str	r2, [r4, #16]
 80087fe:	f8cd a000 	str.w	sl, [sp]
 8008802:	464b      	mov	r3, r9
 8008804:	aa03      	add	r2, sp, #12
 8008806:	4621      	mov	r1, r4
 8008808:	4640      	mov	r0, r8
 800880a:	f7ff fee7 	bl	80085dc <_printf_common>
 800880e:	3001      	adds	r0, #1
 8008810:	d14a      	bne.n	80088a8 <_printf_i+0x1f0>
 8008812:	f04f 30ff 	mov.w	r0, #4294967295
 8008816:	b004      	add	sp, #16
 8008818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	f043 0320 	orr.w	r3, r3, #32
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	4832      	ldr	r0, [pc, #200]	@ (80088f0 <_printf_i+0x238>)
 8008826:	2778      	movs	r7, #120	@ 0x78
 8008828:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	6831      	ldr	r1, [r6, #0]
 8008830:	061f      	lsls	r7, r3, #24
 8008832:	f851 5b04 	ldr.w	r5, [r1], #4
 8008836:	d402      	bmi.n	800883e <_printf_i+0x186>
 8008838:	065f      	lsls	r7, r3, #25
 800883a:	bf48      	it	mi
 800883c:	b2ad      	uxthmi	r5, r5
 800883e:	6031      	str	r1, [r6, #0]
 8008840:	07d9      	lsls	r1, r3, #31
 8008842:	bf44      	itt	mi
 8008844:	f043 0320 	orrmi.w	r3, r3, #32
 8008848:	6023      	strmi	r3, [r4, #0]
 800884a:	b11d      	cbz	r5, 8008854 <_printf_i+0x19c>
 800884c:	2310      	movs	r3, #16
 800884e:	e7ad      	b.n	80087ac <_printf_i+0xf4>
 8008850:	4826      	ldr	r0, [pc, #152]	@ (80088ec <_printf_i+0x234>)
 8008852:	e7e9      	b.n	8008828 <_printf_i+0x170>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	f023 0320 	bic.w	r3, r3, #32
 800885a:	6023      	str	r3, [r4, #0]
 800885c:	e7f6      	b.n	800884c <_printf_i+0x194>
 800885e:	4616      	mov	r6, r2
 8008860:	e7bd      	b.n	80087de <_printf_i+0x126>
 8008862:	6833      	ldr	r3, [r6, #0]
 8008864:	6825      	ldr	r5, [r4, #0]
 8008866:	6961      	ldr	r1, [r4, #20]
 8008868:	1d18      	adds	r0, r3, #4
 800886a:	6030      	str	r0, [r6, #0]
 800886c:	062e      	lsls	r6, r5, #24
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	d501      	bpl.n	8008876 <_printf_i+0x1be>
 8008872:	6019      	str	r1, [r3, #0]
 8008874:	e002      	b.n	800887c <_printf_i+0x1c4>
 8008876:	0668      	lsls	r0, r5, #25
 8008878:	d5fb      	bpl.n	8008872 <_printf_i+0x1ba>
 800887a:	8019      	strh	r1, [r3, #0]
 800887c:	2300      	movs	r3, #0
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	4616      	mov	r6, r2
 8008882:	e7bc      	b.n	80087fe <_printf_i+0x146>
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	6032      	str	r2, [r6, #0]
 800888a:	681e      	ldr	r6, [r3, #0]
 800888c:	6862      	ldr	r2, [r4, #4]
 800888e:	2100      	movs	r1, #0
 8008890:	4630      	mov	r0, r6
 8008892:	f7f7 fd25 	bl	80002e0 <memchr>
 8008896:	b108      	cbz	r0, 800889c <_printf_i+0x1e4>
 8008898:	1b80      	subs	r0, r0, r6
 800889a:	6060      	str	r0, [r4, #4]
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	2300      	movs	r3, #0
 80088a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088a6:	e7aa      	b.n	80087fe <_printf_i+0x146>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	4632      	mov	r2, r6
 80088ac:	4649      	mov	r1, r9
 80088ae:	4640      	mov	r0, r8
 80088b0:	47d0      	blx	sl
 80088b2:	3001      	adds	r0, #1
 80088b4:	d0ad      	beq.n	8008812 <_printf_i+0x15a>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	079b      	lsls	r3, r3, #30
 80088ba:	d413      	bmi.n	80088e4 <_printf_i+0x22c>
 80088bc:	68e0      	ldr	r0, [r4, #12]
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	4298      	cmp	r0, r3
 80088c2:	bfb8      	it	lt
 80088c4:	4618      	movlt	r0, r3
 80088c6:	e7a6      	b.n	8008816 <_printf_i+0x15e>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4632      	mov	r2, r6
 80088cc:	4649      	mov	r1, r9
 80088ce:	4640      	mov	r0, r8
 80088d0:	47d0      	blx	sl
 80088d2:	3001      	adds	r0, #1
 80088d4:	d09d      	beq.n	8008812 <_printf_i+0x15a>
 80088d6:	3501      	adds	r5, #1
 80088d8:	68e3      	ldr	r3, [r4, #12]
 80088da:	9903      	ldr	r1, [sp, #12]
 80088dc:	1a5b      	subs	r3, r3, r1
 80088de:	42ab      	cmp	r3, r5
 80088e0:	dcf2      	bgt.n	80088c8 <_printf_i+0x210>
 80088e2:	e7eb      	b.n	80088bc <_printf_i+0x204>
 80088e4:	2500      	movs	r5, #0
 80088e6:	f104 0619 	add.w	r6, r4, #25
 80088ea:	e7f5      	b.n	80088d8 <_printf_i+0x220>
 80088ec:	0800aa46 	.word	0x0800aa46
 80088f0:	0800aa57 	.word	0x0800aa57

080088f4 <std>:
 80088f4:	2300      	movs	r3, #0
 80088f6:	b510      	push	{r4, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	e9c0 3300 	strd	r3, r3, [r0]
 80088fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008902:	6083      	str	r3, [r0, #8]
 8008904:	8181      	strh	r1, [r0, #12]
 8008906:	6643      	str	r3, [r0, #100]	@ 0x64
 8008908:	81c2      	strh	r2, [r0, #14]
 800890a:	6183      	str	r3, [r0, #24]
 800890c:	4619      	mov	r1, r3
 800890e:	2208      	movs	r2, #8
 8008910:	305c      	adds	r0, #92	@ 0x5c
 8008912:	f000 f9f9 	bl	8008d08 <memset>
 8008916:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <std+0x58>)
 8008918:	6263      	str	r3, [r4, #36]	@ 0x24
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <std+0x5c>)
 800891c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <std+0x60>)
 8008920:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008922:	4b0d      	ldr	r3, [pc, #52]	@ (8008958 <std+0x64>)
 8008924:	6323      	str	r3, [r4, #48]	@ 0x30
 8008926:	4b0d      	ldr	r3, [pc, #52]	@ (800895c <std+0x68>)
 8008928:	6224      	str	r4, [r4, #32]
 800892a:	429c      	cmp	r4, r3
 800892c:	d006      	beq.n	800893c <std+0x48>
 800892e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008932:	4294      	cmp	r4, r2
 8008934:	d002      	beq.n	800893c <std+0x48>
 8008936:	33d0      	adds	r3, #208	@ 0xd0
 8008938:	429c      	cmp	r4, r3
 800893a:	d105      	bne.n	8008948 <std+0x54>
 800893c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008944:	f000 ba5c 	b.w	8008e00 <__retarget_lock_init_recursive>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	bf00      	nop
 800894c:	08008b59 	.word	0x08008b59
 8008950:	08008b7b 	.word	0x08008b7b
 8008954:	08008bb3 	.word	0x08008bb3
 8008958:	08008bd7 	.word	0x08008bd7
 800895c:	240012f8 	.word	0x240012f8

08008960 <stdio_exit_handler>:
 8008960:	4a02      	ldr	r2, [pc, #8]	@ (800896c <stdio_exit_handler+0xc>)
 8008962:	4903      	ldr	r1, [pc, #12]	@ (8008970 <stdio_exit_handler+0x10>)
 8008964:	4803      	ldr	r0, [pc, #12]	@ (8008974 <stdio_exit_handler+0x14>)
 8008966:	f000 b869 	b.w	8008a3c <_fwalk_sglue>
 800896a:	bf00      	nop
 800896c:	24000014 	.word	0x24000014
 8008970:	0800a655 	.word	0x0800a655
 8008974:	24000024 	.word	0x24000024

08008978 <cleanup_stdio>:
 8008978:	6841      	ldr	r1, [r0, #4]
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <cleanup_stdio+0x34>)
 800897c:	4299      	cmp	r1, r3
 800897e:	b510      	push	{r4, lr}
 8008980:	4604      	mov	r4, r0
 8008982:	d001      	beq.n	8008988 <cleanup_stdio+0x10>
 8008984:	f001 fe66 	bl	800a654 <_fflush_r>
 8008988:	68a1      	ldr	r1, [r4, #8]
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <cleanup_stdio+0x38>)
 800898c:	4299      	cmp	r1, r3
 800898e:	d002      	beq.n	8008996 <cleanup_stdio+0x1e>
 8008990:	4620      	mov	r0, r4
 8008992:	f001 fe5f 	bl	800a654 <_fflush_r>
 8008996:	68e1      	ldr	r1, [r4, #12]
 8008998:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <cleanup_stdio+0x3c>)
 800899a:	4299      	cmp	r1, r3
 800899c:	d004      	beq.n	80089a8 <cleanup_stdio+0x30>
 800899e:	4620      	mov	r0, r4
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a4:	f001 be56 	b.w	800a654 <_fflush_r>
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	bf00      	nop
 80089ac:	240012f8 	.word	0x240012f8
 80089b0:	24001360 	.word	0x24001360
 80089b4:	240013c8 	.word	0x240013c8

080089b8 <global_stdio_init.part.0>:
 80089b8:	b510      	push	{r4, lr}
 80089ba:	4b0b      	ldr	r3, [pc, #44]	@ (80089e8 <global_stdio_init.part.0+0x30>)
 80089bc:	4c0b      	ldr	r4, [pc, #44]	@ (80089ec <global_stdio_init.part.0+0x34>)
 80089be:	4a0c      	ldr	r2, [pc, #48]	@ (80089f0 <global_stdio_init.part.0+0x38>)
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	4620      	mov	r0, r4
 80089c4:	2200      	movs	r2, #0
 80089c6:	2104      	movs	r1, #4
 80089c8:	f7ff ff94 	bl	80088f4 <std>
 80089cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089d0:	2201      	movs	r2, #1
 80089d2:	2109      	movs	r1, #9
 80089d4:	f7ff ff8e 	bl	80088f4 <std>
 80089d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089dc:	2202      	movs	r2, #2
 80089de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e2:	2112      	movs	r1, #18
 80089e4:	f7ff bf86 	b.w	80088f4 <std>
 80089e8:	24001430 	.word	0x24001430
 80089ec:	240012f8 	.word	0x240012f8
 80089f0:	08008961 	.word	0x08008961

080089f4 <__sfp_lock_acquire>:
 80089f4:	4801      	ldr	r0, [pc, #4]	@ (80089fc <__sfp_lock_acquire+0x8>)
 80089f6:	f000 ba04 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 80089fa:	bf00      	nop
 80089fc:	24001439 	.word	0x24001439

08008a00 <__sfp_lock_release>:
 8008a00:	4801      	ldr	r0, [pc, #4]	@ (8008a08 <__sfp_lock_release+0x8>)
 8008a02:	f000 b9ff 	b.w	8008e04 <__retarget_lock_release_recursive>
 8008a06:	bf00      	nop
 8008a08:	24001439 	.word	0x24001439

08008a0c <__sinit>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f7ff fff0 	bl	80089f4 <__sfp_lock_acquire>
 8008a14:	6a23      	ldr	r3, [r4, #32]
 8008a16:	b11b      	cbz	r3, 8008a20 <__sinit+0x14>
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1c:	f7ff bff0 	b.w	8008a00 <__sfp_lock_release>
 8008a20:	4b04      	ldr	r3, [pc, #16]	@ (8008a34 <__sinit+0x28>)
 8008a22:	6223      	str	r3, [r4, #32]
 8008a24:	4b04      	ldr	r3, [pc, #16]	@ (8008a38 <__sinit+0x2c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f5      	bne.n	8008a18 <__sinit+0xc>
 8008a2c:	f7ff ffc4 	bl	80089b8 <global_stdio_init.part.0>
 8008a30:	e7f2      	b.n	8008a18 <__sinit+0xc>
 8008a32:	bf00      	nop
 8008a34:	08008979 	.word	0x08008979
 8008a38:	24001430 	.word	0x24001430

08008a3c <_fwalk_sglue>:
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	4607      	mov	r7, r0
 8008a42:	4688      	mov	r8, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	2600      	movs	r6, #0
 8008a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a50:	d505      	bpl.n	8008a5e <_fwalk_sglue+0x22>
 8008a52:	6824      	ldr	r4, [r4, #0]
 8008a54:	2c00      	cmp	r4, #0
 8008a56:	d1f7      	bne.n	8008a48 <_fwalk_sglue+0xc>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d907      	bls.n	8008a74 <_fwalk_sglue+0x38>
 8008a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	d003      	beq.n	8008a74 <_fwalk_sglue+0x38>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4638      	mov	r0, r7
 8008a70:	47c0      	blx	r8
 8008a72:	4306      	orrs	r6, r0
 8008a74:	3568      	adds	r5, #104	@ 0x68
 8008a76:	e7e9      	b.n	8008a4c <_fwalk_sglue+0x10>

08008a78 <iprintf>:
 8008a78:	b40f      	push	{r0, r1, r2, r3}
 8008a7a:	b507      	push	{r0, r1, r2, lr}
 8008a7c:	4906      	ldr	r1, [pc, #24]	@ (8008a98 <iprintf+0x20>)
 8008a7e:	ab04      	add	r3, sp, #16
 8008a80:	6808      	ldr	r0, [r1, #0]
 8008a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a86:	6881      	ldr	r1, [r0, #8]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	f001 fc47 	bl	800a31c <_vfiprintf_r>
 8008a8e:	b003      	add	sp, #12
 8008a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a94:	b004      	add	sp, #16
 8008a96:	4770      	bx	lr
 8008a98:	24000020 	.word	0x24000020

08008a9c <_puts_r>:
 8008a9c:	6a03      	ldr	r3, [r0, #32]
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	6884      	ldr	r4, [r0, #8]
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	460e      	mov	r6, r1
 8008aa6:	b90b      	cbnz	r3, 8008aac <_puts_r+0x10>
 8008aa8:	f7ff ffb0 	bl	8008a0c <__sinit>
 8008aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aae:	07db      	lsls	r3, r3, #31
 8008ab0:	d405      	bmi.n	8008abe <_puts_r+0x22>
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	0598      	lsls	r0, r3, #22
 8008ab6:	d402      	bmi.n	8008abe <_puts_r+0x22>
 8008ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aba:	f000 f9a2 	bl	8008e02 <__retarget_lock_acquire_recursive>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	0719      	lsls	r1, r3, #28
 8008ac2:	d502      	bpl.n	8008aca <_puts_r+0x2e>
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d135      	bne.n	8008b36 <_puts_r+0x9a>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 f8c5 	bl	8008c5c <__swsetup_r>
 8008ad2:	b380      	cbz	r0, 8008b36 <_puts_r+0x9a>
 8008ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ad8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ada:	07da      	lsls	r2, r3, #31
 8008adc:	d405      	bmi.n	8008aea <_puts_r+0x4e>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	059b      	lsls	r3, r3, #22
 8008ae2:	d402      	bmi.n	8008aea <_puts_r+0x4e>
 8008ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ae6:	f000 f98d 	bl	8008e04 <__retarget_lock_release_recursive>
 8008aea:	4628      	mov	r0, r5
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da04      	bge.n	8008afc <_puts_r+0x60>
 8008af2:	69a2      	ldr	r2, [r4, #24]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	dc17      	bgt.n	8008b28 <_puts_r+0x8c>
 8008af8:	290a      	cmp	r1, #10
 8008afa:	d015      	beq.n	8008b28 <_puts_r+0x8c>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	6022      	str	r2, [r4, #0]
 8008b02:	7019      	strb	r1, [r3, #0]
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	60a3      	str	r3, [r4, #8]
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d1ed      	bne.n	8008aee <_puts_r+0x52>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da11      	bge.n	8008b3a <_puts_r+0x9e>
 8008b16:	4622      	mov	r2, r4
 8008b18:	210a      	movs	r1, #10
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f85f 	bl	8008bde <__swbuf_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d0d7      	beq.n	8008ad4 <_puts_r+0x38>
 8008b24:	250a      	movs	r5, #10
 8008b26:	e7d7      	b.n	8008ad8 <_puts_r+0x3c>
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f857 	bl	8008bde <__swbuf_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d1e7      	bne.n	8008b04 <_puts_r+0x68>
 8008b34:	e7ce      	b.n	8008ad4 <_puts_r+0x38>
 8008b36:	3e01      	subs	r6, #1
 8008b38:	e7e4      	b.n	8008b04 <_puts_r+0x68>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	220a      	movs	r2, #10
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e7ee      	b.n	8008b24 <_puts_r+0x88>
	...

08008b48 <puts>:
 8008b48:	4b02      	ldr	r3, [pc, #8]	@ (8008b54 <puts+0xc>)
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f7ff bfa5 	b.w	8008a9c <_puts_r>
 8008b52:	bf00      	nop
 8008b54:	24000020 	.word	0x24000020

08008b58 <__sread>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	f000 f900 	bl	8008d64 <_read_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	bfab      	itete	ge
 8008b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b6c:	181b      	addge	r3, r3, r0
 8008b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b72:	bfac      	ite	ge
 8008b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b76:	81a3      	strhlt	r3, [r4, #12]
 8008b78:	bd10      	pop	{r4, pc}

08008b7a <__swrite>:
 8008b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	461f      	mov	r7, r3
 8008b80:	898b      	ldrh	r3, [r1, #12]
 8008b82:	05db      	lsls	r3, r3, #23
 8008b84:	4605      	mov	r5, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	4616      	mov	r6, r2
 8008b8a:	d505      	bpl.n	8008b98 <__swrite+0x1e>
 8008b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b90:	2302      	movs	r3, #2
 8008b92:	2200      	movs	r2, #0
 8008b94:	f000 f8d4 	bl	8008d40 <_lseek_r>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	4628      	mov	r0, r5
 8008baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	f000 b8eb 	b.w	8008d88 <_write_r>

08008bb2 <__sseek>:
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bba:	f000 f8c1 	bl	8008d40 <_lseek_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	bf15      	itete	ne
 8008bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bce:	81a3      	strheq	r3, [r4, #12]
 8008bd0:	bf18      	it	ne
 8008bd2:	81a3      	strhne	r3, [r4, #12]
 8008bd4:	bd10      	pop	{r4, pc}

08008bd6 <__sclose>:
 8008bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bda:	f000 b8a1 	b.w	8008d20 <_close_r>

08008bde <__swbuf_r>:
 8008bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be0:	460e      	mov	r6, r1
 8008be2:	4614      	mov	r4, r2
 8008be4:	4605      	mov	r5, r0
 8008be6:	b118      	cbz	r0, 8008bf0 <__swbuf_r+0x12>
 8008be8:	6a03      	ldr	r3, [r0, #32]
 8008bea:	b90b      	cbnz	r3, 8008bf0 <__swbuf_r+0x12>
 8008bec:	f7ff ff0e 	bl	8008a0c <__sinit>
 8008bf0:	69a3      	ldr	r3, [r4, #24]
 8008bf2:	60a3      	str	r3, [r4, #8]
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	071a      	lsls	r2, r3, #28
 8008bf8:	d501      	bpl.n	8008bfe <__swbuf_r+0x20>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	b943      	cbnz	r3, 8008c10 <__swbuf_r+0x32>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 f82b 	bl	8008c5c <__swsetup_r>
 8008c06:	b118      	cbz	r0, 8008c10 <__swbuf_r+0x32>
 8008c08:	f04f 37ff 	mov.w	r7, #4294967295
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	6922      	ldr	r2, [r4, #16]
 8008c14:	1a98      	subs	r0, r3, r2
 8008c16:	6963      	ldr	r3, [r4, #20]
 8008c18:	b2f6      	uxtb	r6, r6
 8008c1a:	4283      	cmp	r3, r0
 8008c1c:	4637      	mov	r7, r6
 8008c1e:	dc05      	bgt.n	8008c2c <__swbuf_r+0x4e>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4628      	mov	r0, r5
 8008c24:	f001 fd16 	bl	800a654 <_fflush_r>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1ed      	bne.n	8008c08 <__swbuf_r+0x2a>
 8008c2c:	68a3      	ldr	r3, [r4, #8]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	701e      	strb	r6, [r3, #0]
 8008c3a:	6962      	ldr	r2, [r4, #20]
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d004      	beq.n	8008c4c <__swbuf_r+0x6e>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	07db      	lsls	r3, r3, #31
 8008c46:	d5e1      	bpl.n	8008c0c <__swbuf_r+0x2e>
 8008c48:	2e0a      	cmp	r6, #10
 8008c4a:	d1df      	bne.n	8008c0c <__swbuf_r+0x2e>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f001 fd00 	bl	800a654 <_fflush_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0d9      	beq.n	8008c0c <__swbuf_r+0x2e>
 8008c58:	e7d6      	b.n	8008c08 <__swbuf_r+0x2a>
	...

08008c5c <__swsetup_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4b29      	ldr	r3, [pc, #164]	@ (8008d04 <__swsetup_r+0xa8>)
 8008c60:	4605      	mov	r5, r0
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	460c      	mov	r4, r1
 8008c66:	b118      	cbz	r0, 8008c70 <__swsetup_r+0x14>
 8008c68:	6a03      	ldr	r3, [r0, #32]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <__swsetup_r+0x14>
 8008c6c:	f7ff fece 	bl	8008a0c <__sinit>
 8008c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c74:	0719      	lsls	r1, r3, #28
 8008c76:	d422      	bmi.n	8008cbe <__swsetup_r+0x62>
 8008c78:	06da      	lsls	r2, r3, #27
 8008c7a:	d407      	bmi.n	8008c8c <__swsetup_r+0x30>
 8008c7c:	2209      	movs	r2, #9
 8008c7e:	602a      	str	r2, [r5, #0]
 8008c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8a:	e033      	b.n	8008cf4 <__swsetup_r+0x98>
 8008c8c:	0758      	lsls	r0, r3, #29
 8008c8e:	d512      	bpl.n	8008cb6 <__swsetup_r+0x5a>
 8008c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c92:	b141      	cbz	r1, 8008ca6 <__swsetup_r+0x4a>
 8008c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	d002      	beq.n	8008ca2 <__swsetup_r+0x46>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 fe99 	bl	80099d4 <_free_r>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6063      	str	r3, [r4, #4]
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f043 0308 	orr.w	r3, r3, #8
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	b94b      	cbnz	r3, 8008cd6 <__swsetup_r+0x7a>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ccc:	d003      	beq.n	8008cd6 <__swsetup_r+0x7a>
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f001 fd0d 	bl	800a6f0 <__smakebuf_r>
 8008cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cda:	f013 0201 	ands.w	r2, r3, #1
 8008cde:	d00a      	beq.n	8008cf6 <__swsetup_r+0x9a>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	60a2      	str	r2, [r4, #8]
 8008ce4:	6962      	ldr	r2, [r4, #20]
 8008ce6:	4252      	negs	r2, r2
 8008ce8:	61a2      	str	r2, [r4, #24]
 8008cea:	6922      	ldr	r2, [r4, #16]
 8008cec:	b942      	cbnz	r2, 8008d00 <__swsetup_r+0xa4>
 8008cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cf2:	d1c5      	bne.n	8008c80 <__swsetup_r+0x24>
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	0799      	lsls	r1, r3, #30
 8008cf8:	bf58      	it	pl
 8008cfa:	6962      	ldrpl	r2, [r4, #20]
 8008cfc:	60a2      	str	r2, [r4, #8]
 8008cfe:	e7f4      	b.n	8008cea <__swsetup_r+0x8e>
 8008d00:	2000      	movs	r0, #0
 8008d02:	e7f7      	b.n	8008cf4 <__swsetup_r+0x98>
 8008d04:	24000020 	.word	0x24000020

08008d08 <memset>:
 8008d08:	4402      	add	r2, r0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d100      	bne.n	8008d12 <memset+0xa>
 8008d10:	4770      	bx	lr
 8008d12:	f803 1b01 	strb.w	r1, [r3], #1
 8008d16:	e7f9      	b.n	8008d0c <memset+0x4>

08008d18 <_localeconv_r>:
 8008d18:	4800      	ldr	r0, [pc, #0]	@ (8008d1c <_localeconv_r+0x4>)
 8008d1a:	4770      	bx	lr
 8008d1c:	24000160 	.word	0x24000160

08008d20 <_close_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d06      	ldr	r5, [pc, #24]	@ (8008d3c <_close_r+0x1c>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	f7f8 fdf0 	bl	8001910 <_close>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_close_r+0x1a>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_close_r+0x1a>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	24001434 	.word	0x24001434

08008d40 <_lseek_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	@ (8008d60 <_lseek_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7f8 fe05 	bl	800195e <_lseek>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_lseek_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_lseek_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	24001434 	.word	0x24001434

08008d64 <_read_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	@ (8008d84 <_read_r+0x20>)
 8008d68:	4604      	mov	r4, r0
 8008d6a:	4608      	mov	r0, r1
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f7f8 fd93 	bl	800189e <_read>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_read_r+0x1e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_read_r+0x1e>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	24001434 	.word	0x24001434

08008d88 <_write_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d07      	ldr	r5, [pc, #28]	@ (8008da8 <_write_r+0x20>)
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4608      	mov	r0, r1
 8008d90:	4611      	mov	r1, r2
 8008d92:	2200      	movs	r2, #0
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7f8 fd9e 	bl	80018d8 <_write>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_write_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_write_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	24001434 	.word	0x24001434

08008dac <__errno>:
 8008dac:	4b01      	ldr	r3, [pc, #4]	@ (8008db4 <__errno+0x8>)
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	24000020 	.word	0x24000020

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	@ (8008df0 <__libc_init_array+0x38>)
 8008dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008df4 <__libc_init_array+0x3c>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008df8 <__libc_init_array+0x40>)
 8008dca:	4c0c      	ldr	r4, [pc, #48]	@ (8008dfc <__libc_init_array+0x44>)
 8008dcc:	f001 fdbc 	bl	800a948 <_init>
 8008dd0:	1b64      	subs	r4, r4, r5
 8008dd2:	10a4      	asrs	r4, r4, #2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	4798      	blx	r3
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	4798      	blx	r3
 8008dec:	3601      	adds	r6, #1
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	0800adb4 	.word	0x0800adb4
 8008df4:	0800adb4 	.word	0x0800adb4
 8008df8:	0800adb4 	.word	0x0800adb4
 8008dfc:	0800adb8 	.word	0x0800adb8

08008e00 <__retarget_lock_init_recursive>:
 8008e00:	4770      	bx	lr

08008e02 <__retarget_lock_acquire_recursive>:
 8008e02:	4770      	bx	lr

08008e04 <__retarget_lock_release_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <quorem>:
 8008e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6903      	ldr	r3, [r0, #16]
 8008e0c:	690c      	ldr	r4, [r1, #16]
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	4607      	mov	r7, r0
 8008e12:	db7e      	blt.n	8008f12 <quorem+0x10c>
 8008e14:	3c01      	subs	r4, #1
 8008e16:	f101 0814 	add.w	r8, r1, #20
 8008e1a:	00a3      	lsls	r3, r4, #2
 8008e1c:	f100 0514 	add.w	r5, r0, #20
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e30:	3301      	adds	r3, #1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e3c:	d32e      	bcc.n	8008e9c <quorem+0x96>
 8008e3e:	f04f 0a00 	mov.w	sl, #0
 8008e42:	46c4      	mov	ip, r8
 8008e44:	46ae      	mov	lr, r5
 8008e46:	46d3      	mov	fp, sl
 8008e48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e4c:	b298      	uxth	r0, r3
 8008e4e:	fb06 a000 	mla	r0, r6, r0, sl
 8008e52:	0c02      	lsrs	r2, r0, #16
 8008e54:	0c1b      	lsrs	r3, r3, #16
 8008e56:	fb06 2303 	mla	r3, r6, r3, r2
 8008e5a:	f8de 2000 	ldr.w	r2, [lr]
 8008e5e:	b280      	uxth	r0, r0
 8008e60:	b292      	uxth	r2, r2
 8008e62:	1a12      	subs	r2, r2, r0
 8008e64:	445a      	add	r2, fp
 8008e66:	f8de 0000 	ldr.w	r0, [lr]
 8008e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e78:	b292      	uxth	r2, r2
 8008e7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e7e:	45e1      	cmp	r9, ip
 8008e80:	f84e 2b04 	str.w	r2, [lr], #4
 8008e84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e88:	d2de      	bcs.n	8008e48 <quorem+0x42>
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	58eb      	ldr	r3, [r5, r3]
 8008e8e:	b92b      	cbnz	r3, 8008e9c <quorem+0x96>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	3b04      	subs	r3, #4
 8008e94:	429d      	cmp	r5, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	d32f      	bcc.n	8008efa <quorem+0xf4>
 8008e9a:	613c      	str	r4, [r7, #16]
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f001 f90b 	bl	800a0b8 <__mcmp>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	db25      	blt.n	8008ef2 <quorem+0xec>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eae:	f8d1 c000 	ldr.w	ip, [r1]
 8008eb2:	fa1f fe82 	uxth.w	lr, r2
 8008eb6:	fa1f f38c 	uxth.w	r3, ip
 8008eba:	eba3 030e 	sub.w	r3, r3, lr
 8008ebe:	4403      	add	r3, r0
 8008ec0:	0c12      	lsrs	r2, r2, #16
 8008ec2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ec6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed0:	45c1      	cmp	r9, r8
 8008ed2:	f841 3b04 	str.w	r3, [r1], #4
 8008ed6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008eda:	d2e6      	bcs.n	8008eaa <quorem+0xa4>
 8008edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee4:	b922      	cbnz	r2, 8008ef0 <quorem+0xea>
 8008ee6:	3b04      	subs	r3, #4
 8008ee8:	429d      	cmp	r5, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	d30b      	bcc.n	8008f06 <quorem+0x100>
 8008eee:	613c      	str	r4, [r7, #16]
 8008ef0:	3601      	adds	r6, #1
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	b003      	add	sp, #12
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d1cb      	bne.n	8008e9a <quorem+0x94>
 8008f02:	3c01      	subs	r4, #1
 8008f04:	e7c6      	b.n	8008e94 <quorem+0x8e>
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d1ef      	bne.n	8008eee <quorem+0xe8>
 8008f0e:	3c01      	subs	r4, #1
 8008f10:	e7ea      	b.n	8008ee8 <quorem+0xe2>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e7ee      	b.n	8008ef4 <quorem+0xee>
	...

08008f18 <_dtoa_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	ed2d 8b02 	vpush	{d8}
 8008f20:	69c7      	ldr	r7, [r0, #28]
 8008f22:	b091      	sub	sp, #68	@ 0x44
 8008f24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f28:	ec55 4b10 	vmov	r4, r5, d0
 8008f2c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008f2e:	9107      	str	r1, [sp, #28]
 8008f30:	4681      	mov	r9, r0
 8008f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f34:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f36:	b97f      	cbnz	r7, 8008f58 <_dtoa_r+0x40>
 8008f38:	2010      	movs	r0, #16
 8008f3a:	f000 fd95 	bl	8009a68 <malloc>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	f8c9 001c 	str.w	r0, [r9, #28]
 8008f44:	b920      	cbnz	r0, 8008f50 <_dtoa_r+0x38>
 8008f46:	4ba0      	ldr	r3, [pc, #640]	@ (80091c8 <_dtoa_r+0x2b0>)
 8008f48:	21ef      	movs	r1, #239	@ 0xef
 8008f4a:	48a0      	ldr	r0, [pc, #640]	@ (80091cc <_dtoa_r+0x2b4>)
 8008f4c:	f001 fc4c 	bl	800a7e8 <__assert_func>
 8008f50:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f54:	6007      	str	r7, [r0, #0]
 8008f56:	60c7      	str	r7, [r0, #12]
 8008f58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	b159      	cbz	r1, 8008f78 <_dtoa_r+0x60>
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	604a      	str	r2, [r1, #4]
 8008f64:	2301      	movs	r3, #1
 8008f66:	4093      	lsls	r3, r2
 8008f68:	608b      	str	r3, [r1, #8]
 8008f6a:	4648      	mov	r0, r9
 8008f6c:	f000 fe72 	bl	8009c54 <_Bfree>
 8008f70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	1e2b      	subs	r3, r5, #0
 8008f7a:	bfbb      	ittet	lt
 8008f7c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f80:	9303      	strlt	r3, [sp, #12]
 8008f82:	2300      	movge	r3, #0
 8008f84:	2201      	movlt	r2, #1
 8008f86:	bfac      	ite	ge
 8008f88:	6033      	strge	r3, [r6, #0]
 8008f8a:	6032      	strlt	r2, [r6, #0]
 8008f8c:	4b90      	ldr	r3, [pc, #576]	@ (80091d0 <_dtoa_r+0x2b8>)
 8008f8e:	9e03      	ldr	r6, [sp, #12]
 8008f90:	43b3      	bics	r3, r6
 8008f92:	d110      	bne.n	8008fb6 <_dtoa_r+0x9e>
 8008f94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f96:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008fa0:	4323      	orrs	r3, r4
 8008fa2:	f000 84e6 	beq.w	8009972 <_dtoa_r+0xa5a>
 8008fa6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fa8:	4f8a      	ldr	r7, [pc, #552]	@ (80091d4 <_dtoa_r+0x2bc>)
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 84e8 	beq.w	8009980 <_dtoa_r+0xa68>
 8008fb0:	1cfb      	adds	r3, r7, #3
 8008fb2:	f000 bce3 	b.w	800997c <_dtoa_r+0xa64>
 8008fb6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008fba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc2:	d10a      	bne.n	8008fda <_dtoa_r+0xc2>
 8008fc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fcc:	b113      	cbz	r3, 8008fd4 <_dtoa_r+0xbc>
 8008fce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008fd0:	4b81      	ldr	r3, [pc, #516]	@ (80091d8 <_dtoa_r+0x2c0>)
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	4f81      	ldr	r7, [pc, #516]	@ (80091dc <_dtoa_r+0x2c4>)
 8008fd6:	f000 bcd3 	b.w	8009980 <_dtoa_r+0xa68>
 8008fda:	aa0e      	add	r2, sp, #56	@ 0x38
 8008fdc:	a90f      	add	r1, sp, #60	@ 0x3c
 8008fde:	4648      	mov	r0, r9
 8008fe0:	eeb0 0b48 	vmov.f64	d0, d8
 8008fe4:	f001 f918 	bl	800a218 <__d2b>
 8008fe8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008fec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fee:	9001      	str	r0, [sp, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d045      	beq.n	8009080 <_dtoa_r+0x168>
 8008ff4:	eeb0 7b48 	vmov.f64	d7, d8
 8008ff8:	ee18 1a90 	vmov	r1, s17
 8008ffc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009000:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009004:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009008:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800900c:	2500      	movs	r5, #0
 800900e:	ee07 1a90 	vmov	s15, r1
 8009012:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009016:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80091b0 <_dtoa_r+0x298>
 800901a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800901e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80091b8 <_dtoa_r+0x2a0>
 8009022:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009026:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80091c0 <_dtoa_r+0x2a8>
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009032:	eeb0 7b46 	vmov.f64	d7, d6
 8009036:	eea4 7b05 	vfma.f64	d7, d4, d5
 800903a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800903e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	ee16 8a90 	vmov	r8, s13
 800904a:	d508      	bpl.n	800905e <_dtoa_r+0x146>
 800904c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009050:	eeb4 6b47 	vcmp.f64	d6, d7
 8009054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009058:	bf18      	it	ne
 800905a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800905e:	f1b8 0f16 	cmp.w	r8, #22
 8009062:	d82b      	bhi.n	80090bc <_dtoa_r+0x1a4>
 8009064:	495e      	ldr	r1, [pc, #376]	@ (80091e0 <_dtoa_r+0x2c8>)
 8009066:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800906a:	ed91 7b00 	vldr	d7, [r1]
 800906e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009076:	d501      	bpl.n	800907c <_dtoa_r+0x164>
 8009078:	f108 38ff 	add.w	r8, r8, #4294967295
 800907c:	2100      	movs	r1, #0
 800907e:	e01e      	b.n	80090be <_dtoa_r+0x1a6>
 8009080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009082:	4413      	add	r3, r2
 8009084:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009088:	2920      	cmp	r1, #32
 800908a:	bfc1      	itttt	gt
 800908c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009090:	408e      	lslgt	r6, r1
 8009092:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009096:	fa24 f101 	lsrgt.w	r1, r4, r1
 800909a:	bfd6      	itet	le
 800909c:	f1c1 0120 	rsble	r1, r1, #32
 80090a0:	4331      	orrgt	r1, r6
 80090a2:	fa04 f101 	lslle.w	r1, r4, r1
 80090a6:	ee07 1a90 	vmov	s15, r1
 80090aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80090ae:	3b01      	subs	r3, #1
 80090b0:	ee17 1a90 	vmov	r1, s15
 80090b4:	2501      	movs	r5, #1
 80090b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80090ba:	e7a8      	b.n	800900e <_dtoa_r+0xf6>
 80090bc:	2101      	movs	r1, #1
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	1e53      	subs	r3, r2, #1
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	bf45      	ittet	mi
 80090c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80090ca:	9304      	strmi	r3, [sp, #16]
 80090cc:	2300      	movpl	r3, #0
 80090ce:	2300      	movmi	r3, #0
 80090d0:	bf4c      	ite	mi
 80090d2:	9306      	strmi	r3, [sp, #24]
 80090d4:	9304      	strpl	r3, [sp, #16]
 80090d6:	f1b8 0f00 	cmp.w	r8, #0
 80090da:	910c      	str	r1, [sp, #48]	@ 0x30
 80090dc:	db18      	blt.n	8009110 <_dtoa_r+0x1f8>
 80090de:	9b06      	ldr	r3, [sp, #24]
 80090e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80090e4:	4443      	add	r3, r8
 80090e6:	9306      	str	r3, [sp, #24]
 80090e8:	2300      	movs	r3, #0
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	2a09      	cmp	r2, #9
 80090ee:	d845      	bhi.n	800917c <_dtoa_r+0x264>
 80090f0:	2a05      	cmp	r2, #5
 80090f2:	bfc4      	itt	gt
 80090f4:	3a04      	subgt	r2, #4
 80090f6:	9207      	strgt	r2, [sp, #28]
 80090f8:	9a07      	ldr	r2, [sp, #28]
 80090fa:	f1a2 0202 	sub.w	r2, r2, #2
 80090fe:	bfcc      	ite	gt
 8009100:	2400      	movgt	r4, #0
 8009102:	2401      	movle	r4, #1
 8009104:	2a03      	cmp	r2, #3
 8009106:	d844      	bhi.n	8009192 <_dtoa_r+0x27a>
 8009108:	e8df f002 	tbb	[pc, r2]
 800910c:	0b173634 	.word	0x0b173634
 8009110:	9b04      	ldr	r3, [sp, #16]
 8009112:	2200      	movs	r2, #0
 8009114:	eba3 0308 	sub.w	r3, r3, r8
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	920a      	str	r2, [sp, #40]	@ 0x28
 800911c:	f1c8 0300 	rsb	r3, r8, #0
 8009120:	e7e3      	b.n	80090ea <_dtoa_r+0x1d2>
 8009122:	2201      	movs	r2, #1
 8009124:	9208      	str	r2, [sp, #32]
 8009126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009128:	eb08 0b02 	add.w	fp, r8, r2
 800912c:	f10b 0a01 	add.w	sl, fp, #1
 8009130:	4652      	mov	r2, sl
 8009132:	2a01      	cmp	r2, #1
 8009134:	bfb8      	it	lt
 8009136:	2201      	movlt	r2, #1
 8009138:	e006      	b.n	8009148 <_dtoa_r+0x230>
 800913a:	2201      	movs	r2, #1
 800913c:	9208      	str	r2, [sp, #32]
 800913e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009140:	2a00      	cmp	r2, #0
 8009142:	dd29      	ble.n	8009198 <_dtoa_r+0x280>
 8009144:	4693      	mov	fp, r2
 8009146:	4692      	mov	sl, r2
 8009148:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800914c:	2100      	movs	r1, #0
 800914e:	2004      	movs	r0, #4
 8009150:	f100 0614 	add.w	r6, r0, #20
 8009154:	4296      	cmp	r6, r2
 8009156:	d926      	bls.n	80091a6 <_dtoa_r+0x28e>
 8009158:	6079      	str	r1, [r7, #4]
 800915a:	4648      	mov	r0, r9
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	f000 fd39 	bl	8009bd4 <_Balloc>
 8009162:	9b05      	ldr	r3, [sp, #20]
 8009164:	4607      	mov	r7, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	d13e      	bne.n	80091e8 <_dtoa_r+0x2d0>
 800916a:	4b1e      	ldr	r3, [pc, #120]	@ (80091e4 <_dtoa_r+0x2cc>)
 800916c:	4602      	mov	r2, r0
 800916e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009172:	e6ea      	b.n	8008f4a <_dtoa_r+0x32>
 8009174:	2200      	movs	r2, #0
 8009176:	e7e1      	b.n	800913c <_dtoa_r+0x224>
 8009178:	2200      	movs	r2, #0
 800917a:	e7d3      	b.n	8009124 <_dtoa_r+0x20c>
 800917c:	2401      	movs	r4, #1
 800917e:	2200      	movs	r2, #0
 8009180:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009184:	f04f 3bff 	mov.w	fp, #4294967295
 8009188:	2100      	movs	r1, #0
 800918a:	46da      	mov	sl, fp
 800918c:	2212      	movs	r2, #18
 800918e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009190:	e7da      	b.n	8009148 <_dtoa_r+0x230>
 8009192:	2201      	movs	r2, #1
 8009194:	9208      	str	r2, [sp, #32]
 8009196:	e7f5      	b.n	8009184 <_dtoa_r+0x26c>
 8009198:	f04f 0b01 	mov.w	fp, #1
 800919c:	46da      	mov	sl, fp
 800919e:	465a      	mov	r2, fp
 80091a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80091a4:	e7d0      	b.n	8009148 <_dtoa_r+0x230>
 80091a6:	3101      	adds	r1, #1
 80091a8:	0040      	lsls	r0, r0, #1
 80091aa:	e7d1      	b.n	8009150 <_dtoa_r+0x238>
 80091ac:	f3af 8000 	nop.w
 80091b0:	636f4361 	.word	0x636f4361
 80091b4:	3fd287a7 	.word	0x3fd287a7
 80091b8:	8b60c8b3 	.word	0x8b60c8b3
 80091bc:	3fc68a28 	.word	0x3fc68a28
 80091c0:	509f79fb 	.word	0x509f79fb
 80091c4:	3fd34413 	.word	0x3fd34413
 80091c8:	0800aa75 	.word	0x0800aa75
 80091cc:	0800aa8c 	.word	0x0800aa8c
 80091d0:	7ff00000 	.word	0x7ff00000
 80091d4:	0800aa71 	.word	0x0800aa71
 80091d8:	0800aa45 	.word	0x0800aa45
 80091dc:	0800aa44 	.word	0x0800aa44
 80091e0:	0800abe0 	.word	0x0800abe0
 80091e4:	0800aae4 	.word	0x0800aae4
 80091e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80091ec:	f1ba 0f0e 	cmp.w	sl, #14
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	d86e      	bhi.n	80092d2 <_dtoa_r+0x3ba>
 80091f4:	2c00      	cmp	r4, #0
 80091f6:	d06c      	beq.n	80092d2 <_dtoa_r+0x3ba>
 80091f8:	f1b8 0f00 	cmp.w	r8, #0
 80091fc:	f340 80b4 	ble.w	8009368 <_dtoa_r+0x450>
 8009200:	4ac8      	ldr	r2, [pc, #800]	@ (8009524 <_dtoa_r+0x60c>)
 8009202:	f008 010f 	and.w	r1, r8, #15
 8009206:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800920a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800920e:	ed92 7b00 	vldr	d7, [r2]
 8009212:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009216:	f000 809b 	beq.w	8009350 <_dtoa_r+0x438>
 800921a:	4ac3      	ldr	r2, [pc, #780]	@ (8009528 <_dtoa_r+0x610>)
 800921c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009220:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009224:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009228:	f001 010f 	and.w	r1, r1, #15
 800922c:	2203      	movs	r2, #3
 800922e:	48be      	ldr	r0, [pc, #760]	@ (8009528 <_dtoa_r+0x610>)
 8009230:	2900      	cmp	r1, #0
 8009232:	f040 808f 	bne.w	8009354 <_dtoa_r+0x43c>
 8009236:	ed9d 6b02 	vldr	d6, [sp, #8]
 800923a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800923e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009242:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009244:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009248:	2900      	cmp	r1, #0
 800924a:	f000 80b3 	beq.w	80093b4 <_dtoa_r+0x49c>
 800924e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009252:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925a:	f140 80ab 	bpl.w	80093b4 <_dtoa_r+0x49c>
 800925e:	f1ba 0f00 	cmp.w	sl, #0
 8009262:	f000 80a7 	beq.w	80093b4 <_dtoa_r+0x49c>
 8009266:	f1bb 0f00 	cmp.w	fp, #0
 800926a:	dd30      	ble.n	80092ce <_dtoa_r+0x3b6>
 800926c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009270:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009274:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009278:	f108 31ff 	add.w	r1, r8, #4294967295
 800927c:	9105      	str	r1, [sp, #20]
 800927e:	3201      	adds	r2, #1
 8009280:	465c      	mov	r4, fp
 8009282:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009286:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800928a:	ee07 2a90 	vmov	s15, r2
 800928e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009292:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009296:	ee15 2a90 	vmov	r2, s11
 800929a:	ec51 0b15 	vmov	r0, r1, d5
 800929e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	f040 808a 	bne.w	80093bc <_dtoa_r+0x4a4>
 80092a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80092ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80092b0:	ec41 0b17 	vmov	d7, r0, r1
 80092b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092bc:	f300 826a 	bgt.w	8009794 <_dtoa_r+0x87c>
 80092c0:	eeb1 7b47 	vneg.f64	d7, d7
 80092c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092cc:	d423      	bmi.n	8009316 <_dtoa_r+0x3fe>
 80092ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 80092d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092d4:	2a00      	cmp	r2, #0
 80092d6:	f2c0 8129 	blt.w	800952c <_dtoa_r+0x614>
 80092da:	f1b8 0f0e 	cmp.w	r8, #14
 80092de:	f300 8125 	bgt.w	800952c <_dtoa_r+0x614>
 80092e2:	4b90      	ldr	r3, [pc, #576]	@ (8009524 <_dtoa_r+0x60c>)
 80092e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80092e8:	ed93 6b00 	vldr	d6, [r3]
 80092ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f280 80c8 	bge.w	8009484 <_dtoa_r+0x56c>
 80092f4:	f1ba 0f00 	cmp.w	sl, #0
 80092f8:	f300 80c4 	bgt.w	8009484 <_dtoa_r+0x56c>
 80092fc:	d10b      	bne.n	8009316 <_dtoa_r+0x3fe>
 80092fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009302:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009306:	ed9d 7b02 	vldr	d7, [sp, #8]
 800930a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800930e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009312:	f2c0 823c 	blt.w	800978e <_dtoa_r+0x876>
 8009316:	2400      	movs	r4, #0
 8009318:	4625      	mov	r5, r4
 800931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931c:	43db      	mvns	r3, r3
 800931e:	9305      	str	r3, [sp, #20]
 8009320:	463e      	mov	r6, r7
 8009322:	f04f 0800 	mov.w	r8, #0
 8009326:	4621      	mov	r1, r4
 8009328:	4648      	mov	r0, r9
 800932a:	f000 fc93 	bl	8009c54 <_Bfree>
 800932e:	2d00      	cmp	r5, #0
 8009330:	f000 80a2 	beq.w	8009478 <_dtoa_r+0x560>
 8009334:	f1b8 0f00 	cmp.w	r8, #0
 8009338:	d005      	beq.n	8009346 <_dtoa_r+0x42e>
 800933a:	45a8      	cmp	r8, r5
 800933c:	d003      	beq.n	8009346 <_dtoa_r+0x42e>
 800933e:	4641      	mov	r1, r8
 8009340:	4648      	mov	r0, r9
 8009342:	f000 fc87 	bl	8009c54 <_Bfree>
 8009346:	4629      	mov	r1, r5
 8009348:	4648      	mov	r0, r9
 800934a:	f000 fc83 	bl	8009c54 <_Bfree>
 800934e:	e093      	b.n	8009478 <_dtoa_r+0x560>
 8009350:	2202      	movs	r2, #2
 8009352:	e76c      	b.n	800922e <_dtoa_r+0x316>
 8009354:	07cc      	lsls	r4, r1, #31
 8009356:	d504      	bpl.n	8009362 <_dtoa_r+0x44a>
 8009358:	ed90 6b00 	vldr	d6, [r0]
 800935c:	3201      	adds	r2, #1
 800935e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009362:	1049      	asrs	r1, r1, #1
 8009364:	3008      	adds	r0, #8
 8009366:	e763      	b.n	8009230 <_dtoa_r+0x318>
 8009368:	d022      	beq.n	80093b0 <_dtoa_r+0x498>
 800936a:	f1c8 0100 	rsb	r1, r8, #0
 800936e:	4a6d      	ldr	r2, [pc, #436]	@ (8009524 <_dtoa_r+0x60c>)
 8009370:	f001 000f 	and.w	r0, r1, #15
 8009374:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009378:	ed92 7b00 	vldr	d7, [r2]
 800937c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009384:	4868      	ldr	r0, [pc, #416]	@ (8009528 <_dtoa_r+0x610>)
 8009386:	1109      	asrs	r1, r1, #4
 8009388:	2400      	movs	r4, #0
 800938a:	2202      	movs	r2, #2
 800938c:	b929      	cbnz	r1, 800939a <_dtoa_r+0x482>
 800938e:	2c00      	cmp	r4, #0
 8009390:	f43f af57 	beq.w	8009242 <_dtoa_r+0x32a>
 8009394:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009398:	e753      	b.n	8009242 <_dtoa_r+0x32a>
 800939a:	07ce      	lsls	r6, r1, #31
 800939c:	d505      	bpl.n	80093aa <_dtoa_r+0x492>
 800939e:	ed90 6b00 	vldr	d6, [r0]
 80093a2:	3201      	adds	r2, #1
 80093a4:	2401      	movs	r4, #1
 80093a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093aa:	1049      	asrs	r1, r1, #1
 80093ac:	3008      	adds	r0, #8
 80093ae:	e7ed      	b.n	800938c <_dtoa_r+0x474>
 80093b0:	2202      	movs	r2, #2
 80093b2:	e746      	b.n	8009242 <_dtoa_r+0x32a>
 80093b4:	f8cd 8014 	str.w	r8, [sp, #20]
 80093b8:	4654      	mov	r4, sl
 80093ba:	e762      	b.n	8009282 <_dtoa_r+0x36a>
 80093bc:	4a59      	ldr	r2, [pc, #356]	@ (8009524 <_dtoa_r+0x60c>)
 80093be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80093c2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80093c6:	9a08      	ldr	r2, [sp, #32]
 80093c8:	ec41 0b17 	vmov	d7, r0, r1
 80093cc:	443c      	add	r4, r7
 80093ce:	b34a      	cbz	r2, 8009424 <_dtoa_r+0x50c>
 80093d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80093d4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80093d8:	463e      	mov	r6, r7
 80093da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80093de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80093e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80093e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80093ea:	ee14 2a90 	vmov	r2, s9
 80093ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80093f2:	3230      	adds	r2, #48	@ 0x30
 80093f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80093f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009400:	f806 2b01 	strb.w	r2, [r6], #1
 8009404:	d438      	bmi.n	8009478 <_dtoa_r+0x560>
 8009406:	ee32 5b46 	vsub.f64	d5, d2, d6
 800940a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800940e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009412:	d46e      	bmi.n	80094f2 <_dtoa_r+0x5da>
 8009414:	42a6      	cmp	r6, r4
 8009416:	f43f af5a 	beq.w	80092ce <_dtoa_r+0x3b6>
 800941a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800941e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009422:	e7e0      	b.n	80093e6 <_dtoa_r+0x4ce>
 8009424:	4621      	mov	r1, r4
 8009426:	463e      	mov	r6, r7
 8009428:	ee27 7b04 	vmul.f64	d7, d7, d4
 800942c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009430:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009434:	ee14 2a90 	vmov	r2, s9
 8009438:	3230      	adds	r2, #48	@ 0x30
 800943a:	f806 2b01 	strb.w	r2, [r6], #1
 800943e:	42a6      	cmp	r6, r4
 8009440:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009444:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009448:	d119      	bne.n	800947e <_dtoa_r+0x566>
 800944a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800944e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009452:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945a:	dc4a      	bgt.n	80094f2 <_dtoa_r+0x5da>
 800945c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009460:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009468:	f57f af31 	bpl.w	80092ce <_dtoa_r+0x3b6>
 800946c:	460e      	mov	r6, r1
 800946e:	3901      	subs	r1, #1
 8009470:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009474:	2b30      	cmp	r3, #48	@ 0x30
 8009476:	d0f9      	beq.n	800946c <_dtoa_r+0x554>
 8009478:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800947c:	e027      	b.n	80094ce <_dtoa_r+0x5b6>
 800947e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009482:	e7d5      	b.n	8009430 <_dtoa_r+0x518>
 8009484:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009488:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800948c:	463e      	mov	r6, r7
 800948e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009492:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009496:	ee15 3a10 	vmov	r3, s10
 800949a:	3330      	adds	r3, #48	@ 0x30
 800949c:	f806 3b01 	strb.w	r3, [r6], #1
 80094a0:	1bf3      	subs	r3, r6, r7
 80094a2:	459a      	cmp	sl, r3
 80094a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80094a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80094ac:	d132      	bne.n	8009514 <_dtoa_r+0x5fc>
 80094ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80094b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80094b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ba:	dc18      	bgt.n	80094ee <_dtoa_r+0x5d6>
 80094bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d103      	bne.n	80094ce <_dtoa_r+0x5b6>
 80094c6:	ee15 3a10 	vmov	r3, s10
 80094ca:	07db      	lsls	r3, r3, #31
 80094cc:	d40f      	bmi.n	80094ee <_dtoa_r+0x5d6>
 80094ce:	9901      	ldr	r1, [sp, #4]
 80094d0:	4648      	mov	r0, r9
 80094d2:	f000 fbbf 	bl	8009c54 <_Bfree>
 80094d6:	2300      	movs	r3, #0
 80094d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094da:	7033      	strb	r3, [r6, #0]
 80094dc:	f108 0301 	add.w	r3, r8, #1
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 824b 	beq.w	8009980 <_dtoa_r+0xa68>
 80094ea:	601e      	str	r6, [r3, #0]
 80094ec:	e248      	b.n	8009980 <_dtoa_r+0xa68>
 80094ee:	f8cd 8014 	str.w	r8, [sp, #20]
 80094f2:	4633      	mov	r3, r6
 80094f4:	461e      	mov	r6, r3
 80094f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094fa:	2a39      	cmp	r2, #57	@ 0x39
 80094fc:	d106      	bne.n	800950c <_dtoa_r+0x5f4>
 80094fe:	429f      	cmp	r7, r3
 8009500:	d1f8      	bne.n	80094f4 <_dtoa_r+0x5dc>
 8009502:	9a05      	ldr	r2, [sp, #20]
 8009504:	3201      	adds	r2, #1
 8009506:	9205      	str	r2, [sp, #20]
 8009508:	2230      	movs	r2, #48	@ 0x30
 800950a:	703a      	strb	r2, [r7, #0]
 800950c:	781a      	ldrb	r2, [r3, #0]
 800950e:	3201      	adds	r2, #1
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e7b1      	b.n	8009478 <_dtoa_r+0x560>
 8009514:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009518:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800951c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009520:	d1b5      	bne.n	800948e <_dtoa_r+0x576>
 8009522:	e7d4      	b.n	80094ce <_dtoa_r+0x5b6>
 8009524:	0800abe0 	.word	0x0800abe0
 8009528:	0800abb8 	.word	0x0800abb8
 800952c:	9908      	ldr	r1, [sp, #32]
 800952e:	2900      	cmp	r1, #0
 8009530:	f000 80e9 	beq.w	8009706 <_dtoa_r+0x7ee>
 8009534:	9907      	ldr	r1, [sp, #28]
 8009536:	2901      	cmp	r1, #1
 8009538:	f300 80cb 	bgt.w	80096d2 <_dtoa_r+0x7ba>
 800953c:	2d00      	cmp	r5, #0
 800953e:	f000 80c4 	beq.w	80096ca <_dtoa_r+0x7b2>
 8009542:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009546:	9e04      	ldr	r6, [sp, #16]
 8009548:	461c      	mov	r4, r3
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	4413      	add	r3, r2
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	2101      	movs	r1, #1
 8009556:	4413      	add	r3, r2
 8009558:	4648      	mov	r0, r9
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	f000 fc2e 	bl	8009dbc <__i2b>
 8009560:	9b05      	ldr	r3, [sp, #20]
 8009562:	4605      	mov	r5, r0
 8009564:	b166      	cbz	r6, 8009580 <_dtoa_r+0x668>
 8009566:	9a06      	ldr	r2, [sp, #24]
 8009568:	2a00      	cmp	r2, #0
 800956a:	dd09      	ble.n	8009580 <_dtoa_r+0x668>
 800956c:	42b2      	cmp	r2, r6
 800956e:	9904      	ldr	r1, [sp, #16]
 8009570:	bfa8      	it	ge
 8009572:	4632      	movge	r2, r6
 8009574:	1a89      	subs	r1, r1, r2
 8009576:	9104      	str	r1, [sp, #16]
 8009578:	9906      	ldr	r1, [sp, #24]
 800957a:	1ab6      	subs	r6, r6, r2
 800957c:	1a8a      	subs	r2, r1, r2
 800957e:	9206      	str	r2, [sp, #24]
 8009580:	b30b      	cbz	r3, 80095c6 <_dtoa_r+0x6ae>
 8009582:	9a08      	ldr	r2, [sp, #32]
 8009584:	2a00      	cmp	r2, #0
 8009586:	f000 80c5 	beq.w	8009714 <_dtoa_r+0x7fc>
 800958a:	2c00      	cmp	r4, #0
 800958c:	f000 80bf 	beq.w	800970e <_dtoa_r+0x7f6>
 8009590:	4629      	mov	r1, r5
 8009592:	4622      	mov	r2, r4
 8009594:	4648      	mov	r0, r9
 8009596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009598:	f000 fcc8 	bl	8009f2c <__pow5mult>
 800959c:	9a01      	ldr	r2, [sp, #4]
 800959e:	4601      	mov	r1, r0
 80095a0:	4605      	mov	r5, r0
 80095a2:	4648      	mov	r0, r9
 80095a4:	f000 fc20 	bl	8009de8 <__multiply>
 80095a8:	9901      	ldr	r1, [sp, #4]
 80095aa:	9005      	str	r0, [sp, #20]
 80095ac:	4648      	mov	r0, r9
 80095ae:	f000 fb51 	bl	8009c54 <_Bfree>
 80095b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b4:	1b1b      	subs	r3, r3, r4
 80095b6:	f000 80b0 	beq.w	800971a <_dtoa_r+0x802>
 80095ba:	9905      	ldr	r1, [sp, #20]
 80095bc:	461a      	mov	r2, r3
 80095be:	4648      	mov	r0, r9
 80095c0:	f000 fcb4 	bl	8009f2c <__pow5mult>
 80095c4:	9001      	str	r0, [sp, #4]
 80095c6:	2101      	movs	r1, #1
 80095c8:	4648      	mov	r0, r9
 80095ca:	f000 fbf7 	bl	8009dbc <__i2b>
 80095ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d0:	4604      	mov	r4, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 81da 	beq.w	800998c <_dtoa_r+0xa74>
 80095d8:	461a      	mov	r2, r3
 80095da:	4601      	mov	r1, r0
 80095dc:	4648      	mov	r0, r9
 80095de:	f000 fca5 	bl	8009f2c <__pow5mult>
 80095e2:	9b07      	ldr	r3, [sp, #28]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	4604      	mov	r4, r0
 80095e8:	f300 80a0 	bgt.w	800972c <_dtoa_r+0x814>
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 8096 	bne.w	8009720 <_dtoa_r+0x808>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	f040 8092 	bne.w	8009724 <_dtoa_r+0x80c>
 8009600:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009604:	0d12      	lsrs	r2, r2, #20
 8009606:	0512      	lsls	r2, r2, #20
 8009608:	2a00      	cmp	r2, #0
 800960a:	f000 808d 	beq.w	8009728 <_dtoa_r+0x810>
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	3301      	adds	r3, #1
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	9b06      	ldr	r3, [sp, #24]
 8009616:	3301      	adds	r3, #1
 8009618:	9306      	str	r3, [sp, #24]
 800961a:	2301      	movs	r3, #1
 800961c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800961e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 81b9 	beq.w	8009998 <_dtoa_r+0xa80>
 8009626:	6922      	ldr	r2, [r4, #16]
 8009628:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800962c:	6910      	ldr	r0, [r2, #16]
 800962e:	f000 fb79 	bl	8009d24 <__hi0bits>
 8009632:	f1c0 0020 	rsb	r0, r0, #32
 8009636:	9b06      	ldr	r3, [sp, #24]
 8009638:	4418      	add	r0, r3
 800963a:	f010 001f 	ands.w	r0, r0, #31
 800963e:	f000 8081 	beq.w	8009744 <_dtoa_r+0x82c>
 8009642:	f1c0 0220 	rsb	r2, r0, #32
 8009646:	2a04      	cmp	r2, #4
 8009648:	dd73      	ble.n	8009732 <_dtoa_r+0x81a>
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	f1c0 001c 	rsb	r0, r0, #28
 8009650:	4403      	add	r3, r0
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	9b06      	ldr	r3, [sp, #24]
 8009656:	4406      	add	r6, r0
 8009658:	4403      	add	r3, r0
 800965a:	9306      	str	r3, [sp, #24]
 800965c:	9b04      	ldr	r3, [sp, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	dd05      	ble.n	800966e <_dtoa_r+0x756>
 8009662:	9901      	ldr	r1, [sp, #4]
 8009664:	461a      	mov	r2, r3
 8009666:	4648      	mov	r0, r9
 8009668:	f000 fcba 	bl	8009fe0 <__lshift>
 800966c:	9001      	str	r0, [sp, #4]
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	dd05      	ble.n	8009680 <_dtoa_r+0x768>
 8009674:	4621      	mov	r1, r4
 8009676:	461a      	mov	r2, r3
 8009678:	4648      	mov	r0, r9
 800967a:	f000 fcb1 	bl	8009fe0 <__lshift>
 800967e:	4604      	mov	r4, r0
 8009680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009682:	2b00      	cmp	r3, #0
 8009684:	d060      	beq.n	8009748 <_dtoa_r+0x830>
 8009686:	9801      	ldr	r0, [sp, #4]
 8009688:	4621      	mov	r1, r4
 800968a:	f000 fd15 	bl	800a0b8 <__mcmp>
 800968e:	2800      	cmp	r0, #0
 8009690:	da5a      	bge.n	8009748 <_dtoa_r+0x830>
 8009692:	f108 33ff 	add.w	r3, r8, #4294967295
 8009696:	9305      	str	r3, [sp, #20]
 8009698:	9901      	ldr	r1, [sp, #4]
 800969a:	2300      	movs	r3, #0
 800969c:	220a      	movs	r2, #10
 800969e:	4648      	mov	r0, r9
 80096a0:	f000 fafa 	bl	8009c98 <__multadd>
 80096a4:	9b08      	ldr	r3, [sp, #32]
 80096a6:	9001      	str	r0, [sp, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 8177 	beq.w	800999c <_dtoa_r+0xa84>
 80096ae:	4629      	mov	r1, r5
 80096b0:	2300      	movs	r3, #0
 80096b2:	220a      	movs	r2, #10
 80096b4:	4648      	mov	r0, r9
 80096b6:	f000 faef 	bl	8009c98 <__multadd>
 80096ba:	f1bb 0f00 	cmp.w	fp, #0
 80096be:	4605      	mov	r5, r0
 80096c0:	dc6e      	bgt.n	80097a0 <_dtoa_r+0x888>
 80096c2:	9b07      	ldr	r3, [sp, #28]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	dc48      	bgt.n	800975a <_dtoa_r+0x842>
 80096c8:	e06a      	b.n	80097a0 <_dtoa_r+0x888>
 80096ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80096d0:	e739      	b.n	8009546 <_dtoa_r+0x62e>
 80096d2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	db07      	blt.n	80096ea <_dtoa_r+0x7d2>
 80096da:	f1ba 0f00 	cmp.w	sl, #0
 80096de:	eba3 0404 	sub.w	r4, r3, r4
 80096e2:	db0b      	blt.n	80096fc <_dtoa_r+0x7e4>
 80096e4:	9e04      	ldr	r6, [sp, #16]
 80096e6:	4652      	mov	r2, sl
 80096e8:	e72f      	b.n	800954a <_dtoa_r+0x632>
 80096ea:	1ae2      	subs	r2, r4, r3
 80096ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ee:	9e04      	ldr	r6, [sp, #16]
 80096f0:	4413      	add	r3, r2
 80096f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f4:	4652      	mov	r2, sl
 80096f6:	4623      	mov	r3, r4
 80096f8:	2400      	movs	r4, #0
 80096fa:	e726      	b.n	800954a <_dtoa_r+0x632>
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	eba2 060a 	sub.w	r6, r2, sl
 8009702:	2200      	movs	r2, #0
 8009704:	e721      	b.n	800954a <_dtoa_r+0x632>
 8009706:	9e04      	ldr	r6, [sp, #16]
 8009708:	9d08      	ldr	r5, [sp, #32]
 800970a:	461c      	mov	r4, r3
 800970c:	e72a      	b.n	8009564 <_dtoa_r+0x64c>
 800970e:	9a01      	ldr	r2, [sp, #4]
 8009710:	9205      	str	r2, [sp, #20]
 8009712:	e752      	b.n	80095ba <_dtoa_r+0x6a2>
 8009714:	9901      	ldr	r1, [sp, #4]
 8009716:	461a      	mov	r2, r3
 8009718:	e751      	b.n	80095be <_dtoa_r+0x6a6>
 800971a:	9b05      	ldr	r3, [sp, #20]
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	e752      	b.n	80095c6 <_dtoa_r+0x6ae>
 8009720:	2300      	movs	r3, #0
 8009722:	e77b      	b.n	800961c <_dtoa_r+0x704>
 8009724:	9b02      	ldr	r3, [sp, #8]
 8009726:	e779      	b.n	800961c <_dtoa_r+0x704>
 8009728:	920b      	str	r2, [sp, #44]	@ 0x2c
 800972a:	e778      	b.n	800961e <_dtoa_r+0x706>
 800972c:	2300      	movs	r3, #0
 800972e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009730:	e779      	b.n	8009626 <_dtoa_r+0x70e>
 8009732:	d093      	beq.n	800965c <_dtoa_r+0x744>
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	321c      	adds	r2, #28
 8009738:	4413      	add	r3, r2
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	9b06      	ldr	r3, [sp, #24]
 800973e:	4416      	add	r6, r2
 8009740:	4413      	add	r3, r2
 8009742:	e78a      	b.n	800965a <_dtoa_r+0x742>
 8009744:	4602      	mov	r2, r0
 8009746:	e7f5      	b.n	8009734 <_dtoa_r+0x81c>
 8009748:	f1ba 0f00 	cmp.w	sl, #0
 800974c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009750:	46d3      	mov	fp, sl
 8009752:	dc21      	bgt.n	8009798 <_dtoa_r+0x880>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	2b02      	cmp	r3, #2
 8009758:	dd1e      	ble.n	8009798 <_dtoa_r+0x880>
 800975a:	f1bb 0f00 	cmp.w	fp, #0
 800975e:	f47f addc 	bne.w	800931a <_dtoa_r+0x402>
 8009762:	4621      	mov	r1, r4
 8009764:	465b      	mov	r3, fp
 8009766:	2205      	movs	r2, #5
 8009768:	4648      	mov	r0, r9
 800976a:	f000 fa95 	bl	8009c98 <__multadd>
 800976e:	4601      	mov	r1, r0
 8009770:	4604      	mov	r4, r0
 8009772:	9801      	ldr	r0, [sp, #4]
 8009774:	f000 fca0 	bl	800a0b8 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	f77f adce 	ble.w	800931a <_dtoa_r+0x402>
 800977e:	463e      	mov	r6, r7
 8009780:	2331      	movs	r3, #49	@ 0x31
 8009782:	f806 3b01 	strb.w	r3, [r6], #1
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	3301      	adds	r3, #1
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	e5c9      	b.n	8009322 <_dtoa_r+0x40a>
 800978e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009792:	4654      	mov	r4, sl
 8009794:	4625      	mov	r5, r4
 8009796:	e7f2      	b.n	800977e <_dtoa_r+0x866>
 8009798:	9b08      	ldr	r3, [sp, #32]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 8102 	beq.w	80099a4 <_dtoa_r+0xa8c>
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	dd05      	ble.n	80097b0 <_dtoa_r+0x898>
 80097a4:	4629      	mov	r1, r5
 80097a6:	4632      	mov	r2, r6
 80097a8:	4648      	mov	r0, r9
 80097aa:	f000 fc19 	bl	8009fe0 <__lshift>
 80097ae:	4605      	mov	r5, r0
 80097b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d058      	beq.n	8009868 <_dtoa_r+0x950>
 80097b6:	6869      	ldr	r1, [r5, #4]
 80097b8:	4648      	mov	r0, r9
 80097ba:	f000 fa0b 	bl	8009bd4 <_Balloc>
 80097be:	4606      	mov	r6, r0
 80097c0:	b928      	cbnz	r0, 80097ce <_dtoa_r+0x8b6>
 80097c2:	4b82      	ldr	r3, [pc, #520]	@ (80099cc <_dtoa_r+0xab4>)
 80097c4:	4602      	mov	r2, r0
 80097c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80097ca:	f7ff bbbe 	b.w	8008f4a <_dtoa_r+0x32>
 80097ce:	692a      	ldr	r2, [r5, #16]
 80097d0:	3202      	adds	r2, #2
 80097d2:	0092      	lsls	r2, r2, #2
 80097d4:	f105 010c 	add.w	r1, r5, #12
 80097d8:	300c      	adds	r0, #12
 80097da:	f000 fff7 	bl	800a7cc <memcpy>
 80097de:	2201      	movs	r2, #1
 80097e0:	4631      	mov	r1, r6
 80097e2:	4648      	mov	r0, r9
 80097e4:	f000 fbfc 	bl	8009fe0 <__lshift>
 80097e8:	1c7b      	adds	r3, r7, #1
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	eb07 030b 	add.w	r3, r7, fp
 80097f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f2:	9b02      	ldr	r3, [sp, #8]
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	46a8      	mov	r8, r5
 80097fa:	9308      	str	r3, [sp, #32]
 80097fc:	4605      	mov	r5, r0
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	4621      	mov	r1, r4
 8009804:	f103 3bff 	add.w	fp, r3, #4294967295
 8009808:	f7ff fafd 	bl	8008e06 <quorem>
 800980c:	4641      	mov	r1, r8
 800980e:	9002      	str	r0, [sp, #8]
 8009810:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009814:	9801      	ldr	r0, [sp, #4]
 8009816:	f000 fc4f 	bl	800a0b8 <__mcmp>
 800981a:	462a      	mov	r2, r5
 800981c:	9006      	str	r0, [sp, #24]
 800981e:	4621      	mov	r1, r4
 8009820:	4648      	mov	r0, r9
 8009822:	f000 fc65 	bl	800a0f0 <__mdiff>
 8009826:	68c2      	ldr	r2, [r0, #12]
 8009828:	4606      	mov	r6, r0
 800982a:	b9fa      	cbnz	r2, 800986c <_dtoa_r+0x954>
 800982c:	4601      	mov	r1, r0
 800982e:	9801      	ldr	r0, [sp, #4]
 8009830:	f000 fc42 	bl	800a0b8 <__mcmp>
 8009834:	4602      	mov	r2, r0
 8009836:	4631      	mov	r1, r6
 8009838:	4648      	mov	r0, r9
 800983a:	920a      	str	r2, [sp, #40]	@ 0x28
 800983c:	f000 fa0a 	bl	8009c54 <_Bfree>
 8009840:	9b07      	ldr	r3, [sp, #28]
 8009842:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009844:	9e04      	ldr	r6, [sp, #16]
 8009846:	ea42 0103 	orr.w	r1, r2, r3
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	4319      	orrs	r1, r3
 800984e:	d10f      	bne.n	8009870 <_dtoa_r+0x958>
 8009850:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009854:	d028      	beq.n	80098a8 <_dtoa_r+0x990>
 8009856:	9b06      	ldr	r3, [sp, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	dd02      	ble.n	8009862 <_dtoa_r+0x94a>
 800985c:	9b02      	ldr	r3, [sp, #8]
 800985e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009862:	f88b a000 	strb.w	sl, [fp]
 8009866:	e55e      	b.n	8009326 <_dtoa_r+0x40e>
 8009868:	4628      	mov	r0, r5
 800986a:	e7bd      	b.n	80097e8 <_dtoa_r+0x8d0>
 800986c:	2201      	movs	r2, #1
 800986e:	e7e2      	b.n	8009836 <_dtoa_r+0x91e>
 8009870:	9b06      	ldr	r3, [sp, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	db04      	blt.n	8009880 <_dtoa_r+0x968>
 8009876:	9907      	ldr	r1, [sp, #28]
 8009878:	430b      	orrs	r3, r1
 800987a:	9908      	ldr	r1, [sp, #32]
 800987c:	430b      	orrs	r3, r1
 800987e:	d120      	bne.n	80098c2 <_dtoa_r+0x9aa>
 8009880:	2a00      	cmp	r2, #0
 8009882:	ddee      	ble.n	8009862 <_dtoa_r+0x94a>
 8009884:	9901      	ldr	r1, [sp, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	4648      	mov	r0, r9
 800988a:	f000 fba9 	bl	8009fe0 <__lshift>
 800988e:	4621      	mov	r1, r4
 8009890:	9001      	str	r0, [sp, #4]
 8009892:	f000 fc11 	bl	800a0b8 <__mcmp>
 8009896:	2800      	cmp	r0, #0
 8009898:	dc03      	bgt.n	80098a2 <_dtoa_r+0x98a>
 800989a:	d1e2      	bne.n	8009862 <_dtoa_r+0x94a>
 800989c:	f01a 0f01 	tst.w	sl, #1
 80098a0:	d0df      	beq.n	8009862 <_dtoa_r+0x94a>
 80098a2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80098a6:	d1d9      	bne.n	800985c <_dtoa_r+0x944>
 80098a8:	2339      	movs	r3, #57	@ 0x39
 80098aa:	f88b 3000 	strb.w	r3, [fp]
 80098ae:	4633      	mov	r3, r6
 80098b0:	461e      	mov	r6, r3
 80098b2:	3b01      	subs	r3, #1
 80098b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80098b8:	2a39      	cmp	r2, #57	@ 0x39
 80098ba:	d052      	beq.n	8009962 <_dtoa_r+0xa4a>
 80098bc:	3201      	adds	r2, #1
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e531      	b.n	8009326 <_dtoa_r+0x40e>
 80098c2:	2a00      	cmp	r2, #0
 80098c4:	dd07      	ble.n	80098d6 <_dtoa_r+0x9be>
 80098c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80098ca:	d0ed      	beq.n	80098a8 <_dtoa_r+0x990>
 80098cc:	f10a 0301 	add.w	r3, sl, #1
 80098d0:	f88b 3000 	strb.w	r3, [fp]
 80098d4:	e527      	b.n	8009326 <_dtoa_r+0x40e>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098da:	f803 ac01 	strb.w	sl, [r3, #-1]
 80098de:	4293      	cmp	r3, r2
 80098e0:	d029      	beq.n	8009936 <_dtoa_r+0xa1e>
 80098e2:	9901      	ldr	r1, [sp, #4]
 80098e4:	2300      	movs	r3, #0
 80098e6:	220a      	movs	r2, #10
 80098e8:	4648      	mov	r0, r9
 80098ea:	f000 f9d5 	bl	8009c98 <__multadd>
 80098ee:	45a8      	cmp	r8, r5
 80098f0:	9001      	str	r0, [sp, #4]
 80098f2:	f04f 0300 	mov.w	r3, #0
 80098f6:	f04f 020a 	mov.w	r2, #10
 80098fa:	4641      	mov	r1, r8
 80098fc:	4648      	mov	r0, r9
 80098fe:	d107      	bne.n	8009910 <_dtoa_r+0x9f8>
 8009900:	f000 f9ca 	bl	8009c98 <__multadd>
 8009904:	4680      	mov	r8, r0
 8009906:	4605      	mov	r5, r0
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	3301      	adds	r3, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	e776      	b.n	80097fe <_dtoa_r+0x8e6>
 8009910:	f000 f9c2 	bl	8009c98 <__multadd>
 8009914:	4629      	mov	r1, r5
 8009916:	4680      	mov	r8, r0
 8009918:	2300      	movs	r3, #0
 800991a:	220a      	movs	r2, #10
 800991c:	4648      	mov	r0, r9
 800991e:	f000 f9bb 	bl	8009c98 <__multadd>
 8009922:	4605      	mov	r5, r0
 8009924:	e7f0      	b.n	8009908 <_dtoa_r+0x9f0>
 8009926:	f1bb 0f00 	cmp.w	fp, #0
 800992a:	bfcc      	ite	gt
 800992c:	465e      	movgt	r6, fp
 800992e:	2601      	movle	r6, #1
 8009930:	443e      	add	r6, r7
 8009932:	f04f 0800 	mov.w	r8, #0
 8009936:	9901      	ldr	r1, [sp, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	4648      	mov	r0, r9
 800993c:	f000 fb50 	bl	8009fe0 <__lshift>
 8009940:	4621      	mov	r1, r4
 8009942:	9001      	str	r0, [sp, #4]
 8009944:	f000 fbb8 	bl	800a0b8 <__mcmp>
 8009948:	2800      	cmp	r0, #0
 800994a:	dcb0      	bgt.n	80098ae <_dtoa_r+0x996>
 800994c:	d102      	bne.n	8009954 <_dtoa_r+0xa3c>
 800994e:	f01a 0f01 	tst.w	sl, #1
 8009952:	d1ac      	bne.n	80098ae <_dtoa_r+0x996>
 8009954:	4633      	mov	r3, r6
 8009956:	461e      	mov	r6, r3
 8009958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800995c:	2a30      	cmp	r2, #48	@ 0x30
 800995e:	d0fa      	beq.n	8009956 <_dtoa_r+0xa3e>
 8009960:	e4e1      	b.n	8009326 <_dtoa_r+0x40e>
 8009962:	429f      	cmp	r7, r3
 8009964:	d1a4      	bne.n	80098b0 <_dtoa_r+0x998>
 8009966:	9b05      	ldr	r3, [sp, #20]
 8009968:	3301      	adds	r3, #1
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	2331      	movs	r3, #49	@ 0x31
 800996e:	703b      	strb	r3, [r7, #0]
 8009970:	e4d9      	b.n	8009326 <_dtoa_r+0x40e>
 8009972:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009974:	4f16      	ldr	r7, [pc, #88]	@ (80099d0 <_dtoa_r+0xab8>)
 8009976:	b11b      	cbz	r3, 8009980 <_dtoa_r+0xa68>
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	4638      	mov	r0, r7
 8009982:	b011      	add	sp, #68	@ 0x44
 8009984:	ecbd 8b02 	vpop	{d8}
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	2b01      	cmp	r3, #1
 8009990:	f77f ae2c 	ble.w	80095ec <_dtoa_r+0x6d4>
 8009994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009998:	2001      	movs	r0, #1
 800999a:	e64c      	b.n	8009636 <_dtoa_r+0x71e>
 800999c:	f1bb 0f00 	cmp.w	fp, #0
 80099a0:	f77f aed8 	ble.w	8009754 <_dtoa_r+0x83c>
 80099a4:	463e      	mov	r6, r7
 80099a6:	9801      	ldr	r0, [sp, #4]
 80099a8:	4621      	mov	r1, r4
 80099aa:	f7ff fa2c 	bl	8008e06 <quorem>
 80099ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80099b2:	f806 ab01 	strb.w	sl, [r6], #1
 80099b6:	1bf2      	subs	r2, r6, r7
 80099b8:	4593      	cmp	fp, r2
 80099ba:	ddb4      	ble.n	8009926 <_dtoa_r+0xa0e>
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	2300      	movs	r3, #0
 80099c0:	220a      	movs	r2, #10
 80099c2:	4648      	mov	r0, r9
 80099c4:	f000 f968 	bl	8009c98 <__multadd>
 80099c8:	9001      	str	r0, [sp, #4]
 80099ca:	e7ec      	b.n	80099a6 <_dtoa_r+0xa8e>
 80099cc:	0800aae4 	.word	0x0800aae4
 80099d0:	0800aa68 	.word	0x0800aa68

080099d4 <_free_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4605      	mov	r5, r0
 80099d8:	2900      	cmp	r1, #0
 80099da:	d041      	beq.n	8009a60 <_free_r+0x8c>
 80099dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e0:	1f0c      	subs	r4, r1, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bfb8      	it	lt
 80099e6:	18e4      	addlt	r4, r4, r3
 80099e8:	f000 f8e8 	bl	8009bbc <__malloc_lock>
 80099ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009a64 <_free_r+0x90>)
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b933      	cbnz	r3, 8009a00 <_free_r+0x2c>
 80099f2:	6063      	str	r3, [r4, #4]
 80099f4:	6014      	str	r4, [r2, #0]
 80099f6:	4628      	mov	r0, r5
 80099f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099fc:	f000 b8e4 	b.w	8009bc8 <__malloc_unlock>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d908      	bls.n	8009a16 <_free_r+0x42>
 8009a04:	6820      	ldr	r0, [r4, #0]
 8009a06:	1821      	adds	r1, r4, r0
 8009a08:	428b      	cmp	r3, r1
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6819      	ldreq	r1, [r3, #0]
 8009a0e:	685b      	ldreq	r3, [r3, #4]
 8009a10:	1809      	addeq	r1, r1, r0
 8009a12:	6021      	streq	r1, [r4, #0]
 8009a14:	e7ed      	b.n	80099f2 <_free_r+0x1e>
 8009a16:	461a      	mov	r2, r3
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b10b      	cbz	r3, 8009a20 <_free_r+0x4c>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x42>
 8009a20:	6811      	ldr	r1, [r2, #0]
 8009a22:	1850      	adds	r0, r2, r1
 8009a24:	42a0      	cmp	r0, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x6c>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	4401      	add	r1, r0
 8009a2c:	1850      	adds	r0, r2, r1
 8009a2e:	4283      	cmp	r3, r0
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	d1e0      	bne.n	80099f6 <_free_r+0x22>
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	6053      	str	r3, [r2, #4]
 8009a3a:	4408      	add	r0, r1
 8009a3c:	6010      	str	r0, [r2, #0]
 8009a3e:	e7da      	b.n	80099f6 <_free_r+0x22>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x74>
 8009a42:	230c      	movs	r3, #12
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	e7d6      	b.n	80099f6 <_free_r+0x22>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	1821      	adds	r1, r4, r0
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf04      	itt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	bf04      	itt	eq
 8009a58:	1809      	addeq	r1, r1, r0
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	6054      	str	r4, [r2, #4]
 8009a5e:	e7ca      	b.n	80099f6 <_free_r+0x22>
 8009a60:	bd38      	pop	{r3, r4, r5, pc}
 8009a62:	bf00      	nop
 8009a64:	24001440 	.word	0x24001440

08009a68 <malloc>:
 8009a68:	4b02      	ldr	r3, [pc, #8]	@ (8009a74 <malloc+0xc>)
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	6818      	ldr	r0, [r3, #0]
 8009a6e:	f000 b825 	b.w	8009abc <_malloc_r>
 8009a72:	bf00      	nop
 8009a74:	24000020 	.word	0x24000020

08009a78 <sbrk_aligned>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009ab8 <sbrk_aligned+0x40>)
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	6831      	ldr	r1, [r6, #0]
 8009a80:	4605      	mov	r5, r0
 8009a82:	b911      	cbnz	r1, 8009a8a <sbrk_aligned+0x12>
 8009a84:	f000 fe92 	bl	800a7ac <_sbrk_r>
 8009a88:	6030      	str	r0, [r6, #0]
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 fe8d 	bl	800a7ac <_sbrk_r>
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	d103      	bne.n	8009a9e <sbrk_aligned+0x26>
 8009a96:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	1cc4      	adds	r4, r0, #3
 8009aa0:	f024 0403 	bic.w	r4, r4, #3
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d0f8      	beq.n	8009a9a <sbrk_aligned+0x22>
 8009aa8:	1a21      	subs	r1, r4, r0
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 fe7e 	bl	800a7ac <_sbrk_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d1f2      	bne.n	8009a9a <sbrk_aligned+0x22>
 8009ab4:	e7ef      	b.n	8009a96 <sbrk_aligned+0x1e>
 8009ab6:	bf00      	nop
 8009ab8:	2400143c 	.word	0x2400143c

08009abc <_malloc_r>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	1ccd      	adds	r5, r1, #3
 8009ac2:	f025 0503 	bic.w	r5, r5, #3
 8009ac6:	3508      	adds	r5, #8
 8009ac8:	2d0c      	cmp	r5, #12
 8009aca:	bf38      	it	cc
 8009acc:	250c      	movcc	r5, #12
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	db01      	blt.n	8009ad8 <_malloc_r+0x1c>
 8009ad4:	42a9      	cmp	r1, r5
 8009ad6:	d904      	bls.n	8009ae2 <_malloc_r+0x26>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	2000      	movs	r0, #0
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bb8 <_malloc_r+0xfc>
 8009ae6:	f000 f869 	bl	8009bbc <__malloc_lock>
 8009aea:	f8d8 3000 	ldr.w	r3, [r8]
 8009aee:	461c      	mov	r4, r3
 8009af0:	bb44      	cbnz	r4, 8009b44 <_malloc_r+0x88>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffbf 	bl	8009a78 <sbrk_aligned>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	4604      	mov	r4, r0
 8009afe:	d158      	bne.n	8009bb2 <_malloc_r+0xf6>
 8009b00:	f8d8 4000 	ldr.w	r4, [r8]
 8009b04:	4627      	mov	r7, r4
 8009b06:	2f00      	cmp	r7, #0
 8009b08:	d143      	bne.n	8009b92 <_malloc_r+0xd6>
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	d04b      	beq.n	8009ba6 <_malloc_r+0xea>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	4639      	mov	r1, r7
 8009b12:	4630      	mov	r0, r6
 8009b14:	eb04 0903 	add.w	r9, r4, r3
 8009b18:	f000 fe48 	bl	800a7ac <_sbrk_r>
 8009b1c:	4581      	cmp	r9, r0
 8009b1e:	d142      	bne.n	8009ba6 <_malloc_r+0xea>
 8009b20:	6821      	ldr	r1, [r4, #0]
 8009b22:	1a6d      	subs	r5, r5, r1
 8009b24:	4629      	mov	r1, r5
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ffa6 	bl	8009a78 <sbrk_aligned>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d03a      	beq.n	8009ba6 <_malloc_r+0xea>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	442b      	add	r3, r5
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	bb62      	cbnz	r2, 8009b98 <_malloc_r+0xdc>
 8009b3e:	f8c8 7000 	str.w	r7, [r8]
 8009b42:	e00f      	b.n	8009b64 <_malloc_r+0xa8>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	1b52      	subs	r2, r2, r5
 8009b48:	d420      	bmi.n	8009b8c <_malloc_r+0xd0>
 8009b4a:	2a0b      	cmp	r2, #11
 8009b4c:	d917      	bls.n	8009b7e <_malloc_r+0xc2>
 8009b4e:	1961      	adds	r1, r4, r5
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	6025      	str	r5, [r4, #0]
 8009b54:	bf18      	it	ne
 8009b56:	6059      	strne	r1, [r3, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	bf08      	it	eq
 8009b5c:	f8c8 1000 	streq.w	r1, [r8]
 8009b60:	5162      	str	r2, [r4, r5]
 8009b62:	604b      	str	r3, [r1, #4]
 8009b64:	4630      	mov	r0, r6
 8009b66:	f000 f82f 	bl	8009bc8 <__malloc_unlock>
 8009b6a:	f104 000b 	add.w	r0, r4, #11
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	f020 0007 	bic.w	r0, r0, #7
 8009b74:	1ac2      	subs	r2, r0, r3
 8009b76:	bf1c      	itt	ne
 8009b78:	1a1b      	subne	r3, r3, r0
 8009b7a:	50a3      	strne	r3, [r4, r2]
 8009b7c:	e7af      	b.n	8009ade <_malloc_r+0x22>
 8009b7e:	6862      	ldr	r2, [r4, #4]
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	bf0c      	ite	eq
 8009b84:	f8c8 2000 	streq.w	r2, [r8]
 8009b88:	605a      	strne	r2, [r3, #4]
 8009b8a:	e7eb      	b.n	8009b64 <_malloc_r+0xa8>
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	6864      	ldr	r4, [r4, #4]
 8009b90:	e7ae      	b.n	8009af0 <_malloc_r+0x34>
 8009b92:	463c      	mov	r4, r7
 8009b94:	687f      	ldr	r7, [r7, #4]
 8009b96:	e7b6      	b.n	8009b06 <_malloc_r+0x4a>
 8009b98:	461a      	mov	r2, r3
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	d1fb      	bne.n	8009b98 <_malloc_r+0xdc>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6053      	str	r3, [r2, #4]
 8009ba4:	e7de      	b.n	8009b64 <_malloc_r+0xa8>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 f80c 	bl	8009bc8 <__malloc_unlock>
 8009bb0:	e794      	b.n	8009adc <_malloc_r+0x20>
 8009bb2:	6005      	str	r5, [r0, #0]
 8009bb4:	e7d6      	b.n	8009b64 <_malloc_r+0xa8>
 8009bb6:	bf00      	nop
 8009bb8:	24001440 	.word	0x24001440

08009bbc <__malloc_lock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	@ (8009bc4 <__malloc_lock+0x8>)
 8009bbe:	f7ff b920 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	24001438 	.word	0x24001438

08009bc8 <__malloc_unlock>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	@ (8009bd0 <__malloc_unlock+0x8>)
 8009bca:	f7ff b91b 	b.w	8008e04 <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	24001438 	.word	0x24001438

08009bd4 <_Balloc>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	69c6      	ldr	r6, [r0, #28]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	b976      	cbnz	r6, 8009bfc <_Balloc+0x28>
 8009bde:	2010      	movs	r0, #16
 8009be0:	f7ff ff42 	bl	8009a68 <malloc>
 8009be4:	4602      	mov	r2, r0
 8009be6:	61e0      	str	r0, [r4, #28]
 8009be8:	b920      	cbnz	r0, 8009bf4 <_Balloc+0x20>
 8009bea:	4b18      	ldr	r3, [pc, #96]	@ (8009c4c <_Balloc+0x78>)
 8009bec:	4818      	ldr	r0, [pc, #96]	@ (8009c50 <_Balloc+0x7c>)
 8009bee:	216b      	movs	r1, #107	@ 0x6b
 8009bf0:	f000 fdfa 	bl	800a7e8 <__assert_func>
 8009bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf8:	6006      	str	r6, [r0, #0]
 8009bfa:	60c6      	str	r6, [r0, #12]
 8009bfc:	69e6      	ldr	r6, [r4, #28]
 8009bfe:	68f3      	ldr	r3, [r6, #12]
 8009c00:	b183      	cbz	r3, 8009c24 <_Balloc+0x50>
 8009c02:	69e3      	ldr	r3, [r4, #28]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c0a:	b9b8      	cbnz	r0, 8009c3c <_Balloc+0x68>
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c12:	1d72      	adds	r2, r6, #5
 8009c14:	0092      	lsls	r2, r2, #2
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fe04 	bl	800a824 <_calloc_r>
 8009c1c:	b160      	cbz	r0, 8009c38 <_Balloc+0x64>
 8009c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c22:	e00e      	b.n	8009c42 <_Balloc+0x6e>
 8009c24:	2221      	movs	r2, #33	@ 0x21
 8009c26:	2104      	movs	r1, #4
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fdfb 	bl	800a824 <_calloc_r>
 8009c2e:	69e3      	ldr	r3, [r4, #28]
 8009c30:	60f0      	str	r0, [r6, #12]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e4      	bne.n	8009c02 <_Balloc+0x2e>
 8009c38:	2000      	movs	r0, #0
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	6802      	ldr	r2, [r0, #0]
 8009c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c42:	2300      	movs	r3, #0
 8009c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c48:	e7f7      	b.n	8009c3a <_Balloc+0x66>
 8009c4a:	bf00      	nop
 8009c4c:	0800aa75 	.word	0x0800aa75
 8009c50:	0800aaf5 	.word	0x0800aaf5

08009c54 <_Bfree>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	69c6      	ldr	r6, [r0, #28]
 8009c58:	4605      	mov	r5, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b976      	cbnz	r6, 8009c7c <_Bfree+0x28>
 8009c5e:	2010      	movs	r0, #16
 8009c60:	f7ff ff02 	bl	8009a68 <malloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	61e8      	str	r0, [r5, #28]
 8009c68:	b920      	cbnz	r0, 8009c74 <_Bfree+0x20>
 8009c6a:	4b09      	ldr	r3, [pc, #36]	@ (8009c90 <_Bfree+0x3c>)
 8009c6c:	4809      	ldr	r0, [pc, #36]	@ (8009c94 <_Bfree+0x40>)
 8009c6e:	218f      	movs	r1, #143	@ 0x8f
 8009c70:	f000 fdba 	bl	800a7e8 <__assert_func>
 8009c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c78:	6006      	str	r6, [r0, #0]
 8009c7a:	60c6      	str	r6, [r0, #12]
 8009c7c:	b13c      	cbz	r4, 8009c8e <_Bfree+0x3a>
 8009c7e:	69eb      	ldr	r3, [r5, #28]
 8009c80:	6862      	ldr	r2, [r4, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c88:	6021      	str	r1, [r4, #0]
 8009c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	0800aa75 	.word	0x0800aa75
 8009c94:	0800aaf5 	.word	0x0800aaf5

08009c98 <__multadd>:
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	690d      	ldr	r5, [r1, #16]
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	461e      	mov	r6, r3
 8009ca4:	f101 0c14 	add.w	ip, r1, #20
 8009ca8:	2000      	movs	r0, #0
 8009caa:	f8dc 3000 	ldr.w	r3, [ip]
 8009cae:	b299      	uxth	r1, r3
 8009cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8009cb4:	0c1e      	lsrs	r6, r3, #16
 8009cb6:	0c0b      	lsrs	r3, r1, #16
 8009cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8009cbc:	b289      	uxth	r1, r1
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cc4:	4285      	cmp	r5, r0
 8009cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cce:	dcec      	bgt.n	8009caa <__multadd+0x12>
 8009cd0:	b30e      	cbz	r6, 8009d16 <__multadd+0x7e>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	42ab      	cmp	r3, r5
 8009cd6:	dc19      	bgt.n	8009d0c <__multadd+0x74>
 8009cd8:	6861      	ldr	r1, [r4, #4]
 8009cda:	4638      	mov	r0, r7
 8009cdc:	3101      	adds	r1, #1
 8009cde:	f7ff ff79 	bl	8009bd4 <_Balloc>
 8009ce2:	4680      	mov	r8, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__multadd+0x5a>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8009d1c <__multadd+0x84>)
 8009cea:	480d      	ldr	r0, [pc, #52]	@ (8009d20 <__multadd+0x88>)
 8009cec:	21ba      	movs	r1, #186	@ 0xba
 8009cee:	f000 fd7b 	bl	800a7e8 <__assert_func>
 8009cf2:	6922      	ldr	r2, [r4, #16]
 8009cf4:	3202      	adds	r2, #2
 8009cf6:	f104 010c 	add.w	r1, r4, #12
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	300c      	adds	r0, #12
 8009cfe:	f000 fd65 	bl	800a7cc <memcpy>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ffa5 	bl	8009c54 <_Bfree>
 8009d0a:	4644      	mov	r4, r8
 8009d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d10:	3501      	adds	r5, #1
 8009d12:	615e      	str	r6, [r3, #20]
 8009d14:	6125      	str	r5, [r4, #16]
 8009d16:	4620      	mov	r0, r4
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	0800aae4 	.word	0x0800aae4
 8009d20:	0800aaf5 	.word	0x0800aaf5

08009d24 <__hi0bits>:
 8009d24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d28:	4603      	mov	r3, r0
 8009d2a:	bf36      	itet	cc
 8009d2c:	0403      	lslcc	r3, r0, #16
 8009d2e:	2000      	movcs	r0, #0
 8009d30:	2010      	movcc	r0, #16
 8009d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d36:	bf3c      	itt	cc
 8009d38:	021b      	lslcc	r3, r3, #8
 8009d3a:	3008      	addcc	r0, #8
 8009d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d40:	bf3c      	itt	cc
 8009d42:	011b      	lslcc	r3, r3, #4
 8009d44:	3004      	addcc	r0, #4
 8009d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4a:	bf3c      	itt	cc
 8009d4c:	009b      	lslcc	r3, r3, #2
 8009d4e:	3002      	addcc	r0, #2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db05      	blt.n	8009d60 <__hi0bits+0x3c>
 8009d54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d58:	f100 0001 	add.w	r0, r0, #1
 8009d5c:	bf08      	it	eq
 8009d5e:	2020      	moveq	r0, #32
 8009d60:	4770      	bx	lr

08009d62 <__lo0bits>:
 8009d62:	6803      	ldr	r3, [r0, #0]
 8009d64:	4602      	mov	r2, r0
 8009d66:	f013 0007 	ands.w	r0, r3, #7
 8009d6a:	d00b      	beq.n	8009d84 <__lo0bits+0x22>
 8009d6c:	07d9      	lsls	r1, r3, #31
 8009d6e:	d421      	bmi.n	8009db4 <__lo0bits+0x52>
 8009d70:	0798      	lsls	r0, r3, #30
 8009d72:	bf49      	itett	mi
 8009d74:	085b      	lsrmi	r3, r3, #1
 8009d76:	089b      	lsrpl	r3, r3, #2
 8009d78:	2001      	movmi	r0, #1
 8009d7a:	6013      	strmi	r3, [r2, #0]
 8009d7c:	bf5c      	itt	pl
 8009d7e:	6013      	strpl	r3, [r2, #0]
 8009d80:	2002      	movpl	r0, #2
 8009d82:	4770      	bx	lr
 8009d84:	b299      	uxth	r1, r3
 8009d86:	b909      	cbnz	r1, 8009d8c <__lo0bits+0x2a>
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	b2d9      	uxtb	r1, r3
 8009d8e:	b909      	cbnz	r1, 8009d94 <__lo0bits+0x32>
 8009d90:	3008      	adds	r0, #8
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	0719      	lsls	r1, r3, #28
 8009d96:	bf04      	itt	eq
 8009d98:	091b      	lsreq	r3, r3, #4
 8009d9a:	3004      	addeq	r0, #4
 8009d9c:	0799      	lsls	r1, r3, #30
 8009d9e:	bf04      	itt	eq
 8009da0:	089b      	lsreq	r3, r3, #2
 8009da2:	3002      	addeq	r0, #2
 8009da4:	07d9      	lsls	r1, r3, #31
 8009da6:	d403      	bmi.n	8009db0 <__lo0bits+0x4e>
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	f100 0001 	add.w	r0, r0, #1
 8009dae:	d003      	beq.n	8009db8 <__lo0bits+0x56>
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	4770      	bx	lr
 8009db4:	2000      	movs	r0, #0
 8009db6:	4770      	bx	lr
 8009db8:	2020      	movs	r0, #32
 8009dba:	4770      	bx	lr

08009dbc <__i2b>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	f7ff ff07 	bl	8009bd4 <_Balloc>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	b928      	cbnz	r0, 8009dd6 <__i2b+0x1a>
 8009dca:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <__i2b+0x24>)
 8009dcc:	4805      	ldr	r0, [pc, #20]	@ (8009de4 <__i2b+0x28>)
 8009dce:	f240 1145 	movw	r1, #325	@ 0x145
 8009dd2:	f000 fd09 	bl	800a7e8 <__assert_func>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	6144      	str	r4, [r0, #20]
 8009dda:	6103      	str	r3, [r0, #16]
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	bf00      	nop
 8009de0:	0800aae4 	.word	0x0800aae4
 8009de4:	0800aaf5 	.word	0x0800aaf5

08009de8 <__multiply>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4617      	mov	r7, r2
 8009dee:	690a      	ldr	r2, [r1, #16]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	bfa8      	it	ge
 8009df6:	463b      	movge	r3, r7
 8009df8:	4689      	mov	r9, r1
 8009dfa:	bfa4      	itt	ge
 8009dfc:	460f      	movge	r7, r1
 8009dfe:	4699      	movge	r9, r3
 8009e00:	693d      	ldr	r5, [r7, #16]
 8009e02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	eb05 060a 	add.w	r6, r5, sl
 8009e0e:	42b3      	cmp	r3, r6
 8009e10:	b085      	sub	sp, #20
 8009e12:	bfb8      	it	lt
 8009e14:	3101      	addlt	r1, #1
 8009e16:	f7ff fedd 	bl	8009bd4 <_Balloc>
 8009e1a:	b930      	cbnz	r0, 8009e2a <__multiply+0x42>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b41      	ldr	r3, [pc, #260]	@ (8009f24 <__multiply+0x13c>)
 8009e20:	4841      	ldr	r0, [pc, #260]	@ (8009f28 <__multiply+0x140>)
 8009e22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e26:	f000 fcdf 	bl	800a7e8 <__assert_func>
 8009e2a:	f100 0414 	add.w	r4, r0, #20
 8009e2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009e32:	4623      	mov	r3, r4
 8009e34:	2200      	movs	r2, #0
 8009e36:	4573      	cmp	r3, lr
 8009e38:	d320      	bcc.n	8009e7c <__multiply+0x94>
 8009e3a:	f107 0814 	add.w	r8, r7, #20
 8009e3e:	f109 0114 	add.w	r1, r9, #20
 8009e42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009e46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009e4a:	9302      	str	r3, [sp, #8]
 8009e4c:	1beb      	subs	r3, r5, r7
 8009e4e:	3b15      	subs	r3, #21
 8009e50:	f023 0303 	bic.w	r3, r3, #3
 8009e54:	3304      	adds	r3, #4
 8009e56:	3715      	adds	r7, #21
 8009e58:	42bd      	cmp	r5, r7
 8009e5a:	bf38      	it	cc
 8009e5c:	2304      	movcc	r3, #4
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	9103      	str	r1, [sp, #12]
 8009e64:	428b      	cmp	r3, r1
 8009e66:	d80c      	bhi.n	8009e82 <__multiply+0x9a>
 8009e68:	2e00      	cmp	r6, #0
 8009e6a:	dd03      	ble.n	8009e74 <__multiply+0x8c>
 8009e6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d055      	beq.n	8009f20 <__multiply+0x138>
 8009e74:	6106      	str	r6, [r0, #16]
 8009e76:	b005      	add	sp, #20
 8009e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7c:	f843 2b04 	str.w	r2, [r3], #4
 8009e80:	e7d9      	b.n	8009e36 <__multiply+0x4e>
 8009e82:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e86:	f1ba 0f00 	cmp.w	sl, #0
 8009e8a:	d01f      	beq.n	8009ecc <__multiply+0xe4>
 8009e8c:	46c4      	mov	ip, r8
 8009e8e:	46a1      	mov	r9, r4
 8009e90:	2700      	movs	r7, #0
 8009e92:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e96:	f8d9 3000 	ldr.w	r3, [r9]
 8009e9a:	fa1f fb82 	uxth.w	fp, r2
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ea4:	443b      	add	r3, r7
 8009ea6:	f8d9 7000 	ldr.w	r7, [r9]
 8009eaa:	0c12      	lsrs	r2, r2, #16
 8009eac:	0c3f      	lsrs	r7, r7, #16
 8009eae:	fb0a 7202 	mla	r2, sl, r2, r7
 8009eb2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ebc:	4565      	cmp	r5, ip
 8009ebe:	f849 3b04 	str.w	r3, [r9], #4
 8009ec2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009ec6:	d8e4      	bhi.n	8009e92 <__multiply+0xaa>
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	50e7      	str	r7, [r4, r3]
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ed2:	3104      	adds	r1, #4
 8009ed4:	f1b9 0f00 	cmp.w	r9, #0
 8009ed8:	d020      	beq.n	8009f1c <__multiply+0x134>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	4647      	mov	r7, r8
 8009ede:	46a4      	mov	ip, r4
 8009ee0:	f04f 0a00 	mov.w	sl, #0
 8009ee4:	f8b7 b000 	ldrh.w	fp, [r7]
 8009ee8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009eec:	fb09 220b 	mla	r2, r9, fp, r2
 8009ef0:	4452      	add	r2, sl
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ef8:	f84c 3b04 	str.w	r3, [ip], #4
 8009efc:	f857 3b04 	ldr.w	r3, [r7], #4
 8009f00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f04:	f8bc 3000 	ldrh.w	r3, [ip]
 8009f08:	fb09 330a 	mla	r3, r9, sl, r3
 8009f0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009f10:	42bd      	cmp	r5, r7
 8009f12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f16:	d8e5      	bhi.n	8009ee4 <__multiply+0xfc>
 8009f18:	9a01      	ldr	r2, [sp, #4]
 8009f1a:	50a3      	str	r3, [r4, r2]
 8009f1c:	3404      	adds	r4, #4
 8009f1e:	e79f      	b.n	8009e60 <__multiply+0x78>
 8009f20:	3e01      	subs	r6, #1
 8009f22:	e7a1      	b.n	8009e68 <__multiply+0x80>
 8009f24:	0800aae4 	.word	0x0800aae4
 8009f28:	0800aaf5 	.word	0x0800aaf5

08009f2c <__pow5mult>:
 8009f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f30:	4615      	mov	r5, r2
 8009f32:	f012 0203 	ands.w	r2, r2, #3
 8009f36:	4607      	mov	r7, r0
 8009f38:	460e      	mov	r6, r1
 8009f3a:	d007      	beq.n	8009f4c <__pow5mult+0x20>
 8009f3c:	4c25      	ldr	r4, [pc, #148]	@ (8009fd4 <__pow5mult+0xa8>)
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	2300      	movs	r3, #0
 8009f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f46:	f7ff fea7 	bl	8009c98 <__multadd>
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	10ad      	asrs	r5, r5, #2
 8009f4e:	d03d      	beq.n	8009fcc <__pow5mult+0xa0>
 8009f50:	69fc      	ldr	r4, [r7, #28]
 8009f52:	b97c      	cbnz	r4, 8009f74 <__pow5mult+0x48>
 8009f54:	2010      	movs	r0, #16
 8009f56:	f7ff fd87 	bl	8009a68 <malloc>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	61f8      	str	r0, [r7, #28]
 8009f5e:	b928      	cbnz	r0, 8009f6c <__pow5mult+0x40>
 8009f60:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd8 <__pow5mult+0xac>)
 8009f62:	481e      	ldr	r0, [pc, #120]	@ (8009fdc <__pow5mult+0xb0>)
 8009f64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f68:	f000 fc3e 	bl	800a7e8 <__assert_func>
 8009f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f70:	6004      	str	r4, [r0, #0]
 8009f72:	60c4      	str	r4, [r0, #12]
 8009f74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f7c:	b94c      	cbnz	r4, 8009f92 <__pow5mult+0x66>
 8009f7e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff ff1a 	bl	8009dbc <__i2b>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f8e:	4604      	mov	r4, r0
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	f04f 0900 	mov.w	r9, #0
 8009f96:	07eb      	lsls	r3, r5, #31
 8009f98:	d50a      	bpl.n	8009fb0 <__pow5mult+0x84>
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f7ff ff22 	bl	8009de8 <__multiply>
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff fe53 	bl	8009c54 <_Bfree>
 8009fae:	4646      	mov	r6, r8
 8009fb0:	106d      	asrs	r5, r5, #1
 8009fb2:	d00b      	beq.n	8009fcc <__pow5mult+0xa0>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	b938      	cbnz	r0, 8009fc8 <__pow5mult+0x9c>
 8009fb8:	4622      	mov	r2, r4
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7ff ff13 	bl	8009de8 <__multiply>
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	f8c0 9000 	str.w	r9, [r0]
 8009fc8:	4604      	mov	r4, r0
 8009fca:	e7e4      	b.n	8009f96 <__pow5mult+0x6a>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0800aba8 	.word	0x0800aba8
 8009fd8:	0800aa75 	.word	0x0800aa75
 8009fdc:	0800aaf5 	.word	0x0800aaf5

08009fe0 <__lshift>:
 8009fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	6849      	ldr	r1, [r1, #4]
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	4691      	mov	r9, r2
 8009ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ff8:	f108 0601 	add.w	r6, r8, #1
 8009ffc:	42b3      	cmp	r3, r6
 8009ffe:	db0b      	blt.n	800a018 <__lshift+0x38>
 800a000:	4638      	mov	r0, r7
 800a002:	f7ff fde7 	bl	8009bd4 <_Balloc>
 800a006:	4605      	mov	r5, r0
 800a008:	b948      	cbnz	r0, 800a01e <__lshift+0x3e>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b28      	ldr	r3, [pc, #160]	@ (800a0b0 <__lshift+0xd0>)
 800a00e:	4829      	ldr	r0, [pc, #164]	@ (800a0b4 <__lshift+0xd4>)
 800a010:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a014:	f000 fbe8 	bl	800a7e8 <__assert_func>
 800a018:	3101      	adds	r1, #1
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	e7ee      	b.n	8009ffc <__lshift+0x1c>
 800a01e:	2300      	movs	r3, #0
 800a020:	f100 0114 	add.w	r1, r0, #20
 800a024:	f100 0210 	add.w	r2, r0, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	4553      	cmp	r3, sl
 800a02c:	db33      	blt.n	800a096 <__lshift+0xb6>
 800a02e:	6920      	ldr	r0, [r4, #16]
 800a030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a034:	f104 0314 	add.w	r3, r4, #20
 800a038:	f019 091f 	ands.w	r9, r9, #31
 800a03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a040:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a044:	d02b      	beq.n	800a09e <__lshift+0xbe>
 800a046:	f1c9 0e20 	rsb	lr, r9, #32
 800a04a:	468a      	mov	sl, r1
 800a04c:	2200      	movs	r2, #0
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	fa00 f009 	lsl.w	r0, r0, r9
 800a054:	4310      	orrs	r0, r2
 800a056:	f84a 0b04 	str.w	r0, [sl], #4
 800a05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a05e:	459c      	cmp	ip, r3
 800a060:	fa22 f20e 	lsr.w	r2, r2, lr
 800a064:	d8f3      	bhi.n	800a04e <__lshift+0x6e>
 800a066:	ebac 0304 	sub.w	r3, ip, r4
 800a06a:	3b15      	subs	r3, #21
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	3304      	adds	r3, #4
 800a072:	f104 0015 	add.w	r0, r4, #21
 800a076:	4560      	cmp	r0, ip
 800a078:	bf88      	it	hi
 800a07a:	2304      	movhi	r3, #4
 800a07c:	50ca      	str	r2, [r1, r3]
 800a07e:	b10a      	cbz	r2, 800a084 <__lshift+0xa4>
 800a080:	f108 0602 	add.w	r6, r8, #2
 800a084:	3e01      	subs	r6, #1
 800a086:	4638      	mov	r0, r7
 800a088:	612e      	str	r6, [r5, #16]
 800a08a:	4621      	mov	r1, r4
 800a08c:	f7ff fde2 	bl	8009c54 <_Bfree>
 800a090:	4628      	mov	r0, r5
 800a092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a096:	f842 0f04 	str.w	r0, [r2, #4]!
 800a09a:	3301      	adds	r3, #1
 800a09c:	e7c5      	b.n	800a02a <__lshift+0x4a>
 800a09e:	3904      	subs	r1, #4
 800a0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0a8:	459c      	cmp	ip, r3
 800a0aa:	d8f9      	bhi.n	800a0a0 <__lshift+0xc0>
 800a0ac:	e7ea      	b.n	800a084 <__lshift+0xa4>
 800a0ae:	bf00      	nop
 800a0b0:	0800aae4 	.word	0x0800aae4
 800a0b4:	0800aaf5 	.word	0x0800aaf5

0800a0b8 <__mcmp>:
 800a0b8:	690a      	ldr	r2, [r1, #16]
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6900      	ldr	r0, [r0, #16]
 800a0be:	1a80      	subs	r0, r0, r2
 800a0c0:	b530      	push	{r4, r5, lr}
 800a0c2:	d10e      	bne.n	800a0e2 <__mcmp+0x2a>
 800a0c4:	3314      	adds	r3, #20
 800a0c6:	3114      	adds	r1, #20
 800a0c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0d8:	4295      	cmp	r5, r2
 800a0da:	d003      	beq.n	800a0e4 <__mcmp+0x2c>
 800a0dc:	d205      	bcs.n	800a0ea <__mcmp+0x32>
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	bd30      	pop	{r4, r5, pc}
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d3f3      	bcc.n	800a0d0 <__mcmp+0x18>
 800a0e8:	e7fb      	b.n	800a0e2 <__mcmp+0x2a>
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	e7f9      	b.n	800a0e2 <__mcmp+0x2a>
	...

0800a0f0 <__mdiff>:
 800a0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	4689      	mov	r9, r1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	4648      	mov	r0, r9
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	f7ff ffdb 	bl	800a0b8 <__mcmp>
 800a102:	1e05      	subs	r5, r0, #0
 800a104:	d112      	bne.n	800a12c <__mdiff+0x3c>
 800a106:	4629      	mov	r1, r5
 800a108:	4630      	mov	r0, r6
 800a10a:	f7ff fd63 	bl	8009bd4 <_Balloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	b928      	cbnz	r0, 800a11e <__mdiff+0x2e>
 800a112:	4b3f      	ldr	r3, [pc, #252]	@ (800a210 <__mdiff+0x120>)
 800a114:	f240 2137 	movw	r1, #567	@ 0x237
 800a118:	483e      	ldr	r0, [pc, #248]	@ (800a214 <__mdiff+0x124>)
 800a11a:	f000 fb65 	bl	800a7e8 <__assert_func>
 800a11e:	2301      	movs	r3, #1
 800a120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a124:	4610      	mov	r0, r2
 800a126:	b003      	add	sp, #12
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	bfbc      	itt	lt
 800a12e:	464b      	movlt	r3, r9
 800a130:	46a1      	movlt	r9, r4
 800a132:	4630      	mov	r0, r6
 800a134:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a138:	bfba      	itte	lt
 800a13a:	461c      	movlt	r4, r3
 800a13c:	2501      	movlt	r5, #1
 800a13e:	2500      	movge	r5, #0
 800a140:	f7ff fd48 	bl	8009bd4 <_Balloc>
 800a144:	4602      	mov	r2, r0
 800a146:	b918      	cbnz	r0, 800a150 <__mdiff+0x60>
 800a148:	4b31      	ldr	r3, [pc, #196]	@ (800a210 <__mdiff+0x120>)
 800a14a:	f240 2145 	movw	r1, #581	@ 0x245
 800a14e:	e7e3      	b.n	800a118 <__mdiff+0x28>
 800a150:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a154:	6926      	ldr	r6, [r4, #16]
 800a156:	60c5      	str	r5, [r0, #12]
 800a158:	f109 0310 	add.w	r3, r9, #16
 800a15c:	f109 0514 	add.w	r5, r9, #20
 800a160:	f104 0e14 	add.w	lr, r4, #20
 800a164:	f100 0b14 	add.w	fp, r0, #20
 800a168:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a16c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	46d9      	mov	r9, fp
 800a174:	f04f 0c00 	mov.w	ip, #0
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a17e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	fa1f f38a 	uxth.w	r3, sl
 800a188:	4619      	mov	r1, r3
 800a18a:	b283      	uxth	r3, r0
 800a18c:	1acb      	subs	r3, r1, r3
 800a18e:	0c00      	lsrs	r0, r0, #16
 800a190:	4463      	add	r3, ip
 800a192:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a196:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1a0:	4576      	cmp	r6, lr
 800a1a2:	f849 3b04 	str.w	r3, [r9], #4
 800a1a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1aa:	d8e5      	bhi.n	800a178 <__mdiff+0x88>
 800a1ac:	1b33      	subs	r3, r6, r4
 800a1ae:	3b15      	subs	r3, #21
 800a1b0:	f023 0303 	bic.w	r3, r3, #3
 800a1b4:	3415      	adds	r4, #21
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	42a6      	cmp	r6, r4
 800a1ba:	bf38      	it	cc
 800a1bc:	2304      	movcc	r3, #4
 800a1be:	441d      	add	r5, r3
 800a1c0:	445b      	add	r3, fp
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	462c      	mov	r4, r5
 800a1c6:	4544      	cmp	r4, r8
 800a1c8:	d30e      	bcc.n	800a1e8 <__mdiff+0xf8>
 800a1ca:	f108 0103 	add.w	r1, r8, #3
 800a1ce:	1b49      	subs	r1, r1, r5
 800a1d0:	f021 0103 	bic.w	r1, r1, #3
 800a1d4:	3d03      	subs	r5, #3
 800a1d6:	45a8      	cmp	r8, r5
 800a1d8:	bf38      	it	cc
 800a1da:	2100      	movcc	r1, #0
 800a1dc:	440b      	add	r3, r1
 800a1de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1e2:	b191      	cbz	r1, 800a20a <__mdiff+0x11a>
 800a1e4:	6117      	str	r7, [r2, #16]
 800a1e6:	e79d      	b.n	800a124 <__mdiff+0x34>
 800a1e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1ec:	46e6      	mov	lr, ip
 800a1ee:	0c08      	lsrs	r0, r1, #16
 800a1f0:	fa1c fc81 	uxtah	ip, ip, r1
 800a1f4:	4471      	add	r1, lr
 800a1f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1fa:	b289      	uxth	r1, r1
 800a1fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a200:	f846 1b04 	str.w	r1, [r6], #4
 800a204:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a208:	e7dd      	b.n	800a1c6 <__mdiff+0xd6>
 800a20a:	3f01      	subs	r7, #1
 800a20c:	e7e7      	b.n	800a1de <__mdiff+0xee>
 800a20e:	bf00      	nop
 800a210:	0800aae4 	.word	0x0800aae4
 800a214:	0800aaf5 	.word	0x0800aaf5

0800a218 <__d2b>:
 800a218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	460f      	mov	r7, r1
 800a21e:	2101      	movs	r1, #1
 800a220:	ec59 8b10 	vmov	r8, r9, d0
 800a224:	4616      	mov	r6, r2
 800a226:	f7ff fcd5 	bl	8009bd4 <_Balloc>
 800a22a:	4604      	mov	r4, r0
 800a22c:	b930      	cbnz	r0, 800a23c <__d2b+0x24>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b23      	ldr	r3, [pc, #140]	@ (800a2c0 <__d2b+0xa8>)
 800a232:	4824      	ldr	r0, [pc, #144]	@ (800a2c4 <__d2b+0xac>)
 800a234:	f240 310f 	movw	r1, #783	@ 0x30f
 800a238:	f000 fad6 	bl	800a7e8 <__assert_func>
 800a23c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a244:	b10d      	cbz	r5, 800a24a <__d2b+0x32>
 800a246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a24a:	9301      	str	r3, [sp, #4]
 800a24c:	f1b8 0300 	subs.w	r3, r8, #0
 800a250:	d023      	beq.n	800a29a <__d2b+0x82>
 800a252:	4668      	mov	r0, sp
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	f7ff fd84 	bl	8009d62 <__lo0bits>
 800a25a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a25e:	b1d0      	cbz	r0, 800a296 <__d2b+0x7e>
 800a260:	f1c0 0320 	rsb	r3, r0, #32
 800a264:	fa02 f303 	lsl.w	r3, r2, r3
 800a268:	430b      	orrs	r3, r1
 800a26a:	40c2      	lsrs	r2, r0
 800a26c:	6163      	str	r3, [r4, #20]
 800a26e:	9201      	str	r2, [sp, #4]
 800a270:	9b01      	ldr	r3, [sp, #4]
 800a272:	61a3      	str	r3, [r4, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	bf0c      	ite	eq
 800a278:	2201      	moveq	r2, #1
 800a27a:	2202      	movne	r2, #2
 800a27c:	6122      	str	r2, [r4, #16]
 800a27e:	b1a5      	cbz	r5, 800a2aa <__d2b+0x92>
 800a280:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a284:	4405      	add	r5, r0
 800a286:	603d      	str	r5, [r7, #0]
 800a288:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a28c:	6030      	str	r0, [r6, #0]
 800a28e:	4620      	mov	r0, r4
 800a290:	b003      	add	sp, #12
 800a292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a296:	6161      	str	r1, [r4, #20]
 800a298:	e7ea      	b.n	800a270 <__d2b+0x58>
 800a29a:	a801      	add	r0, sp, #4
 800a29c:	f7ff fd61 	bl	8009d62 <__lo0bits>
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	6163      	str	r3, [r4, #20]
 800a2a4:	3020      	adds	r0, #32
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	e7e8      	b.n	800a27c <__d2b+0x64>
 800a2aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a2b2:	6038      	str	r0, [r7, #0]
 800a2b4:	6918      	ldr	r0, [r3, #16]
 800a2b6:	f7ff fd35 	bl	8009d24 <__hi0bits>
 800a2ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2be:	e7e5      	b.n	800a28c <__d2b+0x74>
 800a2c0:	0800aae4 	.word	0x0800aae4
 800a2c4:	0800aaf5 	.word	0x0800aaf5

0800a2c8 <__sfputc_r>:
 800a2c8:	6893      	ldr	r3, [r2, #8]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	b410      	push	{r4}
 800a2d0:	6093      	str	r3, [r2, #8]
 800a2d2:	da08      	bge.n	800a2e6 <__sfputc_r+0x1e>
 800a2d4:	6994      	ldr	r4, [r2, #24]
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	db01      	blt.n	800a2de <__sfputc_r+0x16>
 800a2da:	290a      	cmp	r1, #10
 800a2dc:	d103      	bne.n	800a2e6 <__sfputc_r+0x1e>
 800a2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e2:	f7fe bc7c 	b.w	8008bde <__swbuf_r>
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	1c58      	adds	r0, r3, #1
 800a2ea:	6010      	str	r0, [r2, #0]
 800a2ec:	7019      	strb	r1, [r3, #0]
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <__sfputs_r>:
 800a2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	460f      	mov	r7, r1
 800a2fc:	4614      	mov	r4, r2
 800a2fe:	18d5      	adds	r5, r2, r3
 800a300:	42ac      	cmp	r4, r5
 800a302:	d101      	bne.n	800a308 <__sfputs_r+0x12>
 800a304:	2000      	movs	r0, #0
 800a306:	e007      	b.n	800a318 <__sfputs_r+0x22>
 800a308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30c:	463a      	mov	r2, r7
 800a30e:	4630      	mov	r0, r6
 800a310:	f7ff ffda 	bl	800a2c8 <__sfputc_r>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d1f3      	bne.n	800a300 <__sfputs_r+0xa>
 800a318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a31c <_vfiprintf_r>:
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	460d      	mov	r5, r1
 800a322:	b09d      	sub	sp, #116	@ 0x74
 800a324:	4614      	mov	r4, r2
 800a326:	4698      	mov	r8, r3
 800a328:	4606      	mov	r6, r0
 800a32a:	b118      	cbz	r0, 800a334 <_vfiprintf_r+0x18>
 800a32c:	6a03      	ldr	r3, [r0, #32]
 800a32e:	b90b      	cbnz	r3, 800a334 <_vfiprintf_r+0x18>
 800a330:	f7fe fb6c 	bl	8008a0c <__sinit>
 800a334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a336:	07d9      	lsls	r1, r3, #31
 800a338:	d405      	bmi.n	800a346 <_vfiprintf_r+0x2a>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	059a      	lsls	r2, r3, #22
 800a33e:	d402      	bmi.n	800a346 <_vfiprintf_r+0x2a>
 800a340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a342:	f7fe fd5e 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	071b      	lsls	r3, r3, #28
 800a34a:	d501      	bpl.n	800a350 <_vfiprintf_r+0x34>
 800a34c:	692b      	ldr	r3, [r5, #16]
 800a34e:	b99b      	cbnz	r3, 800a378 <_vfiprintf_r+0x5c>
 800a350:	4629      	mov	r1, r5
 800a352:	4630      	mov	r0, r6
 800a354:	f7fe fc82 	bl	8008c5c <__swsetup_r>
 800a358:	b170      	cbz	r0, 800a378 <_vfiprintf_r+0x5c>
 800a35a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a35c:	07dc      	lsls	r4, r3, #31
 800a35e:	d504      	bpl.n	800a36a <_vfiprintf_r+0x4e>
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	b01d      	add	sp, #116	@ 0x74
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	0598      	lsls	r0, r3, #22
 800a36e:	d4f7      	bmi.n	800a360 <_vfiprintf_r+0x44>
 800a370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a372:	f7fe fd47 	bl	8008e04 <__retarget_lock_release_recursive>
 800a376:	e7f3      	b.n	800a360 <_vfiprintf_r+0x44>
 800a378:	2300      	movs	r3, #0
 800a37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37c:	2320      	movs	r3, #32
 800a37e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a382:	f8cd 800c 	str.w	r8, [sp, #12]
 800a386:	2330      	movs	r3, #48	@ 0x30
 800a388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a538 <_vfiprintf_r+0x21c>
 800a38c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a390:	f04f 0901 	mov.w	r9, #1
 800a394:	4623      	mov	r3, r4
 800a396:	469a      	mov	sl, r3
 800a398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_vfiprintf_r+0x86>
 800a39e:	2a25      	cmp	r2, #37	@ 0x25
 800a3a0:	d1f9      	bne.n	800a396 <_vfiprintf_r+0x7a>
 800a3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3a6:	d00b      	beq.n	800a3c0 <_vfiprintf_r+0xa4>
 800a3a8:	465b      	mov	r3, fp
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7ff ffa1 	bl	800a2f6 <__sfputs_r>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f000 80a7 	beq.w	800a508 <_vfiprintf_r+0x1ec>
 800a3ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3bc:	445a      	add	r2, fp
 800a3be:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 809f 	beq.w	800a508 <_vfiprintf_r+0x1ec>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d4:	f10a 0a01 	add.w	sl, sl, #1
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3e2:	4654      	mov	r4, sl
 800a3e4:	2205      	movs	r2, #5
 800a3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ea:	4853      	ldr	r0, [pc, #332]	@ (800a538 <_vfiprintf_r+0x21c>)
 800a3ec:	f7f5 ff78 	bl	80002e0 <memchr>
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	b9d8      	cbnz	r0, 800a42c <_vfiprintf_r+0x110>
 800a3f4:	06d1      	lsls	r1, r2, #27
 800a3f6:	bf44      	itt	mi
 800a3f8:	2320      	movmi	r3, #32
 800a3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3fe:	0713      	lsls	r3, r2, #28
 800a400:	bf44      	itt	mi
 800a402:	232b      	movmi	r3, #43	@ 0x2b
 800a404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a408:	f89a 3000 	ldrb.w	r3, [sl]
 800a40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a40e:	d015      	beq.n	800a43c <_vfiprintf_r+0x120>
 800a410:	9a07      	ldr	r2, [sp, #28]
 800a412:	4654      	mov	r4, sl
 800a414:	2000      	movs	r0, #0
 800a416:	f04f 0c0a 	mov.w	ip, #10
 800a41a:	4621      	mov	r1, r4
 800a41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a420:	3b30      	subs	r3, #48	@ 0x30
 800a422:	2b09      	cmp	r3, #9
 800a424:	d94b      	bls.n	800a4be <_vfiprintf_r+0x1a2>
 800a426:	b1b0      	cbz	r0, 800a456 <_vfiprintf_r+0x13a>
 800a428:	9207      	str	r2, [sp, #28]
 800a42a:	e014      	b.n	800a456 <_vfiprintf_r+0x13a>
 800a42c:	eba0 0308 	sub.w	r3, r0, r8
 800a430:	fa09 f303 	lsl.w	r3, r9, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	46a2      	mov	sl, r4
 800a43a:	e7d2      	b.n	800a3e2 <_vfiprintf_r+0xc6>
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	1d19      	adds	r1, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	9103      	str	r1, [sp, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	bfbb      	ittet	lt
 800a448:	425b      	neglt	r3, r3
 800a44a:	f042 0202 	orrlt.w	r2, r2, #2
 800a44e:	9307      	strge	r3, [sp, #28]
 800a450:	9307      	strlt	r3, [sp, #28]
 800a452:	bfb8      	it	lt
 800a454:	9204      	strlt	r2, [sp, #16]
 800a456:	7823      	ldrb	r3, [r4, #0]
 800a458:	2b2e      	cmp	r3, #46	@ 0x2e
 800a45a:	d10a      	bne.n	800a472 <_vfiprintf_r+0x156>
 800a45c:	7863      	ldrb	r3, [r4, #1]
 800a45e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a460:	d132      	bne.n	800a4c8 <_vfiprintf_r+0x1ac>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	1d1a      	adds	r2, r3, #4
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	9203      	str	r2, [sp, #12]
 800a46a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a46e:	3402      	adds	r4, #2
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a548 <_vfiprintf_r+0x22c>
 800a476:	7821      	ldrb	r1, [r4, #0]
 800a478:	2203      	movs	r2, #3
 800a47a:	4650      	mov	r0, sl
 800a47c:	f7f5 ff30 	bl	80002e0 <memchr>
 800a480:	b138      	cbz	r0, 800a492 <_vfiprintf_r+0x176>
 800a482:	9b04      	ldr	r3, [sp, #16]
 800a484:	eba0 000a 	sub.w	r0, r0, sl
 800a488:	2240      	movs	r2, #64	@ 0x40
 800a48a:	4082      	lsls	r2, r0
 800a48c:	4313      	orrs	r3, r2
 800a48e:	3401      	adds	r4, #1
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a496:	4829      	ldr	r0, [pc, #164]	@ (800a53c <_vfiprintf_r+0x220>)
 800a498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a49c:	2206      	movs	r2, #6
 800a49e:	f7f5 ff1f 	bl	80002e0 <memchr>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d03f      	beq.n	800a526 <_vfiprintf_r+0x20a>
 800a4a6:	4b26      	ldr	r3, [pc, #152]	@ (800a540 <_vfiprintf_r+0x224>)
 800a4a8:	bb1b      	cbnz	r3, 800a4f2 <_vfiprintf_r+0x1d6>
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	3307      	adds	r3, #7
 800a4ae:	f023 0307 	bic.w	r3, r3, #7
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	443b      	add	r3, r7
 800a4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4bc:	e76a      	b.n	800a394 <_vfiprintf_r+0x78>
 800a4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	e7a8      	b.n	800a41a <_vfiprintf_r+0xfe>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	9305      	str	r3, [sp, #20]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	f04f 0c0a 	mov.w	ip, #10
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4da:	3a30      	subs	r2, #48	@ 0x30
 800a4dc:	2a09      	cmp	r2, #9
 800a4de:	d903      	bls.n	800a4e8 <_vfiprintf_r+0x1cc>
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0c6      	beq.n	800a472 <_vfiprintf_r+0x156>
 800a4e4:	9105      	str	r1, [sp, #20]
 800a4e6:	e7c4      	b.n	800a472 <_vfiprintf_r+0x156>
 800a4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e7f0      	b.n	800a4d4 <_vfiprintf_r+0x1b8>
 800a4f2:	ab03      	add	r3, sp, #12
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4b12      	ldr	r3, [pc, #72]	@ (800a544 <_vfiprintf_r+0x228>)
 800a4fa:	a904      	add	r1, sp, #16
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7fd fe53 	bl	80081a8 <_printf_float>
 800a502:	4607      	mov	r7, r0
 800a504:	1c78      	adds	r0, r7, #1
 800a506:	d1d6      	bne.n	800a4b6 <_vfiprintf_r+0x19a>
 800a508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a50a:	07d9      	lsls	r1, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_vfiprintf_r+0x1fe>
 800a50e:	89ab      	ldrh	r3, [r5, #12]
 800a510:	059a      	lsls	r2, r3, #22
 800a512:	d402      	bmi.n	800a51a <_vfiprintf_r+0x1fe>
 800a514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a516:	f7fe fc75 	bl	8008e04 <__retarget_lock_release_recursive>
 800a51a:	89ab      	ldrh	r3, [r5, #12]
 800a51c:	065b      	lsls	r3, r3, #25
 800a51e:	f53f af1f 	bmi.w	800a360 <_vfiprintf_r+0x44>
 800a522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a524:	e71e      	b.n	800a364 <_vfiprintf_r+0x48>
 800a526:	ab03      	add	r3, sp, #12
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	462a      	mov	r2, r5
 800a52c:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <_vfiprintf_r+0x228>)
 800a52e:	a904      	add	r1, sp, #16
 800a530:	4630      	mov	r0, r6
 800a532:	f7fe f8c1 	bl	80086b8 <_printf_i>
 800a536:	e7e4      	b.n	800a502 <_vfiprintf_r+0x1e6>
 800a538:	0800ab4e 	.word	0x0800ab4e
 800a53c:	0800ab58 	.word	0x0800ab58
 800a540:	080081a9 	.word	0x080081a9
 800a544:	0800a2f7 	.word	0x0800a2f7
 800a548:	0800ab54 	.word	0x0800ab54

0800a54c <__sflush_r>:
 800a54c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	0716      	lsls	r6, r2, #28
 800a556:	4605      	mov	r5, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	d454      	bmi.n	800a606 <__sflush_r+0xba>
 800a55c:	684b      	ldr	r3, [r1, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc02      	bgt.n	800a568 <__sflush_r+0x1c>
 800a562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	dd48      	ble.n	800a5fa <__sflush_r+0xae>
 800a568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d045      	beq.n	800a5fa <__sflush_r+0xae>
 800a56e:	2300      	movs	r3, #0
 800a570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a574:	682f      	ldr	r7, [r5, #0]
 800a576:	6a21      	ldr	r1, [r4, #32]
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	d030      	beq.n	800a5de <__sflush_r+0x92>
 800a57c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	0759      	lsls	r1, r3, #29
 800a582:	d505      	bpl.n	800a590 <__sflush_r+0x44>
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a58a:	b10b      	cbz	r3, 800a590 <__sflush_r+0x44>
 800a58c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	2300      	movs	r3, #0
 800a592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a594:	6a21      	ldr	r1, [r4, #32]
 800a596:	4628      	mov	r0, r5
 800a598:	47b0      	blx	r6
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	d106      	bne.n	800a5ae <__sflush_r+0x62>
 800a5a0:	6829      	ldr	r1, [r5, #0]
 800a5a2:	291d      	cmp	r1, #29
 800a5a4:	d82b      	bhi.n	800a5fe <__sflush_r+0xb2>
 800a5a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a650 <__sflush_r+0x104>)
 800a5a8:	40ca      	lsrs	r2, r1
 800a5aa:	07d6      	lsls	r6, r2, #31
 800a5ac:	d527      	bpl.n	800a5fe <__sflush_r+0xb2>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	6062      	str	r2, [r4, #4]
 800a5b2:	04d9      	lsls	r1, r3, #19
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	d504      	bpl.n	800a5c4 <__sflush_r+0x78>
 800a5ba:	1c42      	adds	r2, r0, #1
 800a5bc:	d101      	bne.n	800a5c2 <__sflush_r+0x76>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	b903      	cbnz	r3, 800a5c4 <__sflush_r+0x78>
 800a5c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5c6:	602f      	str	r7, [r5, #0]
 800a5c8:	b1b9      	cbz	r1, 800a5fa <__sflush_r+0xae>
 800a5ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	d002      	beq.n	800a5d8 <__sflush_r+0x8c>
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f7ff f9fe 	bl	80099d4 <_free_r>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5dc:	e00d      	b.n	800a5fa <__sflush_r+0xae>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b0      	blx	r6
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	1c50      	adds	r0, r2, #1
 800a5e8:	d1c9      	bne.n	800a57e <__sflush_r+0x32>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0c6      	beq.n	800a57e <__sflush_r+0x32>
 800a5f0:	2b1d      	cmp	r3, #29
 800a5f2:	d001      	beq.n	800a5f8 <__sflush_r+0xac>
 800a5f4:	2b16      	cmp	r3, #22
 800a5f6:	d11e      	bne.n	800a636 <__sflush_r+0xea>
 800a5f8:	602f      	str	r7, [r5, #0]
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e022      	b.n	800a644 <__sflush_r+0xf8>
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a602:	b21b      	sxth	r3, r3
 800a604:	e01b      	b.n	800a63e <__sflush_r+0xf2>
 800a606:	690f      	ldr	r7, [r1, #16]
 800a608:	2f00      	cmp	r7, #0
 800a60a:	d0f6      	beq.n	800a5fa <__sflush_r+0xae>
 800a60c:	0793      	lsls	r3, r2, #30
 800a60e:	680e      	ldr	r6, [r1, #0]
 800a610:	bf08      	it	eq
 800a612:	694b      	ldreq	r3, [r1, #20]
 800a614:	600f      	str	r7, [r1, #0]
 800a616:	bf18      	it	ne
 800a618:	2300      	movne	r3, #0
 800a61a:	eba6 0807 	sub.w	r8, r6, r7
 800a61e:	608b      	str	r3, [r1, #8]
 800a620:	f1b8 0f00 	cmp.w	r8, #0
 800a624:	dde9      	ble.n	800a5fa <__sflush_r+0xae>
 800a626:	6a21      	ldr	r1, [r4, #32]
 800a628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a62a:	4643      	mov	r3, r8
 800a62c:	463a      	mov	r2, r7
 800a62e:	4628      	mov	r0, r5
 800a630:	47b0      	blx	r6
 800a632:	2800      	cmp	r0, #0
 800a634:	dc08      	bgt.n	800a648 <__sflush_r+0xfc>
 800a636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a648:	4407      	add	r7, r0
 800a64a:	eba8 0800 	sub.w	r8, r8, r0
 800a64e:	e7e7      	b.n	800a620 <__sflush_r+0xd4>
 800a650:	20400001 	.word	0x20400001

0800a654 <_fflush_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	690b      	ldr	r3, [r1, #16]
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	b913      	cbnz	r3, 800a664 <_fflush_r+0x10>
 800a65e:	2500      	movs	r5, #0
 800a660:	4628      	mov	r0, r5
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	b118      	cbz	r0, 800a66e <_fflush_r+0x1a>
 800a666:	6a03      	ldr	r3, [r0, #32]
 800a668:	b90b      	cbnz	r3, 800a66e <_fflush_r+0x1a>
 800a66a:	f7fe f9cf 	bl	8008a0c <__sinit>
 800a66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0f3      	beq.n	800a65e <_fflush_r+0xa>
 800a676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a678:	07d0      	lsls	r0, r2, #31
 800a67a:	d404      	bmi.n	800a686 <_fflush_r+0x32>
 800a67c:	0599      	lsls	r1, r3, #22
 800a67e:	d402      	bmi.n	800a686 <_fflush_r+0x32>
 800a680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a682:	f7fe fbbe 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800a686:	4628      	mov	r0, r5
 800a688:	4621      	mov	r1, r4
 800a68a:	f7ff ff5f 	bl	800a54c <__sflush_r>
 800a68e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a690:	07da      	lsls	r2, r3, #31
 800a692:	4605      	mov	r5, r0
 800a694:	d4e4      	bmi.n	800a660 <_fflush_r+0xc>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	059b      	lsls	r3, r3, #22
 800a69a:	d4e1      	bmi.n	800a660 <_fflush_r+0xc>
 800a69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a69e:	f7fe fbb1 	bl	8008e04 <__retarget_lock_release_recursive>
 800a6a2:	e7dd      	b.n	800a660 <_fflush_r+0xc>

0800a6a4 <__swhatbuf_r>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	b096      	sub	sp, #88	@ 0x58
 800a6b0:	4615      	mov	r5, r2
 800a6b2:	461e      	mov	r6, r3
 800a6b4:	da0d      	bge.n	800a6d2 <__swhatbuf_r+0x2e>
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6bc:	f04f 0100 	mov.w	r1, #0
 800a6c0:	bf14      	ite	ne
 800a6c2:	2340      	movne	r3, #64	@ 0x40
 800a6c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	6031      	str	r1, [r6, #0]
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	b016      	add	sp, #88	@ 0x58
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
 800a6d2:	466a      	mov	r2, sp
 800a6d4:	f000 f848 	bl	800a768 <_fstat_r>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	dbec      	blt.n	800a6b6 <__swhatbuf_r+0x12>
 800a6dc:	9901      	ldr	r1, [sp, #4]
 800a6de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6e6:	4259      	negs	r1, r3
 800a6e8:	4159      	adcs	r1, r3
 800a6ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ee:	e7eb      	b.n	800a6c8 <__swhatbuf_r+0x24>

0800a6f0 <__smakebuf_r>:
 800a6f0:	898b      	ldrh	r3, [r1, #12]
 800a6f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6f4:	079d      	lsls	r5, r3, #30
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	d507      	bpl.n	800a70c <__smakebuf_r+0x1c>
 800a6fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	2301      	movs	r3, #1
 800a706:	6163      	str	r3, [r4, #20]
 800a708:	b003      	add	sp, #12
 800a70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a70c:	ab01      	add	r3, sp, #4
 800a70e:	466a      	mov	r2, sp
 800a710:	f7ff ffc8 	bl	800a6a4 <__swhatbuf_r>
 800a714:	9f00      	ldr	r7, [sp, #0]
 800a716:	4605      	mov	r5, r0
 800a718:	4639      	mov	r1, r7
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7ff f9ce 	bl	8009abc <_malloc_r>
 800a720:	b948      	cbnz	r0, 800a736 <__smakebuf_r+0x46>
 800a722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a726:	059a      	lsls	r2, r3, #22
 800a728:	d4ee      	bmi.n	800a708 <__smakebuf_r+0x18>
 800a72a:	f023 0303 	bic.w	r3, r3, #3
 800a72e:	f043 0302 	orr.w	r3, r3, #2
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	e7e2      	b.n	800a6fc <__smakebuf_r+0xc>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	6020      	str	r0, [r4, #0]
 800a73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a746:	b15b      	cbz	r3, 800a760 <__smakebuf_r+0x70>
 800a748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a74c:	4630      	mov	r0, r6
 800a74e:	f000 f81d 	bl	800a78c <_isatty_r>
 800a752:	b128      	cbz	r0, 800a760 <__smakebuf_r+0x70>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	f043 0301 	orr.w	r3, r3, #1
 800a75e:	81a3      	strh	r3, [r4, #12]
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	431d      	orrs	r5, r3
 800a764:	81a5      	strh	r5, [r4, #12]
 800a766:	e7cf      	b.n	800a708 <__smakebuf_r+0x18>

0800a768 <_fstat_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	@ (800a788 <_fstat_r+0x20>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	4611      	mov	r1, r2
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	f7f7 f8d7 	bl	8001928 <_fstat>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	d102      	bne.n	800a784 <_fstat_r+0x1c>
 800a77e:	682b      	ldr	r3, [r5, #0]
 800a780:	b103      	cbz	r3, 800a784 <_fstat_r+0x1c>
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	bd38      	pop	{r3, r4, r5, pc}
 800a786:	bf00      	nop
 800a788:	24001434 	.word	0x24001434

0800a78c <_isatty_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d06      	ldr	r5, [pc, #24]	@ (800a7a8 <_isatty_r+0x1c>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	f7f7 f8d6 	bl	8001948 <_isatty>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_isatty_r+0x1a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_isatty_r+0x1a>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	24001434 	.word	0x24001434

0800a7ac <_sbrk_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d06      	ldr	r5, [pc, #24]	@ (800a7c8 <_sbrk_r+0x1c>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	f7f7 f8de 	bl	8001978 <_sbrk>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_sbrk_r+0x1a>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_sbrk_r+0x1a>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	24001434 	.word	0x24001434

0800a7cc <memcpy>:
 800a7cc:	440a      	add	r2, r1
 800a7ce:	4291      	cmp	r1, r2
 800a7d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d4:	d100      	bne.n	800a7d8 <memcpy+0xc>
 800a7d6:	4770      	bx	lr
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	d1f9      	bne.n	800a7da <memcpy+0xe>
 800a7e6:	bd10      	pop	{r4, pc}

0800a7e8 <__assert_func>:
 800a7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ea:	4614      	mov	r4, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <__assert_func+0x2c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	68d8      	ldr	r0, [r3, #12]
 800a7f6:	b14c      	cbz	r4, 800a80c <__assert_func+0x24>
 800a7f8:	4b07      	ldr	r3, [pc, #28]	@ (800a818 <__assert_func+0x30>)
 800a7fa:	9100      	str	r1, [sp, #0]
 800a7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a800:	4906      	ldr	r1, [pc, #24]	@ (800a81c <__assert_func+0x34>)
 800a802:	462b      	mov	r3, r5
 800a804:	f000 f842 	bl	800a88c <fiprintf>
 800a808:	f000 f852 	bl	800a8b0 <abort>
 800a80c:	4b04      	ldr	r3, [pc, #16]	@ (800a820 <__assert_func+0x38>)
 800a80e:	461c      	mov	r4, r3
 800a810:	e7f3      	b.n	800a7fa <__assert_func+0x12>
 800a812:	bf00      	nop
 800a814:	24000020 	.word	0x24000020
 800a818:	0800ab69 	.word	0x0800ab69
 800a81c:	0800ab76 	.word	0x0800ab76
 800a820:	0800aba4 	.word	0x0800aba4

0800a824 <_calloc_r>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	fba1 5402 	umull	r5, r4, r1, r2
 800a82a:	b934      	cbnz	r4, 800a83a <_calloc_r+0x16>
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7ff f945 	bl	8009abc <_malloc_r>
 800a832:	4606      	mov	r6, r0
 800a834:	b928      	cbnz	r0, 800a842 <_calloc_r+0x1e>
 800a836:	4630      	mov	r0, r6
 800a838:	bd70      	pop	{r4, r5, r6, pc}
 800a83a:	220c      	movs	r2, #12
 800a83c:	6002      	str	r2, [r0, #0]
 800a83e:	2600      	movs	r6, #0
 800a840:	e7f9      	b.n	800a836 <_calloc_r+0x12>
 800a842:	462a      	mov	r2, r5
 800a844:	4621      	mov	r1, r4
 800a846:	f7fe fa5f 	bl	8008d08 <memset>
 800a84a:	e7f4      	b.n	800a836 <_calloc_r+0x12>

0800a84c <__ascii_mbtowc>:
 800a84c:	b082      	sub	sp, #8
 800a84e:	b901      	cbnz	r1, 800a852 <__ascii_mbtowc+0x6>
 800a850:	a901      	add	r1, sp, #4
 800a852:	b142      	cbz	r2, 800a866 <__ascii_mbtowc+0x1a>
 800a854:	b14b      	cbz	r3, 800a86a <__ascii_mbtowc+0x1e>
 800a856:	7813      	ldrb	r3, [r2, #0]
 800a858:	600b      	str	r3, [r1, #0]
 800a85a:	7812      	ldrb	r2, [r2, #0]
 800a85c:	1e10      	subs	r0, r2, #0
 800a85e:	bf18      	it	ne
 800a860:	2001      	movne	r0, #1
 800a862:	b002      	add	sp, #8
 800a864:	4770      	bx	lr
 800a866:	4610      	mov	r0, r2
 800a868:	e7fb      	b.n	800a862 <__ascii_mbtowc+0x16>
 800a86a:	f06f 0001 	mvn.w	r0, #1
 800a86e:	e7f8      	b.n	800a862 <__ascii_mbtowc+0x16>

0800a870 <__ascii_wctomb>:
 800a870:	4603      	mov	r3, r0
 800a872:	4608      	mov	r0, r1
 800a874:	b141      	cbz	r1, 800a888 <__ascii_wctomb+0x18>
 800a876:	2aff      	cmp	r2, #255	@ 0xff
 800a878:	d904      	bls.n	800a884 <__ascii_wctomb+0x14>
 800a87a:	228a      	movs	r2, #138	@ 0x8a
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	f04f 30ff 	mov.w	r0, #4294967295
 800a882:	4770      	bx	lr
 800a884:	700a      	strb	r2, [r1, #0]
 800a886:	2001      	movs	r0, #1
 800a888:	4770      	bx	lr
	...

0800a88c <fiprintf>:
 800a88c:	b40e      	push	{r1, r2, r3}
 800a88e:	b503      	push	{r0, r1, lr}
 800a890:	4601      	mov	r1, r0
 800a892:	ab03      	add	r3, sp, #12
 800a894:	4805      	ldr	r0, [pc, #20]	@ (800a8ac <fiprintf+0x20>)
 800a896:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	9301      	str	r3, [sp, #4]
 800a89e:	f7ff fd3d 	bl	800a31c <_vfiprintf_r>
 800a8a2:	b002      	add	sp, #8
 800a8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a8:	b003      	add	sp, #12
 800a8aa:	4770      	bx	lr
 800a8ac:	24000020 	.word	0x24000020

0800a8b0 <abort>:
 800a8b0:	b508      	push	{r3, lr}
 800a8b2:	2006      	movs	r0, #6
 800a8b4:	f000 f82c 	bl	800a910 <raise>
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f7f6 ffe5 	bl	8001888 <_exit>

0800a8be <_raise_r>:
 800a8be:	291f      	cmp	r1, #31
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	d904      	bls.n	800a8d2 <_raise_r+0x14>
 800a8c8:	2316      	movs	r3, #22
 800a8ca:	6003      	str	r3, [r0, #0]
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8d4:	b112      	cbz	r2, 800a8dc <_raise_r+0x1e>
 800a8d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8da:	b94b      	cbnz	r3, 800a8f0 <_raise_r+0x32>
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 f831 	bl	800a944 <_getpid_r>
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	4601      	mov	r1, r0
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ec:	f000 b818 	b.w	800a920 <_kill_r>
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d00a      	beq.n	800a90a <_raise_r+0x4c>
 800a8f4:	1c59      	adds	r1, r3, #1
 800a8f6:	d103      	bne.n	800a900 <_raise_r+0x42>
 800a8f8:	2316      	movs	r3, #22
 800a8fa:	6003      	str	r3, [r0, #0]
 800a8fc:	2001      	movs	r0, #1
 800a8fe:	e7e7      	b.n	800a8d0 <_raise_r+0x12>
 800a900:	2100      	movs	r1, #0
 800a902:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a906:	4620      	mov	r0, r4
 800a908:	4798      	blx	r3
 800a90a:	2000      	movs	r0, #0
 800a90c:	e7e0      	b.n	800a8d0 <_raise_r+0x12>
	...

0800a910 <raise>:
 800a910:	4b02      	ldr	r3, [pc, #8]	@ (800a91c <raise+0xc>)
 800a912:	4601      	mov	r1, r0
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	f7ff bfd2 	b.w	800a8be <_raise_r>
 800a91a:	bf00      	nop
 800a91c:	24000020 	.word	0x24000020

0800a920 <_kill_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	@ (800a940 <_kill_r+0x20>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	f7f6 ff9b 	bl	8001868 <_kill>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	d102      	bne.n	800a93c <_kill_r+0x1c>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	b103      	cbz	r3, 800a93c <_kill_r+0x1c>
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	24001434 	.word	0x24001434

0800a944 <_getpid_r>:
 800a944:	f7f6 bf88 	b.w	8001858 <_getpid>

0800a948 <_init>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr

0800a954 <_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr
