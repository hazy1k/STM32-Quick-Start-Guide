
27.MALLOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f34  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080091d8  080091d8  0000a1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009584  08009584  0000a584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800958c  0800958c  0000a58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08009594  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  240001d8  0800976c  0000b1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003f0  0800976c  0000b3f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012b55  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b60  00000000  00000000  0001dd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ca0  00000000  00000000  000208c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000989  00000000  00000000  00021560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b0f2  00000000  00000000  00021ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000188d0  00000000  00000000  0005cfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017352d  00000000  00000000  000758ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e8dd8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f28  00000000  00000000  001e8e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001ecd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080091bc 	.word	0x080091bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080091bc 	.word	0x080091bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_BEEP_GPIO_Init+0x60>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 80006f4:	f001 fd06 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006f8:	2310      	movs	r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_BEEP_GPIO_Init+0x64>)
 800070e:	f001 fb49 	bl	8001da4 <HAL_GPIO_Init>
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58021000 	.word	0x58021000

08000724 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_KEY_GPIO_Init+0x68>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	480a      	ldr	r0, [pc, #40]	@ (8000790 <MX_KEY_GPIO_Init+0x6c>)
 8000768:	f001 fb1c 	bl	8001da4 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800076c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_KEY_GPIO_Init+0x6c>)
 8000780:	f001 fb10 	bl	8001da4 <HAL_GPIO_Init>
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400
 8000790:	58020000 	.word	0x58020000

08000794 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4a22      	ldr	r2, [pc, #136]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_LED_GPIO_Init+0xa8>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2160      	movs	r1, #96	@ 0x60
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_LED_GPIO_Init+0xac>)
 80007ec:	f001 fc8a 	bl	8002104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_LED_GPIO_Init+0xb0>)
 80007f6:	f001 fc85 	bl	8002104 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007fa:	2360      	movs	r3, #96	@ 0x60
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <MX_LED_GPIO_Init+0xac>)
 8000812:	f001 fac7 	bl	8001da4 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000816:	2310      	movs	r3, #16
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_LED_GPIO_Init+0xb0>)
 800082e:	f001 fab9 	bl	8001da4 <HAL_GPIO_Init>
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400
 8000840:	58021000 	.word	0x58021000
 8000844:	58020400 	.word	0x58020400

08000848 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800084c:	f7ff ffa2 	bl	8000794 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000850:	f7ff ff34 	bl	80006bc <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000854:	f7ff ff66 	bl	8000724 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000858:	f000 fa96 	bl	8000d88 <MX_USART1_UART_Init>
	// MX_IWDG1_Init(); // 溢出时间约1s
	// MX_TIM6_Init(); // 溢出时间约500ms
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <main>:

const char *SRAM_NAME_BUF[SRAMBANK] = {"SRAMIN", "SRAM12", "SRAM4", "SRAMDTCM", "SRAMITCM"};


int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  //MPU_Config();
  HAL_Init();
 8000864:	f000 fb8c 	bl	8000f80 <HAL_Init>
  SystemClock_Config();
 8000868:	f000 f806 	bl	8000878 <SystemClock_Config>
  PeriphCommonClock_Config();
 800086c:	f000 f884 	bl	8000978 <PeriphCommonClock_Config>
  bsp_init();
 8000870:	f7ff ffea 	bl	8000848 <bsp_init>
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <main+0x14>

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	224c      	movs	r2, #76	@ 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f006 fde5 	bl	8007456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f006 fddf 	bl	8007456 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000898:	2002      	movs	r0, #2
 800089a:	f001 fc71 	bl	8002180 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <SystemClock_Config+0xf8>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a32      	ldr	r2, [pc, #200]	@ (8000970 <SystemClock_Config+0xf8>)
 80008a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <SystemClock_Config+0xf8>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <SystemClock_Config+0xfc>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <SystemClock_Config+0xfc>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <SystemClock_Config+0xfc>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <SystemClock_Config+0xf8>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80008e0:	230b      	movs	r3, #11
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ee:	2340      	movs	r3, #64	@ 0x40
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f2:	2301      	movs	r3, #1
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000902:	23f0      	movs	r3, #240	@ 0xf0
 8000904:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000912:	2308      	movs	r3, #8
 8000914:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000916:	2300      	movs	r3, #0
 8000918:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fc66 	bl	80021f4 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800092e:	f000 f841 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	@ 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093e:	2308      	movs	r3, #8
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000942:	2340      	movs	r3, #64	@ 0x40
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000946:	2340      	movs	r3, #64	@ 0x40
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000950:	2340      	movs	r3, #64	@ 0x40
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2104      	movs	r1, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f002 f8a5 	bl	8002aa8 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000964:	f000 f826 	bl	80009b4 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	@ 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58024800 	.word	0x58024800
 8000974:	58000400 	.word	0x58000400

08000978 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0b0      	sub	sp, #192	@ 0xc0
 800097c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	22c0      	movs	r2, #192	@ 0xc0
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f006 fd66 	bl	8007456 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800098a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000996:	2300      	movs	r3, #0
 8000998:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f002 fc0f 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80009a8:	f000 f804 	bl	80009b4 <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	37c0      	adds	r7, #192	@ 0xc0
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_MspInit+0x30>)
 80009c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009cc:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_MspInit+0x30>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_MspInit+0x30>)
 80009d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	58024400 	.word	0x58024400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 fb0b 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <WWDG_IRQHandler+0x10>)
 8000a5a:	f005 ff97 	bl	800698c <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */
  /* USER CODE END WWDG_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2400028c 	.word	0x2400028c

08000a68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f001 fb62 	bl	8002136 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <USART1_IRQHandler+0x10>)
 8000a7e:	f004 faa9 	bl	8004fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	240001f8 	.word	0x240001f8

08000a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return 1;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_kill>:

int _kill(int pid, int sig)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa6:	f006 fd29 	bl	80074fc <__errno>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2216      	movs	r2, #22
 8000aae:	601a      	str	r2, [r3, #0]
  return -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_exit>:

void _exit (int status)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffe7 	bl	8000a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ace:	bf00      	nop
 8000ad0:	e7fd      	b.n	8000ace <_exit+0x12>

08000ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e00a      	b.n	8000afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae4:	f3af 8000 	nop.w
 8000ae8:	4601      	mov	r1, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	b2ca      	uxtb	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf0      	blt.n	8000ae4 <_read+0x12>
  }

  return len;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e009      	b.n	8000b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f9ec 	bl	8000f04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dbf1      	blt.n	8000b1e <_write+0x12>
  }
  return len;
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_close>:

int _close(int file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_isatty>:

int _isatty(int file)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f006 fc8e 	bl	80074fc <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24080000 	.word	0x24080000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	240001f4 	.word	0x240001f4
 8000c14:	240003f0 	.word	0x240003f0

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b43      	ldr	r3, [pc, #268]	@ (8000d2c <SystemInit+0x114>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a42      	ldr	r2, [pc, #264]	@ (8000d2c <SystemInit+0x114>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c2c:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <SystemInit+0x118>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	d807      	bhi.n	8000c48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c38:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <SystemInit+0x118>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 030f 	bic.w	r3, r3, #15
 8000c40:	4a3b      	ldr	r2, [pc, #236]	@ (8000d30 <SystemInit+0x118>)
 8000c42:	f043 0307 	orr.w	r3, r3, #7
 8000c46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c48:	4b3a      	ldr	r3, [pc, #232]	@ (8000d34 <SystemInit+0x11c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a39      	ldr	r2, [pc, #228]	@ (8000d34 <SystemInit+0x11c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c54:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <SystemInit+0x11c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c5a:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <SystemInit+0x11c>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4935      	ldr	r1, [pc, #212]	@ (8000d34 <SystemInit+0x11c>)
 8000c60:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <SystemInit+0x120>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <SystemInit+0x118>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <SystemInit+0x118>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 030f 	bic.w	r3, r3, #15
 8000c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d30 <SystemInit+0x118>)
 8000c7c:	f043 0307 	orr.w	r3, r3, #7
 8000c80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <SystemInit+0x11c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <SystemInit+0x11c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <SystemInit+0x11c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <SystemInit+0x11c>)
 8000c96:	4a29      	ldr	r2, [pc, #164]	@ (8000d3c <SystemInit+0x124>)
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <SystemInit+0x11c>)
 8000c9c:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <SystemInit+0x128>)
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <SystemInit+0x11c>)
 8000ca2:	4a28      	ldr	r2, [pc, #160]	@ (8000d44 <SystemInit+0x12c>)
 8000ca4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <SystemInit+0x11c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <SystemInit+0x11c>)
 8000cae:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <SystemInit+0x12c>)
 8000cb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <SystemInit+0x11c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <SystemInit+0x11c>)
 8000cba:	4a22      	ldr	r2, [pc, #136]	@ (8000d44 <SystemInit+0x12c>)
 8000cbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <SystemInit+0x11c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <SystemInit+0x11c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <SystemInit+0x11c>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <SystemInit+0x11c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <SystemInit+0x130>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <SystemInit+0x134>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ce2:	d202      	bcs.n	8000cea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <SystemInit+0x138>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <SystemInit+0x11c>)
 8000cec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d113      	bne.n	8000d20 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <SystemInit+0x11c>)
 8000cfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <SystemInit+0x11c>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <SystemInit+0x13c>)
 8000d0a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d0e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <SystemInit+0x11c>)
 8000d12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <SystemInit+0x11c>)
 8000d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	52002000 	.word	0x52002000
 8000d34:	58024400 	.word	0x58024400
 8000d38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d3c:	02020200 	.word	0x02020200
 8000d40:	01ff0000 	.word	0x01ff0000
 8000d44:	01010280 	.word	0x01010280
 8000d48:	5c001000 	.word	0x5c001000
 8000d4c:	ffff0000 	.word	0xffff0000
 8000d50:	51008108 	.word	0x51008108
 8000d54:	52004000 	.word	0x52004000

08000d58 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <ExitRun0Mode+0x2c>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <ExitRun0Mode+0x2c>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d68:	bf00      	nop
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <ExitRun0Mode+0x2c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f9      	beq.n	8000d6a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	58024800 	.word	0x58024800

08000d88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000d8e:	4a23      	ldr	r2, [pc, #140]	@ (8000e1c <MX_USART1_UART_Init+0x94>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000dd2:	f004 f821 	bl	8004e18 <HAL_UART_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ddc:	f7ff fdea 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de0:	2100      	movs	r1, #0
 8000de2:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000de4:	f005 fd08 	bl	80067f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dee:	f7ff fde1 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4808      	ldr	r0, [pc, #32]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000df6:	f005 fd3d 	bl	8006874 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e00:	f7ff fdd8 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_USART1_UART_Init+0x90>)
 8000e06:	f005 fcbe 	bl	8006786 <HAL_UARTEx_DisableFifoMode>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f7ff fdd0 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	240001f8 	.word	0x240001f8
 8000e1c:	40011000 	.word	0x40011000

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0ba      	sub	sp, #232	@ 0xe8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	22c0      	movs	r2, #192	@ 0xc0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f006 fb08 	bl	8007456 <memset>
  if(uartHandle->Instance==USART1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef8 <HAL_UART_MspInit+0xd8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d14e      	bne.n	8000eee <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e50:	f04f 0201 	mov.w	r2, #1
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 f9aa 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e72:	f7ff fd9f 	bl	80009b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <HAL_UART_MspInit+0xdc>)
 8000e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <HAL_UART_MspInit+0xdc>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <HAL_UART_MspInit+0xdc>)
 8000e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_UART_MspInit+0xdc>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9a:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <HAL_UART_MspInit+0xdc>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_UART_MspInit+0xdc>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4809      	ldr	r0, [pc, #36]	@ (8000f00 <HAL_UART_MspInit+0xe0>)
 8000eda:	f000 ff63 	bl	8001da4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2025      	movs	r0, #37	@ 0x25
 8000ee4:	f000 f9c5 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee8:	2025      	movs	r0, #37	@ 0x25
 8000eea:	f000 f9dc 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	37e8      	adds	r7, #232	@ 0xe8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020000 	.word	0x58020000

08000f04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f0c:	1d39      	adds	r1, r7, #4
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	2201      	movs	r2, #1
 8000f14:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <__io_putchar+0x20>)
 8000f16:	f003 ffcf 	bl	8004eb8 <HAL_UART_Transmit>
    return ch;
 8000f1a:	687b      	ldr	r3, [r7, #4]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	240001f8 	.word	0x240001f8

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f64 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f2c:	f7ff ff14 	bl	8000d58 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f30:	f7ff fe72 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f36:	490d      	ldr	r1, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f006 fad5 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fc7f 	bl	8000860 <main>
  bx  lr
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f6c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000f70:	08009594 	.word	0x08009594
  ldr r2, =_sbss
 8000f74:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000f78:	240003f0 	.word	0x240003f0

08000f7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC3_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f968 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f8c:	f001 ff42 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_Init+0x68>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	4913      	ldr	r1, [pc, #76]	@ (8000fec <HAL_Init+0x6c>)
 8000f9e:	5ccb      	ldrb	r3, [r1, r3]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_Init+0x68>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <HAL_Init+0x6c>)
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <HAL_Init+0x70>)
 8000fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <HAL_Init+0x74>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f814 	bl	8000ff8 <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e002      	b.n	8000fe0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fda:	f7ff fcf1 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	080091d8 	.word	0x080091d8
 8000ff0:	24000004 	.word	0x24000004
 8000ff4:	24000000 	.word	0x24000000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_InitTick+0x60>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e021      	b.n	8001050 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <HAL_InitTick+0x64>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_InitTick+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f94d 	bl	80012c2 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f917 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_InitTick+0x68>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2400000c 	.word	0x2400000c
 800105c:	24000000 	.word	0x24000000
 8001060:	24000008 	.word	0x24000008

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2400000c 	.word	0x2400000c
 8001088:	240002a0 	.word	0x240002a0

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	240002a0 	.word	0x240002a0

080010a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetREVID+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0c1b      	lsrs	r3, r3, #16
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	5c001000 	.word	0x5c001000

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	05fa0000 	.word	0x05fa0000

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	@ (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	@ (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff40 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff33 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa4 	bl	8001218 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fed2 	bl	800108c <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e2dc      	b.n	80018ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d008      	beq.n	8001312 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e2cd      	b.n	80018ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a76      	ldr	r2, [pc, #472]	@ (80014f0 <HAL_DMA_Abort+0x214>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d04a      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a74      	ldr	r2, [pc, #464]	@ (80014f4 <HAL_DMA_Abort+0x218>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d045      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a73      	ldr	r2, [pc, #460]	@ (80014f8 <HAL_DMA_Abort+0x21c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d040      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a71      	ldr	r2, [pc, #452]	@ (80014fc <HAL_DMA_Abort+0x220>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d03b      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a70      	ldr	r2, [pc, #448]	@ (8001500 <HAL_DMA_Abort+0x224>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d036      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a6e      	ldr	r2, [pc, #440]	@ (8001504 <HAL_DMA_Abort+0x228>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d031      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6d      	ldr	r2, [pc, #436]	@ (8001508 <HAL_DMA_Abort+0x22c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d02c      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a6b      	ldr	r2, [pc, #428]	@ (800150c <HAL_DMA_Abort+0x230>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d027      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6a      	ldr	r2, [pc, #424]	@ (8001510 <HAL_DMA_Abort+0x234>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a68      	ldr	r2, [pc, #416]	@ (8001514 <HAL_DMA_Abort+0x238>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01d      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a67      	ldr	r2, [pc, #412]	@ (8001518 <HAL_DMA_Abort+0x23c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d018      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_DMA_Abort+0x240>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a64      	ldr	r2, [pc, #400]	@ (8001520 <HAL_DMA_Abort+0x244>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d00e      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a62      	ldr	r2, [pc, #392]	@ (8001524 <HAL_DMA_Abort+0x248>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d009      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a61      	ldr	r2, [pc, #388]	@ (8001528 <HAL_DMA_Abort+0x24c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d004      	beq.n	80013b2 <HAL_DMA_Abort+0xd6>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a5f      	ldr	r2, [pc, #380]	@ (800152c <HAL_DMA_Abort+0x250>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_DMA_Abort+0xda>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_Abort+0xdc>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 021e 	bic.w	r2, r2, #30
 80013ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e00a      	b.n	80013fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 020e 	bic.w	r2, r2, #14
 80013f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a3c      	ldr	r2, [pc, #240]	@ (80014f0 <HAL_DMA_Abort+0x214>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d072      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a3a      	ldr	r2, [pc, #232]	@ (80014f4 <HAL_DMA_Abort+0x218>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d06d      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a39      	ldr	r2, [pc, #228]	@ (80014f8 <HAL_DMA_Abort+0x21c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d068      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a37      	ldr	r2, [pc, #220]	@ (80014fc <HAL_DMA_Abort+0x220>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d063      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a36      	ldr	r2, [pc, #216]	@ (8001500 <HAL_DMA_Abort+0x224>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d05e      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a34      	ldr	r2, [pc, #208]	@ (8001504 <HAL_DMA_Abort+0x228>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d059      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <HAL_DMA_Abort+0x22c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d054      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a31      	ldr	r2, [pc, #196]	@ (800150c <HAL_DMA_Abort+0x230>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d04f      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <HAL_DMA_Abort+0x234>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d04a      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2e      	ldr	r2, [pc, #184]	@ (8001514 <HAL_DMA_Abort+0x238>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d045      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2d      	ldr	r2, [pc, #180]	@ (8001518 <HAL_DMA_Abort+0x23c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d040      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <HAL_DMA_Abort+0x240>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d03b      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <HAL_DMA_Abort+0x244>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d036      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <HAL_DMA_Abort+0x248>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d031      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a27      	ldr	r2, [pc, #156]	@ (8001528 <HAL_DMA_Abort+0x24c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d02c      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a25      	ldr	r2, [pc, #148]	@ (800152c <HAL_DMA_Abort+0x250>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d027      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a24      	ldr	r2, [pc, #144]	@ (8001530 <HAL_DMA_Abort+0x254>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d022      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <HAL_DMA_Abort+0x258>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01d      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_DMA_Abort+0x25c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d018      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <HAL_DMA_Abort+0x260>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_DMA_Abort+0x264>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00e      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <HAL_DMA_Abort+0x268>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d009      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <HAL_DMA_Abort+0x26c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d004      	beq.n	80014ea <HAL_DMA_Abort+0x20e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_DMA_Abort+0x270>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d132      	bne.n	8001550 <HAL_DMA_Abort+0x274>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e031      	b.n	8001552 <HAL_DMA_Abort+0x276>
 80014ee:	bf00      	nop
 80014f0:	40020010 	.word	0x40020010
 80014f4:	40020028 	.word	0x40020028
 80014f8:	40020040 	.word	0x40020040
 80014fc:	40020058 	.word	0x40020058
 8001500:	40020070 	.word	0x40020070
 8001504:	40020088 	.word	0x40020088
 8001508:	400200a0 	.word	0x400200a0
 800150c:	400200b8 	.word	0x400200b8
 8001510:	40020410 	.word	0x40020410
 8001514:	40020428 	.word	0x40020428
 8001518:	40020440 	.word	0x40020440
 800151c:	40020458 	.word	0x40020458
 8001520:	40020470 	.word	0x40020470
 8001524:	40020488 	.word	0x40020488
 8001528:	400204a0 	.word	0x400204a0
 800152c:	400204b8 	.word	0x400204b8
 8001530:	58025408 	.word	0x58025408
 8001534:	5802541c 	.word	0x5802541c
 8001538:	58025430 	.word	0x58025430
 800153c:	58025444 	.word	0x58025444
 8001540:	58025458 	.word	0x58025458
 8001544:	5802546c 	.word	0x5802546c
 8001548:	58025480 	.word	0x58025480
 800154c:	58025494 	.word	0x58025494
 8001550:	2300      	movs	r3, #0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001564:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6d      	ldr	r2, [pc, #436]	@ (8001720 <HAL_DMA_Abort+0x444>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d04a      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6b      	ldr	r2, [pc, #428]	@ (8001724 <HAL_DMA_Abort+0x448>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d045      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6a      	ldr	r2, [pc, #424]	@ (8001728 <HAL_DMA_Abort+0x44c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d040      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a68      	ldr	r2, [pc, #416]	@ (800172c <HAL_DMA_Abort+0x450>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d03b      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a67      	ldr	r2, [pc, #412]	@ (8001730 <HAL_DMA_Abort+0x454>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d036      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a65      	ldr	r2, [pc, #404]	@ (8001734 <HAL_DMA_Abort+0x458>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d031      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a64      	ldr	r2, [pc, #400]	@ (8001738 <HAL_DMA_Abort+0x45c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d02c      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a62      	ldr	r2, [pc, #392]	@ (800173c <HAL_DMA_Abort+0x460>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d027      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a61      	ldr	r2, [pc, #388]	@ (8001740 <HAL_DMA_Abort+0x464>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d022      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a5f      	ldr	r2, [pc, #380]	@ (8001744 <HAL_DMA_Abort+0x468>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01d      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001748 <HAL_DMA_Abort+0x46c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d018      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a5c      	ldr	r2, [pc, #368]	@ (800174c <HAL_DMA_Abort+0x470>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001750 <HAL_DMA_Abort+0x474>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00e      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a59      	ldr	r2, [pc, #356]	@ (8001754 <HAL_DMA_Abort+0x478>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d009      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a58      	ldr	r2, [pc, #352]	@ (8001758 <HAL_DMA_Abort+0x47c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d004      	beq.n	8001606 <HAL_DMA_Abort+0x32a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a56      	ldr	r2, [pc, #344]	@ (800175c <HAL_DMA_Abort+0x480>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d108      	bne.n	8001618 <HAL_DMA_Abort+0x33c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e007      	b.n	8001628 <HAL_DMA_Abort+0x34c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001628:	e013      	b.n	8001652 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fd2f 	bl	800108c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d90c      	bls.n	8001652 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e12d      	b.n	80018ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e5      	bne.n	800162a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_DMA_Abort+0x444>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d04a      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <HAL_DMA_Abort+0x448>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d045      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a2c      	ldr	r2, [pc, #176]	@ (8001728 <HAL_DMA_Abort+0x44c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d040      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2a      	ldr	r2, [pc, #168]	@ (800172c <HAL_DMA_Abort+0x450>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d03b      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a29      	ldr	r2, [pc, #164]	@ (8001730 <HAL_DMA_Abort+0x454>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d036      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a27      	ldr	r2, [pc, #156]	@ (8001734 <HAL_DMA_Abort+0x458>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a26      	ldr	r2, [pc, #152]	@ (8001738 <HAL_DMA_Abort+0x45c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d02c      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a24      	ldr	r2, [pc, #144]	@ (800173c <HAL_DMA_Abort+0x460>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d027      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <HAL_DMA_Abort+0x464>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a21      	ldr	r2, [pc, #132]	@ (8001744 <HAL_DMA_Abort+0x468>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01d      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a20      	ldr	r2, [pc, #128]	@ (8001748 <HAL_DMA_Abort+0x46c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d018      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1e      	ldr	r2, [pc, #120]	@ (800174c <HAL_DMA_Abort+0x470>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_DMA_Abort+0x474>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00e      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <HAL_DMA_Abort+0x478>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d009      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <HAL_DMA_Abort+0x47c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_DMA_Abort+0x422>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <HAL_DMA_Abort+0x480>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_DMA_Abort+0x426>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_DMA_Abort+0x428>
 8001702:	2300      	movs	r3, #0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d02b      	beq.n	8001760 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	223f      	movs	r2, #63	@ 0x3f
 8001718:	409a      	lsls	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	e02a      	b.n	8001776 <HAL_DMA_Abort+0x49a>
 8001720:	40020010 	.word	0x40020010
 8001724:	40020028 	.word	0x40020028
 8001728:	40020040 	.word	0x40020040
 800172c:	40020058 	.word	0x40020058
 8001730:	40020070 	.word	0x40020070
 8001734:	40020088 	.word	0x40020088
 8001738:	400200a0 	.word	0x400200a0
 800173c:	400200b8 	.word	0x400200b8
 8001740:	40020410 	.word	0x40020410
 8001744:	40020428 	.word	0x40020428
 8001748:	40020440 	.word	0x40020440
 800174c:	40020458 	.word	0x40020458
 8001750:	40020470 	.word	0x40020470
 8001754:	40020488 	.word	0x40020488
 8001758:	400204a0 	.word	0x400204a0
 800175c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	2201      	movs	r2, #1
 8001770:	409a      	lsls	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <HAL_DMA_Abort+0x5dc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d072      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4d      	ldr	r2, [pc, #308]	@ (80018bc <HAL_DMA_Abort+0x5e0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d06d      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a4c      	ldr	r2, [pc, #304]	@ (80018c0 <HAL_DMA_Abort+0x5e4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d068      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <HAL_DMA_Abort+0x5e8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d063      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a49      	ldr	r2, [pc, #292]	@ (80018c8 <HAL_DMA_Abort+0x5ec>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d05e      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a47      	ldr	r2, [pc, #284]	@ (80018cc <HAL_DMA_Abort+0x5f0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d059      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a46      	ldr	r2, [pc, #280]	@ (80018d0 <HAL_DMA_Abort+0x5f4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d054      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a44      	ldr	r2, [pc, #272]	@ (80018d4 <HAL_DMA_Abort+0x5f8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d04f      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a43      	ldr	r2, [pc, #268]	@ (80018d8 <HAL_DMA_Abort+0x5fc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04a      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a41      	ldr	r2, [pc, #260]	@ (80018dc <HAL_DMA_Abort+0x600>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d045      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a40      	ldr	r2, [pc, #256]	@ (80018e0 <HAL_DMA_Abort+0x604>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d040      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a3e      	ldr	r2, [pc, #248]	@ (80018e4 <HAL_DMA_Abort+0x608>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d03b      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3d      	ldr	r2, [pc, #244]	@ (80018e8 <HAL_DMA_Abort+0x60c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d036      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3b      	ldr	r2, [pc, #236]	@ (80018ec <HAL_DMA_Abort+0x610>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a3a      	ldr	r2, [pc, #232]	@ (80018f0 <HAL_DMA_Abort+0x614>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d02c      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a38      	ldr	r2, [pc, #224]	@ (80018f4 <HAL_DMA_Abort+0x618>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d027      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a37      	ldr	r2, [pc, #220]	@ (80018f8 <HAL_DMA_Abort+0x61c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d022      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a35      	ldr	r2, [pc, #212]	@ (80018fc <HAL_DMA_Abort+0x620>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01d      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a34      	ldr	r2, [pc, #208]	@ (8001900 <HAL_DMA_Abort+0x624>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d018      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a32      	ldr	r2, [pc, #200]	@ (8001904 <HAL_DMA_Abort+0x628>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a31      	ldr	r2, [pc, #196]	@ (8001908 <HAL_DMA_Abort+0x62c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2f      	ldr	r2, [pc, #188]	@ (800190c <HAL_DMA_Abort+0x630>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2e      	ldr	r2, [pc, #184]	@ (8001910 <HAL_DMA_Abort+0x634>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d004      	beq.n	8001866 <HAL_DMA_Abort+0x58a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2c      	ldr	r2, [pc, #176]	@ (8001914 <HAL_DMA_Abort+0x638>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_DMA_Abort+0x58e>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_DMA_Abort+0x590>
 800186a:	2300      	movs	r3, #0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d015      	beq.n	800189c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001878:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800188c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001890:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800189a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40020010 	.word	0x40020010
 80018bc:	40020028 	.word	0x40020028
 80018c0:	40020040 	.word	0x40020040
 80018c4:	40020058 	.word	0x40020058
 80018c8:	40020070 	.word	0x40020070
 80018cc:	40020088 	.word	0x40020088
 80018d0:	400200a0 	.word	0x400200a0
 80018d4:	400200b8 	.word	0x400200b8
 80018d8:	40020410 	.word	0x40020410
 80018dc:	40020428 	.word	0x40020428
 80018e0:	40020440 	.word	0x40020440
 80018e4:	40020458 	.word	0x40020458
 80018e8:	40020470 	.word	0x40020470
 80018ec:	40020488 	.word	0x40020488
 80018f0:	400204a0 	.word	0x400204a0
 80018f4:	400204b8 	.word	0x400204b8
 80018f8:	58025408 	.word	0x58025408
 80018fc:	5802541c 	.word	0x5802541c
 8001900:	58025430 	.word	0x58025430
 8001904:	58025444 	.word	0x58025444
 8001908:	58025458 	.word	0x58025458
 800190c:	5802546c 	.word	0x5802546c
 8001910:	58025480 	.word	0x58025480
 8001914:	58025494 	.word	0x58025494

08001918 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e237      	b.n	8001d9a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e22c      	b.n	8001d9a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab8 <HAL_DMA_Abort_IT+0x1a0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d04a      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5b      	ldr	r2, [pc, #364]	@ (8001abc <HAL_DMA_Abort_IT+0x1a4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d045      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a59      	ldr	r2, [pc, #356]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1a8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d040      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1ac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d03b      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a56      	ldr	r2, [pc, #344]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1b0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d036      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a55      	ldr	r2, [pc, #340]	@ (8001acc <HAL_DMA_Abort_IT+0x1b4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d031      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a53      	ldr	r2, [pc, #332]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1b8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d02c      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1bc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d027      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a50      	ldr	r2, [pc, #320]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1c0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d022      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a4f      	ldr	r2, [pc, #316]	@ (8001adc <HAL_DMA_Abort_IT+0x1c4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d01d      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1c8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d018      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1cc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae8 <HAL_DMA_Abort_IT+0x1d0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00e      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a49      	ldr	r2, [pc, #292]	@ (8001aec <HAL_DMA_Abort_IT+0x1d4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a47      	ldr	r2, [pc, #284]	@ (8001af0 <HAL_DMA_Abort_IT+0x1d8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_DMA_Abort_IT+0xc8>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a46      	ldr	r2, [pc, #280]	@ (8001af4 <HAL_DMA_Abort_IT+0x1dc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Abort_IT+0xcc>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_DMA_Abort_IT+0xce>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8086 	beq.w	8001af8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2204      	movs	r2, #4
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab8 <HAL_DMA_Abort_IT+0x1a0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d04a      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2e      	ldr	r2, [pc, #184]	@ (8001abc <HAL_DMA_Abort_IT+0x1a4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d045      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1a8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d040      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1ac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d03b      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1b0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d036      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a28      	ldr	r2, [pc, #160]	@ (8001acc <HAL_DMA_Abort_IT+0x1b4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a26      	ldr	r2, [pc, #152]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1b8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02c      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a25      	ldr	r2, [pc, #148]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1bc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d027      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1c0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d022      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a22      	ldr	r2, [pc, #136]	@ (8001adc <HAL_DMA_Abort_IT+0x1c4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01d      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1c8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d018      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1cc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_DMA_Abort_IT+0x1d0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <HAL_DMA_Abort_IT+0x1d4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1a      	ldr	r2, [pc, #104]	@ (8001af0 <HAL_DMA_Abort_IT+0x1d8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x17c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_DMA_Abort_IT+0x1dc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d108      	bne.n	8001aa6 <HAL_DMA_Abort_IT+0x18e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e178      	b.n	8001d98 <HAL_DMA_Abort_IT+0x480>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e16f      	b.n	8001d98 <HAL_DMA_Abort_IT+0x480>
 8001ab8:	40020010 	.word	0x40020010
 8001abc:	40020028 	.word	0x40020028
 8001ac0:	40020040 	.word	0x40020040
 8001ac4:	40020058 	.word	0x40020058
 8001ac8:	40020070 	.word	0x40020070
 8001acc:	40020088 	.word	0x40020088
 8001ad0:	400200a0 	.word	0x400200a0
 8001ad4:	400200b8 	.word	0x400200b8
 8001ad8:	40020410 	.word	0x40020410
 8001adc:	40020428 	.word	0x40020428
 8001ae0:	40020440 	.word	0x40020440
 8001ae4:	40020458 	.word	0x40020458
 8001ae8:	40020470 	.word	0x40020470
 8001aec:	40020488 	.word	0x40020488
 8001af0:	400204a0 	.word	0x400204a0
 8001af4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020e 	bic.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a6c      	ldr	r2, [pc, #432]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3a8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d04a      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6b      	ldr	r2, [pc, #428]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3ac>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d045      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a69      	ldr	r2, [pc, #420]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3b0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d040      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a68      	ldr	r2, [pc, #416]	@ (8001ccc <HAL_DMA_Abort_IT+0x3b4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d03b      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a66      	ldr	r2, [pc, #408]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3b8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d036      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a65      	ldr	r2, [pc, #404]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3bc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d031      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a63      	ldr	r2, [pc, #396]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3c0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02c      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a62      	ldr	r2, [pc, #392]	@ (8001cdc <HAL_DMA_Abort_IT+0x3c4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d027      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a60      	ldr	r2, [pc, #384]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3c8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d022      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a5f      	ldr	r2, [pc, #380]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3cc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d01d      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3d0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d018      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cec <HAL_DMA_Abort_IT+0x3d4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf0 <HAL_DMA_Abort_IT+0x3d8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00e      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <HAL_DMA_Abort_IT+0x3dc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a57      	ldr	r2, [pc, #348]	@ (8001cf8 <HAL_DMA_Abort_IT+0x3e0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d004      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x290>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a56      	ldr	r2, [pc, #344]	@ (8001cfc <HAL_DMA_Abort_IT+0x3e4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d108      	bne.n	8001bba <HAL_DMA_Abort_IT+0x2a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e007      	b.n	8001bca <HAL_DMA_Abort_IT+0x2b2>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3a8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d072      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d06d      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a39      	ldr	r2, [pc, #228]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3b0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d068      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a37      	ldr	r2, [pc, #220]	@ (8001ccc <HAL_DMA_Abort_IT+0x3b4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d063      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a36      	ldr	r2, [pc, #216]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3b8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a34      	ldr	r2, [pc, #208]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3bc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d059      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a33      	ldr	r2, [pc, #204]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3c0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d054      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a31      	ldr	r2, [pc, #196]	@ (8001cdc <HAL_DMA_Abort_IT+0x3c4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04f      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a30      	ldr	r2, [pc, #192]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3c8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d04a      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3cc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d045      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3d0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d040      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cec <HAL_DMA_Abort_IT+0x3d4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d03b      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf0 <HAL_DMA_Abort_IT+0x3d8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a28      	ldr	r2, [pc, #160]	@ (8001cf4 <HAL_DMA_Abort_IT+0x3dc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a27      	ldr	r2, [pc, #156]	@ (8001cf8 <HAL_DMA_Abort_IT+0x3e0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d02c      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	@ (8001cfc <HAL_DMA_Abort_IT+0x3e4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d027      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a24      	ldr	r2, [pc, #144]	@ (8001d00 <HAL_DMA_Abort_IT+0x3e8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a22      	ldr	r2, [pc, #136]	@ (8001d04 <HAL_DMA_Abort_IT+0x3ec>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <HAL_DMA_Abort_IT+0x3f0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <HAL_DMA_Abort_IT+0x3f4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1e      	ldr	r2, [pc, #120]	@ (8001d10 <HAL_DMA_Abort_IT+0x3f8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <HAL_DMA_Abort_IT+0x3fc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	@ (8001d18 <HAL_DMA_Abort_IT+0x400>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Abort_IT+0x3a2>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	@ (8001d1c <HAL_DMA_Abort_IT+0x404>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d132      	bne.n	8001d20 <HAL_DMA_Abort_IT+0x408>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e031      	b.n	8001d22 <HAL_DMA_Abort_IT+0x40a>
 8001cbe:	bf00      	nop
 8001cc0:	40020010 	.word	0x40020010
 8001cc4:	40020028 	.word	0x40020028
 8001cc8:	40020040 	.word	0x40020040
 8001ccc:	40020058 	.word	0x40020058
 8001cd0:	40020070 	.word	0x40020070
 8001cd4:	40020088 	.word	0x40020088
 8001cd8:	400200a0 	.word	0x400200a0
 8001cdc:	400200b8 	.word	0x400200b8
 8001ce0:	40020410 	.word	0x40020410
 8001ce4:	40020428 	.word	0x40020428
 8001ce8:	40020440 	.word	0x40020440
 8001cec:	40020458 	.word	0x40020458
 8001cf0:	40020470 	.word	0x40020470
 8001cf4:	40020488 	.word	0x40020488
 8001cf8:	400204a0 	.word	0x400204a0
 8001cfc:	400204b8 	.word	0x400204b8
 8001d00:	58025408 	.word	0x58025408
 8001d04:	5802541c 	.word	0x5802541c
 8001d08:	58025430 	.word	0x58025430
 8001d0c:	58025444 	.word	0x58025444
 8001d10:	58025458 	.word	0x58025458
 8001d14:	5802546c 	.word	0x5802546c
 8001d18:	58025480 	.word	0x58025480
 8001d1c:	58025494 	.word	0x58025494
 8001d20:	2300      	movs	r3, #0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d028      	beq.n	8001d78 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d34:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2201      	movs	r2, #1
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d54:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d6c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d76:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001db2:	4b89      	ldr	r3, [pc, #548]	@ (8001fd8 <HAL_GPIO_Init+0x234>)
 8001db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001db6:	e194      	b.n	80020e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8186 	beq.w	80020dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d005      	beq.n	8001de8 <HAL_GPIO_Init+0x44>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d130      	bne.n	8001e4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 0201 	and.w	r2, r3, #1
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d017      	beq.n	8001e86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d123      	bne.n	8001eda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	69b9      	ldr	r1, [r7, #24]
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0203 	and.w	r2, r3, #3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80e0 	beq.w	80020dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_GPIO_Init+0x238>)
 8001f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f22:	4a2e      	ldr	r2, [pc, #184]	@ (8001fdc <HAL_GPIO_Init+0x238>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_GPIO_Init+0x238>)
 8001f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3a:	4a29      	ldr	r2, [pc, #164]	@ (8001fe0 <HAL_GPIO_Init+0x23c>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a20      	ldr	r2, [pc, #128]	@ (8001fe4 <HAL_GPIO_Init+0x240>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d052      	beq.n	800200c <HAL_GPIO_Init+0x268>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <HAL_GPIO_Init+0x244>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d031      	beq.n	8001fd2 <HAL_GPIO_Init+0x22e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1e      	ldr	r2, [pc, #120]	@ (8001fec <HAL_GPIO_Init+0x248>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <HAL_GPIO_Init+0x22a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_GPIO_Init+0x24c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x226>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <HAL_GPIO_Init+0x250>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x222>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_GPIO_Init+0x254>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x21e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_GPIO_Init+0x258>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x21a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_GPIO_Init+0x25c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x216>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <HAL_GPIO_Init+0x260>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <HAL_GPIO_Init+0x264>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x20e>
 8001fae:	2309      	movs	r3, #9
 8001fb0:	e02d      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	e02b      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	e029      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e027      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	e025      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	e023      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e021      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e01f      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e01d      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e01b      	b.n	800200e <HAL_GPIO_Init+0x26a>
 8001fd6:	bf00      	nop
 8001fd8:	58000080 	.word	0x58000080
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	58000400 	.word	0x58000400
 8001fe4:	58020000 	.word	0x58020000
 8001fe8:	58020400 	.word	0x58020400
 8001fec:	58020800 	.word	0x58020800
 8001ff0:	58020c00 	.word	0x58020c00
 8001ff4:	58021000 	.word	0x58021000
 8001ff8:	58021400 	.word	0x58021400
 8001ffc:	58021800 	.word	0x58021800
 8002000:	58021c00 	.word	0x58021c00
 8002004:	58022000 	.word	0x58022000
 8002008:	58022400 	.word	0x58022400
 800200c:	2300      	movs	r3, #0
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800201e:	4938      	ldr	r1, [pc, #224]	@ (8002100 <HAL_GPIO_Init+0x35c>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002080:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	3301      	adds	r3, #1
 80020e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f47f ae63 	bne.w	8001db8 <HAL_GPIO_Init+0x14>
  }
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3724      	adds	r7, #36	@ 0x24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	58000400 	.word	0x58000400

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002144:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f804 	bl	800216a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_PWREx_ConfigSupply+0x70>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b04      	cmp	r3, #4
 8002192:	d00a      	beq.n	80021aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <HAL_PWREx_ConfigSupply+0x70>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01f      	b.n	80021e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e01d      	b.n	80021e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_PWREx_ConfigSupply+0x70>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	490f      	ldr	r1, [pc, #60]	@ (80021f0 <HAL_PWREx_ConfigSupply+0x70>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021ba:	f7fe ff67 	bl	800108c <HAL_GetTick>
 80021be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021c0:	e009      	b.n	80021d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021c2:	f7fe ff63 	bl	800108c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021d0:	d901      	bls.n	80021d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_PWREx_ConfigSupply+0x70>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e2:	d1ee      	bne.n	80021c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	58024800 	.word	0x58024800

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	@ 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f000 bc48 	b.w	8002a98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8088 	beq.w	8002326 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002216:	4b99      	ldr	r3, [pc, #612]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002220:	4b96      	ldr	r3, [pc, #600]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002228:	2b10      	cmp	r3, #16
 800222a:	d007      	beq.n	800223c <HAL_RCC_OscConfig+0x48>
 800222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222e:	2b18      	cmp	r3, #24
 8002230:	d111      	bne.n	8002256 <HAL_RCC_OscConfig+0x62>
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	4b8f      	ldr	r3, [pc, #572]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d06d      	beq.n	8002324 <HAL_RCC_OscConfig+0x130>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d169      	bne.n	8002324 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f000 bc21 	b.w	8002a98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x7a>
 8002260:	4b86      	ldr	r3, [pc, #536]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a85      	ldr	r2, [pc, #532]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x9c>
 8002276:	4b81      	ldr	r3, [pc, #516]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a80      	ldr	r2, [pc, #512]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b7e      	ldr	r3, [pc, #504]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7d      	ldr	r2, [pc, #500]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xc0>
 800229a:	4b78      	ldr	r3, [pc, #480]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a77      	ldr	r2, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b75      	ldr	r3, [pc, #468]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a74      	ldr	r2, [pc, #464]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd8>
 80022b4:	4b71      	ldr	r3, [pc, #452]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a70      	ldr	r2, [pc, #448]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b6e      	ldr	r3, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6d      	ldr	r2, [pc, #436]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe feda 	bl	800108c <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fed6 	bl	800108c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e3d4      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ee:	4b63      	ldr	r3, [pc, #396]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe8>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fec6 	bl	800108c <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fec2 	bl	800108c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e3c0      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002316:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x110>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80ca 	beq.w	80024c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002334:	4b51      	ldr	r3, [pc, #324]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800233c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800233e:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_RCC_OscConfig+0x166>
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2b18      	cmp	r3, #24
 800234e:	d156      	bne.n	80023fe <HAL_RCC_OscConfig+0x20a>
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d151      	bne.n	80023fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235a:	4b48      	ldr	r3, [pc, #288]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x17e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e392      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002372:	4b42      	ldr	r3, [pc, #264]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0219 	bic.w	r2, r3, #25
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	493f      	ldr	r1, [pc, #252]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fe82 	bl	800108c <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7fe fe7e 	bl	800108c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e37c      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	f7fe fe7b 	bl	80010a4 <HAL_GetREVID>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d817      	bhi.n	80023e8 <HAL_RCC_OscConfig+0x1f4>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b40      	cmp	r3, #64	@ 0x40
 80023be:	d108      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1de>
 80023c0:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80023c8:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	e07a      	b.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	4926      	ldr	r1, [pc, #152]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e6:	e06f      	b.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	4921      	ldr	r1, [pc, #132]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fc:	e064      	b.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d047      	beq.n	8002496 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002406:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0219 	bic.w	r2, r3, #25
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	491a      	ldr	r1, [pc, #104]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fe38 	bl	800108c <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fe34 	bl	800108c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e332      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	f7fe fe31 	bl	80010a4 <HAL_GetREVID>
 8002442:	4603      	mov	r3, r0
 8002444:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002448:	4293      	cmp	r3, r2
 800244a:	d819      	bhi.n	8002480 <HAL_RCC_OscConfig+0x28c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b40      	cmp	r3, #64	@ 0x40
 8002452:	d108      	bne.n	8002466 <HAL_RCC_OscConfig+0x272>
 8002454:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800245c:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 800245e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002462:	6053      	str	r3, [r2, #4]
 8002464:	e030      	b.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	031b      	lsls	r3, r3, #12
 8002474:	4901      	ldr	r1, [pc, #4]	@ (800247c <HAL_RCC_OscConfig+0x288>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	e025      	b.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
 800247c:	58024400 	.word	0x58024400
 8002480:	4b9a      	ldr	r3, [pc, #616]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	4997      	ldr	r1, [pc, #604]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e018      	b.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b95      	ldr	r3, [pc, #596]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a94      	ldr	r2, [pc, #592]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fdf3 	bl	800108c <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fdef 	bl	800108c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e2ed      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024bc:	4b8b      	ldr	r3, [pc, #556]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a9 	beq.w	8002628 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b85      	ldr	r3, [pc, #532]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e0:	4b82      	ldr	r3, [pc, #520]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d007      	beq.n	80024fc <HAL_RCC_OscConfig+0x308>
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b18      	cmp	r3, #24
 80024f0:	d13a      	bne.n	8002568 <HAL_RCC_OscConfig+0x374>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d135      	bne.n	8002568 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024fc:	4b7b      	ldr	r3, [pc, #492]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x320>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b80      	cmp	r3, #128	@ 0x80
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e2c1      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002514:	f7fe fdc6 	bl	80010a4 <HAL_GetREVID>
 8002518:	4603      	mov	r3, r0
 800251a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800251e:	4293      	cmp	r3, r2
 8002520:	d817      	bhi.n	8002552 <HAL_RCC_OscConfig+0x35e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	2b20      	cmp	r3, #32
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x348>
 800252a:	4b70      	ldr	r3, [pc, #448]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002532:	4a6e      	ldr	r2, [pc, #440]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002534:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002538:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800253a:	e075      	b.n	8002628 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800253c:	4b6b      	ldr	r3, [pc, #428]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	069b      	lsls	r3, r3, #26
 800254a:	4968      	ldr	r1, [pc, #416]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002550:	e06a      	b.n	8002628 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002552:	4b66      	ldr	r3, [pc, #408]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	4962      	ldr	r1, [pc, #392]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002566:	e05f      	b.n	8002628 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d042      	beq.n	80025f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002570:	4b5e      	ldr	r3, [pc, #376]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5d      	ldr	r2, [pc, #372]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800257a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fd86 	bl	800108c <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002584:	f7fe fd82 	bl	800108c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e280      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002596:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025a2:	f7fe fd7f 	bl	80010a4 <HAL_GetREVID>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d817      	bhi.n	80025e0 <HAL_RCC_OscConfig+0x3ec>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d108      	bne.n	80025ca <HAL_RCC_OscConfig+0x3d6>
 80025b8:	4b4c      	ldr	r3, [pc, #304]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025c0:	4a4a      	ldr	r2, [pc, #296]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025c6:	6053      	str	r3, [r2, #4]
 80025c8:	e02e      	b.n	8002628 <HAL_RCC_OscConfig+0x434>
 80025ca:	4b48      	ldr	r3, [pc, #288]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	4944      	ldr	r1, [pc, #272]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e023      	b.n	8002628 <HAL_RCC_OscConfig+0x434>
 80025e0:	4b42      	ldr	r3, [pc, #264]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	493f      	ldr	r1, [pc, #252]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025f6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a3c      	ldr	r2, [pc, #240]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fd43 	bl	800108c <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800260a:	f7fe fd3f 	bl	800108c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e23d      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800261c:	4b33      	ldr	r3, [pc, #204]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d036      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d019      	beq.n	8002670 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002640:	4a2a      	ldr	r2, [pc, #168]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fd20 	bl	800108c <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7fe fd1c 	bl	800108c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e21a      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002662:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x45c>
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fd06 	bl	800108c <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fd02 	bl	800108c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e200      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d039      	beq.n	8002722 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fce3 	bl	800108c <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ca:	f7fe fcdf 	bl	800108c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1dd      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_OscConfig+0x4f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x4d6>
 80026e8:	e01b      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
 80026ea:	bf00      	nop
 80026ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a9a      	ldr	r2, [pc, #616]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80026f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026fc:	f7fe fcc6 	bl	800108c <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002704:	f7fe fcc2 	bl	800108c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1c0      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002716:	4b92      	ldr	r3, [pc, #584]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8081 	beq.w	8002832 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002730:	4b8c      	ldr	r3, [pc, #560]	@ (8002964 <HAL_RCC_OscConfig+0x770>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a8b      	ldr	r2, [pc, #556]	@ (8002964 <HAL_RCC_OscConfig+0x770>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800273c:	f7fe fca6 	bl	800108c <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7fe fca2 	bl	800108c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1a0      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002756:	4b83      	ldr	r3, [pc, #524]	@ (8002964 <HAL_RCC_OscConfig+0x770>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x584>
 800276a:	4b7d      	ldr	r3, [pc, #500]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	4a7c      	ldr	r2, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70
 8002776:	e02d      	b.n	80027d4 <HAL_RCC_OscConfig+0x5e0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x5a6>
 8002780:	4b77      	ldr	r3, [pc, #476]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a76      	ldr	r2, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
 800278c:	4b74      	ldr	r3, [pc, #464]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a73      	ldr	r2, [pc, #460]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	e01c      	b.n	80027d4 <HAL_RCC_OscConfig+0x5e0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c8>
 80027a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x5e0>
 80027bc:	4b68      	ldr	r3, [pc, #416]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a67      	ldr	r2, [pc, #412]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a64      	ldr	r2, [pc, #400]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d015      	beq.n	8002808 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fc56 	bl	800108c <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fc52 	bl	800108c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e14e      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027fa:	4b59      	ldr	r3, [pc, #356]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ee      	beq.n	80027e4 <HAL_RCC_OscConfig+0x5f0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fc40 	bl	800108c <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fc3c 	bl	800108c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e138      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002826:	4b4e      	ldr	r3, [pc, #312]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ee      	bne.n	8002810 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 812d 	beq.w	8002a96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800283c:	4b48      	ldr	r3, [pc, #288]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002844:	2b18      	cmp	r3, #24
 8002846:	f000 80bd 	beq.w	80029c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	2b02      	cmp	r3, #2
 8002850:	f040 809e 	bne.w	8002990 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b42      	ldr	r3, [pc, #264]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a41      	ldr	r2, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800285a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fc14 	bl	800108c <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fc10 	bl	800108c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e10e      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800287a:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002886:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800288a:	4b37      	ldr	r3, [pc, #220]	@ (8002968 <HAL_RCC_OscConfig+0x774>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	430a      	orrs	r2, r1
 800289a:	4931      	ldr	r1, [pc, #196]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	628b      	str	r3, [r1, #40]	@ 0x28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a4:	3b01      	subs	r3, #1
 80028a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	3b01      	subs	r3, #1
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	3b01      	subs	r3, #1
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c8:	3b01      	subs	r3, #1
 80028ca:	061b      	lsls	r3, r3, #24
 80028cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028d0:	4923      	ldr	r1, [pc, #140]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028d6:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	4a21      	ldr	r2, [pc, #132]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028e6:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_RCC_OscConfig+0x778>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028ee:	00d2      	lsls	r2, r2, #3
 80028f0:	491b      	ldr	r1, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f023 020c 	bic.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4917      	ldr	r1, [pc, #92]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002908:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	f023 0202 	bic.w	r2, r3, #2
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	4912      	ldr	r1, [pc, #72]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	4a10      	ldr	r2, [pc, #64]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800293c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	4a07      	ldr	r2, [pc, #28]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294a:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <HAL_RCC_OscConfig+0x76c>)
 8002950:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe fb99 	bl	800108c <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800295c:	e011      	b.n	8002982 <HAL_RCC_OscConfig+0x78e>
 800295e:	bf00      	nop
 8002960:	58024400 	.word	0x58024400
 8002964:	58024800 	.word	0x58024800
 8002968:	fffffc0c 	.word	0xfffffc0c
 800296c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fb8c 	bl	800108c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e08a      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002982:	4b47      	ldr	r3, [pc, #284]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x77c>
 800298e:	e082      	b.n	8002a96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b43      	ldr	r3, [pc, #268]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a42      	ldr	r2, [pc, #264]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fb76 	bl	800108c <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fb72 	bl	800108c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e070      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b6:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x7b0>
 80029c2:	e068      	b.n	8002a96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029c4:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ca:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d031      	beq.n	8002a3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0203 	and.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d12a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d122      	bne.n	8002a3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	0a5b      	lsrs	r3, r3, #9
 8002a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d111      	bne.n	8002a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d108      	bne.n	8002a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	0e1b      	lsrs	r3, r3, #24
 8002a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e02b      	b.n	8002a98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a40:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d01f      	beq.n	8002a96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5a:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a62:	f7fe fb13 	bl	800108c <HAL_GetTick>
 8002a66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a68:	bf00      	nop
 8002a6a:	f7fe fb0f 	bl	800108c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d0f9      	beq.n	8002a6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_RCC_OscConfig+0x8b0>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a82:	00d2      	lsls	r2, r2, #3
 8002a84:	4906      	ldr	r1, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <HAL_RCC_OscConfig+0x8ac>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3730      	adds	r7, #48	@ 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	ffff0007 	.word	0xffff0007

08002aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e19c      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d910      	bls.n	8002aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b87      	ldr	r3, [pc, #540]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 020f 	bic.w	r2, r3, #15
 8002ad2:	4985      	ldr	r1, [pc, #532]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b83      	ldr	r3, [pc, #524]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e184      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	4b7b      	ldr	r3, [pc, #492]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d908      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b08:	4b78      	ldr	r3, [pc, #480]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	4975      	ldr	r1, [pc, #468]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	4b70      	ldr	r3, [pc, #448]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d908      	bls.n	8002b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	496a      	ldr	r1, [pc, #424]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	4b64      	ldr	r3, [pc, #400]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d908      	bls.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b64:	4b61      	ldr	r3, [pc, #388]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	495e      	ldr	r1, [pc, #376]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b92:	4b56      	ldr	r3, [pc, #344]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4953      	ldr	r1, [pc, #332]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f023 020f 	bic.w	r2, r3, #15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4947      	ldr	r1, [pc, #284]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d055      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bde:	4b43      	ldr	r3, [pc, #268]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4940      	ldr	r1, [pc, #256]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0f6      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c10:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0ea      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c28:	4b30      	ldr	r3, [pc, #192]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0de      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c38:	4b2c      	ldr	r3, [pc, #176]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0d6      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c48:	4b28      	ldr	r3, [pc, #160]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f023 0207 	bic.w	r2, r3, #7
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4925      	ldr	r1, [pc, #148]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5a:	f7fe fa17 	bl	800108c <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c62:	f7fe fa13 	bl	800108c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0be      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c78:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d1eb      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d208      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca6:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f023 020f 	bic.w	r2, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	490e      	ldr	r1, [pc, #56]	@ (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d214      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4906      	ldr	r1, [pc, #24]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e086      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
 8002ce8:	52002000 	.word	0x52002000
 8002cec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	4b3f      	ldr	r3, [pc, #252]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4939      	ldr	r1, [pc, #228]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d208      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3a:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	492e      	ldr	r1, [pc, #184]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d208      	bcs.n	8002d7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d68:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4922      	ldr	r1, [pc, #136]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d208      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4917      	ldr	r1, [pc, #92]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002da8:	f000 f834 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	4912      	ldr	r1, [pc, #72]	@ (8002e04 <HAL_RCC_ClockConfig+0x35c>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	4a0d      	ldr	r2, [pc, #52]	@ (8002e04 <HAL_RCC_ClockConfig+0x35c>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <HAL_RCC_ClockConfig+0x360>)
 8002dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_RCC_ClockConfig+0x364>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x368>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f904 	bl	8000ff8 <HAL_InitTick>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
 8002e04:	080091d8 	.word	0x080091d8
 8002e08:	24000004 	.word	0x24000004
 8002e0c:	24000000 	.word	0x24000000
 8002e10:	24000008 	.word	0x24000008

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1a:	4bb3      	ldr	r3, [pc, #716]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e22:	2b18      	cmp	r3, #24
 8002e24:	f200 8155 	bhi.w	80030d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e28:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	080030d3 	.word	0x080030d3
 8002e38:	080030d3 	.word	0x080030d3
 8002e3c:	080030d3 	.word	0x080030d3
 8002e40:	080030d3 	.word	0x080030d3
 8002e44:	080030d3 	.word	0x080030d3
 8002e48:	080030d3 	.word	0x080030d3
 8002e4c:	080030d3 	.word	0x080030d3
 8002e50:	08002ebb 	.word	0x08002ebb
 8002e54:	080030d3 	.word	0x080030d3
 8002e58:	080030d3 	.word	0x080030d3
 8002e5c:	080030d3 	.word	0x080030d3
 8002e60:	080030d3 	.word	0x080030d3
 8002e64:	080030d3 	.word	0x080030d3
 8002e68:	080030d3 	.word	0x080030d3
 8002e6c:	080030d3 	.word	0x080030d3
 8002e70:	08002ec1 	.word	0x08002ec1
 8002e74:	080030d3 	.word	0x080030d3
 8002e78:	080030d3 	.word	0x080030d3
 8002e7c:	080030d3 	.word	0x080030d3
 8002e80:	080030d3 	.word	0x080030d3
 8002e84:	080030d3 	.word	0x080030d3
 8002e88:	080030d3 	.word	0x080030d3
 8002e8c:	080030d3 	.word	0x080030d3
 8002e90:	08002ec7 	.word	0x08002ec7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e94:	4b94      	ldr	r3, [pc, #592]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ea0:	4b91      	ldr	r3, [pc, #580]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	4a90      	ldr	r2, [pc, #576]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002eb2:	e111      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb6:	61bb      	str	r3, [r7, #24]
      break;
 8002eb8:	e10e      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002eba:	4b8d      	ldr	r3, [pc, #564]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ebc:	61bb      	str	r3, [r7, #24]
      break;
 8002ebe:	e10b      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ec2:	61bb      	str	r3, [r7, #24]
      break;
 8002ec4:	e108      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ec6:	4b88      	ldr	r3, [pc, #544]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ed0:	4b85      	ldr	r3, [pc, #532]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002edc:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ee6:	4b80      	ldr	r3, [pc, #512]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80e1 	beq.w	80030cc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f000 8083 	beq.w	8003018 <HAL_RCC_GetSysClockFreq+0x204>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f200 80a1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x248>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x114>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d056      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f26:	e099      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f28:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f34:	4b6c      	ldr	r3, [pc, #432]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	4a6b      	ldr	r2, [pc, #428]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b62      	ldr	r3, [pc, #392]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f8e:	e087      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b51      	ldr	r3, [pc, #324]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fd2:	e065      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003100 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003016:	e043      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003104 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b2f      	ldr	r3, [pc, #188]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a02 	vldr	s12, [r7, #8]
 800303e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800305a:	e021      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003100 <HAL_RCC_GetSysClockFreq+0x2ec>
 800306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306e:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003082:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800309e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	0a5b      	lsrs	r3, r3, #9
 80030a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030aa:	3301      	adds	r3, #1
 80030ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80030bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c4:	ee17 3a90 	vmov	r3, s15
 80030c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
      break;
 80030d0:	e002      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030d2:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d4:	61bb      	str	r3, [r7, #24]
      break;
 80030d6:	bf00      	nop
  }

  return sysclockfreq;
 80030d8:	69bb      	ldr	r3, [r7, #24]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	58024400 	.word	0x58024400
 80030ec:	03d09000 	.word	0x03d09000
 80030f0:	003d0900 	.word	0x003d0900
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	46000000 	.word	0x46000000
 80030fc:	4c742400 	.word	0x4c742400
 8003100:	4a742400 	.word	0x4a742400
 8003104:	4af42400 	.word	0x4af42400

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800310e:	f7ff fe81 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x50>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490f      	ldr	r1, [pc, #60]	@ (800315c <HAL_RCC_GetHCLKFreq+0x54>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800312c:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x50>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	4a09      	ldr	r2, [pc, #36]	@ (800315c <HAL_RCC_GetHCLKFreq+0x54>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x58>)
 8003144:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003146:	4a07      	ldr	r2, [pc, #28]	@ (8003164 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x58>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	58024400 	.word	0x58024400
 800315c:	080091d8 	.word	0x080091d8
 8003160:	24000004 	.word	0x24000004
 8003164:	24000000 	.word	0x24000000

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800316c:	f7ff ffcc 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4904      	ldr	r1, [pc, #16]	@ (8003190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400
 8003190:	080091d8 	.word	0x080091d8

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003198:	f7ff ffb6 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4904      	ldr	r1, [pc, #16]	@ (80031bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	58024400 	.word	0x58024400
 80031bc:	080091d8 	.word	0x080091d8

080031c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b0ca      	sub	sp, #296	@ 0x128
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80031e4:	2500      	movs	r5, #0
 80031e6:	ea54 0305 	orrs.w	r3, r4, r5
 80031ea:	d049      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031f6:	d02f      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031fc:	d828      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003202:	d01a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003208:	d822      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003212:	d007      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003214:	e01c      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003216:	4bb8      	ldr	r3, [pc, #736]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	4ab7      	ldr	r2, [pc, #732]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800321c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003222:	e01a      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003228:	3308      	adds	r3, #8
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f001 fc8f 	bl	8004b50 <RCCEx_PLL2_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003238:	e00f      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	3328      	adds	r3, #40	@ 0x28
 8003240:	2102      	movs	r1, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f001 fd36 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800324e:	e004      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800325a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003262:	4ba5      	ldr	r3, [pc, #660]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003266:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003270:	4aa1      	ldr	r2, [pc, #644]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003272:	430b      	orrs	r3, r1
 8003274:	6513      	str	r3, [r2, #80]	@ 0x50
 8003276:	e003      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800327c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800328c:	f04f 0900 	mov.w	r9, #0
 8003290:	ea58 0309 	orrs.w	r3, r8, r9
 8003294:	d047      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	2b04      	cmp	r3, #4
 800329e:	d82a      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032a0:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032bd 	.word	0x080032bd
 80032ac:	080032cb 	.word	0x080032cb
 80032b0:	080032e1 	.word	0x080032e1
 80032b4:	080032ff 	.word	0x080032ff
 80032b8:	080032ff 	.word	0x080032ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032bc:	4b8e      	ldr	r3, [pc, #568]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	4a8d      	ldr	r2, [pc, #564]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c8:	e01a      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	3308      	adds	r3, #8
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fc3c 	bl	8004b50 <RCCEx_PLL2_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032de:	e00f      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e4:	3328      	adds	r3, #40	@ 0x28
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 fce3 	bl	8004cb4 <RCCEx_PLL3_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003308:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330c:	f023 0107 	bic.w	r1, r3, #7
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	4a78      	ldr	r2, [pc, #480]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6513      	str	r3, [r2, #80]	@ 0x50
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003332:	f04f 0b00 	mov.w	fp, #0
 8003336:	ea5a 030b 	orrs.w	r3, sl, fp
 800333a:	d04c      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003346:	d030      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334c:	d829      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800334e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003350:	d02d      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003352:	2bc0      	cmp	r3, #192	@ 0xc0
 8003354:	d825      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003356:	2b80      	cmp	r3, #128	@ 0x80
 8003358:	d018      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800335a:	2b80      	cmp	r3, #128	@ 0x80
 800335c:	d821      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d007      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003366:	e01c      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4b63      	ldr	r3, [pc, #396]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	4a62      	ldr	r2, [pc, #392]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003374:	e01c      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337a:	3308      	adds	r3, #8
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fbe6 	bl	8004b50 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800338a:	e011      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800338c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003390:	3328      	adds	r3, #40	@ 0x28
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fc8d 	bl	8004cb4 <RCCEx_PLL3_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033b8:	4b4f      	ldr	r3, [pc, #316]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	4a4c      	ldr	r2, [pc, #304]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80033e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80033ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80033f0:	460b      	mov	r3, r1
 80033f2:	4313      	orrs	r3, r2
 80033f4:	d053      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003402:	d035      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003404:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003408:	d82e      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800340a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800340e:	d031      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003410:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003414:	d828      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800341a:	d01a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003420:	d822      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800342a:	d007      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800342c:	e01c      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342e:	4b32      	ldr	r3, [pc, #200]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	4a31      	ldr	r2, [pc, #196]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800343a:	e01c      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	3308      	adds	r3, #8
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f001 fb83 	bl	8004b50 <RCCEx_PLL2_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003450:	e011      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	3328      	adds	r3, #40	@ 0x28
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fc2a 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003466:	e006      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800346e:	e002      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800348e:	4a1a      	ldr	r2, [pc, #104]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6593      	str	r3, [r2, #88]	@ 0x58
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d056      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034ca:	d038      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80034cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d0:	d831      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034d6:	d034      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80034d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034dc:	d82b      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e2:	d01d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80034e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e8:	d825      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80034ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034f4:	e01f      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034f6:	bf00      	nop
 80034f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4ba2      	ldr	r3, [pc, #648]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4aa1      	ldr	r2, [pc, #644]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003508:	e01c      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	3308      	adds	r3, #8
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fb1c 	bl	8004b50 <RCCEx_PLL2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800351e:	e011      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	3328      	adds	r3, #40	@ 0x28
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f001 fbc3 	bl	8004cb4 <RCCEx_PLL3_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800354c:	4b8e      	ldr	r3, [pc, #568]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800355c:	4a8a      	ldr	r2, [pc, #552]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355e:	430b      	orrs	r3, r1
 8003560:	6593      	str	r3, [r2, #88]	@ 0x58
 8003562:	e003      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003582:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003586:	460b      	mov	r3, r1
 8003588:	4313      	orrs	r3, r2
 800358a:	d03a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	2b30      	cmp	r3, #48	@ 0x30
 8003594:	d01f      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003596:	2b30      	cmp	r3, #48	@ 0x30
 8003598:	d819      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800359a:	2b20      	cmp	r3, #32
 800359c:	d00c      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d815      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d019      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d111      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035aa:	4b77      	ldr	r3, [pc, #476]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	4a76      	ldr	r2, [pc, #472]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035b6:	e011      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	3308      	adds	r3, #8
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 fac5 	bl	8004b50 <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035cc:	e006      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035d4:	e002      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035e4:	4b68      	ldr	r3, [pc, #416]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	4a65      	ldr	r2, [pc, #404]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800360e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003618:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800361c:	460b      	mov	r3, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	d051      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800362c:	d035      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800362e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003632:	d82e      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003634:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003638:	d031      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800363a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800363e:	d828      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003644:	d01a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	d822      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003654:	d007      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003656:	e01c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	4a4a      	ldr	r2, [pc, #296]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003664:	e01c      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	3308      	adds	r3, #8
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f001 fa6e 	bl	8004b50 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800367a:	e011      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003680:	3328      	adds	r3, #40	@ 0x28
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f001 fb15 	bl	8004cb4 <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800369e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036a8:	4b37      	ldr	r3, [pc, #220]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	4a34      	ldr	r2, [pc, #208]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d056      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f0:	d033      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80036f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f6:	d82c      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036fc:	d02f      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80036fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003702:	d826      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003704:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003708:	d02b      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800370a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800370e:	d820      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003714:	d012      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800371a:	d81a      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d022      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003724:	d115      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	3308      	adds	r3, #8
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fa0e 	bl	8004b50 <RCCEx_PLL2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800373a:	e015      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	3328      	adds	r3, #40	@ 0x28
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fab5 	bl	8004cb4 <RCCEx_PLL3_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003750:	e00a      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800375a:	bf00      	nop
 800375c:	e004      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800377e:	4a02      	ldr	r2, [pc, #8]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003780:	430b      	orrs	r3, r1
 8003782:	6513      	str	r3, [r2, #80]	@ 0x50
 8003784:	e006      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4313      	orrs	r3, r2
 80037b2:	d055      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c0:	d033      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80037c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c6:	d82c      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037cc:	d02f      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d2:	d826      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037d8:	d02b      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80037da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037de:	d820      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e4:	d012      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80037e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ea:	d81a      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d022      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80037f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037f4:	d115      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	3308      	adds	r3, #8
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f9a6 	bl	8004b50 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800380a:	e015      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	3328      	adds	r3, #40	@ 0x28
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fa4d 	bl	8004cb4 <RCCEx_PLL3_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003820:	e00a      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800382a:	bf00      	nop
 800382c:	e004      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800382e:	bf00      	nop
 8003830:	e002      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003832:	bf00      	nop
 8003834:	e000      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003840:	4ba3      	ldr	r3, [pc, #652]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003850:	4a9f      	ldr	r2, [pc, #636]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6593      	str	r3, [r2, #88]	@ 0x58
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800386c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d037      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800388a:	d00e      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800388c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003890:	d816      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389a:	d111      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	4a8b      	ldr	r2, [pc, #556]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038a8:	e00f      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3308      	adds	r3, #8
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f94c 	bl	8004b50 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038be:	e004      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038d2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003906:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d039      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003916:	2b03      	cmp	r3, #3
 8003918:	d81c      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800391a:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	0800395d 	.word	0x0800395d
 8003924:	08003931 	.word	0x08003931
 8003928:	0800393f 	.word	0x0800393f
 800392c:	0800395d 	.word	0x0800395d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003930:	4b67      	ldr	r3, [pc, #412]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	4a66      	ldr	r2, [pc, #408]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800393c:	e00f      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003942:	3308      	adds	r3, #8
 8003944:	2102      	movs	r1, #2
 8003946:	4618      	mov	r0, r3
 8003948:	f001 f902 	bl	8004b50 <RCCEx_PLL2_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003952:	e004      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800395c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003966:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	f023 0103 	bic.w	r1, r3, #3
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003974:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003976:	430b      	orrs	r3, r1
 8003978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397a:	e003      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800399a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800399e:	460b      	mov	r3, r1
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f000 809f 	beq.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039b2:	f7fd fb6b 	bl	800108c <HAL_GetTick>
 80039b6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ba:	e00b      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039bc:	f7fd fb66 	bl	800108c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	@ 0x64
 80039ca:	d903      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039d2:	e005      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ed      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d179      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039e8:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039f4:	4053      	eors	r3, r2
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d015      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039fe:	4b34      	ldr	r3, [pc, #208]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	4a30      	ldr	r2, [pc, #192]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a16:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a22:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a36:	d118      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fb28 	bl	800108c <HAL_GetTick>
 8003a3c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a40:	e00d      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fd fb23 	bl	800108c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a4c:	1ad2      	subs	r2, r2, r3
 8003a4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d903      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003a5c:	e005      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0eb      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d129      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a82:	d10e      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003a84:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a94:	091a      	lsrs	r2, r3, #4
 8003a96:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6113      	str	r3, [r2, #16]
 8003aa0:	e005      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003aac:	6113      	str	r3, [r2, #16]
 8003aae:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abe:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac4:	e00e      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ace:	e009      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	58024800 	.word	0x58024800
 8003ad8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f002 0301 	and.w	r3, r2, #1
 8003af0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003afa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f000 8089 	beq.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b0c:	2b28      	cmp	r3, #40	@ 0x28
 8003b0e:	d86b      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b10:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003bf1 	.word	0x08003bf1
 8003b1c:	08003be9 	.word	0x08003be9
 8003b20:	08003be9 	.word	0x08003be9
 8003b24:	08003be9 	.word	0x08003be9
 8003b28:	08003be9 	.word	0x08003be9
 8003b2c:	08003be9 	.word	0x08003be9
 8003b30:	08003be9 	.word	0x08003be9
 8003b34:	08003be9 	.word	0x08003be9
 8003b38:	08003bbd 	.word	0x08003bbd
 8003b3c:	08003be9 	.word	0x08003be9
 8003b40:	08003be9 	.word	0x08003be9
 8003b44:	08003be9 	.word	0x08003be9
 8003b48:	08003be9 	.word	0x08003be9
 8003b4c:	08003be9 	.word	0x08003be9
 8003b50:	08003be9 	.word	0x08003be9
 8003b54:	08003be9 	.word	0x08003be9
 8003b58:	08003bd3 	.word	0x08003bd3
 8003b5c:	08003be9 	.word	0x08003be9
 8003b60:	08003be9 	.word	0x08003be9
 8003b64:	08003be9 	.word	0x08003be9
 8003b68:	08003be9 	.word	0x08003be9
 8003b6c:	08003be9 	.word	0x08003be9
 8003b70:	08003be9 	.word	0x08003be9
 8003b74:	08003be9 	.word	0x08003be9
 8003b78:	08003bf1 	.word	0x08003bf1
 8003b7c:	08003be9 	.word	0x08003be9
 8003b80:	08003be9 	.word	0x08003be9
 8003b84:	08003be9 	.word	0x08003be9
 8003b88:	08003be9 	.word	0x08003be9
 8003b8c:	08003be9 	.word	0x08003be9
 8003b90:	08003be9 	.word	0x08003be9
 8003b94:	08003be9 	.word	0x08003be9
 8003b98:	08003bf1 	.word	0x08003bf1
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003bf1 	.word	0x08003bf1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 ffc3 	bl	8004b50 <RCCEx_PLL2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bd0:	e00f      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	3328      	adds	r3, #40	@ 0x28
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 f86a 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003be6:	e004      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bfa:	4bbf      	ldr	r3, [pc, #764]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c08:	4abb      	ldr	r2, [pc, #748]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c0e:	e003      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f002 0302 	and.w	r3, r2, #2
 8003c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d041      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d824      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c42:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c95 	.word	0x08003c95
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c77 	.word	0x08003c77
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c95 	.word	0x08003c95
 8003c5c:	08003c95 	.word	0x08003c95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	3308      	adds	r3, #8
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 ff71 	bl	8004b50 <RCCEx_PLL2_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c74:	e00f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3328      	adds	r3, #40	@ 0x28
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f818 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c8a:	e004      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c9e:	4b96      	ldr	r3, [pc, #600]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	f023 0107 	bic.w	r1, r3, #7
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cac:	4a92      	ldr	r2, [pc, #584]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cb2:	e003      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f002 0304 	and.w	r3, r2, #4
 8003cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	d044      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d825      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d1f 	.word	0x08003d1f
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d3d 	.word	0x08003d3d
 8003d04:	08003d3d 	.word	0x08003d3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ff1d 	bl	8004b50 <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e00f      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3328      	adds	r3, #40	@ 0x28
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 ffc4 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d46:	4b6c      	ldr	r3, [pc, #432]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f023 0107 	bic.w	r1, r3, #7
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d56:	4a68      	ldr	r2, [pc, #416]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f002 0320 	and.w	r3, r2, #32
 8003d72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d055      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d92:	d033      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d98:	d82c      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9e:	d02f      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d826      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003da6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003daa:	d02b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003dac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003db0:	d820      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db6:	d012      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dbc:	d81a      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d022      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dc6:	d115      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	3308      	adds	r3, #8
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 febd 	bl	8004b50 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e015      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	3328      	adds	r3, #40	@ 0x28
 8003de4:	2102      	movs	r1, #2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 ff64 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003df2:	e00a      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfa:	e006      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e12:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	4a35      	ldr	r2, [pc, #212]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d058      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e5e:	d033      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003e60:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e64:	d82c      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d02f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d826      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e76:	d02b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003e78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e7c:	d820      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e82:	d012      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e88:	d81a      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d022      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d115      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e98:	3308      	adds	r3, #8
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fe57 	bl	8004b50 <RCCEx_PLL2_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	3328      	adds	r3, #40	@ 0x28
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fefe 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec6:	e006      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ec8:	bf00      	nop
 8003eca:	e004      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ecc:	bf00      	nop
 8003ece:	e002      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ed0:	bf00      	nop
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10e      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eee:	4a02      	ldr	r2, [pc, #8]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ef6:	bf00      	nop
 8003ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d055      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f30:	d033      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f36:	d82c      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f3c:	d02f      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f42:	d826      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f48:	d02b      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f4e:	d820      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f54:	d012      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f5a:	d81a      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d022      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f64:	d115      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fdee 	bl	8004b50 <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f7a:	e015      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	3328      	adds	r3, #40	@ 0x28
 8003f82:	2102      	movs	r1, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fe95 	bl	8004cb4 <RCCEx_PLL3_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e004      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fb0:	4ba1      	ldr	r3, [pc, #644]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fc0:	4a9d      	ldr	r2, [pc, #628]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f002 0308 	and.w	r3, r2, #8
 8003fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fe6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003fea:	460b      	mov	r3, r1
 8003fec:	4313      	orrs	r3, r2
 8003fee:	d01e      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004002:	3328      	adds	r3, #40	@ 0x28
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fe54 	bl	8004cb4 <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004018:	4b87      	ldr	r3, [pc, #540]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004028:	4a83      	ldr	r2, [pc, #524]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800402a:	430b      	orrs	r3, r1
 800402c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f002 0310 	and.w	r3, r2, #16
 800403a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004044:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004048:	460b      	mov	r3, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	d01e      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800405a:	d10c      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	3328      	adds	r3, #40	@ 0x28
 8004062:	2102      	movs	r1, #2
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fe25 	bl	8004cb4 <RCCEx_PLL3_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004076:	4b70      	ldr	r3, [pc, #448]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004086:	4a6c      	ldr	r2, [pc, #432]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004088:	430b      	orrs	r3, r1
 800408a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d03e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b8:	d022      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80040ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040be:	d81b      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c8:	d00b      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80040ca:	e015      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	3308      	adds	r3, #8
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fd3b 	bl	8004b50 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fde2 	bl	8004cb4 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800410a:	4b4b      	ldr	r3, [pc, #300]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800411a:	4a47      	ldr	r2, [pc, #284]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800411c:	430b      	orrs	r3, r1
 800411e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004136:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004138:	2300      	movs	r3, #0
 800413a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800413c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d03b      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004152:	d01f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004154:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004158:	d818      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800415e:	d003      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004164:	d007      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004166:	e011      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4b33      	ldr	r3, [pc, #204]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	4a32      	ldr	r2, [pc, #200]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004174:	e00f      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	3328      	adds	r3, #40	@ 0x28
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd98 	bl	8004cb4 <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800419e:	4b26      	ldr	r3, [pc, #152]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	4a22      	ldr	r2, [pc, #136]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80041ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80041cc:	2300      	movs	r3, #0
 80041ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80041d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d034      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e8:	d007      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80041ea:	e011      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	4a11      	ldr	r2, [pc, #68]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041f8:	e00e      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	3308      	adds	r3, #8
 8004200:	2102      	movs	r1, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fca4 	bl	8004b50 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10d      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004220:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004224:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422e:	4a02      	ldr	r2, [pc, #8]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004230:	430b      	orrs	r3, r1
 8004232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004236:	bf00      	nop
 8004238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004252:	2300      	movs	r3, #0
 8004254:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004256:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d00c      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3328      	adds	r3, #40	@ 0x28
 8004266:	2102      	movs	r1, #2
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fd23 	bl	8004cb4 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004286:	663b      	str	r3, [r7, #96]	@ 0x60
 8004288:	2300      	movs	r3, #0
 800428a:	667b      	str	r3, [r7, #100]	@ 0x64
 800428c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d038      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800429e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a2:	d018      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a8:	d811      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ae:	d014      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b4:	d80b      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d011      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042be:	d106      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c0:	4bc3      	ldr	r3, [pc, #780]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	4ac2      	ldr	r2, [pc, #776]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042cc:	e008      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042d4:	e004      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e8:	4bb9      	ldr	r3, [pc, #740]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f8:	4ab5      	ldr	r2, [pc, #724]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80042fe:	e003      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004314:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004316:	2300      	movs	r3, #0
 8004318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800431a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004324:	4baa      	ldr	r3, [pc, #680]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004332:	4aa7      	ldr	r2, [pc, #668]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004334:	430b      	orrs	r3, r1
 8004336:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004344:	653b      	str	r3, [r7, #80]	@ 0x50
 8004346:	2300      	movs	r3, #0
 8004348:	657b      	str	r3, [r7, #84]	@ 0x54
 800434a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004354:	4b9e      	ldr	r3, [pc, #632]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004364:	4a9a      	ldr	r2, [pc, #616]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004366:	430b      	orrs	r3, r1
 8004368:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004378:	2300      	movs	r3, #0
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800437c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004386:	4b92      	ldr	r3, [pc, #584]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004394:	4a8e      	ldr	r2, [pc, #568]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004396:	430b      	orrs	r3, r1
 8004398:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a8:	2300      	movs	r3, #0
 80043aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b6:	4b86      	ldr	r3, [pc, #536]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	4a85      	ldr	r2, [pc, #532]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043c0:	6113      	str	r3, [r2, #16]
 80043c2:	4b83      	ldr	r3, [pc, #524]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c4:	6919      	ldr	r1, [r3, #16]
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80043ce:	4a80      	ldr	r2, [pc, #512]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e2:	2300      	movs	r3, #0
 80043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80043ea:	460b      	mov	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043f0:	4b77      	ldr	r3, [pc, #476]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	4a74      	ldr	r2, [pc, #464]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004400:	430b      	orrs	r3, r1
 8004402:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004410:	633b      	str	r3, [r7, #48]	@ 0x30
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	@ 0x34
 8004416:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004420:	4b6b      	ldr	r3, [pc, #428]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004430:	4a67      	ldr	r2, [pc, #412]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004432:	430b      	orrs	r3, r1
 8004434:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	2100      	movs	r1, #0
 8004440:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004448:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d011      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3308      	adds	r3, #8
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fb78 	bl	8004b50 <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	2100      	movs	r1, #0
 8004480:	6239      	str	r1, [r7, #32]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
 8004488:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d011      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	3308      	adds	r3, #8
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fb58 	bl	8004b50 <RCCEx_PLL2_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	2100      	movs	r1, #0
 80044c0:	61b9      	str	r1, [r7, #24]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d011      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	3308      	adds	r3, #8
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fb38 	bl	8004b50 <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	2100      	movs	r1, #0
 8004500:	6139      	str	r1, [r7, #16]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d011      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	3328      	adds	r3, #40	@ 0x28
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fbca 	bl	8004cb4 <RCCEx_PLL3_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	2100      	movs	r1, #0
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d011      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	3328      	adds	r3, #40	@ 0x28
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fbaa 	bl	8004cb4 <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	2100      	movs	r1, #0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e9d7 1200 	ldrd	r1, r2, [r7]
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d011      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	3328      	adds	r3, #40	@ 0x28
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb8a 	bl	8004cb4 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80045b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80045ca:	46bd      	mov	sp, r7
 80045cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d0:	58024400 	.word	0x58024400

080045d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045d8:	f7fe fd96 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4904      	ldr	r1, [pc, #16]	@ (80045fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	58024400 	.word	0x58024400
 80045fc:	080091d8 	.word	0x080091d8

08004600 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	@ 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004608:	4ba1      	ldr	r3, [pc, #644]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004612:	4b9f      	ldr	r3, [pc, #636]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	0b1b      	lsrs	r3, r3, #12
 8004618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800461c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800461e:	4b9c      	ldr	r3, [pc, #624]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800462a:	4b99      	ldr	r3, [pc, #612]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8111 	beq.w	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f000 8083 	beq.w	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b02      	cmp	r3, #2
 800465a:	f200 80a1 	bhi.w	80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d056      	beq.n	8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800466a:	e099      	b.n	80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800466c:	4b88      	ldr	r3, [pc, #544]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02d      	beq.n	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004678:	4b85      	ldr	r3, [pc, #532]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	4a84      	ldr	r2, [pc, #528]	@ (8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046d2:	e087      	b.n	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800489c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004716:	e065      	b.n	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a03 	vldr	s12, [r7, #12]
 800473e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475a:	e043      	b.n	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476e:	4b48      	ldr	r3, [pc, #288]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004782:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800479e:	e021      	b.n	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80047e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480a:	ee17 2a90 	vmov	r2, s15
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004812:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004838:	ee17 2a90 	vmov	r2, s15
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004840:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800485a:	edd7 6a07 	vldr	s13, [r7, #28]
 800485e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004866:	ee17 2a90 	vmov	r2, s15
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	bf00      	nop
 8004884:	3724      	adds	r7, #36	@ 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	03d09000 	.word	0x03d09000
 8004898:	46000000 	.word	0x46000000
 800489c:	4c742400 	.word	0x4c742400
 80048a0:	4a742400 	.word	0x4a742400
 80048a4:	4af42400 	.word	0x4af42400

080048a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80048ba:	4b9f      	ldr	r3, [pc, #636]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	0d1b      	lsrs	r3, r3, #20
 80048c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80048d2:	4b99      	ldr	r3, [pc, #612]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	08db      	lsrs	r3, r3, #3
 80048d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8111 	beq.w	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	f000 8083 	beq.w	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b02      	cmp	r3, #2
 8004902:	f200 80a1 	bhi.w	8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d056      	beq.n	80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004912:	e099      	b.n	8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004914:	4b88      	ldr	r3, [pc, #544]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02d      	beq.n	800497c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004920:	4b85      	ldr	r3, [pc, #532]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	4a84      	ldr	r2, [pc, #528]	@ (8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a03 	vldr	s12, [r7, #12]
 800495e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800497a:	e087      	b.n	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049be:	e065      	b.n	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a02:	e043      	b.n	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a16:	4b48      	ldr	r3, [pc, #288]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a46:	e021      	b.n	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab2:	ee17 2a90 	vmov	r2, s15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	0c1b      	lsrs	r3, r3, #16
 8004ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004acc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae0:	ee17 2a90 	vmov	r2, s15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ae8:	4b13      	ldr	r3, [pc, #76]	@ (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	0e1b      	lsrs	r3, r3, #24
 8004aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 2a90 	vmov	r2, s15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b16:	e008      	b.n	8004b2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
}
 8004b2a:	bf00      	nop
 8004b2c:	3724      	adds	r7, #36	@ 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	03d09000 	.word	0x03d09000
 8004b40:	46000000 	.word	0x46000000
 8004b44:	4c742400 	.word	0x4c742400
 8004b48:	4a742400 	.word	0x4a742400
 8004b4c:	4af42400 	.word	0x4af42400

08004b50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b5e:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d101      	bne.n	8004b6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e099      	b.n	8004ca2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4e      	ldr	r2, [pc, #312]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004b74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7a:	f7fc fa87 	bl	800108c <HAL_GetTick>
 8004b7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b82:	f7fc fa83 	bl	800108c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e086      	b.n	8004ca2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b94:	4b45      	ldr	r3, [pc, #276]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ba0:	4b42      	ldr	r3, [pc, #264]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	031b      	lsls	r3, r3, #12
 8004bae:	493f      	ldr	r1, [pc, #252]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004be4:	4931      	ldr	r1, [pc, #196]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bea:	4b30      	ldr	r3, [pc, #192]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	492d      	ldr	r1, [pc, #180]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	f023 0220 	bic.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	4928      	ldr	r1, [pc, #160]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c0e:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c14:	f023 0310 	bic.w	r3, r3, #16
 8004c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c1e:	4b24      	ldr	r3, [pc, #144]	@ (8004cb0 <RCCEx_PLL2_Config+0x160>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	69d2      	ldr	r2, [r2, #28]
 8004c26:	00d2      	lsls	r2, r2, #3
 8004c28:	4920      	ldr	r1, [pc, #128]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4a1e      	ldr	r2, [pc, #120]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c34:	f043 0310 	orr.w	r3, r3, #16
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c40:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c4c:	e00f      	b.n	8004c6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d106      	bne.n	8004c62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c54:	4b15      	ldr	r3, [pc, #84]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c60:	e005      	b.n	8004c6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c62:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	4a11      	ldr	r2, [pc, #68]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0e      	ldr	r2, [pc, #56]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fa07 	bl	800108c <HAL_GetTick>
 8004c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c80:	e008      	b.n	8004c94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c82:	f7fc fa03 	bl	800108c <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e006      	b.n	8004ca2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <RCCEx_PLL2_Config+0x15c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	ffff0007 	.word	0xffff0007

08004cb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cc2:	4b53      	ldr	r3, [pc, #332]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d101      	bne.n	8004cd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e099      	b.n	8004e06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cde:	f7fc f9d5 	bl	800108c <HAL_GetTick>
 8004ce2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce4:	e008      	b.n	8004cf8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ce6:	f7fc f9d1 	bl	800108c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e086      	b.n	8004e06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cf8:	4b45      	ldr	r3, [pc, #276]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d04:	4b42      	ldr	r3, [pc, #264]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	051b      	lsls	r3, r3, #20
 8004d12:	493f      	ldr	r1, [pc, #252]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	025b      	lsls	r3, r3, #9
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d48:	4931      	ldr	r1, [pc, #196]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d4e:	4b30      	ldr	r3, [pc, #192]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	492d      	ldr	r1, [pc, #180]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d60:	4b2b      	ldr	r3, [pc, #172]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	4928      	ldr	r1, [pc, #160]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d72:	4b27      	ldr	r3, [pc, #156]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a26      	ldr	r2, [pc, #152]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d7e:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d82:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <RCCEx_PLL3_Config+0x160>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	69d2      	ldr	r2, [r2, #28]
 8004d8a:	00d2      	lsls	r2, r2, #3
 8004d8c:	4920      	ldr	r1, [pc, #128]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d92:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	4a1e      	ldr	r2, [pc, #120]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004da4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004db0:	e00f      	b.n	8004dd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004db8:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dc4:	e005      	b.n	8004dd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dc6:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	4a11      	ldr	r2, [pc, #68]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dde:	f7fc f955 	bl	800108c <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de4:	e008      	b.n	8004df8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004de6:	f7fc f951 	bl	800108c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e006      	b.n	8004e06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	58024400 	.word	0x58024400
 8004e14:	ffff0007 	.word	0xffff0007

08004e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e042      	b.n	8004eb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fb ffef 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2224      	movs	r2, #36	@ 0x24
 8004e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fa14 	bl	8006290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fca9 	bl	80057c0 <UART_SetConfig>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e01b      	b.n	8004eb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fa93 	bl	80063d4 <UART_CheckIdleState>
 8004eae:	4603      	mov	r3, r0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d17b      	bne.n	8004fca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_UART_Transmit+0x26>
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e074      	b.n	8004fcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2221      	movs	r2, #33	@ 0x21
 8004eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ef2:	f7fc f8cb 	bl	800108c <HAL_GetTick>
 8004ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	88fa      	ldrh	r2, [r7, #6]
 8004efc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f10:	d108      	bne.n	8004f24 <HAL_UART_Transmit+0x6c>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e003      	b.n	8004f2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f2c:	e030      	b.n	8004f90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2180      	movs	r1, #128	@ 0x80
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f001 faf5 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e03d      	b.n	8004fcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3302      	adds	r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e007      	b.n	8004f7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1c8      	bne.n	8004f2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2140      	movs	r1, #64	@ 0x40
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f001 fabe 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e006      	b.n	8004fcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ffe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005002:	4013      	ands	r3, r2
 8005004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11b      	bne.n	8005048 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8393 	beq.w	8005764 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      }
      return;
 8005046:	e38d      	b.n	8005764 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8123 	beq.w	8005298 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005052:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005056:	4b8d      	ldr	r3, [pc, #564]	@ (800528c <HAL_UART_IRQHandler+0x2b8>)
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800505e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005062:	4b8b      	ldr	r3, [pc, #556]	@ (8005290 <HAL_UART_IRQHandler+0x2bc>)
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8116 	beq.w	8005298 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d011      	beq.n	800509c <HAL_UART_IRQHandler+0xc8>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d011      	beq.n	80050cc <HAL_UART_IRQHandler+0xf8>
 80050a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2202      	movs	r2, #2
 80050ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d011      	beq.n	80050fc <HAL_UART_IRQHandler+0x128>
 80050d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2204      	movs	r2, #4
 80050ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d017      	beq.n	8005138 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005114:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005118:	4b5c      	ldr	r3, [pc, #368]	@ (800528c <HAL_UART_IRQHandler+0x2b8>)
 800511a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2208      	movs	r2, #8
 8005126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512e:	f043 0208 	orr.w	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <HAL_UART_IRQHandler+0x196>
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00c      	beq.n	800516a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 82f9 	beq.w	8005768 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d013      	beq.n	80051aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d054      	beq.n	8005278 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 fa18 	bl	8006604 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d146      	bne.n	8005270 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3308      	adds	r3, #8
 80051e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800520e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800521a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1d9      	bne.n	80051e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523e:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <HAL_UART_IRQHandler+0x2c0>)
 8005240:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005248:	4618      	mov	r0, r3
 800524a:	f7fc fb65 	bl	8001918 <HAL_DMA_Abort_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005262:	4610      	mov	r0, r2
 8005264:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	e00f      	b.n	8005288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa93 	bl	8005794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526e:	e00b      	b.n	8005288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa8f 	bl	8005794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	e007      	b.n	8005288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa8b 	bl	8005794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005286:	e26f      	b.n	8005768 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	bf00      	nop
    return;
 800528a:	e26d      	b.n	8005768 <HAL_UART_IRQHandler+0x794>
 800528c:	10000001 	.word	0x10000001
 8005290:	04000120 	.word	0x04000120
 8005294:	080066d1 	.word	0x080066d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800529c:	2b01      	cmp	r3, #1
 800529e:	f040 8203 	bne.w	80056a8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 81fc 	beq.w	80056a8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 81f5 	beq.w	80056a8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2210      	movs	r2, #16
 80052c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b40      	cmp	r3, #64	@ 0x40
 80052d2:	f040 816d 	bne.w	80055b0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4aa4      	ldr	r2, [pc, #656]	@ (8005570 <HAL_UART_IRQHandler+0x59c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d068      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4aa1      	ldr	r2, [pc, #644]	@ (8005574 <HAL_UART_IRQHandler+0x5a0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d061      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005578 <HAL_UART_IRQHandler+0x5a4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d05a      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a9c      	ldr	r2, [pc, #624]	@ (800557c <HAL_UART_IRQHandler+0x5a8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d053      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a9a      	ldr	r2, [pc, #616]	@ (8005580 <HAL_UART_IRQHandler+0x5ac>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d04c      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a97      	ldr	r2, [pc, #604]	@ (8005584 <HAL_UART_IRQHandler+0x5b0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d045      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a95      	ldr	r2, [pc, #596]	@ (8005588 <HAL_UART_IRQHandler+0x5b4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d03e      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a92      	ldr	r2, [pc, #584]	@ (800558c <HAL_UART_IRQHandler+0x5b8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d037      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a90      	ldr	r2, [pc, #576]	@ (8005590 <HAL_UART_IRQHandler+0x5bc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d030      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a8d      	ldr	r2, [pc, #564]	@ (8005594 <HAL_UART_IRQHandler+0x5c0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d029      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a8b      	ldr	r2, [pc, #556]	@ (8005598 <HAL_UART_IRQHandler+0x5c4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a88      	ldr	r2, [pc, #544]	@ (800559c <HAL_UART_IRQHandler+0x5c8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01b      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a86      	ldr	r2, [pc, #536]	@ (80055a0 <HAL_UART_IRQHandler+0x5cc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d014      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a83      	ldr	r2, [pc, #524]	@ (80055a4 <HAL_UART_IRQHandler+0x5d0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00d      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a81      	ldr	r2, [pc, #516]	@ (80055a8 <HAL_UART_IRQHandler+0x5d4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d006      	beq.n	80053b6 <HAL_UART_IRQHandler+0x3e2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_UART_IRQHandler+0x5d8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d106      	bne.n	80053c4 <HAL_UART_IRQHandler+0x3f0>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	e005      	b.n	80053d0 <HAL_UART_IRQHandler+0x3fc>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80ad 	beq.w	8005538 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f080 80a5 	bcs.w	8005538 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005404:	f000 8087 	beq.w	8005516 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800541c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005436:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800543e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800544a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1da      	bne.n	8005408 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800547a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800547e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e1      	bne.n	8005452 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800549e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e3      	bne.n	800548e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e4      	bne.n	80054d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005510:	4618      	mov	r0, r3
 8005512:	f7fb fee3 	bl	80012dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005528:	b29b      	uxth	r3, r3
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	b29b      	uxth	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f939 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005536:	e119      	b.n	800576c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800553e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005542:	429a      	cmp	r2, r3
 8005544:	f040 8112 	bne.w	800576c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005554:	f040 810a 	bne.w	800576c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f91e 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
      return;
 800556c:	e0fe      	b.n	800576c <HAL_UART_IRQHandler+0x798>
 800556e:	bf00      	nop
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80cf 	beq.w	8005770 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80055d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80ca 	beq.w	8005770 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005600:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800560c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e4      	bne.n	80055dc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	623b      	str	r3, [r7, #32]
   return(result);
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	4b55      	ldr	r3, [pc, #340]	@ (800577c <HAL_UART_IRQHandler+0x7a8>)
 8005626:	4013      	ands	r3, r2
 8005628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005636:	633a      	str	r2, [r7, #48]	@ 0x30
 8005638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	60fb      	str	r3, [r7, #12]
   return(result);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0310 	bic.w	r3, r3, #16
 8005672:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	69b9      	ldr	r1, [r7, #24]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	617b      	str	r3, [r7, #20]
   return(result);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e4      	bne.n	800565e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800569a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f881 	bl	80057a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056a6:	e063      	b.n	8005770 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <HAL_UART_IRQHandler+0x6fe>
 80056b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80056c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f83d 	bl	800674a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056d0:	e051      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d014      	beq.n	8005708 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d03a      	beq.n	8005774 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
    }
    return;
 8005706:	e035      	b.n	8005774 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_UART_IRQHandler+0x754>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 ffe7 	bl	80066f4 <UART_EndTransmit_IT>
    return;
 8005726:	e026      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <HAL_UART_IRQHandler+0x774>
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005738:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f816 	bl	8006772 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005746:	e016      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <HAL_UART_IRQHandler+0x7a2>
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005758:	2b00      	cmp	r3, #0
 800575a:	da0c      	bge.n	8005776 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fffe 	bl	800675e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005762:	e008      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005764:	bf00      	nop
 8005766:	e006      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005768:	bf00      	nop
 800576a:	e004      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
      return;
 800576c:	bf00      	nop
 800576e:	e002      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005774:	bf00      	nop
  }
}
 8005776:	37e8      	adds	r7, #232	@ 0xe8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	effffffe 	.word	0xeffffffe

08005780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c4:	b092      	sub	sp, #72	@ 0x48
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	431a      	orrs	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	431a      	orrs	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4bbe      	ldr	r3, [pc, #760]	@ (8005ae8 <UART_SetConfig+0x328>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4ab3      	ldr	r2, [pc, #716]	@ (8005aec <UART_SetConfig+0x32c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005828:	4313      	orrs	r3, r2
 800582a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	4baf      	ldr	r3, [pc, #700]	@ (8005af0 <UART_SetConfig+0x330>)
 8005834:	4013      	ands	r3, r2
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	f023 010f 	bic.w	r1, r3, #15
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4aa6      	ldr	r2, [pc, #664]	@ (8005af4 <UART_SetConfig+0x334>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d177      	bne.n	8005950 <UART_SetConfig+0x190>
 8005860:	4ba5      	ldr	r3, [pc, #660]	@ (8005af8 <UART_SetConfig+0x338>)
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005868:	2b28      	cmp	r3, #40	@ 0x28
 800586a:	d86d      	bhi.n	8005948 <UART_SetConfig+0x188>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <UART_SetConfig+0xb4>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005919 	.word	0x08005919
 8005878:	08005949 	.word	0x08005949
 800587c:	08005949 	.word	0x08005949
 8005880:	08005949 	.word	0x08005949
 8005884:	08005949 	.word	0x08005949
 8005888:	08005949 	.word	0x08005949
 800588c:	08005949 	.word	0x08005949
 8005890:	08005949 	.word	0x08005949
 8005894:	08005921 	.word	0x08005921
 8005898:	08005949 	.word	0x08005949
 800589c:	08005949 	.word	0x08005949
 80058a0:	08005949 	.word	0x08005949
 80058a4:	08005949 	.word	0x08005949
 80058a8:	08005949 	.word	0x08005949
 80058ac:	08005949 	.word	0x08005949
 80058b0:	08005949 	.word	0x08005949
 80058b4:	08005929 	.word	0x08005929
 80058b8:	08005949 	.word	0x08005949
 80058bc:	08005949 	.word	0x08005949
 80058c0:	08005949 	.word	0x08005949
 80058c4:	08005949 	.word	0x08005949
 80058c8:	08005949 	.word	0x08005949
 80058cc:	08005949 	.word	0x08005949
 80058d0:	08005949 	.word	0x08005949
 80058d4:	08005931 	.word	0x08005931
 80058d8:	08005949 	.word	0x08005949
 80058dc:	08005949 	.word	0x08005949
 80058e0:	08005949 	.word	0x08005949
 80058e4:	08005949 	.word	0x08005949
 80058e8:	08005949 	.word	0x08005949
 80058ec:	08005949 	.word	0x08005949
 80058f0:	08005949 	.word	0x08005949
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005949 	.word	0x08005949
 80058fc:	08005949 	.word	0x08005949
 8005900:	08005949 	.word	0x08005949
 8005904:	08005949 	.word	0x08005949
 8005908:	08005949 	.word	0x08005949
 800590c:	08005949 	.word	0x08005949
 8005910:	08005949 	.word	0x08005949
 8005914:	08005941 	.word	0x08005941
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e222      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e21e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e21a      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e216      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e212      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005940:	2340      	movs	r3, #64	@ 0x40
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e20e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e20a      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a69      	ldr	r2, [pc, #420]	@ (8005afc <UART_SetConfig+0x33c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d130      	bne.n	80059bc <UART_SetConfig+0x1fc>
 800595a:	4b67      	ldr	r3, [pc, #412]	@ (8005af8 <UART_SetConfig+0x338>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b05      	cmp	r3, #5
 8005964:	d826      	bhi.n	80059b4 <UART_SetConfig+0x1f4>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0x1ac>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005985 	.word	0x08005985
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005995 	.word	0x08005995
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e1ec      	b.n	8005d66 <UART_SetConfig+0x5a6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e1e8      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e1e4      	b.n	8005d66 <UART_SetConfig+0x5a6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e1e0      	b.n	8005d66 <UART_SetConfig+0x5a6>
 80059a4:	2320      	movs	r3, #32
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e1dc      	b.n	8005d66 <UART_SetConfig+0x5a6>
 80059ac:	2340      	movs	r3, #64	@ 0x40
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e1d8      	b.n	8005d66 <UART_SetConfig+0x5a6>
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e1d4      	b.n	8005d66 <UART_SetConfig+0x5a6>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005b00 <UART_SetConfig+0x340>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d130      	bne.n	8005a28 <UART_SetConfig+0x268>
 80059c6:	4b4c      	ldr	r3, [pc, #304]	@ (8005af8 <UART_SetConfig+0x338>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d826      	bhi.n	8005a20 <UART_SetConfig+0x260>
 80059d2:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0x218>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	08005a01 	.word	0x08005a01
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a11 	.word	0x08005a11
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e1b6      	b.n	8005d66 <UART_SetConfig+0x5a6>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e1b2      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e1ae      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e1aa      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a10:	2320      	movs	r3, #32
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e1a6      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a18:	2340      	movs	r3, #64	@ 0x40
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e1a2      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e19e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a35      	ldr	r2, [pc, #212]	@ (8005b04 <UART_SetConfig+0x344>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d130      	bne.n	8005a94 <UART_SetConfig+0x2d4>
 8005a32:	4b31      	ldr	r3, [pc, #196]	@ (8005af8 <UART_SetConfig+0x338>)
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d826      	bhi.n	8005a8c <UART_SetConfig+0x2cc>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0x284>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a5d 	.word	0x08005a5d
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a6d 	.word	0x08005a6d
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e180      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e17c      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e178      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e174      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e170      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a84:	2340      	movs	r3, #64	@ 0x40
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8a:	e16c      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e168      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <UART_SetConfig+0x348>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d142      	bne.n	8005b24 <UART_SetConfig+0x364>
 8005a9e:	4b16      	ldr	r3, [pc, #88]	@ (8005af8 <UART_SetConfig+0x338>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	d838      	bhi.n	8005b1c <UART_SetConfig+0x35c>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <UART_SetConfig+0x2f0>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	08005ad9 	.word	0x08005ad9
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005b0d 	.word	0x08005b0d
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e14a      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e146      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005ad8:	2308      	movs	r3, #8
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e142      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e13e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005ae8:	cfff69f3 	.word	0xcfff69f3
 8005aec:	58000c00 	.word	0x58000c00
 8005af0:	11fff4ff 	.word	0x11fff4ff
 8005af4:	40011000 	.word	0x40011000
 8005af8:	58024400 	.word	0x58024400
 8005afc:	40004400 	.word	0x40004400
 8005b00:	40004800 	.word	0x40004800
 8005b04:	40004c00 	.word	0x40004c00
 8005b08:	40005000 	.word	0x40005000
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e128      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005b14:	2340      	movs	r3, #64	@ 0x40
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e124      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e120      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4acb      	ldr	r2, [pc, #812]	@ (8005e58 <UART_SetConfig+0x698>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d176      	bne.n	8005c1c <UART_SetConfig+0x45c>
 8005b2e:	4bcb      	ldr	r3, [pc, #812]	@ (8005e5c <UART_SetConfig+0x69c>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b36:	2b28      	cmp	r3, #40	@ 0x28
 8005b38:	d86c      	bhi.n	8005c14 <UART_SetConfig+0x454>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x380>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005be5 	.word	0x08005be5
 8005b44:	08005c15 	.word	0x08005c15
 8005b48:	08005c15 	.word	0x08005c15
 8005b4c:	08005c15 	.word	0x08005c15
 8005b50:	08005c15 	.word	0x08005c15
 8005b54:	08005c15 	.word	0x08005c15
 8005b58:	08005c15 	.word	0x08005c15
 8005b5c:	08005c15 	.word	0x08005c15
 8005b60:	08005bed 	.word	0x08005bed
 8005b64:	08005c15 	.word	0x08005c15
 8005b68:	08005c15 	.word	0x08005c15
 8005b6c:	08005c15 	.word	0x08005c15
 8005b70:	08005c15 	.word	0x08005c15
 8005b74:	08005c15 	.word	0x08005c15
 8005b78:	08005c15 	.word	0x08005c15
 8005b7c:	08005c15 	.word	0x08005c15
 8005b80:	08005bf5 	.word	0x08005bf5
 8005b84:	08005c15 	.word	0x08005c15
 8005b88:	08005c15 	.word	0x08005c15
 8005b8c:	08005c15 	.word	0x08005c15
 8005b90:	08005c15 	.word	0x08005c15
 8005b94:	08005c15 	.word	0x08005c15
 8005b98:	08005c15 	.word	0x08005c15
 8005b9c:	08005c15 	.word	0x08005c15
 8005ba0:	08005bfd 	.word	0x08005bfd
 8005ba4:	08005c15 	.word	0x08005c15
 8005ba8:	08005c15 	.word	0x08005c15
 8005bac:	08005c15 	.word	0x08005c15
 8005bb0:	08005c15 	.word	0x08005c15
 8005bb4:	08005c15 	.word	0x08005c15
 8005bb8:	08005c15 	.word	0x08005c15
 8005bbc:	08005c15 	.word	0x08005c15
 8005bc0:	08005c05 	.word	0x08005c05
 8005bc4:	08005c15 	.word	0x08005c15
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005c15 	.word	0x08005c15
 8005bd0:	08005c15 	.word	0x08005c15
 8005bd4:	08005c15 	.word	0x08005c15
 8005bd8:	08005c15 	.word	0x08005c15
 8005bdc:	08005c15 	.word	0x08005c15
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e0bc      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e0b8      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e0b4      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e0b0      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e0ac      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c0c:	2340      	movs	r3, #64	@ 0x40
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e0a8      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e0a4      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a8f      	ldr	r2, [pc, #572]	@ (8005e60 <UART_SetConfig+0x6a0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d130      	bne.n	8005c88 <UART_SetConfig+0x4c8>
 8005c26:	4b8d      	ldr	r3, [pc, #564]	@ (8005e5c <UART_SetConfig+0x69c>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d826      	bhi.n	8005c80 <UART_SetConfig+0x4c0>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0x478>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e086      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e082      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e07e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e07a      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e076      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c78:	2340      	movs	r3, #64	@ 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e072      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e06e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a75      	ldr	r2, [pc, #468]	@ (8005e64 <UART_SetConfig+0x6a4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d130      	bne.n	8005cf4 <UART_SetConfig+0x534>
 8005c92:	4b72      	ldr	r3, [pc, #456]	@ (8005e5c <UART_SetConfig+0x69c>)
 8005c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d826      	bhi.n	8005cec <UART_SetConfig+0x52c>
 8005c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x4e4>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005ccd 	.word	0x08005ccd
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e050      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e04c      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e048      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e044      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e040      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005ce4:	2340      	movs	r3, #64	@ 0x40
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e03c      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e038      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5b      	ldr	r2, [pc, #364]	@ (8005e68 <UART_SetConfig+0x6a8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d130      	bne.n	8005d60 <UART_SetConfig+0x5a0>
 8005cfe:	4b57      	ldr	r3, [pc, #348]	@ (8005e5c <UART_SetConfig+0x69c>)
 8005d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d826      	bhi.n	8005d58 <UART_SetConfig+0x598>
 8005d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <UART_SetConfig+0x550>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d29 	.word	0x08005d29
 8005d14:	08005d31 	.word	0x08005d31
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e01a      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e016      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e012      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e00e      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d48:	2320      	movs	r3, #32
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e00a      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d50:	2340      	movs	r3, #64	@ 0x40
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e006      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d58:	2380      	movs	r3, #128	@ 0x80
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e002      	b.n	8005d66 <UART_SetConfig+0x5a6>
 8005d60:	2380      	movs	r3, #128	@ 0x80
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e68 <UART_SetConfig+0x6a8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	f040 80f8 	bne.w	8005f62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	dc46      	bgt.n	8005e08 <UART_SetConfig+0x648>
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	f2c0 8082 	blt.w	8005e84 <UART_SetConfig+0x6c4>
 8005d80:	3b02      	subs	r3, #2
 8005d82:	2b1e      	cmp	r3, #30
 8005d84:	d87e      	bhi.n	8005e84 <UART_SetConfig+0x6c4>
 8005d86:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <UART_SetConfig+0x5cc>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005e0f 	.word	0x08005e0f
 8005d90:	08005e85 	.word	0x08005e85
 8005d94:	08005e17 	.word	0x08005e17
 8005d98:	08005e85 	.word	0x08005e85
 8005d9c:	08005e85 	.word	0x08005e85
 8005da0:	08005e85 	.word	0x08005e85
 8005da4:	08005e27 	.word	0x08005e27
 8005da8:	08005e85 	.word	0x08005e85
 8005dac:	08005e85 	.word	0x08005e85
 8005db0:	08005e85 	.word	0x08005e85
 8005db4:	08005e85 	.word	0x08005e85
 8005db8:	08005e85 	.word	0x08005e85
 8005dbc:	08005e85 	.word	0x08005e85
 8005dc0:	08005e85 	.word	0x08005e85
 8005dc4:	08005e37 	.word	0x08005e37
 8005dc8:	08005e85 	.word	0x08005e85
 8005dcc:	08005e85 	.word	0x08005e85
 8005dd0:	08005e85 	.word	0x08005e85
 8005dd4:	08005e85 	.word	0x08005e85
 8005dd8:	08005e85 	.word	0x08005e85
 8005ddc:	08005e85 	.word	0x08005e85
 8005de0:	08005e85 	.word	0x08005e85
 8005de4:	08005e85 	.word	0x08005e85
 8005de8:	08005e85 	.word	0x08005e85
 8005dec:	08005e85 	.word	0x08005e85
 8005df0:	08005e85 	.word	0x08005e85
 8005df4:	08005e85 	.word	0x08005e85
 8005df8:	08005e85 	.word	0x08005e85
 8005dfc:	08005e85 	.word	0x08005e85
 8005e00:	08005e85 	.word	0x08005e85
 8005e04:	08005e77 	.word	0x08005e77
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d037      	beq.n	8005e7c <UART_SetConfig+0x6bc>
 8005e0c:	e03a      	b.n	8005e84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e0e:	f7fe fbe1 	bl	80045d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e14:	e03c      	b.n	8005e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fbf0 	bl	8004600 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e24:	e034      	b.n	8005e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e26:	f107 0318 	add.w	r3, r7, #24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fd3c 	bl	80048a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e34:	e02c      	b.n	8005e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e36:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <UART_SetConfig+0x69c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e42:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <UART_SetConfig+0x69c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	08db      	lsrs	r3, r3, #3
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	4a07      	ldr	r2, [pc, #28]	@ (8005e6c <UART_SetConfig+0x6ac>)
 8005e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e54:	e01c      	b.n	8005e90 <UART_SetConfig+0x6d0>
 8005e56:	bf00      	nop
 8005e58:	40011400 	.word	0x40011400
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	40007800 	.word	0x40007800
 8005e64:	40007c00 	.word	0x40007c00
 8005e68:	58000c00 	.word	0x58000c00
 8005e6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b9d      	ldr	r3, [pc, #628]	@ (80060e8 <UART_SetConfig+0x928>)
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e74:	e00c      	b.n	8005e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e76:	4b9d      	ldr	r3, [pc, #628]	@ (80060ec <UART_SetConfig+0x92c>)
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e7a:	e009      	b.n	8005e90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e82:	e005      	b.n	8005e90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 81de 	beq.w	8006254 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	4a94      	ldr	r2, [pc, #592]	@ (80060f0 <UART_SetConfig+0x930>)
 8005e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eaa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d305      	bcc.n	8005ec8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d903      	bls.n	8005ed0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ece:	e1c1      	b.n	8006254 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	60fa      	str	r2, [r7, #12]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	4a84      	ldr	r2, [pc, #528]	@ (80060f0 <UART_SetConfig+0x930>)
 8005ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ef2:	f7fa fa4d 	bl	8000390 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4610      	mov	r0, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	020b      	lsls	r3, r1, #8
 8005f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f0c:	0202      	lsls	r2, r0, #8
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	6849      	ldr	r1, [r1, #4]
 8005f12:	0849      	lsrs	r1, r1, #1
 8005f14:	2000      	movs	r0, #0
 8005f16:	460c      	mov	r4, r1
 8005f18:	4605      	mov	r5, r0
 8005f1a:	eb12 0804 	adds.w	r8, r2, r4
 8005f1e:	eb43 0905 	adc.w	r9, r3, r5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	469a      	mov	sl, r3
 8005f2a:	4693      	mov	fp, r2
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	465b      	mov	r3, fp
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa fa2c 	bl	8000390 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f46:	d308      	bcc.n	8005f5a <UART_SetConfig+0x79a>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f4e:	d204      	bcs.n	8005f5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f56:	60da      	str	r2, [r3, #12]
 8005f58:	e17c      	b.n	8006254 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f60:	e178      	b.n	8006254 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6a:	f040 80c5 	bne.w	80060f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	dc48      	bgt.n	8006008 <UART_SetConfig+0x848>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	db7b      	blt.n	8006072 <UART_SetConfig+0x8b2>
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d879      	bhi.n	8006072 <UART_SetConfig+0x8b2>
 8005f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <UART_SetConfig+0x7c4>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	0800600f 	.word	0x0800600f
 8005f88:	08006017 	.word	0x08006017
 8005f8c:	08006073 	.word	0x08006073
 8005f90:	08006073 	.word	0x08006073
 8005f94:	0800601f 	.word	0x0800601f
 8005f98:	08006073 	.word	0x08006073
 8005f9c:	08006073 	.word	0x08006073
 8005fa0:	08006073 	.word	0x08006073
 8005fa4:	0800602f 	.word	0x0800602f
 8005fa8:	08006073 	.word	0x08006073
 8005fac:	08006073 	.word	0x08006073
 8005fb0:	08006073 	.word	0x08006073
 8005fb4:	08006073 	.word	0x08006073
 8005fb8:	08006073 	.word	0x08006073
 8005fbc:	08006073 	.word	0x08006073
 8005fc0:	08006073 	.word	0x08006073
 8005fc4:	0800603f 	.word	0x0800603f
 8005fc8:	08006073 	.word	0x08006073
 8005fcc:	08006073 	.word	0x08006073
 8005fd0:	08006073 	.word	0x08006073
 8005fd4:	08006073 	.word	0x08006073
 8005fd8:	08006073 	.word	0x08006073
 8005fdc:	08006073 	.word	0x08006073
 8005fe0:	08006073 	.word	0x08006073
 8005fe4:	08006073 	.word	0x08006073
 8005fe8:	08006073 	.word	0x08006073
 8005fec:	08006073 	.word	0x08006073
 8005ff0:	08006073 	.word	0x08006073
 8005ff4:	08006073 	.word	0x08006073
 8005ff8:	08006073 	.word	0x08006073
 8005ffc:	08006073 	.word	0x08006073
 8006000:	08006073 	.word	0x08006073
 8006004:	08006065 	.word	0x08006065
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d02e      	beq.n	800606a <UART_SetConfig+0x8aa>
 800600c:	e031      	b.n	8006072 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600e:	f7fd f8ab 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8006012:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006014:	e033      	b.n	800607e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006016:	f7fd f8bd 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 800601a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800601c:	e02f      	b.n	800607e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800601e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe faec 	bl	8004600 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602c:	e027      	b.n	800607e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800602e:	f107 0318 	add.w	r3, r7, #24
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fc38 	bl	80048a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800603c:	e01f      	b.n	800607e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800603e:	4b2d      	ldr	r3, [pc, #180]	@ (80060f4 <UART_SetConfig+0x934>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800604a:	4b2a      	ldr	r3, [pc, #168]	@ (80060f4 <UART_SetConfig+0x934>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	08db      	lsrs	r3, r3, #3
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	4a24      	ldr	r2, [pc, #144]	@ (80060e8 <UART_SetConfig+0x928>)
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800605c:	e00f      	b.n	800607e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800605e:	4b22      	ldr	r3, [pc, #136]	@ (80060e8 <UART_SetConfig+0x928>)
 8006060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006062:	e00c      	b.n	800607e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006064:	4b21      	ldr	r3, [pc, #132]	@ (80060ec <UART_SetConfig+0x92c>)
 8006066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006068:	e009      	b.n	800607e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800606e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006070:	e005      	b.n	800607e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800607c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800607e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80e7 	beq.w	8006254 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	4a19      	ldr	r2, [pc, #100]	@ (80060f0 <UART_SetConfig+0x930>)
 800608c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006090:	461a      	mov	r2, r3
 8006092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006094:	fbb3 f3f2 	udiv	r3, r3, r2
 8006098:	005a      	lsls	r2, r3, #1
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	441a      	add	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d916      	bls.n	80060e0 <UART_SetConfig+0x920>
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b8:	d212      	bcs.n	80060e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f023 030f 	bic.w	r3, r3, #15
 80060c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060d2:	4313      	orrs	r3, r2
 80060d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e0b9      	b.n	8006254 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060e6:	e0b5      	b.n	8006254 <UART_SetConfig+0xa94>
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	080091e8 	.word	0x080091e8
 80060f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	dc49      	bgt.n	8006194 <UART_SetConfig+0x9d4>
 8006100:	2b00      	cmp	r3, #0
 8006102:	db7c      	blt.n	80061fe <UART_SetConfig+0xa3e>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d87a      	bhi.n	80061fe <UART_SetConfig+0xa3e>
 8006108:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0x950>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	0800619b 	.word	0x0800619b
 8006114:	080061a3 	.word	0x080061a3
 8006118:	080061ff 	.word	0x080061ff
 800611c:	080061ff 	.word	0x080061ff
 8006120:	080061ab 	.word	0x080061ab
 8006124:	080061ff 	.word	0x080061ff
 8006128:	080061ff 	.word	0x080061ff
 800612c:	080061ff 	.word	0x080061ff
 8006130:	080061bb 	.word	0x080061bb
 8006134:	080061ff 	.word	0x080061ff
 8006138:	080061ff 	.word	0x080061ff
 800613c:	080061ff 	.word	0x080061ff
 8006140:	080061ff 	.word	0x080061ff
 8006144:	080061ff 	.word	0x080061ff
 8006148:	080061ff 	.word	0x080061ff
 800614c:	080061ff 	.word	0x080061ff
 8006150:	080061cb 	.word	0x080061cb
 8006154:	080061ff 	.word	0x080061ff
 8006158:	080061ff 	.word	0x080061ff
 800615c:	080061ff 	.word	0x080061ff
 8006160:	080061ff 	.word	0x080061ff
 8006164:	080061ff 	.word	0x080061ff
 8006168:	080061ff 	.word	0x080061ff
 800616c:	080061ff 	.word	0x080061ff
 8006170:	080061ff 	.word	0x080061ff
 8006174:	080061ff 	.word	0x080061ff
 8006178:	080061ff 	.word	0x080061ff
 800617c:	080061ff 	.word	0x080061ff
 8006180:	080061ff 	.word	0x080061ff
 8006184:	080061ff 	.word	0x080061ff
 8006188:	080061ff 	.word	0x080061ff
 800618c:	080061ff 	.word	0x080061ff
 8006190:	080061f1 	.word	0x080061f1
 8006194:	2b40      	cmp	r3, #64	@ 0x40
 8006196:	d02e      	beq.n	80061f6 <UART_SetConfig+0xa36>
 8006198:	e031      	b.n	80061fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619a:	f7fc ffe5 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 800619e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061a0:	e033      	b.n	800620a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a2:	f7fc fff7 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 80061a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061a8:	e02f      	b.n	800620a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fa26 	bl	8004600 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b8:	e027      	b.n	800620a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ba:	f107 0318 	add.w	r3, r7, #24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fb72 	bl	80048a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c8:	e01f      	b.n	800620a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006280 <UART_SetConfig+0xac0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006280 <UART_SetConfig+0xac0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	08db      	lsrs	r3, r3, #3
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	4a28      	ldr	r2, [pc, #160]	@ (8006284 <UART_SetConfig+0xac4>)
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061e8:	e00f      	b.n	800620a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061ea:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <UART_SetConfig+0xac4>)
 80061ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ee:	e00c      	b.n	800620a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061f0:	4b25      	ldr	r3, [pc, #148]	@ (8006288 <UART_SetConfig+0xac8>)
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f4:	e009      	b.n	800620a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fc:	e005      	b.n	800620a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006208:	bf00      	nop
    }

    if (pclk != 0U)
 800620a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d021      	beq.n	8006254 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	4a1d      	ldr	r2, [pc, #116]	@ (800628c <UART_SetConfig+0xacc>)
 8006216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800621a:	461a      	mov	r2, r3
 800621c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	441a      	add	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d909      	bls.n	800624e <UART_SetConfig+0xa8e>
 800623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006240:	d205      	bcs.n	800624e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	b29a      	uxth	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e002      	b.n	8006254 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2201      	movs	r2, #1
 8006258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006270:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006274:	4618      	mov	r0, r3
 8006276:	3748      	adds	r7, #72	@ 0x48
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	58024400 	.word	0x58024400
 8006284:	03d09000 	.word	0x03d09000
 8006288:	003d0900 	.word	0x003d0900
 800628c:	080091e8 	.word	0x080091e8

08006290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638e:	d10a      	bne.n	80063a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b098      	sub	sp, #96	@ 0x60
 80063d8:	af02      	add	r7, sp, #8
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e4:	f7fa fe52 	bl	800108c <HAL_GetTick>
 80063e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d12f      	bne.n	8006458 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006400:	2200      	movs	r2, #0
 8006402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f88e 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d022      	beq.n	8006458 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006426:	653b      	str	r3, [r7, #80]	@ 0x50
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e063      	b.n	8006520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b04      	cmp	r3, #4
 8006464:	d149      	bne.n	80064fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006466:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646e:	2200      	movs	r2, #0
 8006470:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f857 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d03c      	beq.n	80064fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	623b      	str	r3, [r7, #32]
   return(result);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649e:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064d2:	61fa      	str	r2, [r7, #28]
 80064d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	69b9      	ldr	r1, [r7, #24]
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	617b      	str	r3, [r7, #20]
   return(result);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e5      	bne.n	80064b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e012      	b.n	8006520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3758      	adds	r7, #88	@ 0x58
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	e04f      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d04b      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fa fda3 	bl	800108c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <UART_WaitOnFlagUntilTimeout+0x30>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e04e      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d037      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b80      	cmp	r3, #128	@ 0x80
 800656e:	d034      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b40      	cmp	r3, #64	@ 0x40
 8006574:	d031      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d110      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2208      	movs	r2, #8
 800658a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f839 	bl	8006604 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2208      	movs	r2, #8
 8006596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e029      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b4:	d111      	bne.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f81f 	bl	8006604 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e00f      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d0a0      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b095      	sub	sp, #84	@ 0x54
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662a:	643b      	str	r3, [r7, #64]	@ 0x40
 800662c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006630:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e6      	bne.n	800660c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	61fb      	str	r3, [r7, #28]
   return(result);
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	4b1e      	ldr	r3, [pc, #120]	@ (80066cc <UART_EndRxTransfer+0xc8>)
 8006652:	4013      	ands	r3, r2
 8006654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800665e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d118      	bne.n	80066ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	60bb      	str	r3, [r7, #8]
   return(result);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 0310 	bic.w	r3, r3, #16
 800668e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6979      	ldr	r1, [r7, #20]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	613b      	str	r3, [r7, #16]
   return(result);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066c0:	bf00      	nop
 80066c2:	3754      	adds	r7, #84	@ 0x54
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	effffffe 	.word	0xeffffffe

080066d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff f854 	bl	8005794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	60bb      	str	r3, [r7, #8]
   return(result);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff f81f 	bl	8005780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006742:	bf00      	nop
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_UARTEx_DisableFifoMode+0x16>
 8006798:	2302      	movs	r3, #2
 800679a:	e027      	b.n	80067ec <HAL_UARTEx_DisableFifoMode+0x66>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2224      	movs	r2, #36	@ 0x24
 80067a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80067ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800680c:	2302      	movs	r3, #2
 800680e:	e02d      	b.n	800686c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2224      	movs	r2, #36	@ 0x24
 800681c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f84f 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e02d      	b.n	80068e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2224      	movs	r2, #36	@ 0x24
 8006898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0201 	bic.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f811 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006910:	e031      	b.n	8006976 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006912:	2310      	movs	r3, #16
 8006914:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006916:	2310      	movs	r3, #16
 8006918:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	0e5b      	lsrs	r3, r3, #25
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	0f5b      	lsrs	r3, r3, #29
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	7b3a      	ldrb	r2, [r7, #12]
 800693e:	4911      	ldr	r1, [pc, #68]	@ (8006984 <UARTEx_SetNbDataToProcess+0x94>)
 8006940:	5c8a      	ldrb	r2, [r1, r2]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006946:	7b3a      	ldrb	r2, [r7, #12]
 8006948:	490f      	ldr	r1, [pc, #60]	@ (8006988 <UARTEx_SetNbDataToProcess+0x98>)
 800694a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800694c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	7b7a      	ldrb	r2, [r7, #13]
 800695c:	4909      	ldr	r1, [pc, #36]	@ (8006984 <UARTEx_SetNbDataToProcess+0x94>)
 800695e:	5c8a      	ldrb	r2, [r1, r2]
 8006960:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006964:	7b7a      	ldrb	r2, [r7, #13]
 8006966:	4908      	ldr	r1, [pc, #32]	@ (8006988 <UARTEx_SetNbDataToProcess+0x98>)
 8006968:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696a:	fb93 f3f2 	sdiv	r3, r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	08009200 	.word	0x08009200
 8006988:	08009208 	.word	0x08009208

0800698c <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800699e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a2:	d10e      	bne.n	80069c2 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d107      	bne.n	80069c2 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0201 	mvn.w	r2, #1
 80069ba:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f804 	bl	80069ca <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <__cvt>:
 80069de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e0:	ed2d 8b02 	vpush	{d8}
 80069e4:	eeb0 8b40 	vmov.f64	d8, d0
 80069e8:	b085      	sub	sp, #20
 80069ea:	4617      	mov	r7, r2
 80069ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80069ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069f0:	ee18 2a90 	vmov	r2, s17
 80069f4:	f025 0520 	bic.w	r5, r5, #32
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	bfb6      	itet	lt
 80069fc:	222d      	movlt	r2, #45	@ 0x2d
 80069fe:	2200      	movge	r2, #0
 8006a00:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a04:	2d46      	cmp	r5, #70	@ 0x46
 8006a06:	460c      	mov	r4, r1
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	d004      	beq.n	8006a16 <__cvt+0x38>
 8006a0c:	2d45      	cmp	r5, #69	@ 0x45
 8006a0e:	d100      	bne.n	8006a12 <__cvt+0x34>
 8006a10:	3401      	adds	r4, #1
 8006a12:	2102      	movs	r1, #2
 8006a14:	e000      	b.n	8006a18 <__cvt+0x3a>
 8006a16:	2103      	movs	r1, #3
 8006a18:	ab03      	add	r3, sp, #12
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	ab02      	add	r3, sp, #8
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	4622      	mov	r2, r4
 8006a22:	4633      	mov	r3, r6
 8006a24:	eeb0 0b48 	vmov.f64	d0, d8
 8006a28:	f000 fe1e 	bl	8007668 <_dtoa_r>
 8006a2c:	2d47      	cmp	r5, #71	@ 0x47
 8006a2e:	d114      	bne.n	8006a5a <__cvt+0x7c>
 8006a30:	07fb      	lsls	r3, r7, #31
 8006a32:	d50a      	bpl.n	8006a4a <__cvt+0x6c>
 8006a34:	1902      	adds	r2, r0, r4
 8006a36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3e:	bf08      	it	eq
 8006a40:	9203      	streq	r2, [sp, #12]
 8006a42:	2130      	movs	r1, #48	@ 0x30
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d319      	bcc.n	8006a7e <__cvt+0xa0>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a4e:	1a1b      	subs	r3, r3, r0
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	b005      	add	sp, #20
 8006a54:	ecbd 8b02 	vpop	{d8}
 8006a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5a:	2d46      	cmp	r5, #70	@ 0x46
 8006a5c:	eb00 0204 	add.w	r2, r0, r4
 8006a60:	d1e9      	bne.n	8006a36 <__cvt+0x58>
 8006a62:	7803      	ldrb	r3, [r0, #0]
 8006a64:	2b30      	cmp	r3, #48	@ 0x30
 8006a66:	d107      	bne.n	8006a78 <__cvt+0x9a>
 8006a68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a70:	bf1c      	itt	ne
 8006a72:	f1c4 0401 	rsbne	r4, r4, #1
 8006a76:	6034      	strne	r4, [r6, #0]
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	441a      	add	r2, r3
 8006a7c:	e7db      	b.n	8006a36 <__cvt+0x58>
 8006a7e:	1c5c      	adds	r4, r3, #1
 8006a80:	9403      	str	r4, [sp, #12]
 8006a82:	7019      	strb	r1, [r3, #0]
 8006a84:	e7de      	b.n	8006a44 <__cvt+0x66>

08006a86 <__exponent>:
 8006a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	bfba      	itte	lt
 8006a8c:	4249      	neglt	r1, r1
 8006a8e:	232d      	movlt	r3, #45	@ 0x2d
 8006a90:	232b      	movge	r3, #43	@ 0x2b
 8006a92:	2909      	cmp	r1, #9
 8006a94:	7002      	strb	r2, [r0, #0]
 8006a96:	7043      	strb	r3, [r0, #1]
 8006a98:	dd29      	ble.n	8006aee <__exponent+0x68>
 8006a9a:	f10d 0307 	add.w	r3, sp, #7
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	270a      	movs	r7, #10
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006aa8:	fb07 1416 	mls	r4, r7, r6, r1
 8006aac:	3430      	adds	r4, #48	@ 0x30
 8006aae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	2c63      	cmp	r4, #99	@ 0x63
 8006ab6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006aba:	4631      	mov	r1, r6
 8006abc:	dcf1      	bgt.n	8006aa2 <__exponent+0x1c>
 8006abe:	3130      	adds	r1, #48	@ 0x30
 8006ac0:	1e94      	subs	r4, r2, #2
 8006ac2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ac6:	1c41      	adds	r1, r0, #1
 8006ac8:	4623      	mov	r3, r4
 8006aca:	42ab      	cmp	r3, r5
 8006acc:	d30a      	bcc.n	8006ae4 <__exponent+0x5e>
 8006ace:	f10d 0309 	add.w	r3, sp, #9
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	42ac      	cmp	r4, r5
 8006ad6:	bf88      	it	hi
 8006ad8:	2300      	movhi	r3, #0
 8006ada:	3302      	adds	r3, #2
 8006adc:	4403      	add	r3, r0
 8006ade:	1a18      	subs	r0, r3, r0
 8006ae0:	b003      	add	sp, #12
 8006ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ae8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006aec:	e7ed      	b.n	8006aca <__exponent+0x44>
 8006aee:	2330      	movs	r3, #48	@ 0x30
 8006af0:	3130      	adds	r1, #48	@ 0x30
 8006af2:	7083      	strb	r3, [r0, #2]
 8006af4:	70c1      	strb	r1, [r0, #3]
 8006af6:	1d03      	adds	r3, r0, #4
 8006af8:	e7f1      	b.n	8006ade <__exponent+0x58>
 8006afa:	0000      	movs	r0, r0
 8006afc:	0000      	movs	r0, r0
	...

08006b00 <_printf_float>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	b08d      	sub	sp, #52	@ 0x34
 8006b06:	460c      	mov	r4, r1
 8006b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	4605      	mov	r5, r0
 8006b12:	f000 fca9 	bl	8007468 <_localeconv_r>
 8006b16:	f8d0 b000 	ldr.w	fp, [r0]
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f7f9 fc30 	bl	8000380 <strlen>
 8006b20:	2300      	movs	r3, #0
 8006b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b24:	f8d8 3000 	ldr.w	r3, [r8]
 8006b28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	9005      	str	r0, [sp, #20]
 8006b30:	3307      	adds	r3, #7
 8006b32:	f023 0307 	bic.w	r3, r3, #7
 8006b36:	f103 0108 	add.w	r1, r3, #8
 8006b3a:	f8c8 1000 	str.w	r1, [r8]
 8006b3e:	ed93 0b00 	vldr	d0, [r3]
 8006b42:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006da0 <_printf_float+0x2a0>
 8006b46:	eeb0 7bc0 	vabs.f64	d7, d0
 8006b4a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006b56:	dd24      	ble.n	8006ba2 <_printf_float+0xa2>
 8006b58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	d502      	bpl.n	8006b68 <_printf_float+0x68>
 8006b62:	232d      	movs	r3, #45	@ 0x2d
 8006b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b68:	498f      	ldr	r1, [pc, #572]	@ (8006da8 <_printf_float+0x2a8>)
 8006b6a:	4b90      	ldr	r3, [pc, #576]	@ (8006dac <_printf_float+0x2ac>)
 8006b6c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006b70:	bf8c      	ite	hi
 8006b72:	4688      	movhi	r8, r1
 8006b74:	4698      	movls	r8, r3
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	f04f 0a00 	mov.w	sl, #0
 8006b84:	9700      	str	r7, [sp, #0]
 8006b86:	4633      	mov	r3, r6
 8006b88:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 f9d1 	bl	8006f34 <_printf_common>
 8006b92:	3001      	adds	r0, #1
 8006b94:	f040 8089 	bne.w	8006caa <_printf_float+0x1aa>
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	b00d      	add	sp, #52	@ 0x34
 8006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	eeb4 0b40 	vcmp.f64	d0, d0
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	d709      	bvc.n	8006bc0 <_printf_float+0xc0>
 8006bac:	ee10 3a90 	vmov	r3, s1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfbc      	itt	lt
 8006bb4:	232d      	movlt	r3, #45	@ 0x2d
 8006bb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bba:	497d      	ldr	r1, [pc, #500]	@ (8006db0 <_printf_float+0x2b0>)
 8006bbc:	4b7d      	ldr	r3, [pc, #500]	@ (8006db4 <_printf_float+0x2b4>)
 8006bbe:	e7d5      	b.n	8006b6c <_printf_float+0x6c>
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	1c59      	adds	r1, r3, #1
 8006bc4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006bc8:	d139      	bne.n	8006c3e <_printf_float+0x13e>
 8006bca:	2306      	movs	r3, #6
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006bde:	ab09      	add	r3, sp, #36	@ 0x24
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6861      	ldr	r1, [r4, #4]
 8006be4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7ff fef8 	bl	80069de <__cvt>
 8006bee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	d129      	bne.n	8006c4c <_printf_float+0x14c>
 8006bf8:	1cc8      	adds	r0, r1, #3
 8006bfa:	db02      	blt.n	8006c02 <_printf_float+0x102>
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	dd41      	ble.n	8006c86 <_printf_float+0x186>
 8006c02:	f1a9 0902 	sub.w	r9, r9, #2
 8006c06:	fa5f f989 	uxtb.w	r9, r9
 8006c0a:	3901      	subs	r1, #1
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c12:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c14:	f7ff ff37 	bl	8006a86 <__exponent>
 8006c18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c1a:	1813      	adds	r3, r2, r0
 8006c1c:	2a01      	cmp	r2, #1
 8006c1e:	4682      	mov	sl, r0
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	dc02      	bgt.n	8006c2a <_printf_float+0x12a>
 8006c24:	6822      	ldr	r2, [r4, #0]
 8006c26:	07d2      	lsls	r2, r2, #31
 8006c28:	d501      	bpl.n	8006c2e <_printf_float+0x12e>
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0a6      	beq.n	8006b84 <_printf_float+0x84>
 8006c36:	232d      	movs	r3, #45	@ 0x2d
 8006c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3c:	e7a2      	b.n	8006b84 <_printf_float+0x84>
 8006c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c42:	d1c4      	bne.n	8006bce <_printf_float+0xce>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1c2      	bne.n	8006bce <_printf_float+0xce>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e7bf      	b.n	8006bcc <_printf_float+0xcc>
 8006c4c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006c50:	d9db      	bls.n	8006c0a <_printf_float+0x10a>
 8006c52:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006c56:	d118      	bne.n	8006c8a <_printf_float+0x18a>
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	dd0b      	ble.n	8006c76 <_printf_float+0x176>
 8006c5e:	6121      	str	r1, [r4, #16]
 8006c60:	b913      	cbnz	r3, 8006c68 <_printf_float+0x168>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d502      	bpl.n	8006c6e <_printf_float+0x16e>
 8006c68:	3301      	adds	r3, #1
 8006c6a:	440b      	add	r3, r1
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c70:	f04f 0a00 	mov.w	sl, #0
 8006c74:	e7db      	b.n	8006c2e <_printf_float+0x12e>
 8006c76:	b913      	cbnz	r3, 8006c7e <_printf_float+0x17e>
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	07d2      	lsls	r2, r2, #31
 8006c7c:	d501      	bpl.n	8006c82 <_printf_float+0x182>
 8006c7e:	3302      	adds	r3, #2
 8006c80:	e7f4      	b.n	8006c6c <_printf_float+0x16c>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e7f2      	b.n	8006c6c <_printf_float+0x16c>
 8006c86:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	db05      	blt.n	8006c9c <_printf_float+0x19c>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	6121      	str	r1, [r4, #16]
 8006c94:	07d8      	lsls	r0, r3, #31
 8006c96:	d5ea      	bpl.n	8006c6e <_printf_float+0x16e>
 8006c98:	1c4b      	adds	r3, r1, #1
 8006c9a:	e7e7      	b.n	8006c6c <_printf_float+0x16c>
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	bfd4      	ite	le
 8006ca0:	f1c1 0202 	rsble	r2, r1, #2
 8006ca4:	2201      	movgt	r2, #1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	e7e0      	b.n	8006c6c <_printf_float+0x16c>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	055a      	lsls	r2, r3, #21
 8006cae:	d407      	bmi.n	8006cc0 <_printf_float+0x1c0>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d12a      	bne.n	8006d14 <_printf_float+0x214>
 8006cbe:	e76b      	b.n	8006b98 <_printf_float+0x98>
 8006cc0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006cc4:	f240 80e0 	bls.w	8006e88 <_printf_float+0x388>
 8006cc8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006ccc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd4:	d133      	bne.n	8006d3e <_printf_float+0x23e>
 8006cd6:	4a38      	ldr	r2, [pc, #224]	@ (8006db8 <_printf_float+0x2b8>)
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f af59 	beq.w	8006b98 <_printf_float+0x98>
 8006ce6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cea:	4543      	cmp	r3, r8
 8006cec:	db02      	blt.n	8006cf4 <_printf_float+0x1f4>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	07d8      	lsls	r0, r3, #31
 8006cf2:	d50f      	bpl.n	8006d14 <_printf_float+0x214>
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	465a      	mov	r2, fp
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f43f af4a 	beq.w	8006b98 <_printf_float+0x98>
 8006d04:	f04f 0900 	mov.w	r9, #0
 8006d08:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d0c:	f104 0a1a 	add.w	sl, r4, #26
 8006d10:	45c8      	cmp	r8, r9
 8006d12:	dc09      	bgt.n	8006d28 <_printf_float+0x228>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	079b      	lsls	r3, r3, #30
 8006d18:	f100 8107 	bmi.w	8006f2a <_printf_float+0x42a>
 8006d1c:	68e0      	ldr	r0, [r4, #12]
 8006d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d20:	4298      	cmp	r0, r3
 8006d22:	bfb8      	it	lt
 8006d24:	4618      	movlt	r0, r3
 8006d26:	e739      	b.n	8006b9c <_printf_float+0x9c>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af30 	beq.w	8006b98 <_printf_float+0x98>
 8006d38:	f109 0901 	add.w	r9, r9, #1
 8006d3c:	e7e8      	b.n	8006d10 <_printf_float+0x210>
 8006d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc3b      	bgt.n	8006dbc <_printf_float+0x2bc>
 8006d44:	4a1c      	ldr	r2, [pc, #112]	@ (8006db8 <_printf_float+0x2b8>)
 8006d46:	2301      	movs	r3, #1
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	f43f af22 	beq.w	8006b98 <_printf_float+0x98>
 8006d54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d58:	ea59 0303 	orrs.w	r3, r9, r3
 8006d5c:	d102      	bne.n	8006d64 <_printf_float+0x264>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	07d9      	lsls	r1, r3, #31
 8006d62:	d5d7      	bpl.n	8006d14 <_printf_float+0x214>
 8006d64:	9b05      	ldr	r3, [sp, #20]
 8006d66:	465a      	mov	r2, fp
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af12 	beq.w	8006b98 <_printf_float+0x98>
 8006d74:	f04f 0a00 	mov.w	sl, #0
 8006d78:	f104 0b1a 	add.w	fp, r4, #26
 8006d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7e:	425b      	negs	r3, r3
 8006d80:	4553      	cmp	r3, sl
 8006d82:	dc01      	bgt.n	8006d88 <_printf_float+0x288>
 8006d84:	464b      	mov	r3, r9
 8006d86:	e794      	b.n	8006cb2 <_printf_float+0x1b2>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	465a      	mov	r2, fp
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f af00 	beq.w	8006b98 <_printf_float+0x98>
 8006d98:	f10a 0a01 	add.w	sl, sl, #1
 8006d9c:	e7ee      	b.n	8006d7c <_printf_float+0x27c>
 8006d9e:	bf00      	nop
 8006da0:	ffffffff 	.word	0xffffffff
 8006da4:	7fefffff 	.word	0x7fefffff
 8006da8:	08009214 	.word	0x08009214
 8006dac:	08009210 	.word	0x08009210
 8006db0:	0800921c 	.word	0x0800921c
 8006db4:	08009218 	.word	0x08009218
 8006db8:	08009220 	.word	0x08009220
 8006dbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dc2:	4553      	cmp	r3, sl
 8006dc4:	bfa8      	it	ge
 8006dc6:	4653      	movge	r3, sl
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	4699      	mov	r9, r3
 8006dcc:	dc37      	bgt.n	8006e3e <_printf_float+0x33e>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9307      	str	r3, [sp, #28]
 8006dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dd6:	f104 021a 	add.w	r2, r4, #26
 8006dda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ddc:	9907      	ldr	r1, [sp, #28]
 8006dde:	9306      	str	r3, [sp, #24]
 8006de0:	eba3 0309 	sub.w	r3, r3, r9
 8006de4:	428b      	cmp	r3, r1
 8006de6:	dc31      	bgt.n	8006e4c <_printf_float+0x34c>
 8006de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dea:	459a      	cmp	sl, r3
 8006dec:	dc3b      	bgt.n	8006e66 <_printf_float+0x366>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	07da      	lsls	r2, r3, #31
 8006df2:	d438      	bmi.n	8006e66 <_printf_float+0x366>
 8006df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df6:	ebaa 0903 	sub.w	r9, sl, r3
 8006dfa:	9b06      	ldr	r3, [sp, #24]
 8006dfc:	ebaa 0303 	sub.w	r3, sl, r3
 8006e00:	4599      	cmp	r9, r3
 8006e02:	bfa8      	it	ge
 8006e04:	4699      	movge	r9, r3
 8006e06:	f1b9 0f00 	cmp.w	r9, #0
 8006e0a:	dc34      	bgt.n	8006e76 <_printf_float+0x376>
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e14:	f104 0b1a 	add.w	fp, r4, #26
 8006e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e1e:	eba3 0309 	sub.w	r3, r3, r9
 8006e22:	4543      	cmp	r3, r8
 8006e24:	f77f af76 	ble.w	8006d14 <_printf_float+0x214>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	465a      	mov	r2, fp
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	f43f aeb0 	beq.w	8006b98 <_printf_float+0x98>
 8006e38:	f108 0801 	add.w	r8, r8, #1
 8006e3c:	e7ec      	b.n	8006e18 <_printf_float+0x318>
 8006e3e:	4642      	mov	r2, r8
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	d1c1      	bne.n	8006dce <_printf_float+0x2ce>
 8006e4a:	e6a5      	b.n	8006b98 <_printf_float+0x98>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	9206      	str	r2, [sp, #24]
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f ae9e 	beq.w	8006b98 <_printf_float+0x98>
 8006e5c:	9b07      	ldr	r3, [sp, #28]
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	3301      	adds	r3, #1
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	e7b9      	b.n	8006dda <_printf_float+0x2da>
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	465a      	mov	r2, fp
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	d1bf      	bne.n	8006df4 <_printf_float+0x2f4>
 8006e74:	e690      	b.n	8006b98 <_printf_float+0x98>
 8006e76:	9a06      	ldr	r2, [sp, #24]
 8006e78:	464b      	mov	r3, r9
 8006e7a:	4442      	add	r2, r8
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	d1c2      	bne.n	8006e0c <_printf_float+0x30c>
 8006e86:	e687      	b.n	8006b98 <_printf_float+0x98>
 8006e88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006e8c:	f1b9 0f01 	cmp.w	r9, #1
 8006e90:	dc01      	bgt.n	8006e96 <_printf_float+0x396>
 8006e92:	07db      	lsls	r3, r3, #31
 8006e94:	d536      	bpl.n	8006f04 <_printf_float+0x404>
 8006e96:	2301      	movs	r3, #1
 8006e98:	4642      	mov	r2, r8
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f ae79 	beq.w	8006b98 <_printf_float+0x98>
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	465a      	mov	r2, fp
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae71 	beq.w	8006b98 <_printf_float+0x98>
 8006eb6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006eba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ec6:	d018      	beq.n	8006efa <_printf_float+0x3fa>
 8006ec8:	464b      	mov	r3, r9
 8006eca:	f108 0201 	add.w	r2, r8, #1
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d10c      	bne.n	8006ef2 <_printf_float+0x3f2>
 8006ed8:	e65e      	b.n	8006b98 <_printf_float+0x98>
 8006eda:	2301      	movs	r3, #1
 8006edc:	465a      	mov	r2, fp
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f43f ae57 	beq.w	8006b98 <_printf_float+0x98>
 8006eea:	f108 0801 	add.w	r8, r8, #1
 8006eee:	45c8      	cmp	r8, r9
 8006ef0:	dbf3      	blt.n	8006eda <_printf_float+0x3da>
 8006ef2:	4653      	mov	r3, sl
 8006ef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ef8:	e6dc      	b.n	8006cb4 <_printf_float+0x1b4>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	f104 0b1a 	add.w	fp, r4, #26
 8006f02:	e7f4      	b.n	8006eee <_printf_float+0x3ee>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4642      	mov	r2, r8
 8006f08:	e7e1      	b.n	8006ece <_printf_float+0x3ce>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	464a      	mov	r2, r9
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f ae3f 	beq.w	8006b98 <_printf_float+0x98>
 8006f1a:	f108 0801 	add.w	r8, r8, #1
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	4543      	cmp	r3, r8
 8006f26:	dcf0      	bgt.n	8006f0a <_printf_float+0x40a>
 8006f28:	e6f8      	b.n	8006d1c <_printf_float+0x21c>
 8006f2a:	f04f 0800 	mov.w	r8, #0
 8006f2e:	f104 0919 	add.w	r9, r4, #25
 8006f32:	e7f4      	b.n	8006f1e <_printf_float+0x41e>

08006f34 <_printf_common>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	4616      	mov	r6, r2
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	690b      	ldr	r3, [r1, #16]
 8006f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bfb8      	it	lt
 8006f48:	4613      	movlt	r3, r2
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f50:	4607      	mov	r7, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b10a      	cbz	r2, 8006f5a <_printf_common+0x26>
 8006f56:	3301      	adds	r3, #1
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	0699      	lsls	r1, r3, #26
 8006f5e:	bf42      	ittt	mi
 8006f60:	6833      	ldrmi	r3, [r6, #0]
 8006f62:	3302      	addmi	r3, #2
 8006f64:	6033      	strmi	r3, [r6, #0]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	f015 0506 	ands.w	r5, r5, #6
 8006f6c:	d106      	bne.n	8006f7c <_printf_common+0x48>
 8006f6e:	f104 0a19 	add.w	sl, r4, #25
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	6832      	ldr	r2, [r6, #0]
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	dc26      	bgt.n	8006fca <_printf_common+0x96>
 8006f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	3b00      	subs	r3, #0
 8006f84:	bf18      	it	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	0692      	lsls	r2, r2, #26
 8006f8a:	d42b      	bmi.n	8006fe4 <_printf_common+0xb0>
 8006f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f90:	4641      	mov	r1, r8
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c8      	blx	r9
 8006f96:	3001      	adds	r0, #1
 8006f98:	d01e      	beq.n	8006fd8 <_printf_common+0xa4>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	f003 0306 	and.w	r3, r3, #6
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	bf02      	ittt	eq
 8006fa6:	68e5      	ldreq	r5, [r4, #12]
 8006fa8:	6833      	ldreq	r3, [r6, #0]
 8006faa:	1aed      	subeq	r5, r5, r3
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	bf0c      	ite	eq
 8006fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fb4:	2500      	movne	r5, #0
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	bfc4      	itt	gt
 8006fba:	1a9b      	subgt	r3, r3, r2
 8006fbc:	18ed      	addgt	r5, r5, r3
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	341a      	adds	r4, #26
 8006fc2:	42b5      	cmp	r5, r6
 8006fc4:	d11a      	bne.n	8006ffc <_printf_common+0xc8>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e008      	b.n	8006fdc <_printf_common+0xa8>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4652      	mov	r2, sl
 8006fce:	4641      	mov	r1, r8
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	47c8      	blx	r9
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d103      	bne.n	8006fe0 <_printf_common+0xac>
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	e7c6      	b.n	8006f72 <_printf_common+0x3e>
 8006fe4:	18e1      	adds	r1, r4, r3
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	2030      	movs	r0, #48	@ 0x30
 8006fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fee:	4422      	add	r2, r4
 8006ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	e7c7      	b.n	8006f8c <_printf_common+0x58>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4622      	mov	r2, r4
 8007000:	4641      	mov	r1, r8
 8007002:	4638      	mov	r0, r7
 8007004:	47c8      	blx	r9
 8007006:	3001      	adds	r0, #1
 8007008:	d0e6      	beq.n	8006fd8 <_printf_common+0xa4>
 800700a:	3601      	adds	r6, #1
 800700c:	e7d9      	b.n	8006fc2 <_printf_common+0x8e>
	...

08007010 <_printf_i>:
 8007010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	7e0f      	ldrb	r7, [r1, #24]
 8007016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007018:	2f78      	cmp	r7, #120	@ 0x78
 800701a:	4691      	mov	r9, r2
 800701c:	4680      	mov	r8, r0
 800701e:	460c      	mov	r4, r1
 8007020:	469a      	mov	sl, r3
 8007022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007026:	d807      	bhi.n	8007038 <_printf_i+0x28>
 8007028:	2f62      	cmp	r7, #98	@ 0x62
 800702a:	d80a      	bhi.n	8007042 <_printf_i+0x32>
 800702c:	2f00      	cmp	r7, #0
 800702e:	f000 80d1 	beq.w	80071d4 <_printf_i+0x1c4>
 8007032:	2f58      	cmp	r7, #88	@ 0x58
 8007034:	f000 80b8 	beq.w	80071a8 <_printf_i+0x198>
 8007038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800703c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007040:	e03a      	b.n	80070b8 <_printf_i+0xa8>
 8007042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007046:	2b15      	cmp	r3, #21
 8007048:	d8f6      	bhi.n	8007038 <_printf_i+0x28>
 800704a:	a101      	add	r1, pc, #4	@ (adr r1, 8007050 <_printf_i+0x40>)
 800704c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070bd 	.word	0x080070bd
 8007058:	08007039 	.word	0x08007039
 800705c:	08007039 	.word	0x08007039
 8007060:	08007039 	.word	0x08007039
 8007064:	08007039 	.word	0x08007039
 8007068:	080070bd 	.word	0x080070bd
 800706c:	08007039 	.word	0x08007039
 8007070:	08007039 	.word	0x08007039
 8007074:	08007039 	.word	0x08007039
 8007078:	08007039 	.word	0x08007039
 800707c:	080071bb 	.word	0x080071bb
 8007080:	080070e7 	.word	0x080070e7
 8007084:	08007175 	.word	0x08007175
 8007088:	08007039 	.word	0x08007039
 800708c:	08007039 	.word	0x08007039
 8007090:	080071dd 	.word	0x080071dd
 8007094:	08007039 	.word	0x08007039
 8007098:	080070e7 	.word	0x080070e7
 800709c:	08007039 	.word	0x08007039
 80070a0:	08007039 	.word	0x08007039
 80070a4:	0800717d 	.word	0x0800717d
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6032      	str	r2, [r6, #0]
 80070b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070b8:	2301      	movs	r3, #1
 80070ba:	e09c      	b.n	80071f6 <_printf_i+0x1e6>
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	6031      	str	r1, [r6, #0]
 80070c4:	0606      	lsls	r6, r0, #24
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0xbc>
 80070c8:	681d      	ldr	r5, [r3, #0]
 80070ca:	e003      	b.n	80070d4 <_printf_i+0xc4>
 80070cc:	0645      	lsls	r5, r0, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0xb8>
 80070d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	da03      	bge.n	80070e0 <_printf_i+0xd0>
 80070d8:	232d      	movs	r3, #45	@ 0x2d
 80070da:	426d      	negs	r5, r5
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070e0:	4858      	ldr	r0, [pc, #352]	@ (8007244 <_printf_i+0x234>)
 80070e2:	230a      	movs	r3, #10
 80070e4:	e011      	b.n	800710a <_printf_i+0xfa>
 80070e6:	6821      	ldr	r1, [r4, #0]
 80070e8:	6833      	ldr	r3, [r6, #0]
 80070ea:	0608      	lsls	r0, r1, #24
 80070ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80070f0:	d402      	bmi.n	80070f8 <_printf_i+0xe8>
 80070f2:	0649      	lsls	r1, r1, #25
 80070f4:	bf48      	it	mi
 80070f6:	b2ad      	uxthmi	r5, r5
 80070f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070fa:	4852      	ldr	r0, [pc, #328]	@ (8007244 <_printf_i+0x234>)
 80070fc:	6033      	str	r3, [r6, #0]
 80070fe:	bf14      	ite	ne
 8007100:	230a      	movne	r3, #10
 8007102:	2308      	moveq	r3, #8
 8007104:	2100      	movs	r1, #0
 8007106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800710a:	6866      	ldr	r6, [r4, #4]
 800710c:	60a6      	str	r6, [r4, #8]
 800710e:	2e00      	cmp	r6, #0
 8007110:	db05      	blt.n	800711e <_printf_i+0x10e>
 8007112:	6821      	ldr	r1, [r4, #0]
 8007114:	432e      	orrs	r6, r5
 8007116:	f021 0104 	bic.w	r1, r1, #4
 800711a:	6021      	str	r1, [r4, #0]
 800711c:	d04b      	beq.n	80071b6 <_printf_i+0x1a6>
 800711e:	4616      	mov	r6, r2
 8007120:	fbb5 f1f3 	udiv	r1, r5, r3
 8007124:	fb03 5711 	mls	r7, r3, r1, r5
 8007128:	5dc7      	ldrb	r7, [r0, r7]
 800712a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800712e:	462f      	mov	r7, r5
 8007130:	42bb      	cmp	r3, r7
 8007132:	460d      	mov	r5, r1
 8007134:	d9f4      	bls.n	8007120 <_printf_i+0x110>
 8007136:	2b08      	cmp	r3, #8
 8007138:	d10b      	bne.n	8007152 <_printf_i+0x142>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	07df      	lsls	r7, r3, #31
 800713e:	d508      	bpl.n	8007152 <_printf_i+0x142>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	6861      	ldr	r1, [r4, #4]
 8007144:	4299      	cmp	r1, r3
 8007146:	bfde      	ittt	le
 8007148:	2330      	movle	r3, #48	@ 0x30
 800714a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800714e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007152:	1b92      	subs	r2, r2, r6
 8007154:	6122      	str	r2, [r4, #16]
 8007156:	f8cd a000 	str.w	sl, [sp]
 800715a:	464b      	mov	r3, r9
 800715c:	aa03      	add	r2, sp, #12
 800715e:	4621      	mov	r1, r4
 8007160:	4640      	mov	r0, r8
 8007162:	f7ff fee7 	bl	8006f34 <_printf_common>
 8007166:	3001      	adds	r0, #1
 8007168:	d14a      	bne.n	8007200 <_printf_i+0x1f0>
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	b004      	add	sp, #16
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	f043 0320 	orr.w	r3, r3, #32
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	4832      	ldr	r0, [pc, #200]	@ (8007248 <_printf_i+0x238>)
 800717e:	2778      	movs	r7, #120	@ 0x78
 8007180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	6831      	ldr	r1, [r6, #0]
 8007188:	061f      	lsls	r7, r3, #24
 800718a:	f851 5b04 	ldr.w	r5, [r1], #4
 800718e:	d402      	bmi.n	8007196 <_printf_i+0x186>
 8007190:	065f      	lsls	r7, r3, #25
 8007192:	bf48      	it	mi
 8007194:	b2ad      	uxthmi	r5, r5
 8007196:	6031      	str	r1, [r6, #0]
 8007198:	07d9      	lsls	r1, r3, #31
 800719a:	bf44      	itt	mi
 800719c:	f043 0320 	orrmi.w	r3, r3, #32
 80071a0:	6023      	strmi	r3, [r4, #0]
 80071a2:	b11d      	cbz	r5, 80071ac <_printf_i+0x19c>
 80071a4:	2310      	movs	r3, #16
 80071a6:	e7ad      	b.n	8007104 <_printf_i+0xf4>
 80071a8:	4826      	ldr	r0, [pc, #152]	@ (8007244 <_printf_i+0x234>)
 80071aa:	e7e9      	b.n	8007180 <_printf_i+0x170>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	f023 0320 	bic.w	r3, r3, #32
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	e7f6      	b.n	80071a4 <_printf_i+0x194>
 80071b6:	4616      	mov	r6, r2
 80071b8:	e7bd      	b.n	8007136 <_printf_i+0x126>
 80071ba:	6833      	ldr	r3, [r6, #0]
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	6961      	ldr	r1, [r4, #20]
 80071c0:	1d18      	adds	r0, r3, #4
 80071c2:	6030      	str	r0, [r6, #0]
 80071c4:	062e      	lsls	r6, r5, #24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	d501      	bpl.n	80071ce <_printf_i+0x1be>
 80071ca:	6019      	str	r1, [r3, #0]
 80071cc:	e002      	b.n	80071d4 <_printf_i+0x1c4>
 80071ce:	0668      	lsls	r0, r5, #25
 80071d0:	d5fb      	bpl.n	80071ca <_printf_i+0x1ba>
 80071d2:	8019      	strh	r1, [r3, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	4616      	mov	r6, r2
 80071da:	e7bc      	b.n	8007156 <_printf_i+0x146>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	6032      	str	r2, [r6, #0]
 80071e2:	681e      	ldr	r6, [r3, #0]
 80071e4:	6862      	ldr	r2, [r4, #4]
 80071e6:	2100      	movs	r1, #0
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7f9 f879 	bl	80002e0 <memchr>
 80071ee:	b108      	cbz	r0, 80071f4 <_printf_i+0x1e4>
 80071f0:	1b80      	subs	r0, r0, r6
 80071f2:	6060      	str	r0, [r4, #4]
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	2300      	movs	r3, #0
 80071fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071fe:	e7aa      	b.n	8007156 <_printf_i+0x146>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	4632      	mov	r2, r6
 8007204:	4649      	mov	r1, r9
 8007206:	4640      	mov	r0, r8
 8007208:	47d0      	blx	sl
 800720a:	3001      	adds	r0, #1
 800720c:	d0ad      	beq.n	800716a <_printf_i+0x15a>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	079b      	lsls	r3, r3, #30
 8007212:	d413      	bmi.n	800723c <_printf_i+0x22c>
 8007214:	68e0      	ldr	r0, [r4, #12]
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	4298      	cmp	r0, r3
 800721a:	bfb8      	it	lt
 800721c:	4618      	movlt	r0, r3
 800721e:	e7a6      	b.n	800716e <_printf_i+0x15e>
 8007220:	2301      	movs	r3, #1
 8007222:	4632      	mov	r2, r6
 8007224:	4649      	mov	r1, r9
 8007226:	4640      	mov	r0, r8
 8007228:	47d0      	blx	sl
 800722a:	3001      	adds	r0, #1
 800722c:	d09d      	beq.n	800716a <_printf_i+0x15a>
 800722e:	3501      	adds	r5, #1
 8007230:	68e3      	ldr	r3, [r4, #12]
 8007232:	9903      	ldr	r1, [sp, #12]
 8007234:	1a5b      	subs	r3, r3, r1
 8007236:	42ab      	cmp	r3, r5
 8007238:	dcf2      	bgt.n	8007220 <_printf_i+0x210>
 800723a:	e7eb      	b.n	8007214 <_printf_i+0x204>
 800723c:	2500      	movs	r5, #0
 800723e:	f104 0619 	add.w	r6, r4, #25
 8007242:	e7f5      	b.n	8007230 <_printf_i+0x220>
 8007244:	08009222 	.word	0x08009222
 8007248:	08009233 	.word	0x08009233

0800724c <std>:
 800724c:	2300      	movs	r3, #0
 800724e:	b510      	push	{r4, lr}
 8007250:	4604      	mov	r4, r0
 8007252:	e9c0 3300 	strd	r3, r3, [r0]
 8007256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800725a:	6083      	str	r3, [r0, #8]
 800725c:	8181      	strh	r1, [r0, #12]
 800725e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007260:	81c2      	strh	r2, [r0, #14]
 8007262:	6183      	str	r3, [r0, #24]
 8007264:	4619      	mov	r1, r3
 8007266:	2208      	movs	r2, #8
 8007268:	305c      	adds	r0, #92	@ 0x5c
 800726a:	f000 f8f4 	bl	8007456 <memset>
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x58>)
 8007270:	6263      	str	r3, [r4, #36]	@ 0x24
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x5c>)
 8007274:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <std+0x60>)
 8007278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800727a:	4b0d      	ldr	r3, [pc, #52]	@ (80072b0 <std+0x64>)
 800727c:	6323      	str	r3, [r4, #48]	@ 0x30
 800727e:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <std+0x68>)
 8007280:	6224      	str	r4, [r4, #32]
 8007282:	429c      	cmp	r4, r3
 8007284:	d006      	beq.n	8007294 <std+0x48>
 8007286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800728a:	4294      	cmp	r4, r2
 800728c:	d002      	beq.n	8007294 <std+0x48>
 800728e:	33d0      	adds	r3, #208	@ 0xd0
 8007290:	429c      	cmp	r4, r3
 8007292:	d105      	bne.n	80072a0 <std+0x54>
 8007294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f000 b958 	b.w	8007550 <__retarget_lock_init_recursive>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	080073d1 	.word	0x080073d1
 80072a8:	080073f3 	.word	0x080073f3
 80072ac:	0800742b 	.word	0x0800742b
 80072b0:	0800744f 	.word	0x0800744f
 80072b4:	240002a4 	.word	0x240002a4

080072b8 <stdio_exit_handler>:
 80072b8:	4a02      	ldr	r2, [pc, #8]	@ (80072c4 <stdio_exit_handler+0xc>)
 80072ba:	4903      	ldr	r1, [pc, #12]	@ (80072c8 <stdio_exit_handler+0x10>)
 80072bc:	4803      	ldr	r0, [pc, #12]	@ (80072cc <stdio_exit_handler+0x14>)
 80072be:	f000 b869 	b.w	8007394 <_fwalk_sglue>
 80072c2:	bf00      	nop
 80072c4:	24000010 	.word	0x24000010
 80072c8:	08008b21 	.word	0x08008b21
 80072cc:	24000020 	.word	0x24000020

080072d0 <cleanup_stdio>:
 80072d0:	6841      	ldr	r1, [r0, #4]
 80072d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <cleanup_stdio+0x34>)
 80072d4:	4299      	cmp	r1, r3
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	d001      	beq.n	80072e0 <cleanup_stdio+0x10>
 80072dc:	f001 fc20 	bl	8008b20 <_fflush_r>
 80072e0:	68a1      	ldr	r1, [r4, #8]
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <cleanup_stdio+0x38>)
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d002      	beq.n	80072ee <cleanup_stdio+0x1e>
 80072e8:	4620      	mov	r0, r4
 80072ea:	f001 fc19 	bl	8008b20 <_fflush_r>
 80072ee:	68e1      	ldr	r1, [r4, #12]
 80072f0:	4b06      	ldr	r3, [pc, #24]	@ (800730c <cleanup_stdio+0x3c>)
 80072f2:	4299      	cmp	r1, r3
 80072f4:	d004      	beq.n	8007300 <cleanup_stdio+0x30>
 80072f6:	4620      	mov	r0, r4
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	f001 bc10 	b.w	8008b20 <_fflush_r>
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	240002a4 	.word	0x240002a4
 8007308:	2400030c 	.word	0x2400030c
 800730c:	24000374 	.word	0x24000374

08007310 <global_stdio_init.part.0>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <global_stdio_init.part.0+0x30>)
 8007314:	4c0b      	ldr	r4, [pc, #44]	@ (8007344 <global_stdio_init.part.0+0x34>)
 8007316:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <global_stdio_init.part.0+0x38>)
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	4620      	mov	r0, r4
 800731c:	2200      	movs	r2, #0
 800731e:	2104      	movs	r1, #4
 8007320:	f7ff ff94 	bl	800724c <std>
 8007324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007328:	2201      	movs	r2, #1
 800732a:	2109      	movs	r1, #9
 800732c:	f7ff ff8e 	bl	800724c <std>
 8007330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007334:	2202      	movs	r2, #2
 8007336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800733a:	2112      	movs	r1, #18
 800733c:	f7ff bf86 	b.w	800724c <std>
 8007340:	240003dc 	.word	0x240003dc
 8007344:	240002a4 	.word	0x240002a4
 8007348:	080072b9 	.word	0x080072b9

0800734c <__sfp_lock_acquire>:
 800734c:	4801      	ldr	r0, [pc, #4]	@ (8007354 <__sfp_lock_acquire+0x8>)
 800734e:	f000 b900 	b.w	8007552 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	240003e5 	.word	0x240003e5

08007358 <__sfp_lock_release>:
 8007358:	4801      	ldr	r0, [pc, #4]	@ (8007360 <__sfp_lock_release+0x8>)
 800735a:	f000 b8fb 	b.w	8007554 <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	240003e5 	.word	0x240003e5

08007364 <__sinit>:
 8007364:	b510      	push	{r4, lr}
 8007366:	4604      	mov	r4, r0
 8007368:	f7ff fff0 	bl	800734c <__sfp_lock_acquire>
 800736c:	6a23      	ldr	r3, [r4, #32]
 800736e:	b11b      	cbz	r3, 8007378 <__sinit+0x14>
 8007370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007374:	f7ff bff0 	b.w	8007358 <__sfp_lock_release>
 8007378:	4b04      	ldr	r3, [pc, #16]	@ (800738c <__sinit+0x28>)
 800737a:	6223      	str	r3, [r4, #32]
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <__sinit+0x2c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f5      	bne.n	8007370 <__sinit+0xc>
 8007384:	f7ff ffc4 	bl	8007310 <global_stdio_init.part.0>
 8007388:	e7f2      	b.n	8007370 <__sinit+0xc>
 800738a:	bf00      	nop
 800738c:	080072d1 	.word	0x080072d1
 8007390:	240003dc 	.word	0x240003dc

08007394 <_fwalk_sglue>:
 8007394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007398:	4607      	mov	r7, r0
 800739a:	4688      	mov	r8, r1
 800739c:	4614      	mov	r4, r2
 800739e:	2600      	movs	r6, #0
 80073a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a4:	f1b9 0901 	subs.w	r9, r9, #1
 80073a8:	d505      	bpl.n	80073b6 <_fwalk_sglue+0x22>
 80073aa:	6824      	ldr	r4, [r4, #0]
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d1f7      	bne.n	80073a0 <_fwalk_sglue+0xc>
 80073b0:	4630      	mov	r0, r6
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d907      	bls.n	80073cc <_fwalk_sglue+0x38>
 80073bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c0:	3301      	adds	r3, #1
 80073c2:	d003      	beq.n	80073cc <_fwalk_sglue+0x38>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	4306      	orrs	r6, r0
 80073cc:	3568      	adds	r5, #104	@ 0x68
 80073ce:	e7e9      	b.n	80073a4 <_fwalk_sglue+0x10>

080073d0 <__sread>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	460c      	mov	r4, r1
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	f000 f86c 	bl	80074b4 <_read_r>
 80073dc:	2800      	cmp	r0, #0
 80073de:	bfab      	itete	ge
 80073e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073e2:	89a3      	ldrhlt	r3, [r4, #12]
 80073e4:	181b      	addge	r3, r3, r0
 80073e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073ea:	bfac      	ite	ge
 80073ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073ee:	81a3      	strhlt	r3, [r4, #12]
 80073f0:	bd10      	pop	{r4, pc}

080073f2 <__swrite>:
 80073f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f6:	461f      	mov	r7, r3
 80073f8:	898b      	ldrh	r3, [r1, #12]
 80073fa:	05db      	lsls	r3, r3, #23
 80073fc:	4605      	mov	r5, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	4616      	mov	r6, r2
 8007402:	d505      	bpl.n	8007410 <__swrite+0x1e>
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	2302      	movs	r3, #2
 800740a:	2200      	movs	r2, #0
 800740c:	f000 f840 	bl	8007490 <_lseek_r>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	4628      	mov	r0, r5
 8007422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	f000 b857 	b.w	80074d8 <_write_r>

0800742a <__sseek>:
 800742a:	b510      	push	{r4, lr}
 800742c:	460c      	mov	r4, r1
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 f82d 	bl	8007490 <_lseek_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	bf15      	itete	ne
 800743c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800743e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007446:	81a3      	strheq	r3, [r4, #12]
 8007448:	bf18      	it	ne
 800744a:	81a3      	strhne	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__sclose>:
 800744e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007452:	f000 b80d 	b.w	8007470 <_close_r>

08007456 <memset>:
 8007456:	4402      	add	r2, r0
 8007458:	4603      	mov	r3, r0
 800745a:	4293      	cmp	r3, r2
 800745c:	d100      	bne.n	8007460 <memset+0xa>
 800745e:	4770      	bx	lr
 8007460:	f803 1b01 	strb.w	r1, [r3], #1
 8007464:	e7f9      	b.n	800745a <memset+0x4>
	...

08007468 <_localeconv_r>:
 8007468:	4800      	ldr	r0, [pc, #0]	@ (800746c <_localeconv_r+0x4>)
 800746a:	4770      	bx	lr
 800746c:	2400015c 	.word	0x2400015c

08007470 <_close_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	@ (800748c <_close_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7f9 fb62 	bl	8000b44 <_close>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_close_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_close_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	240003e0 	.word	0x240003e0

08007490 <_lseek_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	@ (80074b0 <_lseek_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7f9 fb77 	bl	8000b92 <_lseek>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_lseek_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_lseek_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	240003e0 	.word	0x240003e0

080074b4 <_read_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	@ (80074d4 <_read_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7f9 fb05 	bl	8000ad2 <_read>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_read_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_read_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	240003e0 	.word	0x240003e0

080074d8 <_write_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d07      	ldr	r5, [pc, #28]	@ (80074f8 <_write_r+0x20>)
 80074dc:	4604      	mov	r4, r0
 80074de:	4608      	mov	r0, r1
 80074e0:	4611      	mov	r1, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	602a      	str	r2, [r5, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f7f9 fb10 	bl	8000b0c <_write>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_write_r+0x1e>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_write_r+0x1e>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	240003e0 	.word	0x240003e0

080074fc <__errno>:
 80074fc:	4b01      	ldr	r3, [pc, #4]	@ (8007504 <__errno+0x8>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	2400001c 	.word	0x2400001c

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	@ (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	@ (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	@ (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	@ (800754c <__libc_init_array+0x44>)
 800751c:	f001 fe4e 	bl	80091bc <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	0800958c 	.word	0x0800958c
 8007544:	0800958c 	.word	0x0800958c
 8007548:	0800958c 	.word	0x0800958c
 800754c:	08009590 	.word	0x08009590

08007550 <__retarget_lock_init_recursive>:
 8007550:	4770      	bx	lr

08007552 <__retarget_lock_acquire_recursive>:
 8007552:	4770      	bx	lr

08007554 <__retarget_lock_release_recursive>:
 8007554:	4770      	bx	lr

08007556 <quorem>:
 8007556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	6903      	ldr	r3, [r0, #16]
 800755c:	690c      	ldr	r4, [r1, #16]
 800755e:	42a3      	cmp	r3, r4
 8007560:	4607      	mov	r7, r0
 8007562:	db7e      	blt.n	8007662 <quorem+0x10c>
 8007564:	3c01      	subs	r4, #1
 8007566:	f101 0814 	add.w	r8, r1, #20
 800756a:	00a3      	lsls	r3, r4, #2
 800756c:	f100 0514 	add.w	r5, r0, #20
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800757c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007580:	3301      	adds	r3, #1
 8007582:	429a      	cmp	r2, r3
 8007584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007588:	fbb2 f6f3 	udiv	r6, r2, r3
 800758c:	d32e      	bcc.n	80075ec <quorem+0x96>
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	46c4      	mov	ip, r8
 8007594:	46ae      	mov	lr, r5
 8007596:	46d3      	mov	fp, sl
 8007598:	f85c 3b04 	ldr.w	r3, [ip], #4
 800759c:	b298      	uxth	r0, r3
 800759e:	fb06 a000 	mla	r0, r6, r0, sl
 80075a2:	0c02      	lsrs	r2, r0, #16
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	fb06 2303 	mla	r3, r6, r3, r2
 80075aa:	f8de 2000 	ldr.w	r2, [lr]
 80075ae:	b280      	uxth	r0, r0
 80075b0:	b292      	uxth	r2, r2
 80075b2:	1a12      	subs	r2, r2, r0
 80075b4:	445a      	add	r2, fp
 80075b6:	f8de 0000 	ldr.w	r0, [lr]
 80075ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075c8:	b292      	uxth	r2, r2
 80075ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075ce:	45e1      	cmp	r9, ip
 80075d0:	f84e 2b04 	str.w	r2, [lr], #4
 80075d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80075d8:	d2de      	bcs.n	8007598 <quorem+0x42>
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	58eb      	ldr	r3, [r5, r3]
 80075de:	b92b      	cbnz	r3, 80075ec <quorem+0x96>
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	3b04      	subs	r3, #4
 80075e4:	429d      	cmp	r5, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	d32f      	bcc.n	800764a <quorem+0xf4>
 80075ea:	613c      	str	r4, [r7, #16]
 80075ec:	4638      	mov	r0, r7
 80075ee:	f001 f90b 	bl	8008808 <__mcmp>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	db25      	blt.n	8007642 <quorem+0xec>
 80075f6:	4629      	mov	r1, r5
 80075f8:	2000      	movs	r0, #0
 80075fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80075fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007602:	fa1f fe82 	uxth.w	lr, r2
 8007606:	fa1f f38c 	uxth.w	r3, ip
 800760a:	eba3 030e 	sub.w	r3, r3, lr
 800760e:	4403      	add	r3, r0
 8007610:	0c12      	lsrs	r2, r2, #16
 8007612:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007616:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007620:	45c1      	cmp	r9, r8
 8007622:	f841 3b04 	str.w	r3, [r1], #4
 8007626:	ea4f 4022 	mov.w	r0, r2, asr #16
 800762a:	d2e6      	bcs.n	80075fa <quorem+0xa4>
 800762c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007634:	b922      	cbnz	r2, 8007640 <quorem+0xea>
 8007636:	3b04      	subs	r3, #4
 8007638:	429d      	cmp	r5, r3
 800763a:	461a      	mov	r2, r3
 800763c:	d30b      	bcc.n	8007656 <quorem+0x100>
 800763e:	613c      	str	r4, [r7, #16]
 8007640:	3601      	adds	r6, #1
 8007642:	4630      	mov	r0, r6
 8007644:	b003      	add	sp, #12
 8007646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	3b04      	subs	r3, #4
 800764e:	2a00      	cmp	r2, #0
 8007650:	d1cb      	bne.n	80075ea <quorem+0x94>
 8007652:	3c01      	subs	r4, #1
 8007654:	e7c6      	b.n	80075e4 <quorem+0x8e>
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	3b04      	subs	r3, #4
 800765a:	2a00      	cmp	r2, #0
 800765c:	d1ef      	bne.n	800763e <quorem+0xe8>
 800765e:	3c01      	subs	r4, #1
 8007660:	e7ea      	b.n	8007638 <quorem+0xe2>
 8007662:	2000      	movs	r0, #0
 8007664:	e7ee      	b.n	8007644 <quorem+0xee>
	...

08007668 <_dtoa_r>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	ed2d 8b02 	vpush	{d8}
 8007670:	69c7      	ldr	r7, [r0, #28]
 8007672:	b091      	sub	sp, #68	@ 0x44
 8007674:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007678:	ec55 4b10 	vmov	r4, r5, d0
 800767c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800767e:	9107      	str	r1, [sp, #28]
 8007680:	4681      	mov	r9, r0
 8007682:	9209      	str	r2, [sp, #36]	@ 0x24
 8007684:	930d      	str	r3, [sp, #52]	@ 0x34
 8007686:	b97f      	cbnz	r7, 80076a8 <_dtoa_r+0x40>
 8007688:	2010      	movs	r0, #16
 800768a:	f000 fd95 	bl	80081b8 <malloc>
 800768e:	4602      	mov	r2, r0
 8007690:	f8c9 001c 	str.w	r0, [r9, #28]
 8007694:	b920      	cbnz	r0, 80076a0 <_dtoa_r+0x38>
 8007696:	4ba0      	ldr	r3, [pc, #640]	@ (8007918 <_dtoa_r+0x2b0>)
 8007698:	21ef      	movs	r1, #239	@ 0xef
 800769a:	48a0      	ldr	r0, [pc, #640]	@ (800791c <_dtoa_r+0x2b4>)
 800769c:	f001 fa86 	bl	8008bac <__assert_func>
 80076a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076a4:	6007      	str	r7, [r0, #0]
 80076a6:	60c7      	str	r7, [r0, #12]
 80076a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076ac:	6819      	ldr	r1, [r3, #0]
 80076ae:	b159      	cbz	r1, 80076c8 <_dtoa_r+0x60>
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	604a      	str	r2, [r1, #4]
 80076b4:	2301      	movs	r3, #1
 80076b6:	4093      	lsls	r3, r2
 80076b8:	608b      	str	r3, [r1, #8]
 80076ba:	4648      	mov	r0, r9
 80076bc:	f000 fe72 	bl	80083a4 <_Bfree>
 80076c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	1e2b      	subs	r3, r5, #0
 80076ca:	bfbb      	ittet	lt
 80076cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076d0:	9303      	strlt	r3, [sp, #12]
 80076d2:	2300      	movge	r3, #0
 80076d4:	2201      	movlt	r2, #1
 80076d6:	bfac      	ite	ge
 80076d8:	6033      	strge	r3, [r6, #0]
 80076da:	6032      	strlt	r2, [r6, #0]
 80076dc:	4b90      	ldr	r3, [pc, #576]	@ (8007920 <_dtoa_r+0x2b8>)
 80076de:	9e03      	ldr	r6, [sp, #12]
 80076e0:	43b3      	bics	r3, r6
 80076e2:	d110      	bne.n	8007706 <_dtoa_r+0x9e>
 80076e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80076f0:	4323      	orrs	r3, r4
 80076f2:	f000 84e6 	beq.w	80080c2 <_dtoa_r+0xa5a>
 80076f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80076f8:	4f8a      	ldr	r7, [pc, #552]	@ (8007924 <_dtoa_r+0x2bc>)
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 84e8 	beq.w	80080d0 <_dtoa_r+0xa68>
 8007700:	1cfb      	adds	r3, r7, #3
 8007702:	f000 bce3 	b.w	80080cc <_dtoa_r+0xa64>
 8007706:	ed9d 8b02 	vldr	d8, [sp, #8]
 800770a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007712:	d10a      	bne.n	800772a <_dtoa_r+0xc2>
 8007714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007716:	2301      	movs	r3, #1
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800771c:	b113      	cbz	r3, 8007724 <_dtoa_r+0xbc>
 800771e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007720:	4b81      	ldr	r3, [pc, #516]	@ (8007928 <_dtoa_r+0x2c0>)
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	4f81      	ldr	r7, [pc, #516]	@ (800792c <_dtoa_r+0x2c4>)
 8007726:	f000 bcd3 	b.w	80080d0 <_dtoa_r+0xa68>
 800772a:	aa0e      	add	r2, sp, #56	@ 0x38
 800772c:	a90f      	add	r1, sp, #60	@ 0x3c
 800772e:	4648      	mov	r0, r9
 8007730:	eeb0 0b48 	vmov.f64	d0, d8
 8007734:	f001 f918 	bl	8008968 <__d2b>
 8007738:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800773c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800773e:	9001      	str	r0, [sp, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d045      	beq.n	80077d0 <_dtoa_r+0x168>
 8007744:	eeb0 7b48 	vmov.f64	d7, d8
 8007748:	ee18 1a90 	vmov	r1, s17
 800774c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007750:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007754:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007758:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800775c:	2500      	movs	r5, #0
 800775e:	ee07 1a90 	vmov	s15, r1
 8007762:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007766:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007900 <_dtoa_r+0x298>
 800776a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800776e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007908 <_dtoa_r+0x2a0>
 8007772:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007776:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007910 <_dtoa_r+0x2a8>
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007782:	eeb0 7b46 	vmov.f64	d7, d6
 8007786:	eea4 7b05 	vfma.f64	d7, d4, d5
 800778a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800778e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007796:	ee16 8a90 	vmov	r8, s13
 800779a:	d508      	bpl.n	80077ae <_dtoa_r+0x146>
 800779c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80077a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	bf18      	it	ne
 80077aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 80077ae:	f1b8 0f16 	cmp.w	r8, #22
 80077b2:	d82b      	bhi.n	800780c <_dtoa_r+0x1a4>
 80077b4:	495e      	ldr	r1, [pc, #376]	@ (8007930 <_dtoa_r+0x2c8>)
 80077b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80077ba:	ed91 7b00 	vldr	d7, [r1]
 80077be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	d501      	bpl.n	80077cc <_dtoa_r+0x164>
 80077c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80077cc:	2100      	movs	r1, #0
 80077ce:	e01e      	b.n	800780e <_dtoa_r+0x1a6>
 80077d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d2:	4413      	add	r3, r2
 80077d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80077d8:	2920      	cmp	r1, #32
 80077da:	bfc1      	itttt	gt
 80077dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80077e0:	408e      	lslgt	r6, r1
 80077e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80077e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80077ea:	bfd6      	itet	le
 80077ec:	f1c1 0120 	rsble	r1, r1, #32
 80077f0:	4331      	orrgt	r1, r6
 80077f2:	fa04 f101 	lslle.w	r1, r4, r1
 80077f6:	ee07 1a90 	vmov	s15, r1
 80077fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80077fe:	3b01      	subs	r3, #1
 8007800:	ee17 1a90 	vmov	r1, s15
 8007804:	2501      	movs	r5, #1
 8007806:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800780a:	e7a8      	b.n	800775e <_dtoa_r+0xf6>
 800780c:	2101      	movs	r1, #1
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	1e53      	subs	r3, r2, #1
 8007812:	9306      	str	r3, [sp, #24]
 8007814:	bf45      	ittet	mi
 8007816:	f1c2 0301 	rsbmi	r3, r2, #1
 800781a:	9304      	strmi	r3, [sp, #16]
 800781c:	2300      	movpl	r3, #0
 800781e:	2300      	movmi	r3, #0
 8007820:	bf4c      	ite	mi
 8007822:	9306      	strmi	r3, [sp, #24]
 8007824:	9304      	strpl	r3, [sp, #16]
 8007826:	f1b8 0f00 	cmp.w	r8, #0
 800782a:	910c      	str	r1, [sp, #48]	@ 0x30
 800782c:	db18      	blt.n	8007860 <_dtoa_r+0x1f8>
 800782e:	9b06      	ldr	r3, [sp, #24]
 8007830:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007834:	4443      	add	r3, r8
 8007836:	9306      	str	r3, [sp, #24]
 8007838:	2300      	movs	r3, #0
 800783a:	9a07      	ldr	r2, [sp, #28]
 800783c:	2a09      	cmp	r2, #9
 800783e:	d845      	bhi.n	80078cc <_dtoa_r+0x264>
 8007840:	2a05      	cmp	r2, #5
 8007842:	bfc4      	itt	gt
 8007844:	3a04      	subgt	r2, #4
 8007846:	9207      	strgt	r2, [sp, #28]
 8007848:	9a07      	ldr	r2, [sp, #28]
 800784a:	f1a2 0202 	sub.w	r2, r2, #2
 800784e:	bfcc      	ite	gt
 8007850:	2400      	movgt	r4, #0
 8007852:	2401      	movle	r4, #1
 8007854:	2a03      	cmp	r2, #3
 8007856:	d844      	bhi.n	80078e2 <_dtoa_r+0x27a>
 8007858:	e8df f002 	tbb	[pc, r2]
 800785c:	0b173634 	.word	0x0b173634
 8007860:	9b04      	ldr	r3, [sp, #16]
 8007862:	2200      	movs	r2, #0
 8007864:	eba3 0308 	sub.w	r3, r3, r8
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	920a      	str	r2, [sp, #40]	@ 0x28
 800786c:	f1c8 0300 	rsb	r3, r8, #0
 8007870:	e7e3      	b.n	800783a <_dtoa_r+0x1d2>
 8007872:	2201      	movs	r2, #1
 8007874:	9208      	str	r2, [sp, #32]
 8007876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007878:	eb08 0b02 	add.w	fp, r8, r2
 800787c:	f10b 0a01 	add.w	sl, fp, #1
 8007880:	4652      	mov	r2, sl
 8007882:	2a01      	cmp	r2, #1
 8007884:	bfb8      	it	lt
 8007886:	2201      	movlt	r2, #1
 8007888:	e006      	b.n	8007898 <_dtoa_r+0x230>
 800788a:	2201      	movs	r2, #1
 800788c:	9208      	str	r2, [sp, #32]
 800788e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007890:	2a00      	cmp	r2, #0
 8007892:	dd29      	ble.n	80078e8 <_dtoa_r+0x280>
 8007894:	4693      	mov	fp, r2
 8007896:	4692      	mov	sl, r2
 8007898:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800789c:	2100      	movs	r1, #0
 800789e:	2004      	movs	r0, #4
 80078a0:	f100 0614 	add.w	r6, r0, #20
 80078a4:	4296      	cmp	r6, r2
 80078a6:	d926      	bls.n	80078f6 <_dtoa_r+0x28e>
 80078a8:	6079      	str	r1, [r7, #4]
 80078aa:	4648      	mov	r0, r9
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	f000 fd39 	bl	8008324 <_Balloc>
 80078b2:	9b05      	ldr	r3, [sp, #20]
 80078b4:	4607      	mov	r7, r0
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d13e      	bne.n	8007938 <_dtoa_r+0x2d0>
 80078ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007934 <_dtoa_r+0x2cc>)
 80078bc:	4602      	mov	r2, r0
 80078be:	f240 11af 	movw	r1, #431	@ 0x1af
 80078c2:	e6ea      	b.n	800769a <_dtoa_r+0x32>
 80078c4:	2200      	movs	r2, #0
 80078c6:	e7e1      	b.n	800788c <_dtoa_r+0x224>
 80078c8:	2200      	movs	r2, #0
 80078ca:	e7d3      	b.n	8007874 <_dtoa_r+0x20c>
 80078cc:	2401      	movs	r4, #1
 80078ce:	2200      	movs	r2, #0
 80078d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80078d4:	f04f 3bff 	mov.w	fp, #4294967295
 80078d8:	2100      	movs	r1, #0
 80078da:	46da      	mov	sl, fp
 80078dc:	2212      	movs	r2, #18
 80078de:	9109      	str	r1, [sp, #36]	@ 0x24
 80078e0:	e7da      	b.n	8007898 <_dtoa_r+0x230>
 80078e2:	2201      	movs	r2, #1
 80078e4:	9208      	str	r2, [sp, #32]
 80078e6:	e7f5      	b.n	80078d4 <_dtoa_r+0x26c>
 80078e8:	f04f 0b01 	mov.w	fp, #1
 80078ec:	46da      	mov	sl, fp
 80078ee:	465a      	mov	r2, fp
 80078f0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80078f4:	e7d0      	b.n	8007898 <_dtoa_r+0x230>
 80078f6:	3101      	adds	r1, #1
 80078f8:	0040      	lsls	r0, r0, #1
 80078fa:	e7d1      	b.n	80078a0 <_dtoa_r+0x238>
 80078fc:	f3af 8000 	nop.w
 8007900:	636f4361 	.word	0x636f4361
 8007904:	3fd287a7 	.word	0x3fd287a7
 8007908:	8b60c8b3 	.word	0x8b60c8b3
 800790c:	3fc68a28 	.word	0x3fc68a28
 8007910:	509f79fb 	.word	0x509f79fb
 8007914:	3fd34413 	.word	0x3fd34413
 8007918:	08009251 	.word	0x08009251
 800791c:	08009268 	.word	0x08009268
 8007920:	7ff00000 	.word	0x7ff00000
 8007924:	0800924d 	.word	0x0800924d
 8007928:	08009221 	.word	0x08009221
 800792c:	08009220 	.word	0x08009220
 8007930:	080093b8 	.word	0x080093b8
 8007934:	080092c0 	.word	0x080092c0
 8007938:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800793c:	f1ba 0f0e 	cmp.w	sl, #14
 8007940:	6010      	str	r0, [r2, #0]
 8007942:	d86e      	bhi.n	8007a22 <_dtoa_r+0x3ba>
 8007944:	2c00      	cmp	r4, #0
 8007946:	d06c      	beq.n	8007a22 <_dtoa_r+0x3ba>
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	f340 80b4 	ble.w	8007ab8 <_dtoa_r+0x450>
 8007950:	4ac8      	ldr	r2, [pc, #800]	@ (8007c74 <_dtoa_r+0x60c>)
 8007952:	f008 010f 	and.w	r1, r8, #15
 8007956:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800795a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800795e:	ed92 7b00 	vldr	d7, [r2]
 8007962:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007966:	f000 809b 	beq.w	8007aa0 <_dtoa_r+0x438>
 800796a:	4ac3      	ldr	r2, [pc, #780]	@ (8007c78 <_dtoa_r+0x610>)
 800796c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007970:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007974:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007978:	f001 010f 	and.w	r1, r1, #15
 800797c:	2203      	movs	r2, #3
 800797e:	48be      	ldr	r0, [pc, #760]	@ (8007c78 <_dtoa_r+0x610>)
 8007980:	2900      	cmp	r1, #0
 8007982:	f040 808f 	bne.w	8007aa4 <_dtoa_r+0x43c>
 8007986:	ed9d 6b02 	vldr	d6, [sp, #8]
 800798a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800798e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007992:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007994:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007998:	2900      	cmp	r1, #0
 800799a:	f000 80b3 	beq.w	8007b04 <_dtoa_r+0x49c>
 800799e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80079a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80079a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079aa:	f140 80ab 	bpl.w	8007b04 <_dtoa_r+0x49c>
 80079ae:	f1ba 0f00 	cmp.w	sl, #0
 80079b2:	f000 80a7 	beq.w	8007b04 <_dtoa_r+0x49c>
 80079b6:	f1bb 0f00 	cmp.w	fp, #0
 80079ba:	dd30      	ble.n	8007a1e <_dtoa_r+0x3b6>
 80079bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80079c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80079cc:	9105      	str	r1, [sp, #20]
 80079ce:	3201      	adds	r2, #1
 80079d0:	465c      	mov	r4, fp
 80079d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80079da:	ee07 2a90 	vmov	s15, r2
 80079de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80079e6:	ee15 2a90 	vmov	r2, s11
 80079ea:	ec51 0b15 	vmov	r0, r1, d5
 80079ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80079f2:	2c00      	cmp	r4, #0
 80079f4:	f040 808a 	bne.w	8007b0c <_dtoa_r+0x4a4>
 80079f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80079fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a00:	ec41 0b17 	vmov	d7, r0, r1
 8007a04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0c:	f300 826a 	bgt.w	8007ee4 <_dtoa_r+0x87c>
 8007a10:	eeb1 7b47 	vneg.f64	d7, d7
 8007a14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	d423      	bmi.n	8007a66 <_dtoa_r+0x3fe>
 8007a1e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	f2c0 8129 	blt.w	8007c7c <_dtoa_r+0x614>
 8007a2a:	f1b8 0f0e 	cmp.w	r8, #14
 8007a2e:	f300 8125 	bgt.w	8007c7c <_dtoa_r+0x614>
 8007a32:	4b90      	ldr	r3, [pc, #576]	@ (8007c74 <_dtoa_r+0x60c>)
 8007a34:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a38:	ed93 6b00 	vldr	d6, [r3]
 8007a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f280 80c8 	bge.w	8007bd4 <_dtoa_r+0x56c>
 8007a44:	f1ba 0f00 	cmp.w	sl, #0
 8007a48:	f300 80c4 	bgt.w	8007bd4 <_dtoa_r+0x56c>
 8007a4c:	d10b      	bne.n	8007a66 <_dtoa_r+0x3fe>
 8007a4e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a52:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007a56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	f2c0 823c 	blt.w	8007ede <_dtoa_r+0x876>
 8007a66:	2400      	movs	r4, #0
 8007a68:	4625      	mov	r5, r4
 8007a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	9305      	str	r3, [sp, #20]
 8007a70:	463e      	mov	r6, r7
 8007a72:	f04f 0800 	mov.w	r8, #0
 8007a76:	4621      	mov	r1, r4
 8007a78:	4648      	mov	r0, r9
 8007a7a:	f000 fc93 	bl	80083a4 <_Bfree>
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	f000 80a2 	beq.w	8007bc8 <_dtoa_r+0x560>
 8007a84:	f1b8 0f00 	cmp.w	r8, #0
 8007a88:	d005      	beq.n	8007a96 <_dtoa_r+0x42e>
 8007a8a:	45a8      	cmp	r8, r5
 8007a8c:	d003      	beq.n	8007a96 <_dtoa_r+0x42e>
 8007a8e:	4641      	mov	r1, r8
 8007a90:	4648      	mov	r0, r9
 8007a92:	f000 fc87 	bl	80083a4 <_Bfree>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4648      	mov	r0, r9
 8007a9a:	f000 fc83 	bl	80083a4 <_Bfree>
 8007a9e:	e093      	b.n	8007bc8 <_dtoa_r+0x560>
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	e76c      	b.n	800797e <_dtoa_r+0x316>
 8007aa4:	07cc      	lsls	r4, r1, #31
 8007aa6:	d504      	bpl.n	8007ab2 <_dtoa_r+0x44a>
 8007aa8:	ed90 6b00 	vldr	d6, [r0]
 8007aac:	3201      	adds	r2, #1
 8007aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ab2:	1049      	asrs	r1, r1, #1
 8007ab4:	3008      	adds	r0, #8
 8007ab6:	e763      	b.n	8007980 <_dtoa_r+0x318>
 8007ab8:	d022      	beq.n	8007b00 <_dtoa_r+0x498>
 8007aba:	f1c8 0100 	rsb	r1, r8, #0
 8007abe:	4a6d      	ldr	r2, [pc, #436]	@ (8007c74 <_dtoa_r+0x60c>)
 8007ac0:	f001 000f 	and.w	r0, r1, #15
 8007ac4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007ac8:	ed92 7b00 	vldr	d7, [r2]
 8007acc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ad4:	4868      	ldr	r0, [pc, #416]	@ (8007c78 <_dtoa_r+0x610>)
 8007ad6:	1109      	asrs	r1, r1, #4
 8007ad8:	2400      	movs	r4, #0
 8007ada:	2202      	movs	r2, #2
 8007adc:	b929      	cbnz	r1, 8007aea <_dtoa_r+0x482>
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	f43f af57 	beq.w	8007992 <_dtoa_r+0x32a>
 8007ae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ae8:	e753      	b.n	8007992 <_dtoa_r+0x32a>
 8007aea:	07ce      	lsls	r6, r1, #31
 8007aec:	d505      	bpl.n	8007afa <_dtoa_r+0x492>
 8007aee:	ed90 6b00 	vldr	d6, [r0]
 8007af2:	3201      	adds	r2, #1
 8007af4:	2401      	movs	r4, #1
 8007af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007afa:	1049      	asrs	r1, r1, #1
 8007afc:	3008      	adds	r0, #8
 8007afe:	e7ed      	b.n	8007adc <_dtoa_r+0x474>
 8007b00:	2202      	movs	r2, #2
 8007b02:	e746      	b.n	8007992 <_dtoa_r+0x32a>
 8007b04:	f8cd 8014 	str.w	r8, [sp, #20]
 8007b08:	4654      	mov	r4, sl
 8007b0a:	e762      	b.n	80079d2 <_dtoa_r+0x36a>
 8007b0c:	4a59      	ldr	r2, [pc, #356]	@ (8007c74 <_dtoa_r+0x60c>)
 8007b0e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007b12:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007b16:	9a08      	ldr	r2, [sp, #32]
 8007b18:	ec41 0b17 	vmov	d7, r0, r1
 8007b1c:	443c      	add	r4, r7
 8007b1e:	b34a      	cbz	r2, 8007b74 <_dtoa_r+0x50c>
 8007b20:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007b24:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007b28:	463e      	mov	r6, r7
 8007b2a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007b2e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007b32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007b36:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b3a:	ee14 2a90 	vmov	r2, s9
 8007b3e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b42:	3230      	adds	r2, #48	@ 0x30
 8007b44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b50:	f806 2b01 	strb.w	r2, [r6], #1
 8007b54:	d438      	bmi.n	8007bc8 <_dtoa_r+0x560>
 8007b56:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007b5a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b62:	d46e      	bmi.n	8007c42 <_dtoa_r+0x5da>
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	f43f af5a 	beq.w	8007a1e <_dtoa_r+0x3b6>
 8007b6a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007b6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b72:	e7e0      	b.n	8007b36 <_dtoa_r+0x4ce>
 8007b74:	4621      	mov	r1, r4
 8007b76:	463e      	mov	r6, r7
 8007b78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007b7c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007b80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b84:	ee14 2a90 	vmov	r2, s9
 8007b88:	3230      	adds	r2, #48	@ 0x30
 8007b8a:	f806 2b01 	strb.w	r2, [r6], #1
 8007b8e:	42a6      	cmp	r6, r4
 8007b90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b94:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b98:	d119      	bne.n	8007bce <_dtoa_r+0x566>
 8007b9a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007b9e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007ba2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007baa:	dc4a      	bgt.n	8007c42 <_dtoa_r+0x5da>
 8007bac:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007bb0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb8:	f57f af31 	bpl.w	8007a1e <_dtoa_r+0x3b6>
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	3901      	subs	r1, #1
 8007bc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bc4:	2b30      	cmp	r3, #48	@ 0x30
 8007bc6:	d0f9      	beq.n	8007bbc <_dtoa_r+0x554>
 8007bc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007bcc:	e027      	b.n	8007c1e <_dtoa_r+0x5b6>
 8007bce:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007bd2:	e7d5      	b.n	8007b80 <_dtoa_r+0x518>
 8007bd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bd8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007bdc:	463e      	mov	r6, r7
 8007bde:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007be2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007be6:	ee15 3a10 	vmov	r3, s10
 8007bea:	3330      	adds	r3, #48	@ 0x30
 8007bec:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf0:	1bf3      	subs	r3, r6, r7
 8007bf2:	459a      	cmp	sl, r3
 8007bf4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007bf8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007bfc:	d132      	bne.n	8007c64 <_dtoa_r+0x5fc>
 8007bfe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007c02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	dc18      	bgt.n	8007c3e <_dtoa_r+0x5d6>
 8007c0c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c14:	d103      	bne.n	8007c1e <_dtoa_r+0x5b6>
 8007c16:	ee15 3a10 	vmov	r3, s10
 8007c1a:	07db      	lsls	r3, r3, #31
 8007c1c:	d40f      	bmi.n	8007c3e <_dtoa_r+0x5d6>
 8007c1e:	9901      	ldr	r1, [sp, #4]
 8007c20:	4648      	mov	r0, r9
 8007c22:	f000 fbbf 	bl	80083a4 <_Bfree>
 8007c26:	2300      	movs	r3, #0
 8007c28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c2a:	7033      	strb	r3, [r6, #0]
 8007c2c:	f108 0301 	add.w	r3, r8, #1
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 824b 	beq.w	80080d0 <_dtoa_r+0xa68>
 8007c3a:	601e      	str	r6, [r3, #0]
 8007c3c:	e248      	b.n	80080d0 <_dtoa_r+0xa68>
 8007c3e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007c42:	4633      	mov	r3, r6
 8007c44:	461e      	mov	r6, r3
 8007c46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c4a:	2a39      	cmp	r2, #57	@ 0x39
 8007c4c:	d106      	bne.n	8007c5c <_dtoa_r+0x5f4>
 8007c4e:	429f      	cmp	r7, r3
 8007c50:	d1f8      	bne.n	8007c44 <_dtoa_r+0x5dc>
 8007c52:	9a05      	ldr	r2, [sp, #20]
 8007c54:	3201      	adds	r2, #1
 8007c56:	9205      	str	r2, [sp, #20]
 8007c58:	2230      	movs	r2, #48	@ 0x30
 8007c5a:	703a      	strb	r2, [r7, #0]
 8007c5c:	781a      	ldrb	r2, [r3, #0]
 8007c5e:	3201      	adds	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e7b1      	b.n	8007bc8 <_dtoa_r+0x560>
 8007c64:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c70:	d1b5      	bne.n	8007bde <_dtoa_r+0x576>
 8007c72:	e7d4      	b.n	8007c1e <_dtoa_r+0x5b6>
 8007c74:	080093b8 	.word	0x080093b8
 8007c78:	08009390 	.word	0x08009390
 8007c7c:	9908      	ldr	r1, [sp, #32]
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	f000 80e9 	beq.w	8007e56 <_dtoa_r+0x7ee>
 8007c84:	9907      	ldr	r1, [sp, #28]
 8007c86:	2901      	cmp	r1, #1
 8007c88:	f300 80cb 	bgt.w	8007e22 <_dtoa_r+0x7ba>
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	f000 80c4 	beq.w	8007e1a <_dtoa_r+0x7b2>
 8007c92:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c96:	9e04      	ldr	r6, [sp, #16]
 8007c98:	461c      	mov	r4, r3
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	4648      	mov	r0, r9
 8007caa:	9306      	str	r3, [sp, #24]
 8007cac:	f000 fc2e 	bl	800850c <__i2b>
 8007cb0:	9b05      	ldr	r3, [sp, #20]
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	b166      	cbz	r6, 8007cd0 <_dtoa_r+0x668>
 8007cb6:	9a06      	ldr	r2, [sp, #24]
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	dd09      	ble.n	8007cd0 <_dtoa_r+0x668>
 8007cbc:	42b2      	cmp	r2, r6
 8007cbe:	9904      	ldr	r1, [sp, #16]
 8007cc0:	bfa8      	it	ge
 8007cc2:	4632      	movge	r2, r6
 8007cc4:	1a89      	subs	r1, r1, r2
 8007cc6:	9104      	str	r1, [sp, #16]
 8007cc8:	9906      	ldr	r1, [sp, #24]
 8007cca:	1ab6      	subs	r6, r6, r2
 8007ccc:	1a8a      	subs	r2, r1, r2
 8007cce:	9206      	str	r2, [sp, #24]
 8007cd0:	b30b      	cbz	r3, 8007d16 <_dtoa_r+0x6ae>
 8007cd2:	9a08      	ldr	r2, [sp, #32]
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	f000 80c5 	beq.w	8007e64 <_dtoa_r+0x7fc>
 8007cda:	2c00      	cmp	r4, #0
 8007cdc:	f000 80bf 	beq.w	8007e5e <_dtoa_r+0x7f6>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4648      	mov	r0, r9
 8007ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ce8:	f000 fcc8 	bl	800867c <__pow5mult>
 8007cec:	9a01      	ldr	r2, [sp, #4]
 8007cee:	4601      	mov	r1, r0
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	4648      	mov	r0, r9
 8007cf4:	f000 fc20 	bl	8008538 <__multiply>
 8007cf8:	9901      	ldr	r1, [sp, #4]
 8007cfa:	9005      	str	r0, [sp, #20]
 8007cfc:	4648      	mov	r0, r9
 8007cfe:	f000 fb51 	bl	80083a4 <_Bfree>
 8007d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d04:	1b1b      	subs	r3, r3, r4
 8007d06:	f000 80b0 	beq.w	8007e6a <_dtoa_r+0x802>
 8007d0a:	9905      	ldr	r1, [sp, #20]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4648      	mov	r0, r9
 8007d10:	f000 fcb4 	bl	800867c <__pow5mult>
 8007d14:	9001      	str	r0, [sp, #4]
 8007d16:	2101      	movs	r1, #1
 8007d18:	4648      	mov	r0, r9
 8007d1a:	f000 fbf7 	bl	800850c <__i2b>
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d20:	4604      	mov	r4, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 81da 	beq.w	80080dc <_dtoa_r+0xa74>
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4648      	mov	r0, r9
 8007d2e:	f000 fca5 	bl	800867c <__pow5mult>
 8007d32:	9b07      	ldr	r3, [sp, #28]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	4604      	mov	r4, r0
 8007d38:	f300 80a0 	bgt.w	8007e7c <_dtoa_r+0x814>
 8007d3c:	9b02      	ldr	r3, [sp, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 8096 	bne.w	8007e70 <_dtoa_r+0x808>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	f040 8092 	bne.w	8007e74 <_dtoa_r+0x80c>
 8007d50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007d54:	0d12      	lsrs	r2, r2, #20
 8007d56:	0512      	lsls	r2, r2, #20
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	f000 808d 	beq.w	8007e78 <_dtoa_r+0x810>
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	9b06      	ldr	r3, [sp, #24]
 8007d66:	3301      	adds	r3, #1
 8007d68:	9306      	str	r3, [sp, #24]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 81b9 	beq.w	80080e8 <_dtoa_r+0xa80>
 8007d76:	6922      	ldr	r2, [r4, #16]
 8007d78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007d7c:	6910      	ldr	r0, [r2, #16]
 8007d7e:	f000 fb79 	bl	8008474 <__hi0bits>
 8007d82:	f1c0 0020 	rsb	r0, r0, #32
 8007d86:	9b06      	ldr	r3, [sp, #24]
 8007d88:	4418      	add	r0, r3
 8007d8a:	f010 001f 	ands.w	r0, r0, #31
 8007d8e:	f000 8081 	beq.w	8007e94 <_dtoa_r+0x82c>
 8007d92:	f1c0 0220 	rsb	r2, r0, #32
 8007d96:	2a04      	cmp	r2, #4
 8007d98:	dd73      	ble.n	8007e82 <_dtoa_r+0x81a>
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	f1c0 001c 	rsb	r0, r0, #28
 8007da0:	4403      	add	r3, r0
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	9b06      	ldr	r3, [sp, #24]
 8007da6:	4406      	add	r6, r0
 8007da8:	4403      	add	r3, r0
 8007daa:	9306      	str	r3, [sp, #24]
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dd05      	ble.n	8007dbe <_dtoa_r+0x756>
 8007db2:	9901      	ldr	r1, [sp, #4]
 8007db4:	461a      	mov	r2, r3
 8007db6:	4648      	mov	r0, r9
 8007db8:	f000 fcba 	bl	8008730 <__lshift>
 8007dbc:	9001      	str	r0, [sp, #4]
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dd05      	ble.n	8007dd0 <_dtoa_r+0x768>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f000 fcb1 	bl	8008730 <__lshift>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d060      	beq.n	8007e98 <_dtoa_r+0x830>
 8007dd6:	9801      	ldr	r0, [sp, #4]
 8007dd8:	4621      	mov	r1, r4
 8007dda:	f000 fd15 	bl	8008808 <__mcmp>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	da5a      	bge.n	8007e98 <_dtoa_r+0x830>
 8007de2:	f108 33ff 	add.w	r3, r8, #4294967295
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	9901      	ldr	r1, [sp, #4]
 8007dea:	2300      	movs	r3, #0
 8007dec:	220a      	movs	r2, #10
 8007dee:	4648      	mov	r0, r9
 8007df0:	f000 fafa 	bl	80083e8 <__multadd>
 8007df4:	9b08      	ldr	r3, [sp, #32]
 8007df6:	9001      	str	r0, [sp, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8177 	beq.w	80080ec <_dtoa_r+0xa84>
 8007dfe:	4629      	mov	r1, r5
 8007e00:	2300      	movs	r3, #0
 8007e02:	220a      	movs	r2, #10
 8007e04:	4648      	mov	r0, r9
 8007e06:	f000 faef 	bl	80083e8 <__multadd>
 8007e0a:	f1bb 0f00 	cmp.w	fp, #0
 8007e0e:	4605      	mov	r5, r0
 8007e10:	dc6e      	bgt.n	8007ef0 <_dtoa_r+0x888>
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	dc48      	bgt.n	8007eaa <_dtoa_r+0x842>
 8007e18:	e06a      	b.n	8007ef0 <_dtoa_r+0x888>
 8007e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e20:	e739      	b.n	8007c96 <_dtoa_r+0x62e>
 8007e22:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	db07      	blt.n	8007e3a <_dtoa_r+0x7d2>
 8007e2a:	f1ba 0f00 	cmp.w	sl, #0
 8007e2e:	eba3 0404 	sub.w	r4, r3, r4
 8007e32:	db0b      	blt.n	8007e4c <_dtoa_r+0x7e4>
 8007e34:	9e04      	ldr	r6, [sp, #16]
 8007e36:	4652      	mov	r2, sl
 8007e38:	e72f      	b.n	8007c9a <_dtoa_r+0x632>
 8007e3a:	1ae2      	subs	r2, r4, r3
 8007e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e3e:	9e04      	ldr	r6, [sp, #16]
 8007e40:	4413      	add	r3, r2
 8007e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e44:	4652      	mov	r2, sl
 8007e46:	4623      	mov	r3, r4
 8007e48:	2400      	movs	r4, #0
 8007e4a:	e726      	b.n	8007c9a <_dtoa_r+0x632>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	eba2 060a 	sub.w	r6, r2, sl
 8007e52:	2200      	movs	r2, #0
 8007e54:	e721      	b.n	8007c9a <_dtoa_r+0x632>
 8007e56:	9e04      	ldr	r6, [sp, #16]
 8007e58:	9d08      	ldr	r5, [sp, #32]
 8007e5a:	461c      	mov	r4, r3
 8007e5c:	e72a      	b.n	8007cb4 <_dtoa_r+0x64c>
 8007e5e:	9a01      	ldr	r2, [sp, #4]
 8007e60:	9205      	str	r2, [sp, #20]
 8007e62:	e752      	b.n	8007d0a <_dtoa_r+0x6a2>
 8007e64:	9901      	ldr	r1, [sp, #4]
 8007e66:	461a      	mov	r2, r3
 8007e68:	e751      	b.n	8007d0e <_dtoa_r+0x6a6>
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	e752      	b.n	8007d16 <_dtoa_r+0x6ae>
 8007e70:	2300      	movs	r3, #0
 8007e72:	e77b      	b.n	8007d6c <_dtoa_r+0x704>
 8007e74:	9b02      	ldr	r3, [sp, #8]
 8007e76:	e779      	b.n	8007d6c <_dtoa_r+0x704>
 8007e78:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007e7a:	e778      	b.n	8007d6e <_dtoa_r+0x706>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e80:	e779      	b.n	8007d76 <_dtoa_r+0x70e>
 8007e82:	d093      	beq.n	8007dac <_dtoa_r+0x744>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	321c      	adds	r2, #28
 8007e88:	4413      	add	r3, r2
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	9b06      	ldr	r3, [sp, #24]
 8007e8e:	4416      	add	r6, r2
 8007e90:	4413      	add	r3, r2
 8007e92:	e78a      	b.n	8007daa <_dtoa_r+0x742>
 8007e94:	4602      	mov	r2, r0
 8007e96:	e7f5      	b.n	8007e84 <_dtoa_r+0x81c>
 8007e98:	f1ba 0f00 	cmp.w	sl, #0
 8007e9c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007ea0:	46d3      	mov	fp, sl
 8007ea2:	dc21      	bgt.n	8007ee8 <_dtoa_r+0x880>
 8007ea4:	9b07      	ldr	r3, [sp, #28]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	dd1e      	ble.n	8007ee8 <_dtoa_r+0x880>
 8007eaa:	f1bb 0f00 	cmp.w	fp, #0
 8007eae:	f47f addc 	bne.w	8007a6a <_dtoa_r+0x402>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	465b      	mov	r3, fp
 8007eb6:	2205      	movs	r2, #5
 8007eb8:	4648      	mov	r0, r9
 8007eba:	f000 fa95 	bl	80083e8 <__multadd>
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	9801      	ldr	r0, [sp, #4]
 8007ec4:	f000 fca0 	bl	8008808 <__mcmp>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f77f adce 	ble.w	8007a6a <_dtoa_r+0x402>
 8007ece:	463e      	mov	r6, r7
 8007ed0:	2331      	movs	r3, #49	@ 0x31
 8007ed2:	f806 3b01 	strb.w	r3, [r6], #1
 8007ed6:	9b05      	ldr	r3, [sp, #20]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	e5c9      	b.n	8007a72 <_dtoa_r+0x40a>
 8007ede:	f8cd 8014 	str.w	r8, [sp, #20]
 8007ee2:	4654      	mov	r4, sl
 8007ee4:	4625      	mov	r5, r4
 8007ee6:	e7f2      	b.n	8007ece <_dtoa_r+0x866>
 8007ee8:	9b08      	ldr	r3, [sp, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8102 	beq.w	80080f4 <_dtoa_r+0xa8c>
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	dd05      	ble.n	8007f00 <_dtoa_r+0x898>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	4648      	mov	r0, r9
 8007efa:	f000 fc19 	bl	8008730 <__lshift>
 8007efe:	4605      	mov	r5, r0
 8007f00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d058      	beq.n	8007fb8 <_dtoa_r+0x950>
 8007f06:	6869      	ldr	r1, [r5, #4]
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f000 fa0b 	bl	8008324 <_Balloc>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	b928      	cbnz	r0, 8007f1e <_dtoa_r+0x8b6>
 8007f12:	4b82      	ldr	r3, [pc, #520]	@ (800811c <_dtoa_r+0xab4>)
 8007f14:	4602      	mov	r2, r0
 8007f16:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f1a:	f7ff bbbe 	b.w	800769a <_dtoa_r+0x32>
 8007f1e:	692a      	ldr	r2, [r5, #16]
 8007f20:	3202      	adds	r2, #2
 8007f22:	0092      	lsls	r2, r2, #2
 8007f24:	f105 010c 	add.w	r1, r5, #12
 8007f28:	300c      	adds	r0, #12
 8007f2a:	f000 fe31 	bl	8008b90 <memcpy>
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4631      	mov	r1, r6
 8007f32:	4648      	mov	r0, r9
 8007f34:	f000 fbfc 	bl	8008730 <__lshift>
 8007f38:	1c7b      	adds	r3, r7, #1
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	eb07 030b 	add.w	r3, r7, fp
 8007f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f42:	9b02      	ldr	r3, [sp, #8]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	46a8      	mov	r8, r5
 8007f4a:	9308      	str	r3, [sp, #32]
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	9b04      	ldr	r3, [sp, #16]
 8007f50:	9801      	ldr	r0, [sp, #4]
 8007f52:	4621      	mov	r1, r4
 8007f54:	f103 3bff 	add.w	fp, r3, #4294967295
 8007f58:	f7ff fafd 	bl	8007556 <quorem>
 8007f5c:	4641      	mov	r1, r8
 8007f5e:	9002      	str	r0, [sp, #8]
 8007f60:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007f64:	9801      	ldr	r0, [sp, #4]
 8007f66:	f000 fc4f 	bl	8008808 <__mcmp>
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	9006      	str	r0, [sp, #24]
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4648      	mov	r0, r9
 8007f72:	f000 fc65 	bl	8008840 <__mdiff>
 8007f76:	68c2      	ldr	r2, [r0, #12]
 8007f78:	4606      	mov	r6, r0
 8007f7a:	b9fa      	cbnz	r2, 8007fbc <_dtoa_r+0x954>
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	9801      	ldr	r0, [sp, #4]
 8007f80:	f000 fc42 	bl	8008808 <__mcmp>
 8007f84:	4602      	mov	r2, r0
 8007f86:	4631      	mov	r1, r6
 8007f88:	4648      	mov	r0, r9
 8007f8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8007f8c:	f000 fa0a 	bl	80083a4 <_Bfree>
 8007f90:	9b07      	ldr	r3, [sp, #28]
 8007f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f94:	9e04      	ldr	r6, [sp, #16]
 8007f96:	ea42 0103 	orr.w	r1, r2, r3
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	4319      	orrs	r1, r3
 8007f9e:	d10f      	bne.n	8007fc0 <_dtoa_r+0x958>
 8007fa0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007fa4:	d028      	beq.n	8007ff8 <_dtoa_r+0x990>
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dd02      	ble.n	8007fb2 <_dtoa_r+0x94a>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007fb2:	f88b a000 	strb.w	sl, [fp]
 8007fb6:	e55e      	b.n	8007a76 <_dtoa_r+0x40e>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e7bd      	b.n	8007f38 <_dtoa_r+0x8d0>
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	e7e2      	b.n	8007f86 <_dtoa_r+0x91e>
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	db04      	blt.n	8007fd0 <_dtoa_r+0x968>
 8007fc6:	9907      	ldr	r1, [sp, #28]
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	9908      	ldr	r1, [sp, #32]
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	d120      	bne.n	8008012 <_dtoa_r+0x9aa>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	ddee      	ble.n	8007fb2 <_dtoa_r+0x94a>
 8007fd4:	9901      	ldr	r1, [sp, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4648      	mov	r0, r9
 8007fda:	f000 fba9 	bl	8008730 <__lshift>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	9001      	str	r0, [sp, #4]
 8007fe2:	f000 fc11 	bl	8008808 <__mcmp>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	dc03      	bgt.n	8007ff2 <_dtoa_r+0x98a>
 8007fea:	d1e2      	bne.n	8007fb2 <_dtoa_r+0x94a>
 8007fec:	f01a 0f01 	tst.w	sl, #1
 8007ff0:	d0df      	beq.n	8007fb2 <_dtoa_r+0x94a>
 8007ff2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007ff6:	d1d9      	bne.n	8007fac <_dtoa_r+0x944>
 8007ff8:	2339      	movs	r3, #57	@ 0x39
 8007ffa:	f88b 3000 	strb.w	r3, [fp]
 8007ffe:	4633      	mov	r3, r6
 8008000:	461e      	mov	r6, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008008:	2a39      	cmp	r2, #57	@ 0x39
 800800a:	d052      	beq.n	80080b2 <_dtoa_r+0xa4a>
 800800c:	3201      	adds	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e531      	b.n	8007a76 <_dtoa_r+0x40e>
 8008012:	2a00      	cmp	r2, #0
 8008014:	dd07      	ble.n	8008026 <_dtoa_r+0x9be>
 8008016:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800801a:	d0ed      	beq.n	8007ff8 <_dtoa_r+0x990>
 800801c:	f10a 0301 	add.w	r3, sl, #1
 8008020:	f88b 3000 	strb.w	r3, [fp]
 8008024:	e527      	b.n	8007a76 <_dtoa_r+0x40e>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800802a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800802e:	4293      	cmp	r3, r2
 8008030:	d029      	beq.n	8008086 <_dtoa_r+0xa1e>
 8008032:	9901      	ldr	r1, [sp, #4]
 8008034:	2300      	movs	r3, #0
 8008036:	220a      	movs	r2, #10
 8008038:	4648      	mov	r0, r9
 800803a:	f000 f9d5 	bl	80083e8 <__multadd>
 800803e:	45a8      	cmp	r8, r5
 8008040:	9001      	str	r0, [sp, #4]
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	f04f 020a 	mov.w	r2, #10
 800804a:	4641      	mov	r1, r8
 800804c:	4648      	mov	r0, r9
 800804e:	d107      	bne.n	8008060 <_dtoa_r+0x9f8>
 8008050:	f000 f9ca 	bl	80083e8 <__multadd>
 8008054:	4680      	mov	r8, r0
 8008056:	4605      	mov	r5, r0
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	3301      	adds	r3, #1
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	e776      	b.n	8007f4e <_dtoa_r+0x8e6>
 8008060:	f000 f9c2 	bl	80083e8 <__multadd>
 8008064:	4629      	mov	r1, r5
 8008066:	4680      	mov	r8, r0
 8008068:	2300      	movs	r3, #0
 800806a:	220a      	movs	r2, #10
 800806c:	4648      	mov	r0, r9
 800806e:	f000 f9bb 	bl	80083e8 <__multadd>
 8008072:	4605      	mov	r5, r0
 8008074:	e7f0      	b.n	8008058 <_dtoa_r+0x9f0>
 8008076:	f1bb 0f00 	cmp.w	fp, #0
 800807a:	bfcc      	ite	gt
 800807c:	465e      	movgt	r6, fp
 800807e:	2601      	movle	r6, #1
 8008080:	443e      	add	r6, r7
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	9901      	ldr	r1, [sp, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	4648      	mov	r0, r9
 800808c:	f000 fb50 	bl	8008730 <__lshift>
 8008090:	4621      	mov	r1, r4
 8008092:	9001      	str	r0, [sp, #4]
 8008094:	f000 fbb8 	bl	8008808 <__mcmp>
 8008098:	2800      	cmp	r0, #0
 800809a:	dcb0      	bgt.n	8007ffe <_dtoa_r+0x996>
 800809c:	d102      	bne.n	80080a4 <_dtoa_r+0xa3c>
 800809e:	f01a 0f01 	tst.w	sl, #1
 80080a2:	d1ac      	bne.n	8007ffe <_dtoa_r+0x996>
 80080a4:	4633      	mov	r3, r6
 80080a6:	461e      	mov	r6, r3
 80080a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ac:	2a30      	cmp	r2, #48	@ 0x30
 80080ae:	d0fa      	beq.n	80080a6 <_dtoa_r+0xa3e>
 80080b0:	e4e1      	b.n	8007a76 <_dtoa_r+0x40e>
 80080b2:	429f      	cmp	r7, r3
 80080b4:	d1a4      	bne.n	8008000 <_dtoa_r+0x998>
 80080b6:	9b05      	ldr	r3, [sp, #20]
 80080b8:	3301      	adds	r3, #1
 80080ba:	9305      	str	r3, [sp, #20]
 80080bc:	2331      	movs	r3, #49	@ 0x31
 80080be:	703b      	strb	r3, [r7, #0]
 80080c0:	e4d9      	b.n	8007a76 <_dtoa_r+0x40e>
 80080c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080c4:	4f16      	ldr	r7, [pc, #88]	@ (8008120 <_dtoa_r+0xab8>)
 80080c6:	b11b      	cbz	r3, 80080d0 <_dtoa_r+0xa68>
 80080c8:	f107 0308 	add.w	r3, r7, #8
 80080cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	4638      	mov	r0, r7
 80080d2:	b011      	add	sp, #68	@ 0x44
 80080d4:	ecbd 8b02 	vpop	{d8}
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	9b07      	ldr	r3, [sp, #28]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	f77f ae2c 	ble.w	8007d3c <_dtoa_r+0x6d4>
 80080e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e8:	2001      	movs	r0, #1
 80080ea:	e64c      	b.n	8007d86 <_dtoa_r+0x71e>
 80080ec:	f1bb 0f00 	cmp.w	fp, #0
 80080f0:	f77f aed8 	ble.w	8007ea4 <_dtoa_r+0x83c>
 80080f4:	463e      	mov	r6, r7
 80080f6:	9801      	ldr	r0, [sp, #4]
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7ff fa2c 	bl	8007556 <quorem>
 80080fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008102:	f806 ab01 	strb.w	sl, [r6], #1
 8008106:	1bf2      	subs	r2, r6, r7
 8008108:	4593      	cmp	fp, r2
 800810a:	ddb4      	ble.n	8008076 <_dtoa_r+0xa0e>
 800810c:	9901      	ldr	r1, [sp, #4]
 800810e:	2300      	movs	r3, #0
 8008110:	220a      	movs	r2, #10
 8008112:	4648      	mov	r0, r9
 8008114:	f000 f968 	bl	80083e8 <__multadd>
 8008118:	9001      	str	r0, [sp, #4]
 800811a:	e7ec      	b.n	80080f6 <_dtoa_r+0xa8e>
 800811c:	080092c0 	.word	0x080092c0
 8008120:	08009244 	.word	0x08009244

08008124 <_free_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4605      	mov	r5, r0
 8008128:	2900      	cmp	r1, #0
 800812a:	d041      	beq.n	80081b0 <_free_r+0x8c>
 800812c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008130:	1f0c      	subs	r4, r1, #4
 8008132:	2b00      	cmp	r3, #0
 8008134:	bfb8      	it	lt
 8008136:	18e4      	addlt	r4, r4, r3
 8008138:	f000 f8e8 	bl	800830c <__malloc_lock>
 800813c:	4a1d      	ldr	r2, [pc, #116]	@ (80081b4 <_free_r+0x90>)
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	b933      	cbnz	r3, 8008150 <_free_r+0x2c>
 8008142:	6063      	str	r3, [r4, #4]
 8008144:	6014      	str	r4, [r2, #0]
 8008146:	4628      	mov	r0, r5
 8008148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814c:	f000 b8e4 	b.w	8008318 <__malloc_unlock>
 8008150:	42a3      	cmp	r3, r4
 8008152:	d908      	bls.n	8008166 <_free_r+0x42>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	1821      	adds	r1, r4, r0
 8008158:	428b      	cmp	r3, r1
 800815a:	bf01      	itttt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	1809      	addeq	r1, r1, r0
 8008162:	6021      	streq	r1, [r4, #0]
 8008164:	e7ed      	b.n	8008142 <_free_r+0x1e>
 8008166:	461a      	mov	r2, r3
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	b10b      	cbz	r3, 8008170 <_free_r+0x4c>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d9fa      	bls.n	8008166 <_free_r+0x42>
 8008170:	6811      	ldr	r1, [r2, #0]
 8008172:	1850      	adds	r0, r2, r1
 8008174:	42a0      	cmp	r0, r4
 8008176:	d10b      	bne.n	8008190 <_free_r+0x6c>
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	4401      	add	r1, r0
 800817c:	1850      	adds	r0, r2, r1
 800817e:	4283      	cmp	r3, r0
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	d1e0      	bne.n	8008146 <_free_r+0x22>
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	6053      	str	r3, [r2, #4]
 800818a:	4408      	add	r0, r1
 800818c:	6010      	str	r0, [r2, #0]
 800818e:	e7da      	b.n	8008146 <_free_r+0x22>
 8008190:	d902      	bls.n	8008198 <_free_r+0x74>
 8008192:	230c      	movs	r3, #12
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	e7d6      	b.n	8008146 <_free_r+0x22>
 8008198:	6820      	ldr	r0, [r4, #0]
 800819a:	1821      	adds	r1, r4, r0
 800819c:	428b      	cmp	r3, r1
 800819e:	bf04      	itt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	bf04      	itt	eq
 80081a8:	1809      	addeq	r1, r1, r0
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	6054      	str	r4, [r2, #4]
 80081ae:	e7ca      	b.n	8008146 <_free_r+0x22>
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
 80081b2:	bf00      	nop
 80081b4:	240003ec 	.word	0x240003ec

080081b8 <malloc>:
 80081b8:	4b02      	ldr	r3, [pc, #8]	@ (80081c4 <malloc+0xc>)
 80081ba:	4601      	mov	r1, r0
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	f000 b825 	b.w	800820c <_malloc_r>
 80081c2:	bf00      	nop
 80081c4:	2400001c 	.word	0x2400001c

080081c8 <sbrk_aligned>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008208 <sbrk_aligned+0x40>)
 80081cc:	460c      	mov	r4, r1
 80081ce:	6831      	ldr	r1, [r6, #0]
 80081d0:	4605      	mov	r5, r0
 80081d2:	b911      	cbnz	r1, 80081da <sbrk_aligned+0x12>
 80081d4:	f000 fccc 	bl	8008b70 <_sbrk_r>
 80081d8:	6030      	str	r0, [r6, #0]
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 fcc7 	bl	8008b70 <_sbrk_r>
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	d103      	bne.n	80081ee <sbrk_aligned+0x26>
 80081e6:	f04f 34ff 	mov.w	r4, #4294967295
 80081ea:	4620      	mov	r0, r4
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
 80081ee:	1cc4      	adds	r4, r0, #3
 80081f0:	f024 0403 	bic.w	r4, r4, #3
 80081f4:	42a0      	cmp	r0, r4
 80081f6:	d0f8      	beq.n	80081ea <sbrk_aligned+0x22>
 80081f8:	1a21      	subs	r1, r4, r0
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 fcb8 	bl	8008b70 <_sbrk_r>
 8008200:	3001      	adds	r0, #1
 8008202:	d1f2      	bne.n	80081ea <sbrk_aligned+0x22>
 8008204:	e7ef      	b.n	80081e6 <sbrk_aligned+0x1e>
 8008206:	bf00      	nop
 8008208:	240003e8 	.word	0x240003e8

0800820c <_malloc_r>:
 800820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008210:	1ccd      	adds	r5, r1, #3
 8008212:	f025 0503 	bic.w	r5, r5, #3
 8008216:	3508      	adds	r5, #8
 8008218:	2d0c      	cmp	r5, #12
 800821a:	bf38      	it	cc
 800821c:	250c      	movcc	r5, #12
 800821e:	2d00      	cmp	r5, #0
 8008220:	4606      	mov	r6, r0
 8008222:	db01      	blt.n	8008228 <_malloc_r+0x1c>
 8008224:	42a9      	cmp	r1, r5
 8008226:	d904      	bls.n	8008232 <_malloc_r+0x26>
 8008228:	230c      	movs	r3, #12
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	2000      	movs	r0, #0
 800822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008308 <_malloc_r+0xfc>
 8008236:	f000 f869 	bl	800830c <__malloc_lock>
 800823a:	f8d8 3000 	ldr.w	r3, [r8]
 800823e:	461c      	mov	r4, r3
 8008240:	bb44      	cbnz	r4, 8008294 <_malloc_r+0x88>
 8008242:	4629      	mov	r1, r5
 8008244:	4630      	mov	r0, r6
 8008246:	f7ff ffbf 	bl	80081c8 <sbrk_aligned>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	4604      	mov	r4, r0
 800824e:	d158      	bne.n	8008302 <_malloc_r+0xf6>
 8008250:	f8d8 4000 	ldr.w	r4, [r8]
 8008254:	4627      	mov	r7, r4
 8008256:	2f00      	cmp	r7, #0
 8008258:	d143      	bne.n	80082e2 <_malloc_r+0xd6>
 800825a:	2c00      	cmp	r4, #0
 800825c:	d04b      	beq.n	80082f6 <_malloc_r+0xea>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	4639      	mov	r1, r7
 8008262:	4630      	mov	r0, r6
 8008264:	eb04 0903 	add.w	r9, r4, r3
 8008268:	f000 fc82 	bl	8008b70 <_sbrk_r>
 800826c:	4581      	cmp	r9, r0
 800826e:	d142      	bne.n	80082f6 <_malloc_r+0xea>
 8008270:	6821      	ldr	r1, [r4, #0]
 8008272:	1a6d      	subs	r5, r5, r1
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ffa6 	bl	80081c8 <sbrk_aligned>
 800827c:	3001      	adds	r0, #1
 800827e:	d03a      	beq.n	80082f6 <_malloc_r+0xea>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	442b      	add	r3, r5
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	f8d8 3000 	ldr.w	r3, [r8]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	bb62      	cbnz	r2, 80082e8 <_malloc_r+0xdc>
 800828e:	f8c8 7000 	str.w	r7, [r8]
 8008292:	e00f      	b.n	80082b4 <_malloc_r+0xa8>
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	1b52      	subs	r2, r2, r5
 8008298:	d420      	bmi.n	80082dc <_malloc_r+0xd0>
 800829a:	2a0b      	cmp	r2, #11
 800829c:	d917      	bls.n	80082ce <_malloc_r+0xc2>
 800829e:	1961      	adds	r1, r4, r5
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	6025      	str	r5, [r4, #0]
 80082a4:	bf18      	it	ne
 80082a6:	6059      	strne	r1, [r3, #4]
 80082a8:	6863      	ldr	r3, [r4, #4]
 80082aa:	bf08      	it	eq
 80082ac:	f8c8 1000 	streq.w	r1, [r8]
 80082b0:	5162      	str	r2, [r4, r5]
 80082b2:	604b      	str	r3, [r1, #4]
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 f82f 	bl	8008318 <__malloc_unlock>
 80082ba:	f104 000b 	add.w	r0, r4, #11
 80082be:	1d23      	adds	r3, r4, #4
 80082c0:	f020 0007 	bic.w	r0, r0, #7
 80082c4:	1ac2      	subs	r2, r0, r3
 80082c6:	bf1c      	itt	ne
 80082c8:	1a1b      	subne	r3, r3, r0
 80082ca:	50a3      	strne	r3, [r4, r2]
 80082cc:	e7af      	b.n	800822e <_malloc_r+0x22>
 80082ce:	6862      	ldr	r2, [r4, #4]
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	bf0c      	ite	eq
 80082d4:	f8c8 2000 	streq.w	r2, [r8]
 80082d8:	605a      	strne	r2, [r3, #4]
 80082da:	e7eb      	b.n	80082b4 <_malloc_r+0xa8>
 80082dc:	4623      	mov	r3, r4
 80082de:	6864      	ldr	r4, [r4, #4]
 80082e0:	e7ae      	b.n	8008240 <_malloc_r+0x34>
 80082e2:	463c      	mov	r4, r7
 80082e4:	687f      	ldr	r7, [r7, #4]
 80082e6:	e7b6      	b.n	8008256 <_malloc_r+0x4a>
 80082e8:	461a      	mov	r2, r3
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	d1fb      	bne.n	80082e8 <_malloc_r+0xdc>
 80082f0:	2300      	movs	r3, #0
 80082f2:	6053      	str	r3, [r2, #4]
 80082f4:	e7de      	b.n	80082b4 <_malloc_r+0xa8>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	4630      	mov	r0, r6
 80082fc:	f000 f80c 	bl	8008318 <__malloc_unlock>
 8008300:	e794      	b.n	800822c <_malloc_r+0x20>
 8008302:	6005      	str	r5, [r0, #0]
 8008304:	e7d6      	b.n	80082b4 <_malloc_r+0xa8>
 8008306:	bf00      	nop
 8008308:	240003ec 	.word	0x240003ec

0800830c <__malloc_lock>:
 800830c:	4801      	ldr	r0, [pc, #4]	@ (8008314 <__malloc_lock+0x8>)
 800830e:	f7ff b920 	b.w	8007552 <__retarget_lock_acquire_recursive>
 8008312:	bf00      	nop
 8008314:	240003e4 	.word	0x240003e4

08008318 <__malloc_unlock>:
 8008318:	4801      	ldr	r0, [pc, #4]	@ (8008320 <__malloc_unlock+0x8>)
 800831a:	f7ff b91b 	b.w	8007554 <__retarget_lock_release_recursive>
 800831e:	bf00      	nop
 8008320:	240003e4 	.word	0x240003e4

08008324 <_Balloc>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	69c6      	ldr	r6, [r0, #28]
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	b976      	cbnz	r6, 800834c <_Balloc+0x28>
 800832e:	2010      	movs	r0, #16
 8008330:	f7ff ff42 	bl	80081b8 <malloc>
 8008334:	4602      	mov	r2, r0
 8008336:	61e0      	str	r0, [r4, #28]
 8008338:	b920      	cbnz	r0, 8008344 <_Balloc+0x20>
 800833a:	4b18      	ldr	r3, [pc, #96]	@ (800839c <_Balloc+0x78>)
 800833c:	4818      	ldr	r0, [pc, #96]	@ (80083a0 <_Balloc+0x7c>)
 800833e:	216b      	movs	r1, #107	@ 0x6b
 8008340:	f000 fc34 	bl	8008bac <__assert_func>
 8008344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008348:	6006      	str	r6, [r0, #0]
 800834a:	60c6      	str	r6, [r0, #12]
 800834c:	69e6      	ldr	r6, [r4, #28]
 800834e:	68f3      	ldr	r3, [r6, #12]
 8008350:	b183      	cbz	r3, 8008374 <_Balloc+0x50>
 8008352:	69e3      	ldr	r3, [r4, #28]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800835a:	b9b8      	cbnz	r0, 800838c <_Balloc+0x68>
 800835c:	2101      	movs	r1, #1
 800835e:	fa01 f605 	lsl.w	r6, r1, r5
 8008362:	1d72      	adds	r2, r6, #5
 8008364:	0092      	lsls	r2, r2, #2
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fc3e 	bl	8008be8 <_calloc_r>
 800836c:	b160      	cbz	r0, 8008388 <_Balloc+0x64>
 800836e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008372:	e00e      	b.n	8008392 <_Balloc+0x6e>
 8008374:	2221      	movs	r2, #33	@ 0x21
 8008376:	2104      	movs	r1, #4
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fc35 	bl	8008be8 <_calloc_r>
 800837e:	69e3      	ldr	r3, [r4, #28]
 8008380:	60f0      	str	r0, [r6, #12]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e4      	bne.n	8008352 <_Balloc+0x2e>
 8008388:	2000      	movs	r0, #0
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	6802      	ldr	r2, [r0, #0]
 800838e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008392:	2300      	movs	r3, #0
 8008394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008398:	e7f7      	b.n	800838a <_Balloc+0x66>
 800839a:	bf00      	nop
 800839c:	08009251 	.word	0x08009251
 80083a0:	080092d1 	.word	0x080092d1

080083a4 <_Bfree>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	69c6      	ldr	r6, [r0, #28]
 80083a8:	4605      	mov	r5, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	b976      	cbnz	r6, 80083cc <_Bfree+0x28>
 80083ae:	2010      	movs	r0, #16
 80083b0:	f7ff ff02 	bl	80081b8 <malloc>
 80083b4:	4602      	mov	r2, r0
 80083b6:	61e8      	str	r0, [r5, #28]
 80083b8:	b920      	cbnz	r0, 80083c4 <_Bfree+0x20>
 80083ba:	4b09      	ldr	r3, [pc, #36]	@ (80083e0 <_Bfree+0x3c>)
 80083bc:	4809      	ldr	r0, [pc, #36]	@ (80083e4 <_Bfree+0x40>)
 80083be:	218f      	movs	r1, #143	@ 0x8f
 80083c0:	f000 fbf4 	bl	8008bac <__assert_func>
 80083c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c8:	6006      	str	r6, [r0, #0]
 80083ca:	60c6      	str	r6, [r0, #12]
 80083cc:	b13c      	cbz	r4, 80083de <_Bfree+0x3a>
 80083ce:	69eb      	ldr	r3, [r5, #28]
 80083d0:	6862      	ldr	r2, [r4, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083d8:	6021      	str	r1, [r4, #0]
 80083da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	08009251 	.word	0x08009251
 80083e4:	080092d1 	.word	0x080092d1

080083e8 <__multadd>:
 80083e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	690d      	ldr	r5, [r1, #16]
 80083ee:	4607      	mov	r7, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	461e      	mov	r6, r3
 80083f4:	f101 0c14 	add.w	ip, r1, #20
 80083f8:	2000      	movs	r0, #0
 80083fa:	f8dc 3000 	ldr.w	r3, [ip]
 80083fe:	b299      	uxth	r1, r3
 8008400:	fb02 6101 	mla	r1, r2, r1, r6
 8008404:	0c1e      	lsrs	r6, r3, #16
 8008406:	0c0b      	lsrs	r3, r1, #16
 8008408:	fb02 3306 	mla	r3, r2, r6, r3
 800840c:	b289      	uxth	r1, r1
 800840e:	3001      	adds	r0, #1
 8008410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008414:	4285      	cmp	r5, r0
 8008416:	f84c 1b04 	str.w	r1, [ip], #4
 800841a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800841e:	dcec      	bgt.n	80083fa <__multadd+0x12>
 8008420:	b30e      	cbz	r6, 8008466 <__multadd+0x7e>
 8008422:	68a3      	ldr	r3, [r4, #8]
 8008424:	42ab      	cmp	r3, r5
 8008426:	dc19      	bgt.n	800845c <__multadd+0x74>
 8008428:	6861      	ldr	r1, [r4, #4]
 800842a:	4638      	mov	r0, r7
 800842c:	3101      	adds	r1, #1
 800842e:	f7ff ff79 	bl	8008324 <_Balloc>
 8008432:	4680      	mov	r8, r0
 8008434:	b928      	cbnz	r0, 8008442 <__multadd+0x5a>
 8008436:	4602      	mov	r2, r0
 8008438:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <__multadd+0x84>)
 800843a:	480d      	ldr	r0, [pc, #52]	@ (8008470 <__multadd+0x88>)
 800843c:	21ba      	movs	r1, #186	@ 0xba
 800843e:	f000 fbb5 	bl	8008bac <__assert_func>
 8008442:	6922      	ldr	r2, [r4, #16]
 8008444:	3202      	adds	r2, #2
 8008446:	f104 010c 	add.w	r1, r4, #12
 800844a:	0092      	lsls	r2, r2, #2
 800844c:	300c      	adds	r0, #12
 800844e:	f000 fb9f 	bl	8008b90 <memcpy>
 8008452:	4621      	mov	r1, r4
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff ffa5 	bl	80083a4 <_Bfree>
 800845a:	4644      	mov	r4, r8
 800845c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008460:	3501      	adds	r5, #1
 8008462:	615e      	str	r6, [r3, #20]
 8008464:	6125      	str	r5, [r4, #16]
 8008466:	4620      	mov	r0, r4
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800846c:	080092c0 	.word	0x080092c0
 8008470:	080092d1 	.word	0x080092d1

08008474 <__hi0bits>:
 8008474:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008478:	4603      	mov	r3, r0
 800847a:	bf36      	itet	cc
 800847c:	0403      	lslcc	r3, r0, #16
 800847e:	2000      	movcs	r0, #0
 8008480:	2010      	movcc	r0, #16
 8008482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008486:	bf3c      	itt	cc
 8008488:	021b      	lslcc	r3, r3, #8
 800848a:	3008      	addcc	r0, #8
 800848c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008490:	bf3c      	itt	cc
 8008492:	011b      	lslcc	r3, r3, #4
 8008494:	3004      	addcc	r0, #4
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849a:	bf3c      	itt	cc
 800849c:	009b      	lslcc	r3, r3, #2
 800849e:	3002      	addcc	r0, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db05      	blt.n	80084b0 <__hi0bits+0x3c>
 80084a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084a8:	f100 0001 	add.w	r0, r0, #1
 80084ac:	bf08      	it	eq
 80084ae:	2020      	moveq	r0, #32
 80084b0:	4770      	bx	lr

080084b2 <__lo0bits>:
 80084b2:	6803      	ldr	r3, [r0, #0]
 80084b4:	4602      	mov	r2, r0
 80084b6:	f013 0007 	ands.w	r0, r3, #7
 80084ba:	d00b      	beq.n	80084d4 <__lo0bits+0x22>
 80084bc:	07d9      	lsls	r1, r3, #31
 80084be:	d421      	bmi.n	8008504 <__lo0bits+0x52>
 80084c0:	0798      	lsls	r0, r3, #30
 80084c2:	bf49      	itett	mi
 80084c4:	085b      	lsrmi	r3, r3, #1
 80084c6:	089b      	lsrpl	r3, r3, #2
 80084c8:	2001      	movmi	r0, #1
 80084ca:	6013      	strmi	r3, [r2, #0]
 80084cc:	bf5c      	itt	pl
 80084ce:	6013      	strpl	r3, [r2, #0]
 80084d0:	2002      	movpl	r0, #2
 80084d2:	4770      	bx	lr
 80084d4:	b299      	uxth	r1, r3
 80084d6:	b909      	cbnz	r1, 80084dc <__lo0bits+0x2a>
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	2010      	movs	r0, #16
 80084dc:	b2d9      	uxtb	r1, r3
 80084de:	b909      	cbnz	r1, 80084e4 <__lo0bits+0x32>
 80084e0:	3008      	adds	r0, #8
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	0719      	lsls	r1, r3, #28
 80084e6:	bf04      	itt	eq
 80084e8:	091b      	lsreq	r3, r3, #4
 80084ea:	3004      	addeq	r0, #4
 80084ec:	0799      	lsls	r1, r3, #30
 80084ee:	bf04      	itt	eq
 80084f0:	089b      	lsreq	r3, r3, #2
 80084f2:	3002      	addeq	r0, #2
 80084f4:	07d9      	lsls	r1, r3, #31
 80084f6:	d403      	bmi.n	8008500 <__lo0bits+0x4e>
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	f100 0001 	add.w	r0, r0, #1
 80084fe:	d003      	beq.n	8008508 <__lo0bits+0x56>
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	4770      	bx	lr
 8008504:	2000      	movs	r0, #0
 8008506:	4770      	bx	lr
 8008508:	2020      	movs	r0, #32
 800850a:	4770      	bx	lr

0800850c <__i2b>:
 800850c:	b510      	push	{r4, lr}
 800850e:	460c      	mov	r4, r1
 8008510:	2101      	movs	r1, #1
 8008512:	f7ff ff07 	bl	8008324 <_Balloc>
 8008516:	4602      	mov	r2, r0
 8008518:	b928      	cbnz	r0, 8008526 <__i2b+0x1a>
 800851a:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <__i2b+0x24>)
 800851c:	4805      	ldr	r0, [pc, #20]	@ (8008534 <__i2b+0x28>)
 800851e:	f240 1145 	movw	r1, #325	@ 0x145
 8008522:	f000 fb43 	bl	8008bac <__assert_func>
 8008526:	2301      	movs	r3, #1
 8008528:	6144      	str	r4, [r0, #20]
 800852a:	6103      	str	r3, [r0, #16]
 800852c:	bd10      	pop	{r4, pc}
 800852e:	bf00      	nop
 8008530:	080092c0 	.word	0x080092c0
 8008534:	080092d1 	.word	0x080092d1

08008538 <__multiply>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4617      	mov	r7, r2
 800853e:	690a      	ldr	r2, [r1, #16]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	429a      	cmp	r2, r3
 8008544:	bfa8      	it	ge
 8008546:	463b      	movge	r3, r7
 8008548:	4689      	mov	r9, r1
 800854a:	bfa4      	itt	ge
 800854c:	460f      	movge	r7, r1
 800854e:	4699      	movge	r9, r3
 8008550:	693d      	ldr	r5, [r7, #16]
 8008552:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	eb05 060a 	add.w	r6, r5, sl
 800855e:	42b3      	cmp	r3, r6
 8008560:	b085      	sub	sp, #20
 8008562:	bfb8      	it	lt
 8008564:	3101      	addlt	r1, #1
 8008566:	f7ff fedd 	bl	8008324 <_Balloc>
 800856a:	b930      	cbnz	r0, 800857a <__multiply+0x42>
 800856c:	4602      	mov	r2, r0
 800856e:	4b41      	ldr	r3, [pc, #260]	@ (8008674 <__multiply+0x13c>)
 8008570:	4841      	ldr	r0, [pc, #260]	@ (8008678 <__multiply+0x140>)
 8008572:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008576:	f000 fb19 	bl	8008bac <__assert_func>
 800857a:	f100 0414 	add.w	r4, r0, #20
 800857e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008582:	4623      	mov	r3, r4
 8008584:	2200      	movs	r2, #0
 8008586:	4573      	cmp	r3, lr
 8008588:	d320      	bcc.n	80085cc <__multiply+0x94>
 800858a:	f107 0814 	add.w	r8, r7, #20
 800858e:	f109 0114 	add.w	r1, r9, #20
 8008592:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008596:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800859a:	9302      	str	r3, [sp, #8]
 800859c:	1beb      	subs	r3, r5, r7
 800859e:	3b15      	subs	r3, #21
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	3304      	adds	r3, #4
 80085a6:	3715      	adds	r7, #21
 80085a8:	42bd      	cmp	r5, r7
 80085aa:	bf38      	it	cc
 80085ac:	2304      	movcc	r3, #4
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	9103      	str	r1, [sp, #12]
 80085b4:	428b      	cmp	r3, r1
 80085b6:	d80c      	bhi.n	80085d2 <__multiply+0x9a>
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	dd03      	ble.n	80085c4 <__multiply+0x8c>
 80085bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d055      	beq.n	8008670 <__multiply+0x138>
 80085c4:	6106      	str	r6, [r0, #16]
 80085c6:	b005      	add	sp, #20
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	f843 2b04 	str.w	r2, [r3], #4
 80085d0:	e7d9      	b.n	8008586 <__multiply+0x4e>
 80085d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80085d6:	f1ba 0f00 	cmp.w	sl, #0
 80085da:	d01f      	beq.n	800861c <__multiply+0xe4>
 80085dc:	46c4      	mov	ip, r8
 80085de:	46a1      	mov	r9, r4
 80085e0:	2700      	movs	r7, #0
 80085e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085e6:	f8d9 3000 	ldr.w	r3, [r9]
 80085ea:	fa1f fb82 	uxth.w	fp, r2
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80085f4:	443b      	add	r3, r7
 80085f6:	f8d9 7000 	ldr.w	r7, [r9]
 80085fa:	0c12      	lsrs	r2, r2, #16
 80085fc:	0c3f      	lsrs	r7, r7, #16
 80085fe:	fb0a 7202 	mla	r2, sl, r2, r7
 8008602:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008606:	b29b      	uxth	r3, r3
 8008608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800860c:	4565      	cmp	r5, ip
 800860e:	f849 3b04 	str.w	r3, [r9], #4
 8008612:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008616:	d8e4      	bhi.n	80085e2 <__multiply+0xaa>
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	50e7      	str	r7, [r4, r3]
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008622:	3104      	adds	r1, #4
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	d020      	beq.n	800866c <__multiply+0x134>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	4647      	mov	r7, r8
 800862e:	46a4      	mov	ip, r4
 8008630:	f04f 0a00 	mov.w	sl, #0
 8008634:	f8b7 b000 	ldrh.w	fp, [r7]
 8008638:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800863c:	fb09 220b 	mla	r2, r9, fp, r2
 8008640:	4452      	add	r2, sl
 8008642:	b29b      	uxth	r3, r3
 8008644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008648:	f84c 3b04 	str.w	r3, [ip], #4
 800864c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008650:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008654:	f8bc 3000 	ldrh.w	r3, [ip]
 8008658:	fb09 330a 	mla	r3, r9, sl, r3
 800865c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008660:	42bd      	cmp	r5, r7
 8008662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008666:	d8e5      	bhi.n	8008634 <__multiply+0xfc>
 8008668:	9a01      	ldr	r2, [sp, #4]
 800866a:	50a3      	str	r3, [r4, r2]
 800866c:	3404      	adds	r4, #4
 800866e:	e79f      	b.n	80085b0 <__multiply+0x78>
 8008670:	3e01      	subs	r6, #1
 8008672:	e7a1      	b.n	80085b8 <__multiply+0x80>
 8008674:	080092c0 	.word	0x080092c0
 8008678:	080092d1 	.word	0x080092d1

0800867c <__pow5mult>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	4615      	mov	r5, r2
 8008682:	f012 0203 	ands.w	r2, r2, #3
 8008686:	4607      	mov	r7, r0
 8008688:	460e      	mov	r6, r1
 800868a:	d007      	beq.n	800869c <__pow5mult+0x20>
 800868c:	4c25      	ldr	r4, [pc, #148]	@ (8008724 <__pow5mult+0xa8>)
 800868e:	3a01      	subs	r2, #1
 8008690:	2300      	movs	r3, #0
 8008692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008696:	f7ff fea7 	bl	80083e8 <__multadd>
 800869a:	4606      	mov	r6, r0
 800869c:	10ad      	asrs	r5, r5, #2
 800869e:	d03d      	beq.n	800871c <__pow5mult+0xa0>
 80086a0:	69fc      	ldr	r4, [r7, #28]
 80086a2:	b97c      	cbnz	r4, 80086c4 <__pow5mult+0x48>
 80086a4:	2010      	movs	r0, #16
 80086a6:	f7ff fd87 	bl	80081b8 <malloc>
 80086aa:	4602      	mov	r2, r0
 80086ac:	61f8      	str	r0, [r7, #28]
 80086ae:	b928      	cbnz	r0, 80086bc <__pow5mult+0x40>
 80086b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008728 <__pow5mult+0xac>)
 80086b2:	481e      	ldr	r0, [pc, #120]	@ (800872c <__pow5mult+0xb0>)
 80086b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086b8:	f000 fa78 	bl	8008bac <__assert_func>
 80086bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c0:	6004      	str	r4, [r0, #0]
 80086c2:	60c4      	str	r4, [r0, #12]
 80086c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086cc:	b94c      	cbnz	r4, 80086e2 <__pow5mult+0x66>
 80086ce:	f240 2171 	movw	r1, #625	@ 0x271
 80086d2:	4638      	mov	r0, r7
 80086d4:	f7ff ff1a 	bl	800850c <__i2b>
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c8 0008 	str.w	r0, [r8, #8]
 80086de:	4604      	mov	r4, r0
 80086e0:	6003      	str	r3, [r0, #0]
 80086e2:	f04f 0900 	mov.w	r9, #0
 80086e6:	07eb      	lsls	r3, r5, #31
 80086e8:	d50a      	bpl.n	8008700 <__pow5mult+0x84>
 80086ea:	4631      	mov	r1, r6
 80086ec:	4622      	mov	r2, r4
 80086ee:	4638      	mov	r0, r7
 80086f0:	f7ff ff22 	bl	8008538 <__multiply>
 80086f4:	4631      	mov	r1, r6
 80086f6:	4680      	mov	r8, r0
 80086f8:	4638      	mov	r0, r7
 80086fa:	f7ff fe53 	bl	80083a4 <_Bfree>
 80086fe:	4646      	mov	r6, r8
 8008700:	106d      	asrs	r5, r5, #1
 8008702:	d00b      	beq.n	800871c <__pow5mult+0xa0>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	b938      	cbnz	r0, 8008718 <__pow5mult+0x9c>
 8008708:	4622      	mov	r2, r4
 800870a:	4621      	mov	r1, r4
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff ff13 	bl	8008538 <__multiply>
 8008712:	6020      	str	r0, [r4, #0]
 8008714:	f8c0 9000 	str.w	r9, [r0]
 8008718:	4604      	mov	r4, r0
 800871a:	e7e4      	b.n	80086e6 <__pow5mult+0x6a>
 800871c:	4630      	mov	r0, r6
 800871e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008722:	bf00      	nop
 8008724:	08009384 	.word	0x08009384
 8008728:	08009251 	.word	0x08009251
 800872c:	080092d1 	.word	0x080092d1

08008730 <__lshift>:
 8008730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	6849      	ldr	r1, [r1, #4]
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	4607      	mov	r7, r0
 8008742:	4691      	mov	r9, r2
 8008744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008748:	f108 0601 	add.w	r6, r8, #1
 800874c:	42b3      	cmp	r3, r6
 800874e:	db0b      	blt.n	8008768 <__lshift+0x38>
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff fde7 	bl	8008324 <_Balloc>
 8008756:	4605      	mov	r5, r0
 8008758:	b948      	cbnz	r0, 800876e <__lshift+0x3e>
 800875a:	4602      	mov	r2, r0
 800875c:	4b28      	ldr	r3, [pc, #160]	@ (8008800 <__lshift+0xd0>)
 800875e:	4829      	ldr	r0, [pc, #164]	@ (8008804 <__lshift+0xd4>)
 8008760:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008764:	f000 fa22 	bl	8008bac <__assert_func>
 8008768:	3101      	adds	r1, #1
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	e7ee      	b.n	800874c <__lshift+0x1c>
 800876e:	2300      	movs	r3, #0
 8008770:	f100 0114 	add.w	r1, r0, #20
 8008774:	f100 0210 	add.w	r2, r0, #16
 8008778:	4618      	mov	r0, r3
 800877a:	4553      	cmp	r3, sl
 800877c:	db33      	blt.n	80087e6 <__lshift+0xb6>
 800877e:	6920      	ldr	r0, [r4, #16]
 8008780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008784:	f104 0314 	add.w	r3, r4, #20
 8008788:	f019 091f 	ands.w	r9, r9, #31
 800878c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008790:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008794:	d02b      	beq.n	80087ee <__lshift+0xbe>
 8008796:	f1c9 0e20 	rsb	lr, r9, #32
 800879a:	468a      	mov	sl, r1
 800879c:	2200      	movs	r2, #0
 800879e:	6818      	ldr	r0, [r3, #0]
 80087a0:	fa00 f009 	lsl.w	r0, r0, r9
 80087a4:	4310      	orrs	r0, r2
 80087a6:	f84a 0b04 	str.w	r0, [sl], #4
 80087aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ae:	459c      	cmp	ip, r3
 80087b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087b4:	d8f3      	bhi.n	800879e <__lshift+0x6e>
 80087b6:	ebac 0304 	sub.w	r3, ip, r4
 80087ba:	3b15      	subs	r3, #21
 80087bc:	f023 0303 	bic.w	r3, r3, #3
 80087c0:	3304      	adds	r3, #4
 80087c2:	f104 0015 	add.w	r0, r4, #21
 80087c6:	4560      	cmp	r0, ip
 80087c8:	bf88      	it	hi
 80087ca:	2304      	movhi	r3, #4
 80087cc:	50ca      	str	r2, [r1, r3]
 80087ce:	b10a      	cbz	r2, 80087d4 <__lshift+0xa4>
 80087d0:	f108 0602 	add.w	r6, r8, #2
 80087d4:	3e01      	subs	r6, #1
 80087d6:	4638      	mov	r0, r7
 80087d8:	612e      	str	r6, [r5, #16]
 80087da:	4621      	mov	r1, r4
 80087dc:	f7ff fde2 	bl	80083a4 <_Bfree>
 80087e0:	4628      	mov	r0, r5
 80087e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087ea:	3301      	adds	r3, #1
 80087ec:	e7c5      	b.n	800877a <__lshift+0x4a>
 80087ee:	3904      	subs	r1, #4
 80087f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087f8:	459c      	cmp	ip, r3
 80087fa:	d8f9      	bhi.n	80087f0 <__lshift+0xc0>
 80087fc:	e7ea      	b.n	80087d4 <__lshift+0xa4>
 80087fe:	bf00      	nop
 8008800:	080092c0 	.word	0x080092c0
 8008804:	080092d1 	.word	0x080092d1

08008808 <__mcmp>:
 8008808:	690a      	ldr	r2, [r1, #16]
 800880a:	4603      	mov	r3, r0
 800880c:	6900      	ldr	r0, [r0, #16]
 800880e:	1a80      	subs	r0, r0, r2
 8008810:	b530      	push	{r4, r5, lr}
 8008812:	d10e      	bne.n	8008832 <__mcmp+0x2a>
 8008814:	3314      	adds	r3, #20
 8008816:	3114      	adds	r1, #20
 8008818:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800881c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008820:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008824:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008828:	4295      	cmp	r5, r2
 800882a:	d003      	beq.n	8008834 <__mcmp+0x2c>
 800882c:	d205      	bcs.n	800883a <__mcmp+0x32>
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	bd30      	pop	{r4, r5, pc}
 8008834:	42a3      	cmp	r3, r4
 8008836:	d3f3      	bcc.n	8008820 <__mcmp+0x18>
 8008838:	e7fb      	b.n	8008832 <__mcmp+0x2a>
 800883a:	2001      	movs	r0, #1
 800883c:	e7f9      	b.n	8008832 <__mcmp+0x2a>
	...

08008840 <__mdiff>:
 8008840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	4689      	mov	r9, r1
 8008846:	4606      	mov	r6, r0
 8008848:	4611      	mov	r1, r2
 800884a:	4648      	mov	r0, r9
 800884c:	4614      	mov	r4, r2
 800884e:	f7ff ffdb 	bl	8008808 <__mcmp>
 8008852:	1e05      	subs	r5, r0, #0
 8008854:	d112      	bne.n	800887c <__mdiff+0x3c>
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff fd63 	bl	8008324 <_Balloc>
 800885e:	4602      	mov	r2, r0
 8008860:	b928      	cbnz	r0, 800886e <__mdiff+0x2e>
 8008862:	4b3f      	ldr	r3, [pc, #252]	@ (8008960 <__mdiff+0x120>)
 8008864:	f240 2137 	movw	r1, #567	@ 0x237
 8008868:	483e      	ldr	r0, [pc, #248]	@ (8008964 <__mdiff+0x124>)
 800886a:	f000 f99f 	bl	8008bac <__assert_func>
 800886e:	2301      	movs	r3, #1
 8008870:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008874:	4610      	mov	r0, r2
 8008876:	b003      	add	sp, #12
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	bfbc      	itt	lt
 800887e:	464b      	movlt	r3, r9
 8008880:	46a1      	movlt	r9, r4
 8008882:	4630      	mov	r0, r6
 8008884:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008888:	bfba      	itte	lt
 800888a:	461c      	movlt	r4, r3
 800888c:	2501      	movlt	r5, #1
 800888e:	2500      	movge	r5, #0
 8008890:	f7ff fd48 	bl	8008324 <_Balloc>
 8008894:	4602      	mov	r2, r0
 8008896:	b918      	cbnz	r0, 80088a0 <__mdiff+0x60>
 8008898:	4b31      	ldr	r3, [pc, #196]	@ (8008960 <__mdiff+0x120>)
 800889a:	f240 2145 	movw	r1, #581	@ 0x245
 800889e:	e7e3      	b.n	8008868 <__mdiff+0x28>
 80088a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088a4:	6926      	ldr	r6, [r4, #16]
 80088a6:	60c5      	str	r5, [r0, #12]
 80088a8:	f109 0310 	add.w	r3, r9, #16
 80088ac:	f109 0514 	add.w	r5, r9, #20
 80088b0:	f104 0e14 	add.w	lr, r4, #20
 80088b4:	f100 0b14 	add.w	fp, r0, #20
 80088b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	46d9      	mov	r9, fp
 80088c4:	f04f 0c00 	mov.w	ip, #0
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	fa1f f38a 	uxth.w	r3, sl
 80088d8:	4619      	mov	r1, r3
 80088da:	b283      	uxth	r3, r0
 80088dc:	1acb      	subs	r3, r1, r3
 80088de:	0c00      	lsrs	r0, r0, #16
 80088e0:	4463      	add	r3, ip
 80088e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80088f0:	4576      	cmp	r6, lr
 80088f2:	f849 3b04 	str.w	r3, [r9], #4
 80088f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088fa:	d8e5      	bhi.n	80088c8 <__mdiff+0x88>
 80088fc:	1b33      	subs	r3, r6, r4
 80088fe:	3b15      	subs	r3, #21
 8008900:	f023 0303 	bic.w	r3, r3, #3
 8008904:	3415      	adds	r4, #21
 8008906:	3304      	adds	r3, #4
 8008908:	42a6      	cmp	r6, r4
 800890a:	bf38      	it	cc
 800890c:	2304      	movcc	r3, #4
 800890e:	441d      	add	r5, r3
 8008910:	445b      	add	r3, fp
 8008912:	461e      	mov	r6, r3
 8008914:	462c      	mov	r4, r5
 8008916:	4544      	cmp	r4, r8
 8008918:	d30e      	bcc.n	8008938 <__mdiff+0xf8>
 800891a:	f108 0103 	add.w	r1, r8, #3
 800891e:	1b49      	subs	r1, r1, r5
 8008920:	f021 0103 	bic.w	r1, r1, #3
 8008924:	3d03      	subs	r5, #3
 8008926:	45a8      	cmp	r8, r5
 8008928:	bf38      	it	cc
 800892a:	2100      	movcc	r1, #0
 800892c:	440b      	add	r3, r1
 800892e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008932:	b191      	cbz	r1, 800895a <__mdiff+0x11a>
 8008934:	6117      	str	r7, [r2, #16]
 8008936:	e79d      	b.n	8008874 <__mdiff+0x34>
 8008938:	f854 1b04 	ldr.w	r1, [r4], #4
 800893c:	46e6      	mov	lr, ip
 800893e:	0c08      	lsrs	r0, r1, #16
 8008940:	fa1c fc81 	uxtah	ip, ip, r1
 8008944:	4471      	add	r1, lr
 8008946:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800894a:	b289      	uxth	r1, r1
 800894c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008950:	f846 1b04 	str.w	r1, [r6], #4
 8008954:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008958:	e7dd      	b.n	8008916 <__mdiff+0xd6>
 800895a:	3f01      	subs	r7, #1
 800895c:	e7e7      	b.n	800892e <__mdiff+0xee>
 800895e:	bf00      	nop
 8008960:	080092c0 	.word	0x080092c0
 8008964:	080092d1 	.word	0x080092d1

08008968 <__d2b>:
 8008968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800896c:	460f      	mov	r7, r1
 800896e:	2101      	movs	r1, #1
 8008970:	ec59 8b10 	vmov	r8, r9, d0
 8008974:	4616      	mov	r6, r2
 8008976:	f7ff fcd5 	bl	8008324 <_Balloc>
 800897a:	4604      	mov	r4, r0
 800897c:	b930      	cbnz	r0, 800898c <__d2b+0x24>
 800897e:	4602      	mov	r2, r0
 8008980:	4b23      	ldr	r3, [pc, #140]	@ (8008a10 <__d2b+0xa8>)
 8008982:	4824      	ldr	r0, [pc, #144]	@ (8008a14 <__d2b+0xac>)
 8008984:	f240 310f 	movw	r1, #783	@ 0x30f
 8008988:	f000 f910 	bl	8008bac <__assert_func>
 800898c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008994:	b10d      	cbz	r5, 800899a <__d2b+0x32>
 8008996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	f1b8 0300 	subs.w	r3, r8, #0
 80089a0:	d023      	beq.n	80089ea <__d2b+0x82>
 80089a2:	4668      	mov	r0, sp
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	f7ff fd84 	bl	80084b2 <__lo0bits>
 80089aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089ae:	b1d0      	cbz	r0, 80089e6 <__d2b+0x7e>
 80089b0:	f1c0 0320 	rsb	r3, r0, #32
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	430b      	orrs	r3, r1
 80089ba:	40c2      	lsrs	r2, r0
 80089bc:	6163      	str	r3, [r4, #20]
 80089be:	9201      	str	r2, [sp, #4]
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	61a3      	str	r3, [r4, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bf0c      	ite	eq
 80089c8:	2201      	moveq	r2, #1
 80089ca:	2202      	movne	r2, #2
 80089cc:	6122      	str	r2, [r4, #16]
 80089ce:	b1a5      	cbz	r5, 80089fa <__d2b+0x92>
 80089d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089d4:	4405      	add	r5, r0
 80089d6:	603d      	str	r5, [r7, #0]
 80089d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089dc:	6030      	str	r0, [r6, #0]
 80089de:	4620      	mov	r0, r4
 80089e0:	b003      	add	sp, #12
 80089e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e6:	6161      	str	r1, [r4, #20]
 80089e8:	e7ea      	b.n	80089c0 <__d2b+0x58>
 80089ea:	a801      	add	r0, sp, #4
 80089ec:	f7ff fd61 	bl	80084b2 <__lo0bits>
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	6163      	str	r3, [r4, #20]
 80089f4:	3020      	adds	r0, #32
 80089f6:	2201      	movs	r2, #1
 80089f8:	e7e8      	b.n	80089cc <__d2b+0x64>
 80089fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a02:	6038      	str	r0, [r7, #0]
 8008a04:	6918      	ldr	r0, [r3, #16]
 8008a06:	f7ff fd35 	bl	8008474 <__hi0bits>
 8008a0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a0e:	e7e5      	b.n	80089dc <__d2b+0x74>
 8008a10:	080092c0 	.word	0x080092c0
 8008a14:	080092d1 	.word	0x080092d1

08008a18 <__sflush_r>:
 8008a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	0716      	lsls	r6, r2, #28
 8008a22:	4605      	mov	r5, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	d454      	bmi.n	8008ad2 <__sflush_r+0xba>
 8008a28:	684b      	ldr	r3, [r1, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dc02      	bgt.n	8008a34 <__sflush_r+0x1c>
 8008a2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd48      	ble.n	8008ac6 <__sflush_r+0xae>
 8008a34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	d045      	beq.n	8008ac6 <__sflush_r+0xae>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a40:	682f      	ldr	r7, [r5, #0]
 8008a42:	6a21      	ldr	r1, [r4, #32]
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	d030      	beq.n	8008aaa <__sflush_r+0x92>
 8008a48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	0759      	lsls	r1, r3, #29
 8008a4e:	d505      	bpl.n	8008a5c <__sflush_r+0x44>
 8008a50:	6863      	ldr	r3, [r4, #4]
 8008a52:	1ad2      	subs	r2, r2, r3
 8008a54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a56:	b10b      	cbz	r3, 8008a5c <__sflush_r+0x44>
 8008a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a60:	6a21      	ldr	r1, [r4, #32]
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b0      	blx	r6
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	d106      	bne.n	8008a7a <__sflush_r+0x62>
 8008a6c:	6829      	ldr	r1, [r5, #0]
 8008a6e:	291d      	cmp	r1, #29
 8008a70:	d82b      	bhi.n	8008aca <__sflush_r+0xb2>
 8008a72:	4a2a      	ldr	r2, [pc, #168]	@ (8008b1c <__sflush_r+0x104>)
 8008a74:	40ca      	lsrs	r2, r1
 8008a76:	07d6      	lsls	r6, r2, #31
 8008a78:	d527      	bpl.n	8008aca <__sflush_r+0xb2>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6062      	str	r2, [r4, #4]
 8008a7e:	04d9      	lsls	r1, r3, #19
 8008a80:	6922      	ldr	r2, [r4, #16]
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	d504      	bpl.n	8008a90 <__sflush_r+0x78>
 8008a86:	1c42      	adds	r2, r0, #1
 8008a88:	d101      	bne.n	8008a8e <__sflush_r+0x76>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b903      	cbnz	r3, 8008a90 <__sflush_r+0x78>
 8008a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a92:	602f      	str	r7, [r5, #0]
 8008a94:	b1b9      	cbz	r1, 8008ac6 <__sflush_r+0xae>
 8008a96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	d002      	beq.n	8008aa4 <__sflush_r+0x8c>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7ff fb40 	bl	8008124 <_free_r>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aa8:	e00d      	b.n	8008ac6 <__sflush_r+0xae>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b0      	blx	r6
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	1c50      	adds	r0, r2, #1
 8008ab4:	d1c9      	bne.n	8008a4a <__sflush_r+0x32>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0c6      	beq.n	8008a4a <__sflush_r+0x32>
 8008abc:	2b1d      	cmp	r3, #29
 8008abe:	d001      	beq.n	8008ac4 <__sflush_r+0xac>
 8008ac0:	2b16      	cmp	r3, #22
 8008ac2:	d11e      	bne.n	8008b02 <__sflush_r+0xea>
 8008ac4:	602f      	str	r7, [r5, #0]
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e022      	b.n	8008b10 <__sflush_r+0xf8>
 8008aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ace:	b21b      	sxth	r3, r3
 8008ad0:	e01b      	b.n	8008b0a <__sflush_r+0xf2>
 8008ad2:	690f      	ldr	r7, [r1, #16]
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	d0f6      	beq.n	8008ac6 <__sflush_r+0xae>
 8008ad8:	0793      	lsls	r3, r2, #30
 8008ada:	680e      	ldr	r6, [r1, #0]
 8008adc:	bf08      	it	eq
 8008ade:	694b      	ldreq	r3, [r1, #20]
 8008ae0:	600f      	str	r7, [r1, #0]
 8008ae2:	bf18      	it	ne
 8008ae4:	2300      	movne	r3, #0
 8008ae6:	eba6 0807 	sub.w	r8, r6, r7
 8008aea:	608b      	str	r3, [r1, #8]
 8008aec:	f1b8 0f00 	cmp.w	r8, #0
 8008af0:	dde9      	ble.n	8008ac6 <__sflush_r+0xae>
 8008af2:	6a21      	ldr	r1, [r4, #32]
 8008af4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008af6:	4643      	mov	r3, r8
 8008af8:	463a      	mov	r2, r7
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b0      	blx	r6
 8008afe:	2800      	cmp	r0, #0
 8008b00:	dc08      	bgt.n	8008b14 <__sflush_r+0xfc>
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b14:	4407      	add	r7, r0
 8008b16:	eba8 0800 	sub.w	r8, r8, r0
 8008b1a:	e7e7      	b.n	8008aec <__sflush_r+0xd4>
 8008b1c:	20400001 	.word	0x20400001

08008b20 <_fflush_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b913      	cbnz	r3, 8008b30 <_fflush_r+0x10>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	b118      	cbz	r0, 8008b3a <_fflush_r+0x1a>
 8008b32:	6a03      	ldr	r3, [r0, #32]
 8008b34:	b90b      	cbnz	r3, 8008b3a <_fflush_r+0x1a>
 8008b36:	f7fe fc15 	bl	8007364 <__sinit>
 8008b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f3      	beq.n	8008b2a <_fflush_r+0xa>
 8008b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b44:	07d0      	lsls	r0, r2, #31
 8008b46:	d404      	bmi.n	8008b52 <_fflush_r+0x32>
 8008b48:	0599      	lsls	r1, r3, #22
 8008b4a:	d402      	bmi.n	8008b52 <_fflush_r+0x32>
 8008b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b4e:	f7fe fd00 	bl	8007552 <__retarget_lock_acquire_recursive>
 8008b52:	4628      	mov	r0, r5
 8008b54:	4621      	mov	r1, r4
 8008b56:	f7ff ff5f 	bl	8008a18 <__sflush_r>
 8008b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b5c:	07da      	lsls	r2, r3, #31
 8008b5e:	4605      	mov	r5, r0
 8008b60:	d4e4      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	059b      	lsls	r3, r3, #22
 8008b66:	d4e1      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b6a:	f7fe fcf3 	bl	8007554 <__retarget_lock_release_recursive>
 8008b6e:	e7dd      	b.n	8008b2c <_fflush_r+0xc>

08008b70 <_sbrk_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	@ (8008b8c <_sbrk_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f8 f816 	bl	8000bac <_sbrk>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_sbrk_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_sbrk_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	240003e0 	.word	0x240003e0

08008b90 <memcpy>:
 8008b90:	440a      	add	r2, r1
 8008b92:	4291      	cmp	r1, r2
 8008b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b98:	d100      	bne.n	8008b9c <memcpy+0xc>
 8008b9a:	4770      	bx	lr
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	d1f9      	bne.n	8008b9e <memcpy+0xe>
 8008baa:	bd10      	pop	{r4, pc}

08008bac <__assert_func>:
 8008bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bae:	4614      	mov	r4, r2
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4b09      	ldr	r3, [pc, #36]	@ (8008bd8 <__assert_func+0x2c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	68d8      	ldr	r0, [r3, #12]
 8008bba:	b14c      	cbz	r4, 8008bd0 <__assert_func+0x24>
 8008bbc:	4b07      	ldr	r3, [pc, #28]	@ (8008bdc <__assert_func+0x30>)
 8008bbe:	9100      	str	r1, [sp, #0]
 8008bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bc4:	4906      	ldr	r1, [pc, #24]	@ (8008be0 <__assert_func+0x34>)
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	f000 f842 	bl	8008c50 <fiprintf>
 8008bcc:	f000 f852 	bl	8008c74 <abort>
 8008bd0:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <__assert_func+0x38>)
 8008bd2:	461c      	mov	r4, r3
 8008bd4:	e7f3      	b.n	8008bbe <__assert_func+0x12>
 8008bd6:	bf00      	nop
 8008bd8:	2400001c 	.word	0x2400001c
 8008bdc:	08009334 	.word	0x08009334
 8008be0:	08009341 	.word	0x08009341
 8008be4:	0800936f 	.word	0x0800936f

08008be8 <_calloc_r>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	fba1 5402 	umull	r5, r4, r1, r2
 8008bee:	b934      	cbnz	r4, 8008bfe <_calloc_r+0x16>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7ff fb0b 	bl	800820c <_malloc_r>
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	b928      	cbnz	r0, 8008c06 <_calloc_r+0x1e>
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	220c      	movs	r2, #12
 8008c00:	6002      	str	r2, [r0, #0]
 8008c02:	2600      	movs	r6, #0
 8008c04:	e7f9      	b.n	8008bfa <_calloc_r+0x12>
 8008c06:	462a      	mov	r2, r5
 8008c08:	4621      	mov	r1, r4
 8008c0a:	f7fe fc24 	bl	8007456 <memset>
 8008c0e:	e7f4      	b.n	8008bfa <_calloc_r+0x12>

08008c10 <__ascii_mbtowc>:
 8008c10:	b082      	sub	sp, #8
 8008c12:	b901      	cbnz	r1, 8008c16 <__ascii_mbtowc+0x6>
 8008c14:	a901      	add	r1, sp, #4
 8008c16:	b142      	cbz	r2, 8008c2a <__ascii_mbtowc+0x1a>
 8008c18:	b14b      	cbz	r3, 8008c2e <__ascii_mbtowc+0x1e>
 8008c1a:	7813      	ldrb	r3, [r2, #0]
 8008c1c:	600b      	str	r3, [r1, #0]
 8008c1e:	7812      	ldrb	r2, [r2, #0]
 8008c20:	1e10      	subs	r0, r2, #0
 8008c22:	bf18      	it	ne
 8008c24:	2001      	movne	r0, #1
 8008c26:	b002      	add	sp, #8
 8008c28:	4770      	bx	lr
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	e7fb      	b.n	8008c26 <__ascii_mbtowc+0x16>
 8008c2e:	f06f 0001 	mvn.w	r0, #1
 8008c32:	e7f8      	b.n	8008c26 <__ascii_mbtowc+0x16>

08008c34 <__ascii_wctomb>:
 8008c34:	4603      	mov	r3, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	b141      	cbz	r1, 8008c4c <__ascii_wctomb+0x18>
 8008c3a:	2aff      	cmp	r2, #255	@ 0xff
 8008c3c:	d904      	bls.n	8008c48 <__ascii_wctomb+0x14>
 8008c3e:	228a      	movs	r2, #138	@ 0x8a
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	4770      	bx	lr
 8008c48:	700a      	strb	r2, [r1, #0]
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	4770      	bx	lr
	...

08008c50 <fiprintf>:
 8008c50:	b40e      	push	{r1, r2, r3}
 8008c52:	b503      	push	{r0, r1, lr}
 8008c54:	4601      	mov	r1, r0
 8008c56:	ab03      	add	r3, sp, #12
 8008c58:	4805      	ldr	r0, [pc, #20]	@ (8008c70 <fiprintf+0x20>)
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f000 f837 	bl	8008cd4 <_vfiprintf_r>
 8008c66:	b002      	add	sp, #8
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	b003      	add	sp, #12
 8008c6e:	4770      	bx	lr
 8008c70:	2400001c 	.word	0x2400001c

08008c74 <abort>:
 8008c74:	b508      	push	{r3, lr}
 8008c76:	2006      	movs	r0, #6
 8008c78:	f000 fa00 	bl	800907c <raise>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f7f7 ff1d 	bl	8000abc <_exit>

08008c82 <__sfputc_r>:
 8008c82:	6893      	ldr	r3, [r2, #8]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	b410      	push	{r4}
 8008c8a:	6093      	str	r3, [r2, #8]
 8008c8c:	da08      	bge.n	8008ca0 <__sfputc_r+0x1e>
 8008c8e:	6994      	ldr	r4, [r2, #24]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	db01      	blt.n	8008c98 <__sfputc_r+0x16>
 8008c94:	290a      	cmp	r1, #10
 8008c96:	d103      	bne.n	8008ca0 <__sfputc_r+0x1e>
 8008c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c9c:	f000 b932 	b.w	8008f04 <__swbuf_r>
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	1c58      	adds	r0, r3, #1
 8008ca4:	6010      	str	r0, [r2, #0]
 8008ca6:	7019      	strb	r1, [r3, #0]
 8008ca8:	4608      	mov	r0, r1
 8008caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <__sfputs_r>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	4614      	mov	r4, r2
 8008cb8:	18d5      	adds	r5, r2, r3
 8008cba:	42ac      	cmp	r4, r5
 8008cbc:	d101      	bne.n	8008cc2 <__sfputs_r+0x12>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	e007      	b.n	8008cd2 <__sfputs_r+0x22>
 8008cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff ffda 	bl	8008c82 <__sfputc_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	d1f3      	bne.n	8008cba <__sfputs_r+0xa>
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cd4 <_vfiprintf_r>:
 8008cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	460d      	mov	r5, r1
 8008cda:	b09d      	sub	sp, #116	@ 0x74
 8008cdc:	4614      	mov	r4, r2
 8008cde:	4698      	mov	r8, r3
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	b118      	cbz	r0, 8008cec <_vfiprintf_r+0x18>
 8008ce4:	6a03      	ldr	r3, [r0, #32]
 8008ce6:	b90b      	cbnz	r3, 8008cec <_vfiprintf_r+0x18>
 8008ce8:	f7fe fb3c 	bl	8007364 <__sinit>
 8008cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cee:	07d9      	lsls	r1, r3, #31
 8008cf0:	d405      	bmi.n	8008cfe <_vfiprintf_r+0x2a>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	059a      	lsls	r2, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_vfiprintf_r+0x2a>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cfa:	f7fe fc2a 	bl	8007552 <__retarget_lock_acquire_recursive>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	071b      	lsls	r3, r3, #28
 8008d02:	d501      	bpl.n	8008d08 <_vfiprintf_r+0x34>
 8008d04:	692b      	ldr	r3, [r5, #16]
 8008d06:	b99b      	cbnz	r3, 8008d30 <_vfiprintf_r+0x5c>
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f000 f938 	bl	8008f80 <__swsetup_r>
 8008d10:	b170      	cbz	r0, 8008d30 <_vfiprintf_r+0x5c>
 8008d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d14:	07dc      	lsls	r4, r3, #31
 8008d16:	d504      	bpl.n	8008d22 <_vfiprintf_r+0x4e>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	b01d      	add	sp, #116	@ 0x74
 8008d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d22:	89ab      	ldrh	r3, [r5, #12]
 8008d24:	0598      	lsls	r0, r3, #22
 8008d26:	d4f7      	bmi.n	8008d18 <_vfiprintf_r+0x44>
 8008d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d2a:	f7fe fc13 	bl	8007554 <__retarget_lock_release_recursive>
 8008d2e:	e7f3      	b.n	8008d18 <_vfiprintf_r+0x44>
 8008d30:	2300      	movs	r3, #0
 8008d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d34:	2320      	movs	r3, #32
 8008d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d3e:	2330      	movs	r3, #48	@ 0x30
 8008d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ef0 <_vfiprintf_r+0x21c>
 8008d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d48:	f04f 0901 	mov.w	r9, #1
 8008d4c:	4623      	mov	r3, r4
 8008d4e:	469a      	mov	sl, r3
 8008d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d54:	b10a      	cbz	r2, 8008d5a <_vfiprintf_r+0x86>
 8008d56:	2a25      	cmp	r2, #37	@ 0x25
 8008d58:	d1f9      	bne.n	8008d4e <_vfiprintf_r+0x7a>
 8008d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5e:	d00b      	beq.n	8008d78 <_vfiprintf_r+0xa4>
 8008d60:	465b      	mov	r3, fp
 8008d62:	4622      	mov	r2, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7ff ffa2 	bl	8008cb0 <__sfputs_r>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	f000 80a7 	beq.w	8008ec0 <_vfiprintf_r+0x1ec>
 8008d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d74:	445a      	add	r2, fp
 8008d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d78:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 809f 	beq.w	8008ec0 <_vfiprintf_r+0x1ec>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f04f 32ff 	mov.w	r2, #4294967295
 8008d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d8c:	f10a 0a01 	add.w	sl, sl, #1
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	9307      	str	r3, [sp, #28]
 8008d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d9a:	4654      	mov	r4, sl
 8008d9c:	2205      	movs	r2, #5
 8008d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da2:	4853      	ldr	r0, [pc, #332]	@ (8008ef0 <_vfiprintf_r+0x21c>)
 8008da4:	f7f7 fa9c 	bl	80002e0 <memchr>
 8008da8:	9a04      	ldr	r2, [sp, #16]
 8008daa:	b9d8      	cbnz	r0, 8008de4 <_vfiprintf_r+0x110>
 8008dac:	06d1      	lsls	r1, r2, #27
 8008dae:	bf44      	itt	mi
 8008db0:	2320      	movmi	r3, #32
 8008db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db6:	0713      	lsls	r3, r2, #28
 8008db8:	bf44      	itt	mi
 8008dba:	232b      	movmi	r3, #43	@ 0x2b
 8008dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dc6:	d015      	beq.n	8008df4 <_vfiprintf_r+0x120>
 8008dc8:	9a07      	ldr	r2, [sp, #28]
 8008dca:	4654      	mov	r4, sl
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f04f 0c0a 	mov.w	ip, #10
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd8:	3b30      	subs	r3, #48	@ 0x30
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d94b      	bls.n	8008e76 <_vfiprintf_r+0x1a2>
 8008dde:	b1b0      	cbz	r0, 8008e0e <_vfiprintf_r+0x13a>
 8008de0:	9207      	str	r2, [sp, #28]
 8008de2:	e014      	b.n	8008e0e <_vfiprintf_r+0x13a>
 8008de4:	eba0 0308 	sub.w	r3, r0, r8
 8008de8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dec:	4313      	orrs	r3, r2
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	46a2      	mov	sl, r4
 8008df2:	e7d2      	b.n	8008d9a <_vfiprintf_r+0xc6>
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	1d19      	adds	r1, r3, #4
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	9103      	str	r1, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfbb      	ittet	lt
 8008e00:	425b      	neglt	r3, r3
 8008e02:	f042 0202 	orrlt.w	r2, r2, #2
 8008e06:	9307      	strge	r3, [sp, #28]
 8008e08:	9307      	strlt	r3, [sp, #28]
 8008e0a:	bfb8      	it	lt
 8008e0c:	9204      	strlt	r2, [sp, #16]
 8008e0e:	7823      	ldrb	r3, [r4, #0]
 8008e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e12:	d10a      	bne.n	8008e2a <_vfiprintf_r+0x156>
 8008e14:	7863      	ldrb	r3, [r4, #1]
 8008e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e18:	d132      	bne.n	8008e80 <_vfiprintf_r+0x1ac>
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	1d1a      	adds	r2, r3, #4
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	9203      	str	r2, [sp, #12]
 8008e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e26:	3402      	adds	r4, #2
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f00 <_vfiprintf_r+0x22c>
 8008e2e:	7821      	ldrb	r1, [r4, #0]
 8008e30:	2203      	movs	r2, #3
 8008e32:	4650      	mov	r0, sl
 8008e34:	f7f7 fa54 	bl	80002e0 <memchr>
 8008e38:	b138      	cbz	r0, 8008e4a <_vfiprintf_r+0x176>
 8008e3a:	9b04      	ldr	r3, [sp, #16]
 8008e3c:	eba0 000a 	sub.w	r0, r0, sl
 8008e40:	2240      	movs	r2, #64	@ 0x40
 8008e42:	4082      	lsls	r2, r0
 8008e44:	4313      	orrs	r3, r2
 8008e46:	3401      	adds	r4, #1
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4e:	4829      	ldr	r0, [pc, #164]	@ (8008ef4 <_vfiprintf_r+0x220>)
 8008e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e54:	2206      	movs	r2, #6
 8008e56:	f7f7 fa43 	bl	80002e0 <memchr>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d03f      	beq.n	8008ede <_vfiprintf_r+0x20a>
 8008e5e:	4b26      	ldr	r3, [pc, #152]	@ (8008ef8 <_vfiprintf_r+0x224>)
 8008e60:	bb1b      	cbnz	r3, 8008eaa <_vfiprintf_r+0x1d6>
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	3307      	adds	r3, #7
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	9303      	str	r3, [sp, #12]
 8008e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e70:	443b      	add	r3, r7
 8008e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e74:	e76a      	b.n	8008d4c <_vfiprintf_r+0x78>
 8008e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	e7a8      	b.n	8008dd2 <_vfiprintf_r+0xfe>
 8008e80:	2300      	movs	r3, #0
 8008e82:	3401      	adds	r4, #1
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	4619      	mov	r1, r3
 8008e88:	f04f 0c0a 	mov.w	ip, #10
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e92:	3a30      	subs	r2, #48	@ 0x30
 8008e94:	2a09      	cmp	r2, #9
 8008e96:	d903      	bls.n	8008ea0 <_vfiprintf_r+0x1cc>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0c6      	beq.n	8008e2a <_vfiprintf_r+0x156>
 8008e9c:	9105      	str	r1, [sp, #20]
 8008e9e:	e7c4      	b.n	8008e2a <_vfiprintf_r+0x156>
 8008ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e7f0      	b.n	8008e8c <_vfiprintf_r+0x1b8>
 8008eaa:	ab03      	add	r3, sp, #12
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4b12      	ldr	r3, [pc, #72]	@ (8008efc <_vfiprintf_r+0x228>)
 8008eb2:	a904      	add	r1, sp, #16
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7fd fe23 	bl	8006b00 <_printf_float>
 8008eba:	4607      	mov	r7, r0
 8008ebc:	1c78      	adds	r0, r7, #1
 8008ebe:	d1d6      	bne.n	8008e6e <_vfiprintf_r+0x19a>
 8008ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ec2:	07d9      	lsls	r1, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_vfiprintf_r+0x1fe>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	059a      	lsls	r2, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_vfiprintf_r+0x1fe>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ece:	f7fe fb41 	bl	8007554 <__retarget_lock_release_recursive>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	065b      	lsls	r3, r3, #25
 8008ed6:	f53f af1f 	bmi.w	8008d18 <_vfiprintf_r+0x44>
 8008eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008edc:	e71e      	b.n	8008d1c <_vfiprintf_r+0x48>
 8008ede:	ab03      	add	r3, sp, #12
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <_vfiprintf_r+0x228>)
 8008ee6:	a904      	add	r1, sp, #16
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7fe f891 	bl	8007010 <_printf_i>
 8008eee:	e7e4      	b.n	8008eba <_vfiprintf_r+0x1e6>
 8008ef0:	08009370 	.word	0x08009370
 8008ef4:	0800937a 	.word	0x0800937a
 8008ef8:	08006b01 	.word	0x08006b01
 8008efc:	08008cb1 	.word	0x08008cb1
 8008f00:	08009376 	.word	0x08009376

08008f04 <__swbuf_r>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	460e      	mov	r6, r1
 8008f08:	4614      	mov	r4, r2
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	b118      	cbz	r0, 8008f16 <__swbuf_r+0x12>
 8008f0e:	6a03      	ldr	r3, [r0, #32]
 8008f10:	b90b      	cbnz	r3, 8008f16 <__swbuf_r+0x12>
 8008f12:	f7fe fa27 	bl	8007364 <__sinit>
 8008f16:	69a3      	ldr	r3, [r4, #24]
 8008f18:	60a3      	str	r3, [r4, #8]
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	071a      	lsls	r2, r3, #28
 8008f1e:	d501      	bpl.n	8008f24 <__swbuf_r+0x20>
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	b943      	cbnz	r3, 8008f36 <__swbuf_r+0x32>
 8008f24:	4621      	mov	r1, r4
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f82a 	bl	8008f80 <__swsetup_r>
 8008f2c:	b118      	cbz	r0, 8008f36 <__swbuf_r+0x32>
 8008f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8008f32:	4638      	mov	r0, r7
 8008f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	6922      	ldr	r2, [r4, #16]
 8008f3a:	1a98      	subs	r0, r3, r2
 8008f3c:	6963      	ldr	r3, [r4, #20]
 8008f3e:	b2f6      	uxtb	r6, r6
 8008f40:	4283      	cmp	r3, r0
 8008f42:	4637      	mov	r7, r6
 8008f44:	dc05      	bgt.n	8008f52 <__swbuf_r+0x4e>
 8008f46:	4621      	mov	r1, r4
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7ff fde9 	bl	8008b20 <_fflush_r>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d1ed      	bne.n	8008f2e <__swbuf_r+0x2a>
 8008f52:	68a3      	ldr	r3, [r4, #8]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	60a3      	str	r3, [r4, #8]
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	701e      	strb	r6, [r3, #0]
 8008f60:	6962      	ldr	r2, [r4, #20]
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d004      	beq.n	8008f72 <__swbuf_r+0x6e>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	07db      	lsls	r3, r3, #31
 8008f6c:	d5e1      	bpl.n	8008f32 <__swbuf_r+0x2e>
 8008f6e:	2e0a      	cmp	r6, #10
 8008f70:	d1df      	bne.n	8008f32 <__swbuf_r+0x2e>
 8008f72:	4621      	mov	r1, r4
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7ff fdd3 	bl	8008b20 <_fflush_r>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0d9      	beq.n	8008f32 <__swbuf_r+0x2e>
 8008f7e:	e7d6      	b.n	8008f2e <__swbuf_r+0x2a>

08008f80 <__swsetup_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4b29      	ldr	r3, [pc, #164]	@ (8009028 <__swsetup_r+0xa8>)
 8008f84:	4605      	mov	r5, r0
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	460c      	mov	r4, r1
 8008f8a:	b118      	cbz	r0, 8008f94 <__swsetup_r+0x14>
 8008f8c:	6a03      	ldr	r3, [r0, #32]
 8008f8e:	b90b      	cbnz	r3, 8008f94 <__swsetup_r+0x14>
 8008f90:	f7fe f9e8 	bl	8007364 <__sinit>
 8008f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f98:	0719      	lsls	r1, r3, #28
 8008f9a:	d422      	bmi.n	8008fe2 <__swsetup_r+0x62>
 8008f9c:	06da      	lsls	r2, r3, #27
 8008f9e:	d407      	bmi.n	8008fb0 <__swsetup_r+0x30>
 8008fa0:	2209      	movs	r2, #9
 8008fa2:	602a      	str	r2, [r5, #0]
 8008fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
 8008fae:	e033      	b.n	8009018 <__swsetup_r+0x98>
 8008fb0:	0758      	lsls	r0, r3, #29
 8008fb2:	d512      	bpl.n	8008fda <__swsetup_r+0x5a>
 8008fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fb6:	b141      	cbz	r1, 8008fca <__swsetup_r+0x4a>
 8008fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	d002      	beq.n	8008fc6 <__swsetup_r+0x46>
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f7ff f8af 	bl	8008124 <_free_r>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6063      	str	r3, [r4, #4]
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f043 0308 	orr.w	r3, r3, #8
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	b94b      	cbnz	r3, 8008ffa <__swsetup_r+0x7a>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff0:	d003      	beq.n	8008ffa <__swsetup_r+0x7a>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 f883 	bl	8009100 <__smakebuf_r>
 8008ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffe:	f013 0201 	ands.w	r2, r3, #1
 8009002:	d00a      	beq.n	800901a <__swsetup_r+0x9a>
 8009004:	2200      	movs	r2, #0
 8009006:	60a2      	str	r2, [r4, #8]
 8009008:	6962      	ldr	r2, [r4, #20]
 800900a:	4252      	negs	r2, r2
 800900c:	61a2      	str	r2, [r4, #24]
 800900e:	6922      	ldr	r2, [r4, #16]
 8009010:	b942      	cbnz	r2, 8009024 <__swsetup_r+0xa4>
 8009012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009016:	d1c5      	bne.n	8008fa4 <__swsetup_r+0x24>
 8009018:	bd38      	pop	{r3, r4, r5, pc}
 800901a:	0799      	lsls	r1, r3, #30
 800901c:	bf58      	it	pl
 800901e:	6962      	ldrpl	r2, [r4, #20]
 8009020:	60a2      	str	r2, [r4, #8]
 8009022:	e7f4      	b.n	800900e <__swsetup_r+0x8e>
 8009024:	2000      	movs	r0, #0
 8009026:	e7f7      	b.n	8009018 <__swsetup_r+0x98>
 8009028:	2400001c 	.word	0x2400001c

0800902c <_raise_r>:
 800902c:	291f      	cmp	r1, #31
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	4605      	mov	r5, r0
 8009032:	460c      	mov	r4, r1
 8009034:	d904      	bls.n	8009040 <_raise_r+0x14>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009042:	b112      	cbz	r2, 800904a <_raise_r+0x1e>
 8009044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009048:	b94b      	cbnz	r3, 800905e <_raise_r+0x32>
 800904a:	4628      	mov	r0, r5
 800904c:	f000 f830 	bl	80090b0 <_getpid_r>
 8009050:	4622      	mov	r2, r4
 8009052:	4601      	mov	r1, r0
 8009054:	4628      	mov	r0, r5
 8009056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800905a:	f000 b817 	b.w	800908c <_kill_r>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00a      	beq.n	8009078 <_raise_r+0x4c>
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	d103      	bne.n	800906e <_raise_r+0x42>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2001      	movs	r0, #1
 800906c:	e7e7      	b.n	800903e <_raise_r+0x12>
 800906e:	2100      	movs	r1, #0
 8009070:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009074:	4620      	mov	r0, r4
 8009076:	4798      	blx	r3
 8009078:	2000      	movs	r0, #0
 800907a:	e7e0      	b.n	800903e <_raise_r+0x12>

0800907c <raise>:
 800907c:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <raise+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f7ff bfd3 	b.w	800902c <_raise_r>
 8009086:	bf00      	nop
 8009088:	2400001c 	.word	0x2400001c

0800908c <_kill_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	@ (80090ac <_kill_r+0x20>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f7 fcff 	bl	8000a9c <_kill>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_kill_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_kill_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	240003e0 	.word	0x240003e0

080090b0 <_getpid_r>:
 80090b0:	f7f7 bcec 	b.w	8000a8c <_getpid>

080090b4 <__swhatbuf_r>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090bc:	2900      	cmp	r1, #0
 80090be:	b096      	sub	sp, #88	@ 0x58
 80090c0:	4615      	mov	r5, r2
 80090c2:	461e      	mov	r6, r3
 80090c4:	da0d      	bge.n	80090e2 <__swhatbuf_r+0x2e>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090cc:	f04f 0100 	mov.w	r1, #0
 80090d0:	bf14      	ite	ne
 80090d2:	2340      	movne	r3, #64	@ 0x40
 80090d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090d8:	2000      	movs	r0, #0
 80090da:	6031      	str	r1, [r6, #0]
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	b016      	add	sp, #88	@ 0x58
 80090e0:	bd70      	pop	{r4, r5, r6, pc}
 80090e2:	466a      	mov	r2, sp
 80090e4:	f000 f848 	bl	8009178 <_fstat_r>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dbec      	blt.n	80090c6 <__swhatbuf_r+0x12>
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090f6:	4259      	negs	r1, r3
 80090f8:	4159      	adcs	r1, r3
 80090fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090fe:	e7eb      	b.n	80090d8 <__swhatbuf_r+0x24>

08009100 <__smakebuf_r>:
 8009100:	898b      	ldrh	r3, [r1, #12]
 8009102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009104:	079d      	lsls	r5, r3, #30
 8009106:	4606      	mov	r6, r0
 8009108:	460c      	mov	r4, r1
 800910a:	d507      	bpl.n	800911c <__smakebuf_r+0x1c>
 800910c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	2301      	movs	r3, #1
 8009116:	6163      	str	r3, [r4, #20]
 8009118:	b003      	add	sp, #12
 800911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911c:	ab01      	add	r3, sp, #4
 800911e:	466a      	mov	r2, sp
 8009120:	f7ff ffc8 	bl	80090b4 <__swhatbuf_r>
 8009124:	9f00      	ldr	r7, [sp, #0]
 8009126:	4605      	mov	r5, r0
 8009128:	4639      	mov	r1, r7
 800912a:	4630      	mov	r0, r6
 800912c:	f7ff f86e 	bl	800820c <_malloc_r>
 8009130:	b948      	cbnz	r0, 8009146 <__smakebuf_r+0x46>
 8009132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009136:	059a      	lsls	r2, r3, #22
 8009138:	d4ee      	bmi.n	8009118 <__smakebuf_r+0x18>
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	e7e2      	b.n	800910c <__smakebuf_r+0xc>
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	6020      	str	r0, [r4, #0]
 800914a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009156:	b15b      	cbz	r3, 8009170 <__smakebuf_r+0x70>
 8009158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915c:	4630      	mov	r0, r6
 800915e:	f000 f81d 	bl	800919c <_isatty_r>
 8009162:	b128      	cbz	r0, 8009170 <__smakebuf_r+0x70>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f023 0303 	bic.w	r3, r3, #3
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	431d      	orrs	r5, r3
 8009174:	81a5      	strh	r5, [r4, #12]
 8009176:	e7cf      	b.n	8009118 <__smakebuf_r+0x18>

08009178 <_fstat_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d07      	ldr	r5, [pc, #28]	@ (8009198 <_fstat_r+0x20>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	f7f7 fce9 	bl	8000b5c <_fstat>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d102      	bne.n	8009194 <_fstat_r+0x1c>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	b103      	cbz	r3, 8009194 <_fstat_r+0x1c>
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	bd38      	pop	{r3, r4, r5, pc}
 8009196:	bf00      	nop
 8009198:	240003e0 	.word	0x240003e0

0800919c <_isatty_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d06      	ldr	r5, [pc, #24]	@ (80091b8 <_isatty_r+0x1c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	602b      	str	r3, [r5, #0]
 80091a8:	f7f7 fce8 	bl	8000b7c <_isatty>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_isatty_r+0x1a>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_isatty_r+0x1a>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	240003e0 	.word	0x240003e0

080091bc <_init>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr

080091c8 <_fini>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr
